
build/zephyr/zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

int __weak sys_clock_device_ctrl(const struct device *dev,
				 enum pm_device_action action)
{
	return -ENOSYS;
}
   0:	28 24 00 20 89 3f 00 00 f3 19 01 00 5d 3f 00 00     ($. .?......]?..
  10:	5d 3f 00 00 5d 3f 00 00 5d 3f 00 00 00 00 00 00     ]?..]?..]?......
	...
  2c:	e5 3c 00 00 5d 3f 00 00 00 00 00 00 9d 3c 00 00     .<..]?.......<..
  3c:	55 41 00 00                                         UA..

00000040 <_irq_vector_table>:
  40:	61 3d 00 00 61 3d 00 00 61 3d 00 00 61 3d 00 00     a=..a=..a=..a=..
  50:	61 3d 00 00 61 3d 00 00 61 3d 00 00 61 3d 00 00     a=..a=..a=..a=..
  60:	61 3d 00 00 61 3d 00 00 61 3d 00 00 61 3d 00 00     a=..a=..a=..a=..
  70:	61 3d 00 00 61 3d 00 00 61 3d 00 00 61 3d 00 00     a=..a=..a=..a=..
  80:	61 3d 00 00 61 3d 00 00 61 3d 00 00 61 3d 00 00     a=..a=..a=..a=..
  90:	61 3d 00 00 61 3d 00 00 61 3d 00 00 61 3d 00 00     a=..a=..a=..a=..
  a0:	61 3d 00 00 61 3d 00 00 61 3d 00 00 61 3d 00 00     a=..a=..a=..a=..
  b0:	61 3d 00 00 61 3d 00 00 61 3d 00 00 61 3d 00 00     a=..a=..a=..a=..
  c0:	61 3d 00 00 61 3d 00 00 61 3d 00 00 61 3d 00 00     a=..a=..a=..a=..
  d0:	61 3d 00 00 61 3d 00 00 61 3d 00 00 61 3d 00 00     a=..a=..a=..a=..
  e0:	61 3d 00 00 61 3d 00 00 61 3d 00 00                 a=..a=..a=..

Disassembly of section text:

000000f0 <__aeabi_drsub>:
      f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      f4:	e002      	b.n	fc <__adddf3>
      f6:	bf00      	nop

000000f8 <__aeabi_dsub>:
      f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000fc <__adddf3>:
      fc:	b530      	push	{r4, r5, lr}
      fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
     102:	ea4f 0543 	mov.w	r5, r3, lsl #1
     106:	ea94 0f05 	teq	r4, r5
     10a:	bf08      	it	eq
     10c:	ea90 0f02 	teqeq	r0, r2
     110:	bf1f      	itttt	ne
     112:	ea54 0c00 	orrsne.w	ip, r4, r0
     116:	ea55 0c02 	orrsne.w	ip, r5, r2
     11a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     11e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     122:	f000 80e2 	beq.w	2ea <__data_size+0xef>
     126:	ea4f 5454 	mov.w	r4, r4, lsr #21
     12a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     12e:	bfb8      	it	lt
     130:	426d      	neglt	r5, r5
     132:	dd0c      	ble.n	14e <_STRUCT_KERNEL_SIZE+0x2e>
     134:	442c      	add	r4, r5
     136:	ea80 0202 	eor.w	r2, r0, r2
     13a:	ea81 0303 	eor.w	r3, r1, r3
     13e:	ea82 0000 	eor.w	r0, r2, r0
     142:	ea83 0101 	eor.w	r1, r3, r1
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	2d36      	cmp	r5, #54	; 0x36
     150:	bf88      	it	hi
     152:	bd30      	pophi	{r4, r5, pc}
     154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     158:	ea4f 3101 	mov.w	r1, r1, lsl #12
     15c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     164:	d002      	beq.n	16c <_STRUCT_KERNEL_SIZE+0x4c>
     166:	4240      	negs	r0, r0
     168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     16c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     170:	ea4f 3303 	mov.w	r3, r3, lsl #12
     174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     178:	d002      	beq.n	180 <_STRUCT_KERNEL_SIZE+0x60>
     17a:	4252      	negs	r2, r2
     17c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     180:	ea94 0f05 	teq	r4, r5
     184:	f000 80a7 	beq.w	2d6 <__data_size+0xdb>
     188:	f1a4 0401 	sub.w	r4, r4, #1
     18c:	f1d5 0e20 	rsbs	lr, r5, #32
     190:	db0d      	blt.n	1ae <_STRUCT_KERNEL_SIZE+0x8e>
     192:	fa02 fc0e 	lsl.w	ip, r2, lr
     196:	fa22 f205 	lsr.w	r2, r2, r5
     19a:	1880      	adds	r0, r0, r2
     19c:	f141 0100 	adc.w	r1, r1, #0
     1a0:	fa03 f20e 	lsl.w	r2, r3, lr
     1a4:	1880      	adds	r0, r0, r2
     1a6:	fa43 f305 	asr.w	r3, r3, r5
     1aa:	4159      	adcs	r1, r3
     1ac:	e00e      	b.n	1cc <_STRUCT_KERNEL_SIZE+0xac>
     1ae:	f1a5 0520 	sub.w	r5, r5, #32
     1b2:	f10e 0e20 	add.w	lr, lr, #32
     1b6:	2a01      	cmp	r2, #1
     1b8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1bc:	bf28      	it	cs
     1be:	f04c 0c02 	orrcs.w	ip, ip, #2
     1c2:	fa43 f305 	asr.w	r3, r3, r5
     1c6:	18c0      	adds	r0, r0, r3
     1c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1d0:	d507      	bpl.n	1e2 <_STRUCT_KERNEL_SIZE+0xc2>
     1d2:	f04f 0e00 	mov.w	lr, #0
     1d6:	f1dc 0c00 	rsbs	ip, ip, #0
     1da:	eb7e 0000 	sbcs.w	r0, lr, r0
     1de:	eb6e 0101 	sbc.w	r1, lr, r1
     1e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1e6:	d31b      	bcc.n	220 <__data_size+0x25>
     1e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1ec:	d30c      	bcc.n	208 <__data_size+0xd>
     1ee:	0849      	lsrs	r1, r1, #1
     1f0:	ea5f 0030 	movs.w	r0, r0, rrx
     1f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1f8:	f104 0401 	add.w	r4, r4, #1
     1fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
     200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     204:	f080 809a 	bcs.w	33c <__data_size+0x141>
     208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     20c:	bf08      	it	eq
     20e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     212:	f150 0000 	adcs.w	r0, r0, #0
     216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     21a:	ea41 0105 	orr.w	r1, r1, r5
     21e:	bd30      	pop	{r4, r5, pc}
     220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     224:	4140      	adcs	r0, r0
     226:	eb41 0101 	adc.w	r1, r1, r1
     22a:	3c01      	subs	r4, #1
     22c:	bf28      	it	cs
     22e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     232:	d2e9      	bcs.n	208 <__data_size+0xd>
     234:	f091 0f00 	teq	r1, #0
     238:	bf04      	itt	eq
     23a:	4601      	moveq	r1, r0
     23c:	2000      	moveq	r0, #0
     23e:	fab1 f381 	clz	r3, r1
     242:	bf08      	it	eq
     244:	3320      	addeq	r3, #32
     246:	f1a3 030b 	sub.w	r3, r3, #11
     24a:	f1b3 0220 	subs.w	r2, r3, #32
     24e:	da0c      	bge.n	26a <__data_size+0x6f>
     250:	320c      	adds	r2, #12
     252:	dd08      	ble.n	266 <__data_size+0x6b>
     254:	f102 0c14 	add.w	ip, r2, #20
     258:	f1c2 020c 	rsb	r2, r2, #12
     25c:	fa01 f00c 	lsl.w	r0, r1, ip
     260:	fa21 f102 	lsr.w	r1, r1, r2
     264:	e00c      	b.n	280 <__data_size+0x85>
     266:	f102 0214 	add.w	r2, r2, #20
     26a:	bfd8      	it	le
     26c:	f1c2 0c20 	rsble	ip, r2, #32
     270:	fa01 f102 	lsl.w	r1, r1, r2
     274:	fa20 fc0c 	lsr.w	ip, r0, ip
     278:	bfdc      	itt	le
     27a:	ea41 010c 	orrle.w	r1, r1, ip
     27e:	4090      	lslle	r0, r2
     280:	1ae4      	subs	r4, r4, r3
     282:	bfa2      	ittt	ge
     284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     288:	4329      	orrge	r1, r5
     28a:	bd30      	popge	{r4, r5, pc}
     28c:	ea6f 0404 	mvn.w	r4, r4
     290:	3c1f      	subs	r4, #31
     292:	da1c      	bge.n	2ce <__data_size+0xd3>
     294:	340c      	adds	r4, #12
     296:	dc0e      	bgt.n	2b6 <__data_size+0xbb>
     298:	f104 0414 	add.w	r4, r4, #20
     29c:	f1c4 0220 	rsb	r2, r4, #32
     2a0:	fa20 f004 	lsr.w	r0, r0, r4
     2a4:	fa01 f302 	lsl.w	r3, r1, r2
     2a8:	ea40 0003 	orr.w	r0, r0, r3
     2ac:	fa21 f304 	lsr.w	r3, r1, r4
     2b0:	ea45 0103 	orr.w	r1, r5, r3
     2b4:	bd30      	pop	{r4, r5, pc}
     2b6:	f1c4 040c 	rsb	r4, r4, #12
     2ba:	f1c4 0220 	rsb	r2, r4, #32
     2be:	fa20 f002 	lsr.w	r0, r0, r2
     2c2:	fa01 f304 	lsl.w	r3, r1, r4
     2c6:	ea40 0003 	orr.w	r0, r0, r3
     2ca:	4629      	mov	r1, r5
     2cc:	bd30      	pop	{r4, r5, pc}
     2ce:	fa21 f004 	lsr.w	r0, r1, r4
     2d2:	4629      	mov	r1, r5
     2d4:	bd30      	pop	{r4, r5, pc}
     2d6:	f094 0f00 	teq	r4, #0
     2da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2de:	bf06      	itte	eq
     2e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2e4:	3401      	addeq	r4, #1
     2e6:	3d01      	subne	r5, #1
     2e8:	e74e      	b.n	188 <_STRUCT_KERNEL_SIZE+0x68>
     2ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2ee:	bf18      	it	ne
     2f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2f4:	d029      	beq.n	34a <__data_size+0x14f>
     2f6:	ea94 0f05 	teq	r4, r5
     2fa:	bf08      	it	eq
     2fc:	ea90 0f02 	teqeq	r0, r2
     300:	d005      	beq.n	30e <__data_size+0x113>
     302:	ea54 0c00 	orrs.w	ip, r4, r0
     306:	bf04      	itt	eq
     308:	4619      	moveq	r1, r3
     30a:	4610      	moveq	r0, r2
     30c:	bd30      	pop	{r4, r5, pc}
     30e:	ea91 0f03 	teq	r1, r3
     312:	bf1e      	ittt	ne
     314:	2100      	movne	r1, #0
     316:	2000      	movne	r0, #0
     318:	bd30      	popne	{r4, r5, pc}
     31a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     31e:	d105      	bne.n	32c <__data_size+0x131>
     320:	0040      	lsls	r0, r0, #1
     322:	4149      	adcs	r1, r1
     324:	bf28      	it	cs
     326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     32a:	bd30      	pop	{r4, r5, pc}
     32c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     330:	bf3c      	itt	cc
     332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     336:	bd30      	popcc	{r4, r5, pc}
     338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     33c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     344:	f04f 0000 	mov.w	r0, #0
     348:	bd30      	pop	{r4, r5, pc}
     34a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     34e:	bf1a      	itte	ne
     350:	4619      	movne	r1, r3
     352:	4610      	movne	r0, r2
     354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     358:	bf1c      	itt	ne
     35a:	460b      	movne	r3, r1
     35c:	4602      	movne	r2, r0
     35e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     362:	bf06      	itte	eq
     364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     368:	ea91 0f03 	teqeq	r1, r3
     36c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     370:	bd30      	pop	{r4, r5, pc}
     372:	bf00      	nop

00000374 <__aeabi_ui2d>:
     374:	f090 0f00 	teq	r0, #0
     378:	bf04      	itt	eq
     37a:	2100      	moveq	r1, #0
     37c:	4770      	bxeq	lr
     37e:	b530      	push	{r4, r5, lr}
     380:	f44f 6480 	mov.w	r4, #1024	; 0x400
     384:	f104 0432 	add.w	r4, r4, #50	; 0x32
     388:	f04f 0500 	mov.w	r5, #0
     38c:	f04f 0100 	mov.w	r1, #0
     390:	e750      	b.n	234 <__data_size+0x39>
     392:	bf00      	nop

00000394 <__aeabi_i2d>:
     394:	f090 0f00 	teq	r0, #0
     398:	bf04      	itt	eq
     39a:	2100      	moveq	r1, #0
     39c:	4770      	bxeq	lr
     39e:	b530      	push	{r4, r5, lr}
     3a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3ac:	bf48      	it	mi
     3ae:	4240      	negmi	r0, r0
     3b0:	f04f 0100 	mov.w	r1, #0
     3b4:	e73e      	b.n	234 <__data_size+0x39>
     3b6:	bf00      	nop

000003b8 <__aeabi_f2d>:
     3b8:	0042      	lsls	r2, r0, #1
     3ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3be:	ea4f 0131 	mov.w	r1, r1, rrx
     3c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3c6:	bf1f      	itttt	ne
     3c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3d4:	4770      	bxne	lr
     3d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3da:	bf08      	it	eq
     3dc:	4770      	bxeq	lr
     3de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3e2:	bf04      	itt	eq
     3e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3e8:	4770      	bxeq	lr
     3ea:	b530      	push	{r4, r5, lr}
     3ec:	f44f 7460 	mov.w	r4, #896	; 0x380
     3f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3f8:	e71c      	b.n	234 <__data_size+0x39>
     3fa:	bf00      	nop

000003fc <__aeabi_ul2d>:
     3fc:	ea50 0201 	orrs.w	r2, r0, r1
     400:	bf08      	it	eq
     402:	4770      	bxeq	lr
     404:	b530      	push	{r4, r5, lr}
     406:	f04f 0500 	mov.w	r5, #0
     40a:	e00a      	b.n	422 <__aeabi_l2d+0x16>

0000040c <__aeabi_l2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     41a:	d502      	bpl.n	422 <__aeabi_l2d+0x16>
     41c:	4240      	negs	r0, r0
     41e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     422:	f44f 6480 	mov.w	r4, #1024	; 0x400
     426:	f104 0432 	add.w	r4, r4, #50	; 0x32
     42a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     42e:	f43f aed8 	beq.w	1e2 <_STRUCT_KERNEL_SIZE+0xc2>
     432:	f04f 0203 	mov.w	r2, #3
     436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     43a:	bf18      	it	ne
     43c:	3203      	addne	r2, #3
     43e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     442:	bf18      	it	ne
     444:	3203      	addne	r2, #3
     446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     44a:	f1c2 0320 	rsb	r3, r2, #32
     44e:	fa00 fc03 	lsl.w	ip, r0, r3
     452:	fa20 f002 	lsr.w	r0, r0, r2
     456:	fa01 fe03 	lsl.w	lr, r1, r3
     45a:	ea40 000e 	orr.w	r0, r0, lr
     45e:	fa21 f102 	lsr.w	r1, r1, r2
     462:	4414      	add	r4, r2
     464:	e6bd      	b.n	1e2 <_STRUCT_KERNEL_SIZE+0xc2>
     466:	bf00      	nop

00000468 <__aeabi_dmul>:
     468:	b570      	push	{r4, r5, r6, lr}
     46a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     46e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     476:	bf1d      	ittte	ne
     478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     47c:	ea94 0f0c 	teqne	r4, ip
     480:	ea95 0f0c 	teqne	r5, ip
     484:	f000 f8de 	bleq	644 <__aeabi_dmul+0x1dc>
     488:	442c      	add	r4, r5
     48a:	ea81 0603 	eor.w	r6, r1, r3
     48e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     49a:	bf18      	it	ne
     49c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4a8:	d038      	beq.n	51c <__aeabi_dmul+0xb4>
     4aa:	fba0 ce02 	umull	ip, lr, r0, r2
     4ae:	f04f 0500 	mov.w	r5, #0
     4b2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ba:	fbe0 e503 	umlal	lr, r5, r0, r3
     4be:	f04f 0600 	mov.w	r6, #0
     4c2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4c6:	f09c 0f00 	teq	ip, #0
     4ca:	bf18      	it	ne
     4cc:	f04e 0e01 	orrne.w	lr, lr, #1
     4d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4dc:	d204      	bcs.n	4e8 <__aeabi_dmul+0x80>
     4de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4e2:	416d      	adcs	r5, r5
     4e4:	eb46 0606 	adc.w	r6, r6, r6
     4e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     500:	bf88      	it	hi
     502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     506:	d81e      	bhi.n	546 <__aeabi_dmul+0xde>
     508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     50c:	bf08      	it	eq
     50e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     512:	f150 0000 	adcs.w	r0, r0, #0
     516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     51a:	bd70      	pop	{r4, r5, r6, pc}
     51c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     520:	ea46 0101 	orr.w	r1, r6, r1
     524:	ea40 0002 	orr.w	r0, r0, r2
     528:	ea81 0103 	eor.w	r1, r1, r3
     52c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     530:	bfc2      	ittt	gt
     532:	ebd4 050c 	rsbsgt	r5, r4, ip
     536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     53a:	bd70      	popgt	{r4, r5, r6, pc}
     53c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     540:	f04f 0e00 	mov.w	lr, #0
     544:	3c01      	subs	r4, #1
     546:	f300 80ab 	bgt.w	6a0 <__aeabi_dmul+0x238>
     54a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     54e:	bfde      	ittt	le
     550:	2000      	movle	r0, #0
     552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     556:	bd70      	pople	{r4, r5, r6, pc}
     558:	f1c4 0400 	rsb	r4, r4, #0
     55c:	3c20      	subs	r4, #32
     55e:	da35      	bge.n	5cc <__aeabi_dmul+0x164>
     560:	340c      	adds	r4, #12
     562:	dc1b      	bgt.n	59c <__aeabi_dmul+0x134>
     564:	f104 0414 	add.w	r4, r4, #20
     568:	f1c4 0520 	rsb	r5, r4, #32
     56c:	fa00 f305 	lsl.w	r3, r0, r5
     570:	fa20 f004 	lsr.w	r0, r0, r4
     574:	fa01 f205 	lsl.w	r2, r1, r5
     578:	ea40 0002 	orr.w	r0, r0, r2
     57c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     588:	fa21 f604 	lsr.w	r6, r1, r4
     58c:	eb42 0106 	adc.w	r1, r2, r6
     590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     594:	bf08      	it	eq
     596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     59a:	bd70      	pop	{r4, r5, r6, pc}
     59c:	f1c4 040c 	rsb	r4, r4, #12
     5a0:	f1c4 0520 	rsb	r5, r4, #32
     5a4:	fa00 f304 	lsl.w	r3, r0, r4
     5a8:	fa20 f005 	lsr.w	r0, r0, r5
     5ac:	fa01 f204 	lsl.w	r2, r1, r4
     5b0:	ea40 0002 	orr.w	r0, r0, r2
     5b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5bc:	f141 0100 	adc.w	r1, r1, #0
     5c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5c4:	bf08      	it	eq
     5c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f1c4 0520 	rsb	r5, r4, #32
     5d0:	fa00 f205 	lsl.w	r2, r0, r5
     5d4:	ea4e 0e02 	orr.w	lr, lr, r2
     5d8:	fa20 f304 	lsr.w	r3, r0, r4
     5dc:	fa01 f205 	lsl.w	r2, r1, r5
     5e0:	ea43 0302 	orr.w	r3, r3, r2
     5e4:	fa21 f004 	lsr.w	r0, r1, r4
     5e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5ec:	fa21 f204 	lsr.w	r2, r1, r4
     5f0:	ea20 0002 	bic.w	r0, r0, r2
     5f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5fc:	bf08      	it	eq
     5fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     602:	bd70      	pop	{r4, r5, r6, pc}
     604:	f094 0f00 	teq	r4, #0
     608:	d10f      	bne.n	62a <__aeabi_dmul+0x1c2>
     60a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     60e:	0040      	lsls	r0, r0, #1
     610:	eb41 0101 	adc.w	r1, r1, r1
     614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     618:	bf08      	it	eq
     61a:	3c01      	subeq	r4, #1
     61c:	d0f7      	beq.n	60e <__aeabi_dmul+0x1a6>
     61e:	ea41 0106 	orr.w	r1, r1, r6
     622:	f095 0f00 	teq	r5, #0
     626:	bf18      	it	ne
     628:	4770      	bxne	lr
     62a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     62e:	0052      	lsls	r2, r2, #1
     630:	eb43 0303 	adc.w	r3, r3, r3
     634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     638:	bf08      	it	eq
     63a:	3d01      	subeq	r5, #1
     63c:	d0f7      	beq.n	62e <__aeabi_dmul+0x1c6>
     63e:	ea43 0306 	orr.w	r3, r3, r6
     642:	4770      	bx	lr
     644:	ea94 0f0c 	teq	r4, ip
     648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     64c:	bf18      	it	ne
     64e:	ea95 0f0c 	teqne	r5, ip
     652:	d00c      	beq.n	66e <__aeabi_dmul+0x206>
     654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     658:	bf18      	it	ne
     65a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     65e:	d1d1      	bne.n	604 <__aeabi_dmul+0x19c>
     660:	ea81 0103 	eor.w	r1, r1, r3
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	f04f 0000 	mov.w	r0, #0
     66c:	bd70      	pop	{r4, r5, r6, pc}
     66e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     672:	bf06      	itte	eq
     674:	4610      	moveq	r0, r2
     676:	4619      	moveq	r1, r3
     678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     67c:	d019      	beq.n	6b2 <__aeabi_dmul+0x24a>
     67e:	ea94 0f0c 	teq	r4, ip
     682:	d102      	bne.n	68a <__aeabi_dmul+0x222>
     684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     688:	d113      	bne.n	6b2 <__aeabi_dmul+0x24a>
     68a:	ea95 0f0c 	teq	r5, ip
     68e:	d105      	bne.n	69c <__aeabi_dmul+0x234>
     690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     694:	bf1c      	itt	ne
     696:	4610      	movne	r0, r2
     698:	4619      	movne	r1, r3
     69a:	d10a      	bne.n	6b2 <__aeabi_dmul+0x24a>
     69c:	ea81 0103 	eor.w	r1, r1, r3
     6a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6ac:	f04f 0000 	mov.w	r0, #0
     6b0:	bd70      	pop	{r4, r5, r6, pc}
     6b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ba:	bd70      	pop	{r4, r5, r6, pc}

000006bc <__aeabi_ddiv>:
     6bc:	b570      	push	{r4, r5, r6, lr}
     6be:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6ca:	bf1d      	ittte	ne
     6cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6d0:	ea94 0f0c 	teqne	r4, ip
     6d4:	ea95 0f0c 	teqne	r5, ip
     6d8:	f000 f8a7 	bleq	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     6dc:	eba4 0405 	sub.w	r4, r4, r5
     6e0:	ea81 0e03 	eor.w	lr, r1, r3
     6e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6ec:	f000 8088 	beq.w	800 <CONFIG_ISR_STACK_SIZE>
     6f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     700:	ea4f 2202 	mov.w	r2, r2, lsl #8
     704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     70c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     714:	429d      	cmp	r5, r3
     716:	bf08      	it	eq
     718:	4296      	cmpeq	r6, r2
     71a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     71e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     722:	d202      	bcs.n	72a <__aeabi_ddiv+0x6e>
     724:	085b      	lsrs	r3, r3, #1
     726:	ea4f 0232 	mov.w	r2, r2, rrx
     72a:	1ab6      	subs	r6, r6, r2
     72c:	eb65 0503 	sbc.w	r5, r5, r3
     730:	085b      	lsrs	r3, r3, #1
     732:	ea4f 0232 	mov.w	r2, r2, rrx
     736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     73a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     73e:	ebb6 0e02 	subs.w	lr, r6, r2
     742:	eb75 0e03 	sbcs.w	lr, r5, r3
     746:	bf22      	ittt	cs
     748:	1ab6      	subcs	r6, r6, r2
     74a:	4675      	movcs	r5, lr
     74c:	ea40 000c 	orrcs.w	r0, r0, ip
     750:	085b      	lsrs	r3, r3, #1
     752:	ea4f 0232 	mov.w	r2, r2, rrx
     756:	ebb6 0e02 	subs.w	lr, r6, r2
     75a:	eb75 0e03 	sbcs.w	lr, r5, r3
     75e:	bf22      	ittt	cs
     760:	1ab6      	subcs	r6, r6, r2
     762:	4675      	movcs	r5, lr
     764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     768:	085b      	lsrs	r3, r3, #1
     76a:	ea4f 0232 	mov.w	r2, r2, rrx
     76e:	ebb6 0e02 	subs.w	lr, r6, r2
     772:	eb75 0e03 	sbcs.w	lr, r5, r3
     776:	bf22      	ittt	cs
     778:	1ab6      	subcs	r6, r6, r2
     77a:	4675      	movcs	r5, lr
     77c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     780:	085b      	lsrs	r3, r3, #1
     782:	ea4f 0232 	mov.w	r2, r2, rrx
     786:	ebb6 0e02 	subs.w	lr, r6, r2
     78a:	eb75 0e03 	sbcs.w	lr, r5, r3
     78e:	bf22      	ittt	cs
     790:	1ab6      	subcs	r6, r6, r2
     792:	4675      	movcs	r5, lr
     794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     798:	ea55 0e06 	orrs.w	lr, r5, r6
     79c:	d018      	beq.n	7d0 <__aeabi_ddiv+0x114>
     79e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ba:	d1c0      	bne.n	73e <__aeabi_ddiv+0x82>
     7bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c0:	d10b      	bne.n	7da <__aeabi_ddiv+0x11e>
     7c2:	ea41 0100 	orr.w	r1, r1, r0
     7c6:	f04f 0000 	mov.w	r0, #0
     7ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7ce:	e7b6      	b.n	73e <__aeabi_ddiv+0x82>
     7d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d4:	bf04      	itt	eq
     7d6:	4301      	orreq	r1, r0
     7d8:	2000      	moveq	r0, #0
     7da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7de:	bf88      	it	hi
     7e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7e4:	f63f aeaf 	bhi.w	546 <__aeabi_dmul+0xde>
     7e8:	ebb5 0c03 	subs.w	ip, r5, r3
     7ec:	bf04      	itt	eq
     7ee:	ebb6 0c02 	subseq.w	ip, r6, r2
     7f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7f6:	f150 0000 	adcs.w	r0, r0, #0
     7fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7fe:	bd70      	pop	{r4, r5, r6, pc}
     800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     80c:	bfc2      	ittt	gt
     80e:	ebd4 050c 	rsbsgt	r5, r4, ip
     812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     816:	bd70      	popgt	{r4, r5, r6, pc}
     818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     81c:	f04f 0e00 	mov.w	lr, #0
     820:	3c01      	subs	r4, #1
     822:	e690      	b.n	546 <__aeabi_dmul+0xde>
     824:	ea45 0e06 	orr.w	lr, r5, r6
     828:	e68d      	b.n	546 <__aeabi_dmul+0xde>
     82a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     82e:	ea94 0f0c 	teq	r4, ip
     832:	bf08      	it	eq
     834:	ea95 0f0c 	teqeq	r5, ip
     838:	f43f af3b 	beq.w	6b2 <__aeabi_dmul+0x24a>
     83c:	ea94 0f0c 	teq	r4, ip
     840:	d10a      	bne.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     846:	f47f af34 	bne.w	6b2 <__aeabi_dmul+0x24a>
     84a:	ea95 0f0c 	teq	r5, ip
     84e:	f47f af25 	bne.w	69c <__aeabi_dmul+0x234>
     852:	4610      	mov	r0, r2
     854:	4619      	mov	r1, r3
     856:	e72c      	b.n	6b2 <__aeabi_dmul+0x24a>
     858:	ea95 0f0c 	teq	r5, ip
     85c:	d106      	bne.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
     85e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     862:	f43f aefd 	beq.w	660 <__aeabi_dmul+0x1f8>
     866:	4610      	mov	r0, r2
     868:	4619      	mov	r1, r3
     86a:	e722      	b.n	6b2 <__aeabi_dmul+0x24a>
     86c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     870:	bf18      	it	ne
     872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     876:	f47f aec5 	bne.w	604 <__aeabi_dmul+0x19c>
     87a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     87e:	f47f af0d 	bne.w	69c <__aeabi_dmul+0x234>
     882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     886:	f47f aeeb 	bne.w	660 <__aeabi_dmul+0x1f8>
     88a:	e712      	b.n	6b2 <__aeabi_dmul+0x24a>

0000088c <__gedf2>:
     88c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     890:	e006      	b.n	8a0 <__cmpdf2+0x4>
     892:	bf00      	nop

00000894 <__ledf2>:
     894:	f04f 0c01 	mov.w	ip, #1
     898:	e002      	b.n	8a0 <__cmpdf2+0x4>
     89a:	bf00      	nop

0000089c <__cmpdf2>:
     89c:	f04f 0c01 	mov.w	ip, #1
     8a0:	f84d cd04 	str.w	ip, [sp, #-4]!
     8a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8b0:	bf18      	it	ne
     8b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8b6:	d01b      	beq.n	8f0 <__cmpdf2+0x54>
     8b8:	b001      	add	sp, #4
     8ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8be:	bf0c      	ite	eq
     8c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8c4:	ea91 0f03 	teqne	r1, r3
     8c8:	bf02      	ittt	eq
     8ca:	ea90 0f02 	teqeq	r0, r2
     8ce:	2000      	moveq	r0, #0
     8d0:	4770      	bxeq	lr
     8d2:	f110 0f00 	cmn.w	r0, #0
     8d6:	ea91 0f03 	teq	r1, r3
     8da:	bf58      	it	pl
     8dc:	4299      	cmppl	r1, r3
     8de:	bf08      	it	eq
     8e0:	4290      	cmpeq	r0, r2
     8e2:	bf2c      	ite	cs
     8e4:	17d8      	asrcs	r0, r3, #31
     8e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8ea:	f040 0001 	orr.w	r0, r0, #1
     8ee:	4770      	bx	lr
     8f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8f8:	d102      	bne.n	900 <__cmpdf2+0x64>
     8fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     8fe:	d107      	bne.n	910 <__cmpdf2+0x74>
     900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     908:	d1d6      	bne.n	8b8 <__cmpdf2+0x1c>
     90a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     90e:	d0d3      	beq.n	8b8 <__cmpdf2+0x1c>
     910:	f85d 0b04 	ldr.w	r0, [sp], #4
     914:	4770      	bx	lr
     916:	bf00      	nop

00000918 <__aeabi_cdrcmple>:
     918:	4684      	mov	ip, r0
     91a:	4610      	mov	r0, r2
     91c:	4662      	mov	r2, ip
     91e:	468c      	mov	ip, r1
     920:	4619      	mov	r1, r3
     922:	4663      	mov	r3, ip
     924:	e000      	b.n	928 <__aeabi_cdcmpeq>
     926:	bf00      	nop

00000928 <__aeabi_cdcmpeq>:
     928:	b501      	push	{r0, lr}
     92a:	f7ff ffb7 	bl	89c <__cmpdf2>
     92e:	2800      	cmp	r0, #0
     930:	bf48      	it	mi
     932:	f110 0f00 	cmnmi.w	r0, #0
     936:	bd01      	pop	{r0, pc}

00000938 <__aeabi_dcmpeq>:
     938:	f84d ed08 	str.w	lr, [sp, #-8]!
     93c:	f7ff fff4 	bl	928 <__aeabi_cdcmpeq>
     940:	bf0c      	ite	eq
     942:	2001      	moveq	r0, #1
     944:	2000      	movne	r0, #0
     946:	f85d fb08 	ldr.w	pc, [sp], #8
     94a:	bf00      	nop

0000094c <__aeabi_dcmplt>:
     94c:	f84d ed08 	str.w	lr, [sp, #-8]!
     950:	f7ff ffea 	bl	928 <__aeabi_cdcmpeq>
     954:	bf34      	ite	cc
     956:	2001      	movcc	r0, #1
     958:	2000      	movcs	r0, #0
     95a:	f85d fb08 	ldr.w	pc, [sp], #8
     95e:	bf00      	nop

00000960 <__aeabi_dcmple>:
     960:	f84d ed08 	str.w	lr, [sp, #-8]!
     964:	f7ff ffe0 	bl	928 <__aeabi_cdcmpeq>
     968:	bf94      	ite	ls
     96a:	2001      	movls	r0, #1
     96c:	2000      	movhi	r0, #0
     96e:	f85d fb08 	ldr.w	pc, [sp], #8
     972:	bf00      	nop

00000974 <__aeabi_dcmpge>:
     974:	f84d ed08 	str.w	lr, [sp, #-8]!
     978:	f7ff ffce 	bl	918 <__aeabi_cdrcmple>
     97c:	bf94      	ite	ls
     97e:	2001      	movls	r0, #1
     980:	2000      	movhi	r0, #0
     982:	f85d fb08 	ldr.w	pc, [sp], #8
     986:	bf00      	nop

00000988 <__aeabi_dcmpgt>:
     988:	f84d ed08 	str.w	lr, [sp, #-8]!
     98c:	f7ff ffc4 	bl	918 <__aeabi_cdrcmple>
     990:	bf34      	ite	cc
     992:	2001      	movcc	r0, #1
     994:	2000      	movcs	r0, #0
     996:	f85d fb08 	ldr.w	pc, [sp], #8
     99a:	bf00      	nop

0000099c <__aeabi_ldivmod>:
     99c:	b97b      	cbnz	r3, 9be <__aeabi_ldivmod+0x22>
     99e:	b972      	cbnz	r2, 9be <__aeabi_ldivmod+0x22>
     9a0:	2900      	cmp	r1, #0
     9a2:	bfbe      	ittt	lt
     9a4:	2000      	movlt	r0, #0
     9a6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     9aa:	e006      	blt.n	9ba <__aeabi_ldivmod+0x1e>
     9ac:	bf08      	it	eq
     9ae:	2800      	cmpeq	r0, #0
     9b0:	bf1c      	itt	ne
     9b2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     9b6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     9ba:	f000 b875 	b.w	aa8 <__aeabi_idiv0>
     9be:	f1ad 0c08 	sub.w	ip, sp, #8
     9c2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     9c6:	2900      	cmp	r1, #0
     9c8:	db09      	blt.n	9de <__aeabi_ldivmod+0x42>
     9ca:	2b00      	cmp	r3, #0
     9cc:	db1a      	blt.n	a04 <__aeabi_ldivmod+0x68>
     9ce:	f000 f8f2 	bl	bb6 <__udivmoddi4>
     9d2:	f8dd e004 	ldr.w	lr, [sp, #4]
     9d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     9da:	b004      	add	sp, #16
     9dc:	4770      	bx	lr
     9de:	4240      	negs	r0, r0
     9e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     9e4:	2b00      	cmp	r3, #0
     9e6:	db1b      	blt.n	a20 <__aeabi_ldivmod+0x84>
     9e8:	f000 f8e5 	bl	bb6 <__udivmoddi4>
     9ec:	f8dd e004 	ldr.w	lr, [sp, #4]
     9f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     9f4:	b004      	add	sp, #16
     9f6:	4240      	negs	r0, r0
     9f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     9fc:	4252      	negs	r2, r2
     9fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a02:	4770      	bx	lr
     a04:	4252      	negs	r2, r2
     a06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a0a:	f000 f8d4 	bl	bb6 <__udivmoddi4>
     a0e:	f8dd e004 	ldr.w	lr, [sp, #4]
     a12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a16:	b004      	add	sp, #16
     a18:	4240      	negs	r0, r0
     a1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     a1e:	4770      	bx	lr
     a20:	4252      	negs	r2, r2
     a22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a26:	f000 f8c6 	bl	bb6 <__udivmoddi4>
     a2a:	f8dd e004 	ldr.w	lr, [sp, #4]
     a2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a32:	b004      	add	sp, #16
     a34:	4252      	negs	r2, r2
     a36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a3a:	4770      	bx	lr

00000a3c <__aeabi_uldivmod>:
     a3c:	b953      	cbnz	r3, a54 <__aeabi_uldivmod+0x18>
     a3e:	b94a      	cbnz	r2, a54 <__aeabi_uldivmod+0x18>
     a40:	2900      	cmp	r1, #0
     a42:	bf08      	it	eq
     a44:	2800      	cmpeq	r0, #0
     a46:	bf1c      	itt	ne
     a48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     a4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     a50:	f000 b82a 	b.w	aa8 <__aeabi_idiv0>
     a54:	f1ad 0c08 	sub.w	ip, sp, #8
     a58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     a5c:	f000 f8ab 	bl	bb6 <__udivmoddi4>
     a60:	f8dd e004 	ldr.w	lr, [sp, #4]
     a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a68:	b004      	add	sp, #16
     a6a:	4770      	bx	lr

00000a6c <__aeabi_d2ulz>:
     a6c:	b5d0      	push	{r4, r6, r7, lr}
     a6e:	2200      	movs	r2, #0
     a70:	4b0b      	ldr	r3, [pc, #44]	; (aa0 <__aeabi_d2ulz+0x34>)
     a72:	4606      	mov	r6, r0
     a74:	460f      	mov	r7, r1
     a76:	f7ff fcf7 	bl	468 <__aeabi_dmul>
     a7a:	f000 f817 	bl	aac <__aeabi_d2uiz>
     a7e:	4604      	mov	r4, r0
     a80:	f7ff fc78 	bl	374 <__aeabi_ui2d>
     a84:	2200      	movs	r2, #0
     a86:	4b07      	ldr	r3, [pc, #28]	; (aa4 <__aeabi_d2ulz+0x38>)
     a88:	f7ff fcee 	bl	468 <__aeabi_dmul>
     a8c:	4602      	mov	r2, r0
     a8e:	460b      	mov	r3, r1
     a90:	4630      	mov	r0, r6
     a92:	4639      	mov	r1, r7
     a94:	f7ff fb30 	bl	f8 <__aeabi_dsub>
     a98:	f000 f808 	bl	aac <__aeabi_d2uiz>
     a9c:	4621      	mov	r1, r4
     a9e:	bdd0      	pop	{r4, r6, r7, pc}
     aa0:	3df00000 	.word	0x3df00000
     aa4:	41f00000 	.word	0x41f00000

00000aa8 <__aeabi_idiv0>:
     aa8:	4770      	bx	lr
     aaa:	bf00      	nop

00000aac <__aeabi_d2uiz>:
     aac:	004a      	lsls	r2, r1, #1
     aae:	d211      	bcs.n	ad4 <__aeabi_d2uiz+0x28>
     ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     ab4:	d211      	bcs.n	ada <__aeabi_d2uiz+0x2e>
     ab6:	d50d      	bpl.n	ad4 <__aeabi_d2uiz+0x28>
     ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     ac0:	d40e      	bmi.n	ae0 <__aeabi_d2uiz+0x34>
     ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     ace:	fa23 f002 	lsr.w	r0, r3, r2
     ad2:	4770      	bx	lr
     ad4:	f04f 0000 	mov.w	r0, #0
     ad8:	4770      	bx	lr
     ada:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     ade:	d102      	bne.n	ae6 <__aeabi_d2uiz+0x3a>
     ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     ae4:	4770      	bx	lr
     ae6:	f04f 0000 	mov.w	r0, #0
     aea:	4770      	bx	lr

00000aec <setjmp>:
     aec:	46ec      	mov	ip, sp
     aee:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     af2:	f04f 0000 	mov.w	r0, #0
     af6:	4770      	bx	lr

00000af8 <longjmp>:
     af8:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     afc:	46e5      	mov	sp, ip
     afe:	0008      	movs	r0, r1
     b00:	bf08      	it	eq
     b02:	2001      	moveq	r0, #1
     b04:	4770      	bx	lr
     b06:	bf00      	nop

00000b08 <__aeabi_dcmpun>:
     b08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     b10:	d102      	bne.n	b18 <__aeabi_dcmpun+0x10>
     b12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     b16:	d10a      	bne.n	b2e <__aeabi_dcmpun+0x26>
     b18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     b1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     b20:	d102      	bne.n	b28 <__aeabi_dcmpun+0x20>
     b22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     b26:	d102      	bne.n	b2e <__aeabi_dcmpun+0x26>
     b28:	f04f 0000 	mov.w	r0, #0
     b2c:	4770      	bx	lr
     b2e:	f04f 0001 	mov.w	r0, #1
     b32:	4770      	bx	lr

00000b34 <__aeabi_d2iz>:
     b34:	ea4f 0241 	mov.w	r2, r1, lsl #1
     b38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     b3c:	d215      	bcs.n	b6a <__aeabi_d2iz+0x36>
     b3e:	d511      	bpl.n	b64 <__aeabi_d2iz+0x30>
     b40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     b48:	d912      	bls.n	b70 <__aeabi_d2iz+0x3c>
     b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b5a:	fa23 f002 	lsr.w	r0, r3, r2
     b5e:	bf18      	it	ne
     b60:	4240      	negne	r0, r0
     b62:	4770      	bx	lr
     b64:	f04f 0000 	mov.w	r0, #0
     b68:	4770      	bx	lr
     b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     b6e:	d105      	bne.n	b7c <__aeabi_d2iz+0x48>
     b70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     b74:	bf08      	it	eq
     b76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     b7a:	4770      	bx	lr
     b7c:	f04f 0000 	mov.w	r0, #0
     b80:	4770      	bx	lr
     b82:	bf00      	nop

00000b84 <__aeabi_d2lz>:
     b84:	b538      	push	{r3, r4, r5, lr}
     b86:	4605      	mov	r5, r0
     b88:	460c      	mov	r4, r1
     b8a:	2200      	movs	r2, #0
     b8c:	2300      	movs	r3, #0
     b8e:	4628      	mov	r0, r5
     b90:	4621      	mov	r1, r4
     b92:	f7ff fedb 	bl	94c <__aeabi_dcmplt>
     b96:	b928      	cbnz	r0, ba4 <__aeabi_d2lz+0x20>
     b98:	4628      	mov	r0, r5
     b9a:	4621      	mov	r1, r4
     b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     ba0:	f7ff bf64 	b.w	a6c <__aeabi_d2ulz>
     ba4:	4628      	mov	r0, r5
     ba6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
     baa:	f7ff ff5f 	bl	a6c <__aeabi_d2ulz>
     bae:	4240      	negs	r0, r0
     bb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     bb4:	bd38      	pop	{r3, r4, r5, pc}

00000bb6 <__udivmoddi4>:
     bb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bba:	4607      	mov	r7, r0
     bbc:	468c      	mov	ip, r1
     bbe:	4608      	mov	r0, r1
     bc0:	4615      	mov	r5, r2
     bc2:	463c      	mov	r4, r7
     bc4:	4619      	mov	r1, r3
     bc6:	9e09      	ldr	r6, [sp, #36]	; 0x24
     bc8:	2b00      	cmp	r3, #0
     bca:	f040 80c6 	bne.w	d5a <__udivmoddi4+0x1a4>
     bce:	4282      	cmp	r2, r0
     bd0:	fab2 f782 	clz	r7, r2
     bd4:	d946      	bls.n	c64 <__udivmoddi4+0xae>
     bd6:	b14f      	cbz	r7, bec <__udivmoddi4+0x36>
     bd8:	f1c7 0e20 	rsb	lr, r7, #32
     bdc:	fa24 fe0e 	lsr.w	lr, r4, lr
     be0:	fa00 f307 	lsl.w	r3, r0, r7
     be4:	40bd      	lsls	r5, r7
     be6:	ea4e 0c03 	orr.w	ip, lr, r3
     bea:	40bc      	lsls	r4, r7
     bec:	ea4f 4815 	mov.w	r8, r5, lsr #16
     bf0:	fbbc f9f8 	udiv	r9, ip, r8
     bf4:	fa1f fe85 	uxth.w	lr, r5
     bf8:	fb08 c319 	mls	r3, r8, r9, ip
     bfc:	fb09 fa0e 	mul.w	sl, r9, lr
     c00:	0c22      	lsrs	r2, r4, #16
     c02:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     c06:	459a      	cmp	sl, r3
     c08:	d928      	bls.n	c5c <__udivmoddi4+0xa6>
     c0a:	18eb      	adds	r3, r5, r3
     c0c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     c10:	d204      	bcs.n	c1c <__udivmoddi4+0x66>
     c12:	459a      	cmp	sl, r3
     c14:	d902      	bls.n	c1c <__udivmoddi4+0x66>
     c16:	f1a9 0002 	sub.w	r0, r9, #2
     c1a:	442b      	add	r3, r5
     c1c:	eba3 030a 	sub.w	r3, r3, sl
     c20:	fbb3 f2f8 	udiv	r2, r3, r8
     c24:	fb08 3312 	mls	r3, r8, r2, r3
     c28:	fb02 fe0e 	mul.w	lr, r2, lr
     c2c:	b2a4      	uxth	r4, r4
     c2e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     c32:	45a6      	cmp	lr, r4
     c34:	d914      	bls.n	c60 <__udivmoddi4+0xaa>
     c36:	192c      	adds	r4, r5, r4
     c38:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     c3c:	d203      	bcs.n	c46 <__udivmoddi4+0x90>
     c3e:	45a6      	cmp	lr, r4
     c40:	d901      	bls.n	c46 <__udivmoddi4+0x90>
     c42:	1e93      	subs	r3, r2, #2
     c44:	442c      	add	r4, r5
     c46:	eba4 040e 	sub.w	r4, r4, lr
     c4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     c4e:	b11e      	cbz	r6, c58 <__udivmoddi4+0xa2>
     c50:	2300      	movs	r3, #0
     c52:	40fc      	lsrs	r4, r7
     c54:	6034      	str	r4, [r6, #0]
     c56:	6073      	str	r3, [r6, #4]
     c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c5c:	4648      	mov	r0, r9
     c5e:	e7dd      	b.n	c1c <__udivmoddi4+0x66>
     c60:	4613      	mov	r3, r2
     c62:	e7f0      	b.n	c46 <__udivmoddi4+0x90>
     c64:	b902      	cbnz	r2, c68 <__udivmoddi4+0xb2>
     c66:	deff      	udf	#255	; 0xff
     c68:	bb87      	cbnz	r7, ccc <__udivmoddi4+0x116>
     c6a:	2101      	movs	r1, #1
     c6c:	1a83      	subs	r3, r0, r2
     c6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     c72:	fbb3 fcfe 	udiv	ip, r3, lr
     c76:	b2aa      	uxth	r2, r5
     c78:	fb0e 331c 	mls	r3, lr, ip, r3
     c7c:	fb0c f802 	mul.w	r8, ip, r2
     c80:	0c20      	lsrs	r0, r4, #16
     c82:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     c86:	4598      	cmp	r8, r3
     c88:	d963      	bls.n	d52 <__udivmoddi4+0x19c>
     c8a:	18eb      	adds	r3, r5, r3
     c8c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     c90:	d204      	bcs.n	c9c <__udivmoddi4+0xe6>
     c92:	4598      	cmp	r8, r3
     c94:	d902      	bls.n	c9c <__udivmoddi4+0xe6>
     c96:	f1ac 0002 	sub.w	r0, ip, #2
     c9a:	442b      	add	r3, r5
     c9c:	eba3 0308 	sub.w	r3, r3, r8
     ca0:	fbb3 fcfe 	udiv	ip, r3, lr
     ca4:	fb0e 331c 	mls	r3, lr, ip, r3
     ca8:	fb0c f202 	mul.w	r2, ip, r2
     cac:	b2a4      	uxth	r4, r4
     cae:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     cb2:	42a2      	cmp	r2, r4
     cb4:	d94f      	bls.n	d56 <__udivmoddi4+0x1a0>
     cb6:	192c      	adds	r4, r5, r4
     cb8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     cbc:	d204      	bcs.n	cc8 <__udivmoddi4+0x112>
     cbe:	42a2      	cmp	r2, r4
     cc0:	d902      	bls.n	cc8 <__udivmoddi4+0x112>
     cc2:	f1ac 0302 	sub.w	r3, ip, #2
     cc6:	442c      	add	r4, r5
     cc8:	1aa4      	subs	r4, r4, r2
     cca:	e7be      	b.n	c4a <__udivmoddi4+0x94>
     ccc:	f1c7 0c20 	rsb	ip, r7, #32
     cd0:	40bd      	lsls	r5, r7
     cd2:	fa20 f80c 	lsr.w	r8, r0, ip
     cd6:	fa00 f307 	lsl.w	r3, r0, r7
     cda:	fa24 fc0c 	lsr.w	ip, r4, ip
     cde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     ce2:	ea4c 0203 	orr.w	r2, ip, r3
     ce6:	fbb8 fcfe 	udiv	ip, r8, lr
     cea:	b2ab      	uxth	r3, r5
     cec:	fb0e 801c 	mls	r0, lr, ip, r8
     cf0:	fb0c f903 	mul.w	r9, ip, r3
     cf4:	0c11      	lsrs	r1, r2, #16
     cf6:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     cfa:	4581      	cmp	r9, r0
     cfc:	fa04 f407 	lsl.w	r4, r4, r7
     d00:	d923      	bls.n	d4a <__udivmoddi4+0x194>
     d02:	1828      	adds	r0, r5, r0
     d04:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     d08:	d204      	bcs.n	d14 <__udivmoddi4+0x15e>
     d0a:	4581      	cmp	r9, r0
     d0c:	d902      	bls.n	d14 <__udivmoddi4+0x15e>
     d0e:	f1ac 0102 	sub.w	r1, ip, #2
     d12:	4428      	add	r0, r5
     d14:	eba0 0009 	sub.w	r0, r0, r9
     d18:	fbb0 fcfe 	udiv	ip, r0, lr
     d1c:	fb0e 001c 	mls	r0, lr, ip, r0
     d20:	fb0c f803 	mul.w	r8, ip, r3
     d24:	b292      	uxth	r2, r2
     d26:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     d2a:	4598      	cmp	r8, r3
     d2c:	d90f      	bls.n	d4e <__udivmoddi4+0x198>
     d2e:	18eb      	adds	r3, r5, r3
     d30:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     d34:	d204      	bcs.n	d40 <__udivmoddi4+0x18a>
     d36:	4598      	cmp	r8, r3
     d38:	d902      	bls.n	d40 <__udivmoddi4+0x18a>
     d3a:	f1ac 0202 	sub.w	r2, ip, #2
     d3e:	442b      	add	r3, r5
     d40:	eba3 0308 	sub.w	r3, r3, r8
     d44:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     d48:	e791      	b.n	c6e <__udivmoddi4+0xb8>
     d4a:	4661      	mov	r1, ip
     d4c:	e7e2      	b.n	d14 <__udivmoddi4+0x15e>
     d4e:	4662      	mov	r2, ip
     d50:	e7f6      	b.n	d40 <__udivmoddi4+0x18a>
     d52:	4660      	mov	r0, ip
     d54:	e7a2      	b.n	c9c <__udivmoddi4+0xe6>
     d56:	4663      	mov	r3, ip
     d58:	e7b6      	b.n	cc8 <__udivmoddi4+0x112>
     d5a:	4283      	cmp	r3, r0
     d5c:	d905      	bls.n	d6a <__udivmoddi4+0x1b4>
     d5e:	b10e      	cbz	r6, d64 <__udivmoddi4+0x1ae>
     d60:	e9c6 7000 	strd	r7, r0, [r6]
     d64:	2100      	movs	r1, #0
     d66:	4608      	mov	r0, r1
     d68:	e776      	b.n	c58 <__udivmoddi4+0xa2>
     d6a:	fab3 f183 	clz	r1, r3
     d6e:	b981      	cbnz	r1, d92 <__udivmoddi4+0x1dc>
     d70:	4283      	cmp	r3, r0
     d72:	d301      	bcc.n	d78 <__udivmoddi4+0x1c2>
     d74:	42ba      	cmp	r2, r7
     d76:	d80a      	bhi.n	d8e <__udivmoddi4+0x1d8>
     d78:	1abc      	subs	r4, r7, r2
     d7a:	eb60 0303 	sbc.w	r3, r0, r3
     d7e:	2001      	movs	r0, #1
     d80:	469c      	mov	ip, r3
     d82:	2e00      	cmp	r6, #0
     d84:	d068      	beq.n	e58 <__udivmoddi4+0x2a2>
     d86:	e9c6 4c00 	strd	r4, ip, [r6]
     d8a:	2100      	movs	r1, #0
     d8c:	e764      	b.n	c58 <__udivmoddi4+0xa2>
     d8e:	4608      	mov	r0, r1
     d90:	e7f7      	b.n	d82 <__udivmoddi4+0x1cc>
     d92:	f1c1 0c20 	rsb	ip, r1, #32
     d96:	408b      	lsls	r3, r1
     d98:	fa22 f40c 	lsr.w	r4, r2, ip
     d9c:	431c      	orrs	r4, r3
     d9e:	fa20 fb0c 	lsr.w	fp, r0, ip
     da2:	ea4f 4914 	mov.w	r9, r4, lsr #16
     da6:	fbbb f8f9 	udiv	r8, fp, r9
     daa:	fa1f fe84 	uxth.w	lr, r4
     dae:	fb09 bb18 	mls	fp, r9, r8, fp
     db2:	fb08 fa0e 	mul.w	sl, r8, lr
     db6:	fa02 f501 	lsl.w	r5, r2, r1
     dba:	fa00 f301 	lsl.w	r3, r0, r1
     dbe:	fa27 f20c 	lsr.w	r2, r7, ip
     dc2:	4313      	orrs	r3, r2
     dc4:	0c1a      	lsrs	r2, r3, #16
     dc6:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     dca:	4592      	cmp	sl, r2
     dcc:	fa07 f701 	lsl.w	r7, r7, r1
     dd0:	d93e      	bls.n	e50 <__udivmoddi4+0x29a>
     dd2:	18a2      	adds	r2, r4, r2
     dd4:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     dd8:	d204      	bcs.n	de4 <__udivmoddi4+0x22e>
     dda:	4592      	cmp	sl, r2
     ddc:	d902      	bls.n	de4 <__udivmoddi4+0x22e>
     dde:	f1a8 0002 	sub.w	r0, r8, #2
     de2:	4422      	add	r2, r4
     de4:	eba2 020a 	sub.w	r2, r2, sl
     de8:	fbb2 f8f9 	udiv	r8, r2, r9
     dec:	fb09 2218 	mls	r2, r9, r8, r2
     df0:	fb08 fe0e 	mul.w	lr, r8, lr
     df4:	b29b      	uxth	r3, r3
     df6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     dfa:	4596      	cmp	lr, r2
     dfc:	d92a      	bls.n	e54 <__udivmoddi4+0x29e>
     dfe:	18a2      	adds	r2, r4, r2
     e00:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     e04:	d204      	bcs.n	e10 <__udivmoddi4+0x25a>
     e06:	4596      	cmp	lr, r2
     e08:	d902      	bls.n	e10 <__udivmoddi4+0x25a>
     e0a:	f1a8 0302 	sub.w	r3, r8, #2
     e0e:	4422      	add	r2, r4
     e10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     e14:	fba0 9305 	umull	r9, r3, r0, r5
     e18:	eba2 020e 	sub.w	r2, r2, lr
     e1c:	429a      	cmp	r2, r3
     e1e:	46ce      	mov	lr, r9
     e20:	4698      	mov	r8, r3
     e22:	d302      	bcc.n	e2a <__udivmoddi4+0x274>
     e24:	d106      	bne.n	e34 <__udivmoddi4+0x27e>
     e26:	454f      	cmp	r7, r9
     e28:	d204      	bcs.n	e34 <__udivmoddi4+0x27e>
     e2a:	ebb9 0e05 	subs.w	lr, r9, r5
     e2e:	eb63 0804 	sbc.w	r8, r3, r4
     e32:	3801      	subs	r0, #1
     e34:	b186      	cbz	r6, e58 <__udivmoddi4+0x2a2>
     e36:	ebb7 030e 	subs.w	r3, r7, lr
     e3a:	eb62 0708 	sbc.w	r7, r2, r8
     e3e:	fa07 fc0c 	lsl.w	ip, r7, ip
     e42:	40cb      	lsrs	r3, r1
     e44:	ea4c 0303 	orr.w	r3, ip, r3
     e48:	40cf      	lsrs	r7, r1
     e4a:	e9c6 3700 	strd	r3, r7, [r6]
     e4e:	e79c      	b.n	d8a <__udivmoddi4+0x1d4>
     e50:	4640      	mov	r0, r8
     e52:	e7c7      	b.n	de4 <__udivmoddi4+0x22e>
     e54:	4643      	mov	r3, r8
     e56:	e7db      	b.n	e10 <__udivmoddi4+0x25a>
     e58:	4631      	mov	r1, r6
     e5a:	e6fd      	b.n	c58 <__udivmoddi4+0xa2>

00000e5c <strcmp>:
     e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
     e60:	f811 3b01 	ldrb.w	r3, [r1], #1
     e64:	2a01      	cmp	r2, #1
     e66:	bf28      	it	cs
     e68:	429a      	cmpcs	r2, r3
     e6a:	d0f7      	beq.n	e5c <strcmp>
     e6c:	1ad0      	subs	r0, r2, r3
     e6e:	4770      	bx	lr

00000e70 <strlen>:
     e70:	4603      	mov	r3, r0
     e72:	f813 2b01 	ldrb.w	r2, [r3], #1
     e76:	2a00      	cmp	r2, #0
     e78:	d1fb      	bne.n	e72 <strlen+0x2>
     e7a:	1a18      	subs	r0, r3, r0
     e7c:	3801      	subs	r0, #1
     e7e:	4770      	bx	lr

00000e80 <luaU_undump>:


/*
** Load precompiled chunk.
*/
LClosure *luaU_undump(lua_State *L, ZIO *Z, const char *name) {
     e80:	b530      	push	{r4, r5, lr}
  LoadState S;
  LClosure *cl;
  if (*name == '@' || *name == '=')
     e82:	7813      	ldrb	r3, [r2, #0]
LClosure *luaU_undump(lua_State *L, ZIO *Z, const char *name) {
     e84:	4605      	mov	r5, r0
  if (*name == '@' || *name == '=')
     e86:	2b40      	cmp	r3, #64	; 0x40
LClosure *luaU_undump(lua_State *L, ZIO *Z, const char *name) {
     e88:	b087      	sub	sp, #28
  if (*name == '@' || *name == '=')
     e8a:	d001      	beq.n	e90 <luaU_undump+0x10>
     e8c:	2b3d      	cmp	r3, #61	; 0x3d
     e8e:	d102      	bne.n	e96 <luaU_undump+0x16>
    S.name = name + 1;
     e90:	3201      	adds	r2, #1
  else if (*name == LUA_SIGNATURE[0])
    S.name = "binary string";
  else
    S.name = name;
     e92:	9205      	str	r2, [sp, #20]
     e94:	e003      	b.n	e9e <luaU_undump+0x1e>
  else if (*name == LUA_SIGNATURE[0])
     e96:	2b1b      	cmp	r3, #27
     e98:	d1fb      	bne.n	e92 <luaU_undump+0x12>
    S.name = "binary string";
     e9a:	4b3b      	ldr	r3, [pc, #236]	; (f88 <luaU_undump+0x108>)
     e9c:	9305      	str	r3, [sp, #20]
  S.L = L;
  S.Z = Z;
     e9e:	e9cd 5103 	strd	r5, r1, [sp, #12]
  checkliteral(S, &LUA_SIGNATURE[1], "not a binary chunk");
     ea2:	4a3a      	ldr	r2, [pc, #232]	; (f8c <luaU_undump+0x10c>)
     ea4:	493a      	ldr	r1, [pc, #232]	; (f90 <luaU_undump+0x110>)
     ea6:	a803      	add	r0, sp, #12
     ea8:	f015 f9b5 	bl	16216 <checkliteral>
  if (loadByte(S) != LUAC_VERSION)
     eac:	a803      	add	r0, sp, #12
     eae:	f007 fdc5 	bl	8a3c <loadByte>
     eb2:	2854      	cmp	r0, #84	; 0x54
     eb4:	d003      	beq.n	ebe <luaU_undump+0x3e>
    error(S, "version mismatch");
     eb6:	4937      	ldr	r1, [pc, #220]	; (f94 <luaU_undump+0x114>)
    error(S, "format mismatch");
     eb8:	a803      	add	r0, sp, #12
     eba:	f007 fda3 	bl	8a04 <error>
  if (loadByte(S) != LUAC_FORMAT)
     ebe:	a803      	add	r0, sp, #12
     ec0:	f007 fdbc 	bl	8a3c <loadByte>
     ec4:	b108      	cbz	r0, eca <luaU_undump+0x4a>
    error(S, "format mismatch");
     ec6:	4934      	ldr	r1, [pc, #208]	; (f98 <luaU_undump+0x118>)
     ec8:	e7f6      	b.n	eb8 <luaU_undump+0x38>
  checkliteral(S, LUAC_DATA, "corrupted chunk");
     eca:	4a34      	ldr	r2, [pc, #208]	; (f9c <luaU_undump+0x11c>)
     ecc:	4934      	ldr	r1, [pc, #208]	; (fa0 <luaU_undump+0x120>)
     ece:	a803      	add	r0, sp, #12
     ed0:	f015 f9a1 	bl	16216 <checkliteral>
  checksize(S, Instruction);
     ed4:	2104      	movs	r1, #4
     ed6:	4a33      	ldr	r2, [pc, #204]	; (fa4 <luaU_undump+0x124>)
     ed8:	a803      	add	r0, sp, #12
     eda:	f007 ff7b 	bl	8dd4 <fchecksize>
  checksize(S, lua_Integer);
     ede:	2108      	movs	r1, #8
     ee0:	4a31      	ldr	r2, [pc, #196]	; (fa8 <luaU_undump+0x128>)
     ee2:	a803      	add	r0, sp, #12
     ee4:	f007 ff76 	bl	8dd4 <fchecksize>
  checksize(S, lua_Number);
     ee8:	2108      	movs	r1, #8
     eea:	4a30      	ldr	r2, [pc, #192]	; (fac <luaU_undump+0x12c>)
     eec:	a803      	add	r0, sp, #12
     eee:	f007 ff71 	bl	8dd4 <fchecksize>
  loadVar(S, x);
     ef2:	2208      	movs	r2, #8
     ef4:	4669      	mov	r1, sp
     ef6:	a803      	add	r0, sp, #12
     ef8:	f007 fd92 	bl	8a20 <loadBlock>
  if (loadInteger(S) != LUAC_INT)
     efc:	9b00      	ldr	r3, [sp, #0]
     efe:	9a01      	ldr	r2, [sp, #4]
     f00:	f5a3 43ac 	sub.w	r3, r3, #22016	; 0x5600
     f04:	3b78      	subs	r3, #120	; 0x78
     f06:	4313      	orrs	r3, r2
     f08:	d001      	beq.n	f0e <luaU_undump+0x8e>
    error(S, "integer format mismatch");
     f0a:	4929      	ldr	r1, [pc, #164]	; (fb0 <luaU_undump+0x130>)
     f0c:	e7d4      	b.n	eb8 <luaU_undump+0x38>
  loadVar(S, x);
     f0e:	2208      	movs	r2, #8
     f10:	4669      	mov	r1, sp
     f12:	a803      	add	r0, sp, #12
     f14:	f007 fd84 	bl	8a20 <loadBlock>
  if (loadNumber(S) != LUAC_NUM)
     f18:	a319      	add	r3, pc, #100	; (adr r3, f80 <luaU_undump+0x100>)
     f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
     f1e:	e9dd 0100 	ldrd	r0, r1, [sp]
     f22:	f7ff fd09 	bl	938 <__aeabi_dcmpeq>
     f26:	b908      	cbnz	r0, f2c <luaU_undump+0xac>
    error(S, "float format mismatch");
     f28:	4922      	ldr	r1, [pc, #136]	; (fb4 <luaU_undump+0x134>)
     f2a:	e7c5      	b.n	eb8 <luaU_undump+0x38>
  checkHeader(&S);
  cl = luaF_newLclosure(L, loadByte(&S));
     f2c:	a803      	add	r0, sp, #12
     f2e:	f007 fd85 	bl	8a3c <loadByte>
     f32:	4601      	mov	r1, r0
     f34:	4628      	mov	r0, r5
     f36:	f012 faa9 	bl	1348c <luaF_newLclosure>
  setclLvalue2s(L, L->top, cl);
     f3a:	2246      	movs	r2, #70	; 0x46
     f3c:	68eb      	ldr	r3, [r5, #12]
  cl = luaF_newLclosure(L, loadByte(&S));
     f3e:	4604      	mov	r4, r0
  setclLvalue2s(L, L->top, cl);
     f40:	6018      	str	r0, [r3, #0]
     f42:	721a      	strb	r2, [r3, #8]
  luaD_inctop(L);
     f44:	4628      	mov	r0, r5
     f46:	f011 ffc7 	bl	12ed8 <luaD_inctop>
  cl->p = luaF_newproto(L);
     f4a:	4628      	mov	r0, r5
     f4c:	f012 fb8b 	bl	13666 <luaF_newproto>
  luaC_objbarrier(L, cl, cl->p);
     f50:	7963      	ldrb	r3, [r4, #5]
  cl->p = luaF_newproto(L);
     f52:	4602      	mov	r2, r0
  luaC_objbarrier(L, cl, cl->p);
     f54:	069b      	lsls	r3, r3, #26
  cl->p = luaF_newproto(L);
     f56:	60e0      	str	r0, [r4, #12]
  luaC_objbarrier(L, cl, cl->p);
     f58:	d507      	bpl.n	f6a <luaU_undump+0xea>
     f5a:	7943      	ldrb	r3, [r0, #5]
     f5c:	f013 0f18 	tst.w	r3, #24
     f60:	d003      	beq.n	f6a <luaU_undump+0xea>
     f62:	4621      	mov	r1, r4
     f64:	4628      	mov	r0, r5
     f66:	f013 faca 	bl	144fe <luaC_barrier_>
  loadFunction(&S, cl->p, NULL);
     f6a:	a803      	add	r0, sp, #12
     f6c:	2200      	movs	r2, #0
     f6e:	68e1      	ldr	r1, [r4, #12]
     f70:	f007 fd94 	bl	8a9c <loadFunction>
  lua_assert(cl->nupvalues == cl->p->sizeupvalues);
  luai_verifycode(L, cl->p);
  return cl;
}
     f74:	4620      	mov	r0, r4
     f76:	b007      	add	sp, #28
     f78:	bd30      	pop	{r4, r5, pc}
     f7a:	bf00      	nop
     f7c:	f3af 8000 	nop.w
     f80:	00000000 	.word	0x00000000
     f84:	40772800 	.word	0x40772800
     f88:	0001893a 	.word	0x0001893a
     f8c:	00018948 	.word	0x00018948
     f90:	0001895c 	.word	0x0001895c
     f94:	00018960 	.word	0x00018960
     f98:	000189b3 	.word	0x000189b3
     f9c:	00018971 	.word	0x00018971
     fa0:	00018981 	.word	0x00018981
     fa4:	00018988 	.word	0x00018988
     fa8:	00018994 	.word	0x00018994
     fac:	000189a0 	.word	0x000189a0
     fb0:	000189ab 	.word	0x000189ab
     fb4:	000189c3 	.word	0x000189c3

00000fb8 <floor>:
     fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     fbc:	f3c1 580a 	ubfx	r8, r1, #20, #11
     fc0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
     fc4:	2e13      	cmp	r6, #19
     fc6:	4602      	mov	r2, r0
     fc8:	460b      	mov	r3, r1
     fca:	4607      	mov	r7, r0
     fcc:	460c      	mov	r4, r1
     fce:	4605      	mov	r5, r0
     fd0:	dc33      	bgt.n	103a <floor+0x82>
     fd2:	2e00      	cmp	r6, #0
     fd4:	da14      	bge.n	1000 <floor+0x48>
     fd6:	a334      	add	r3, pc, #208	; (adr r3, 10a8 <floor+0xf0>)
     fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
     fdc:	f7ff f88e 	bl	fc <__adddf3>
     fe0:	2200      	movs	r2, #0
     fe2:	2300      	movs	r3, #0
     fe4:	f7ff fcd0 	bl	988 <__aeabi_dcmpgt>
     fe8:	b138      	cbz	r0, ffa <floor+0x42>
     fea:	2c00      	cmp	r4, #0
     fec:	da58      	bge.n	10a0 <floor+0xe8>
     fee:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
     ff2:	431d      	orrs	r5, r3
     ff4:	d001      	beq.n	ffa <floor+0x42>
     ff6:	2500      	movs	r5, #0
     ff8:	4c2d      	ldr	r4, [pc, #180]	; (10b0 <floor+0xf8>)
     ffa:	4623      	mov	r3, r4
     ffc:	462f      	mov	r7, r5
     ffe:	e025      	b.n	104c <floor+0x94>
    1000:	4a2c      	ldr	r2, [pc, #176]	; (10b4 <floor+0xfc>)
    1002:	fa42 f806 	asr.w	r8, r2, r6
    1006:	ea01 0208 	and.w	r2, r1, r8
    100a:	4302      	orrs	r2, r0
    100c:	d01e      	beq.n	104c <floor+0x94>
    100e:	a326      	add	r3, pc, #152	; (adr r3, 10a8 <floor+0xf0>)
    1010:	e9d3 2300 	ldrd	r2, r3, [r3]
    1014:	f7ff f872 	bl	fc <__adddf3>
    1018:	2200      	movs	r2, #0
    101a:	2300      	movs	r3, #0
    101c:	f7ff fcb4 	bl	988 <__aeabi_dcmpgt>
    1020:	2800      	cmp	r0, #0
    1022:	d0ea      	beq.n	ffa <floor+0x42>
    1024:	2c00      	cmp	r4, #0
    1026:	bfbe      	ittt	lt
    1028:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
    102c:	fa43 f606 	asrlt.w	r6, r3, r6
    1030:	19a4      	addlt	r4, r4, r6
    1032:	2500      	movs	r5, #0
    1034:	ea24 0408 	bic.w	r4, r4, r8
    1038:	e7df      	b.n	ffa <floor+0x42>
    103a:	2e33      	cmp	r6, #51	; 0x33
    103c:	dd0a      	ble.n	1054 <floor+0x9c>
    103e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    1042:	d103      	bne.n	104c <floor+0x94>
    1044:	f7ff f85a 	bl	fc <__adddf3>
    1048:	4607      	mov	r7, r0
    104a:	460b      	mov	r3, r1
    104c:	4638      	mov	r0, r7
    104e:	4619      	mov	r1, r3
    1050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1058:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
    105c:	fa22 f808 	lsr.w	r8, r2, r8
    1060:	ea18 0f00 	tst.w	r8, r0
    1064:	d0f2      	beq.n	104c <floor+0x94>
    1066:	a310      	add	r3, pc, #64	; (adr r3, 10a8 <floor+0xf0>)
    1068:	e9d3 2300 	ldrd	r2, r3, [r3]
    106c:	f7ff f846 	bl	fc <__adddf3>
    1070:	2200      	movs	r2, #0
    1072:	2300      	movs	r3, #0
    1074:	f7ff fc88 	bl	988 <__aeabi_dcmpgt>
    1078:	2800      	cmp	r0, #0
    107a:	d0be      	beq.n	ffa <floor+0x42>
    107c:	2c00      	cmp	r4, #0
    107e:	da02      	bge.n	1086 <floor+0xce>
    1080:	2e14      	cmp	r6, #20
    1082:	d103      	bne.n	108c <floor+0xd4>
    1084:	3401      	adds	r4, #1
    1086:	ea25 0508 	bic.w	r5, r5, r8
    108a:	e7b6      	b.n	ffa <floor+0x42>
    108c:	2301      	movs	r3, #1
    108e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
    1092:	fa03 f606 	lsl.w	r6, r3, r6
    1096:	4435      	add	r5, r6
    1098:	42bd      	cmp	r5, r7
    109a:	bf38      	it	cc
    109c:	18e4      	addcc	r4, r4, r3
    109e:	e7f2      	b.n	1086 <floor+0xce>
    10a0:	2500      	movs	r5, #0
    10a2:	462c      	mov	r4, r5
    10a4:	e7a9      	b.n	ffa <floor+0x42>
    10a6:	bf00      	nop
    10a8:	8800759c 	.word	0x8800759c
    10ac:	7e37e43c 	.word	0x7e37e43c
    10b0:	bff00000 	.word	0xbff00000
    10b4:	000fffff 	.word	0x000fffff

000010b8 <scalbn>:
    10b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10ba:	f3c1 560a 	ubfx	r6, r1, #20, #11
    10be:	4604      	mov	r4, r0
    10c0:	460d      	mov	r5, r1
    10c2:	4617      	mov	r7, r2
    10c4:	460b      	mov	r3, r1
    10c6:	b996      	cbnz	r6, 10ee <scalbn+0x36>
    10c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    10cc:	4303      	orrs	r3, r0
    10ce:	d039      	beq.n	1144 <scalbn+0x8c>
    10d0:	4b33      	ldr	r3, [pc, #204]	; (11a0 <scalbn+0xe8>)
    10d2:	2200      	movs	r2, #0
    10d4:	f7ff f9c8 	bl	468 <__aeabi_dmul>
    10d8:	4b32      	ldr	r3, [pc, #200]	; (11a4 <scalbn+0xec>)
    10da:	4604      	mov	r4, r0
    10dc:	429f      	cmp	r7, r3
    10de:	460d      	mov	r5, r1
    10e0:	da0f      	bge.n	1102 <scalbn+0x4a>
    10e2:	a32b      	add	r3, pc, #172	; (adr r3, 1190 <scalbn+0xd8>)
    10e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    10e8:	f7ff f9be 	bl	468 <__aeabi_dmul>
    10ec:	e006      	b.n	10fc <scalbn+0x44>
    10ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
    10f2:	4296      	cmp	r6, r2
    10f4:	d10a      	bne.n	110c <scalbn+0x54>
    10f6:	4602      	mov	r2, r0
    10f8:	f7ff f800 	bl	fc <__adddf3>
    10fc:	4604      	mov	r4, r0
    10fe:	460d      	mov	r5, r1
    1100:	e020      	b.n	1144 <scalbn+0x8c>
    1102:	460b      	mov	r3, r1
    1104:	f3c1 510a 	ubfx	r1, r1, #20, #11
    1108:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
    110c:	f240 72fe 	movw	r2, #2046	; 0x7fe
    1110:	19b9      	adds	r1, r7, r6
    1112:	4291      	cmp	r1, r2
    1114:	dd0e      	ble.n	1134 <scalbn+0x7c>
    1116:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
    111a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
    111e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
    1122:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
    1126:	4820      	ldr	r0, [pc, #128]	; (11a8 <scalbn+0xf0>)
    1128:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
    112c:	a31a      	add	r3, pc, #104	; (adr r3, 1198 <scalbn+0xe0>)
    112e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1132:	e7d9      	b.n	10e8 <scalbn+0x30>
    1134:	2900      	cmp	r1, #0
    1136:	dd08      	ble.n	114a <scalbn+0x92>
    1138:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    113c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    1140:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
    1144:	4620      	mov	r0, r4
    1146:	4629      	mov	r1, r5
    1148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    114a:	f111 0f35 	cmn.w	r1, #53	; 0x35
    114e:	da12      	bge.n	1176 <scalbn+0xbe>
    1150:	f24c 3350 	movw	r3, #50000	; 0xc350
    1154:	429f      	cmp	r7, r3
    1156:	ea4f 73d5 	mov.w	r3, r5, lsr #31
    115a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
    115e:	dcdc      	bgt.n	111a <scalbn+0x62>
    1160:	a30b      	add	r3, pc, #44	; (adr r3, 1190 <scalbn+0xd8>)
    1162:	e9d3 2300 	ldrd	r2, r3, [r3]
    1166:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
    116a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
    116e:	480f      	ldr	r0, [pc, #60]	; (11ac <scalbn+0xf4>)
    1170:	f041 011f 	orr.w	r1, r1, #31
    1174:	e7b8      	b.n	10e8 <scalbn+0x30>
    1176:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    117a:	3136      	adds	r1, #54	; 0x36
    117c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    1180:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
    1184:	4620      	mov	r0, r4
    1186:	4629      	mov	r1, r5
    1188:	2200      	movs	r2, #0
    118a:	4b09      	ldr	r3, [pc, #36]	; (11b0 <scalbn+0xf8>)
    118c:	e7ac      	b.n	10e8 <scalbn+0x30>
    118e:	bf00      	nop
    1190:	c2f8f359 	.word	0xc2f8f359
    1194:	01a56e1f 	.word	0x01a56e1f
    1198:	8800759c 	.word	0x8800759c
    119c:	7e37e43c 	.word	0x7e37e43c
    11a0:	43500000 	.word	0x43500000
    11a4:	ffff3cb0 	.word	0xffff3cb0
    11a8:	8800759c 	.word	0x8800759c
    11ac:	c2f8f359 	.word	0xc2f8f359
    11b0:	3c900000 	.word	0x3c900000
    11b4:	00000000 	.word	0x00000000

000011b8 <__ieee754_pow>:
    11b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11bc:	b093      	sub	sp, #76	; 0x4c
    11be:	e9cd 2302 	strd	r2, r3, [sp, #8]
    11c2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
    11c6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
    11ca:	ea55 0302 	orrs.w	r3, r5, r2
    11ce:	4607      	mov	r7, r0
    11d0:	4688      	mov	r8, r1
    11d2:	f000 84bf 	beq.w	1b54 <__ieee754_pow+0x99c>
    11d6:	4b7e      	ldr	r3, [pc, #504]	; (13d0 <__ieee754_pow+0x218>)
    11d8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    11dc:	429c      	cmp	r4, r3
    11de:	4689      	mov	r9, r1
    11e0:	4682      	mov	sl, r0
    11e2:	dc09      	bgt.n	11f8 <__ieee754_pow+0x40>
    11e4:	d103      	bne.n	11ee <__ieee754_pow+0x36>
    11e6:	b978      	cbnz	r0, 1208 <__ieee754_pow+0x50>
    11e8:	42a5      	cmp	r5, r4
    11ea:	dd02      	ble.n	11f2 <__ieee754_pow+0x3a>
    11ec:	e00c      	b.n	1208 <__ieee754_pow+0x50>
    11ee:	429d      	cmp	r5, r3
    11f0:	dc02      	bgt.n	11f8 <__ieee754_pow+0x40>
    11f2:	429d      	cmp	r5, r3
    11f4:	d10e      	bne.n	1214 <__ieee754_pow+0x5c>
    11f6:	b16a      	cbz	r2, 1214 <__ieee754_pow+0x5c>
    11f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    11fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    1200:	ea54 030a 	orrs.w	r3, r4, sl
    1204:	f000 84a6 	beq.w	1b54 <__ieee754_pow+0x99c>
    1208:	4872      	ldr	r0, [pc, #456]	; (13d4 <__ieee754_pow+0x21c>)
    120a:	b013      	add	sp, #76	; 0x4c
    120c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1210:	f00c b844 	b.w	d29c <nan>
    1214:	f1b9 0f00 	cmp.w	r9, #0
    1218:	da39      	bge.n	128e <__ieee754_pow+0xd6>
    121a:	4b6f      	ldr	r3, [pc, #444]	; (13d8 <__ieee754_pow+0x220>)
    121c:	429d      	cmp	r5, r3
    121e:	dc54      	bgt.n	12ca <__ieee754_pow+0x112>
    1220:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    1224:	429d      	cmp	r5, r3
    1226:	f340 84a6 	ble.w	1b76 <__ieee754_pow+0x9be>
    122a:	152b      	asrs	r3, r5, #20
    122c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    1230:	2b14      	cmp	r3, #20
    1232:	dd0f      	ble.n	1254 <__ieee754_pow+0x9c>
    1234:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    1238:	fa22 f103 	lsr.w	r1, r2, r3
    123c:	fa01 f303 	lsl.w	r3, r1, r3
    1240:	4293      	cmp	r3, r2
    1242:	f040 8498 	bne.w	1b76 <__ieee754_pow+0x9be>
    1246:	f001 0101 	and.w	r1, r1, #1
    124a:	f1c1 0302 	rsb	r3, r1, #2
    124e:	9300      	str	r3, [sp, #0]
    1250:	b182      	cbz	r2, 1274 <__ieee754_pow+0xbc>
    1252:	e05e      	b.n	1312 <__ieee754_pow+0x15a>
    1254:	2a00      	cmp	r2, #0
    1256:	d15a      	bne.n	130e <__ieee754_pow+0x156>
    1258:	f1c3 0314 	rsb	r3, r3, #20
    125c:	fa45 f103 	asr.w	r1, r5, r3
    1260:	fa01 f303 	lsl.w	r3, r1, r3
    1264:	42ab      	cmp	r3, r5
    1266:	f040 8483 	bne.w	1b70 <__ieee754_pow+0x9b8>
    126a:	f001 0101 	and.w	r1, r1, #1
    126e:	f1c1 0302 	rsb	r3, r1, #2
    1272:	9300      	str	r3, [sp, #0]
    1274:	4b59      	ldr	r3, [pc, #356]	; (13dc <__ieee754_pow+0x224>)
    1276:	429d      	cmp	r5, r3
    1278:	d130      	bne.n	12dc <__ieee754_pow+0x124>
    127a:	2e00      	cmp	r6, #0
    127c:	f280 8474 	bge.w	1b68 <__ieee754_pow+0x9b0>
    1280:	463a      	mov	r2, r7
    1282:	4643      	mov	r3, r8
    1284:	2000      	movs	r0, #0
    1286:	4955      	ldr	r1, [pc, #340]	; (13dc <__ieee754_pow+0x224>)
    1288:	f7ff fa18 	bl	6bc <__aeabi_ddiv>
    128c:	e02f      	b.n	12ee <__ieee754_pow+0x136>
    128e:	2300      	movs	r3, #0
    1290:	9300      	str	r3, [sp, #0]
    1292:	2a00      	cmp	r2, #0
    1294:	d13d      	bne.n	1312 <__ieee754_pow+0x15a>
    1296:	4b4e      	ldr	r3, [pc, #312]	; (13d0 <__ieee754_pow+0x218>)
    1298:	429d      	cmp	r5, r3
    129a:	d1eb      	bne.n	1274 <__ieee754_pow+0xbc>
    129c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
    12a0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    12a4:	ea53 030a 	orrs.w	r3, r3, sl
    12a8:	f000 8454 	beq.w	1b54 <__ieee754_pow+0x99c>
    12ac:	4b4c      	ldr	r3, [pc, #304]	; (13e0 <__ieee754_pow+0x228>)
    12ae:	429c      	cmp	r4, r3
    12b0:	dd0d      	ble.n	12ce <__ieee754_pow+0x116>
    12b2:	2e00      	cmp	r6, #0
    12b4:	f280 8454 	bge.w	1b60 <__ieee754_pow+0x9a8>
    12b8:	f04f 0b00 	mov.w	fp, #0
    12bc:	f04f 0c00 	mov.w	ip, #0
    12c0:	4658      	mov	r0, fp
    12c2:	4661      	mov	r1, ip
    12c4:	b013      	add	sp, #76	; 0x4c
    12c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12ca:	2302      	movs	r3, #2
    12cc:	e7e0      	b.n	1290 <__ieee754_pow+0xd8>
    12ce:	2e00      	cmp	r6, #0
    12d0:	daf2      	bge.n	12b8 <__ieee754_pow+0x100>
    12d2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
    12d6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
    12da:	e7f1      	b.n	12c0 <__ieee754_pow+0x108>
    12dc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
    12e0:	d108      	bne.n	12f4 <__ieee754_pow+0x13c>
    12e2:	463a      	mov	r2, r7
    12e4:	4643      	mov	r3, r8
    12e6:	4638      	mov	r0, r7
    12e8:	4641      	mov	r1, r8
    12ea:	f7ff f8bd 	bl	468 <__aeabi_dmul>
    12ee:	4683      	mov	fp, r0
    12f0:	468c      	mov	ip, r1
    12f2:	e7e5      	b.n	12c0 <__ieee754_pow+0x108>
    12f4:	4b3b      	ldr	r3, [pc, #236]	; (13e4 <__ieee754_pow+0x22c>)
    12f6:	429e      	cmp	r6, r3
    12f8:	d10b      	bne.n	1312 <__ieee754_pow+0x15a>
    12fa:	f1b9 0f00 	cmp.w	r9, #0
    12fe:	db08      	blt.n	1312 <__ieee754_pow+0x15a>
    1300:	4638      	mov	r0, r7
    1302:	4641      	mov	r1, r8
    1304:	b013      	add	sp, #76	; 0x4c
    1306:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    130a:	f00b bf17 	b.w	d13c <__ieee754_sqrt>
    130e:	2300      	movs	r3, #0
    1310:	9300      	str	r3, [sp, #0]
    1312:	4638      	mov	r0, r7
    1314:	4641      	mov	r1, r8
    1316:	f015 fbed 	bl	16af4 <fabs>
    131a:	4683      	mov	fp, r0
    131c:	468c      	mov	ip, r1
    131e:	f1ba 0f00 	cmp.w	sl, #0
    1322:	d129      	bne.n	1378 <__ieee754_pow+0x1c0>
    1324:	b124      	cbz	r4, 1330 <__ieee754_pow+0x178>
    1326:	4b2d      	ldr	r3, [pc, #180]	; (13dc <__ieee754_pow+0x224>)
    1328:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
    132c:	429a      	cmp	r2, r3
    132e:	d123      	bne.n	1378 <__ieee754_pow+0x1c0>
    1330:	2e00      	cmp	r6, #0
    1332:	da07      	bge.n	1344 <__ieee754_pow+0x18c>
    1334:	465a      	mov	r2, fp
    1336:	4663      	mov	r3, ip
    1338:	2000      	movs	r0, #0
    133a:	4928      	ldr	r1, [pc, #160]	; (13dc <__ieee754_pow+0x224>)
    133c:	f7ff f9be 	bl	6bc <__aeabi_ddiv>
    1340:	4683      	mov	fp, r0
    1342:	468c      	mov	ip, r1
    1344:	f1b9 0f00 	cmp.w	r9, #0
    1348:	daba      	bge.n	12c0 <__ieee754_pow+0x108>
    134a:	9b00      	ldr	r3, [sp, #0]
    134c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    1350:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    1354:	4323      	orrs	r3, r4
    1356:	d108      	bne.n	136a <__ieee754_pow+0x1b2>
    1358:	465a      	mov	r2, fp
    135a:	4663      	mov	r3, ip
    135c:	4658      	mov	r0, fp
    135e:	4661      	mov	r1, ip
    1360:	f7fe feca 	bl	f8 <__aeabi_dsub>
    1364:	4602      	mov	r2, r0
    1366:	460b      	mov	r3, r1
    1368:	e78e      	b.n	1288 <__ieee754_pow+0xd0>
    136a:	9b00      	ldr	r3, [sp, #0]
    136c:	2b01      	cmp	r3, #1
    136e:	d1a7      	bne.n	12c0 <__ieee754_pow+0x108>
    1370:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
    1374:	469c      	mov	ip, r3
    1376:	e7a3      	b.n	12c0 <__ieee754_pow+0x108>
    1378:	ea4f 73d9 	mov.w	r3, r9, lsr #31
    137c:	3b01      	subs	r3, #1
    137e:	930c      	str	r3, [sp, #48]	; 0x30
    1380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1382:	9b00      	ldr	r3, [sp, #0]
    1384:	4313      	orrs	r3, r2
    1386:	d104      	bne.n	1392 <__ieee754_pow+0x1da>
    1388:	463a      	mov	r2, r7
    138a:	4643      	mov	r3, r8
    138c:	4638      	mov	r0, r7
    138e:	4641      	mov	r1, r8
    1390:	e7e6      	b.n	1360 <__ieee754_pow+0x1a8>
    1392:	4b15      	ldr	r3, [pc, #84]	; (13e8 <__ieee754_pow+0x230>)
    1394:	429d      	cmp	r5, r3
    1396:	f340 80f9 	ble.w	158c <__ieee754_pow+0x3d4>
    139a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    139e:	429d      	cmp	r5, r3
    13a0:	4b0f      	ldr	r3, [pc, #60]	; (13e0 <__ieee754_pow+0x228>)
    13a2:	dd09      	ble.n	13b8 <__ieee754_pow+0x200>
    13a4:	429c      	cmp	r4, r3
    13a6:	dc0c      	bgt.n	13c2 <__ieee754_pow+0x20a>
    13a8:	2e00      	cmp	r6, #0
    13aa:	da85      	bge.n	12b8 <__ieee754_pow+0x100>
    13ac:	a306      	add	r3, pc, #24	; (adr r3, 13c8 <__ieee754_pow+0x210>)
    13ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    13b2:	4610      	mov	r0, r2
    13b4:	4619      	mov	r1, r3
    13b6:	e798      	b.n	12ea <__ieee754_pow+0x132>
    13b8:	429c      	cmp	r4, r3
    13ba:	dbf5      	blt.n	13a8 <__ieee754_pow+0x1f0>
    13bc:	4b07      	ldr	r3, [pc, #28]	; (13dc <__ieee754_pow+0x224>)
    13be:	429c      	cmp	r4, r3
    13c0:	dd14      	ble.n	13ec <__ieee754_pow+0x234>
    13c2:	2e00      	cmp	r6, #0
    13c4:	dcf2      	bgt.n	13ac <__ieee754_pow+0x1f4>
    13c6:	e777      	b.n	12b8 <__ieee754_pow+0x100>
    13c8:	8800759c 	.word	0x8800759c
    13cc:	7e37e43c 	.word	0x7e37e43c
    13d0:	7ff00000 	.word	0x7ff00000
    13d4:	00018987 	.word	0x00018987
    13d8:	433fffff 	.word	0x433fffff
    13dc:	3ff00000 	.word	0x3ff00000
    13e0:	3fefffff 	.word	0x3fefffff
    13e4:	3fe00000 	.word	0x3fe00000
    13e8:	41e00000 	.word	0x41e00000
    13ec:	4661      	mov	r1, ip
    13ee:	2200      	movs	r2, #0
    13f0:	4658      	mov	r0, fp
    13f2:	4b61      	ldr	r3, [pc, #388]	; (1578 <__ieee754_pow+0x3c0>)
    13f4:	f7fe fe80 	bl	f8 <__aeabi_dsub>
    13f8:	a355      	add	r3, pc, #340	; (adr r3, 1550 <__ieee754_pow+0x398>)
    13fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    13fe:	4604      	mov	r4, r0
    1400:	460d      	mov	r5, r1
    1402:	f7ff f831 	bl	468 <__aeabi_dmul>
    1406:	a354      	add	r3, pc, #336	; (adr r3, 1558 <__ieee754_pow+0x3a0>)
    1408:	e9d3 2300 	ldrd	r2, r3, [r3]
    140c:	4606      	mov	r6, r0
    140e:	460f      	mov	r7, r1
    1410:	4620      	mov	r0, r4
    1412:	4629      	mov	r1, r5
    1414:	f7ff f828 	bl	468 <__aeabi_dmul>
    1418:	2200      	movs	r2, #0
    141a:	4682      	mov	sl, r0
    141c:	468b      	mov	fp, r1
    141e:	4620      	mov	r0, r4
    1420:	4629      	mov	r1, r5
    1422:	4b56      	ldr	r3, [pc, #344]	; (157c <__ieee754_pow+0x3c4>)
    1424:	f7ff f820 	bl	468 <__aeabi_dmul>
    1428:	4602      	mov	r2, r0
    142a:	460b      	mov	r3, r1
    142c:	a14c      	add	r1, pc, #304	; (adr r1, 1560 <__ieee754_pow+0x3a8>)
    142e:	e9d1 0100 	ldrd	r0, r1, [r1]
    1432:	f7fe fe61 	bl	f8 <__aeabi_dsub>
    1436:	4622      	mov	r2, r4
    1438:	462b      	mov	r3, r5
    143a:	f7ff f815 	bl	468 <__aeabi_dmul>
    143e:	4602      	mov	r2, r0
    1440:	460b      	mov	r3, r1
    1442:	2000      	movs	r0, #0
    1444:	494e      	ldr	r1, [pc, #312]	; (1580 <__ieee754_pow+0x3c8>)
    1446:	f7fe fe57 	bl	f8 <__aeabi_dsub>
    144a:	4622      	mov	r2, r4
    144c:	462b      	mov	r3, r5
    144e:	4680      	mov	r8, r0
    1450:	4689      	mov	r9, r1
    1452:	4620      	mov	r0, r4
    1454:	4629      	mov	r1, r5
    1456:	f7ff f807 	bl	468 <__aeabi_dmul>
    145a:	4602      	mov	r2, r0
    145c:	460b      	mov	r3, r1
    145e:	4640      	mov	r0, r8
    1460:	4649      	mov	r1, r9
    1462:	f7ff f801 	bl	468 <__aeabi_dmul>
    1466:	a340      	add	r3, pc, #256	; (adr r3, 1568 <__ieee754_pow+0x3b0>)
    1468:	e9d3 2300 	ldrd	r2, r3, [r3]
    146c:	f7fe fffc 	bl	468 <__aeabi_dmul>
    1470:	4602      	mov	r2, r0
    1472:	460b      	mov	r3, r1
    1474:	4650      	mov	r0, sl
    1476:	4659      	mov	r1, fp
    1478:	f7fe fe3e 	bl	f8 <__aeabi_dsub>
    147c:	f04f 0a00 	mov.w	sl, #0
    1480:	4602      	mov	r2, r0
    1482:	460b      	mov	r3, r1
    1484:	4604      	mov	r4, r0
    1486:	460d      	mov	r5, r1
    1488:	4630      	mov	r0, r6
    148a:	4639      	mov	r1, r7
    148c:	f7fe fe36 	bl	fc <__adddf3>
    1490:	4632      	mov	r2, r6
    1492:	463b      	mov	r3, r7
    1494:	4650      	mov	r0, sl
    1496:	468b      	mov	fp, r1
    1498:	f7fe fe2e 	bl	f8 <__aeabi_dsub>
    149c:	4602      	mov	r2, r0
    149e:	460b      	mov	r3, r1
    14a0:	4620      	mov	r0, r4
    14a2:	4629      	mov	r1, r5
    14a4:	f7fe fe28 	bl	f8 <__aeabi_dsub>
    14a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    14ac:	9b00      	ldr	r3, [sp, #0]
    14ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    14b0:	3b01      	subs	r3, #1
    14b2:	4313      	orrs	r3, r2
    14b4:	f04f 0600 	mov.w	r6, #0
    14b8:	f04f 0200 	mov.w	r2, #0
    14bc:	bf0c      	ite	eq
    14be:	4b31      	ldreq	r3, [pc, #196]	; (1584 <__ieee754_pow+0x3cc>)
    14c0:	4b2d      	ldrne	r3, [pc, #180]	; (1578 <__ieee754_pow+0x3c0>)
    14c2:	4604      	mov	r4, r0
    14c4:	460d      	mov	r5, r1
    14c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    14ca:	e9cd 2300 	strd	r2, r3, [sp]
    14ce:	4632      	mov	r2, r6
    14d0:	463b      	mov	r3, r7
    14d2:	f7fe fe11 	bl	f8 <__aeabi_dsub>
    14d6:	4652      	mov	r2, sl
    14d8:	465b      	mov	r3, fp
    14da:	f7fe ffc5 	bl	468 <__aeabi_dmul>
    14de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    14e2:	4680      	mov	r8, r0
    14e4:	4689      	mov	r9, r1
    14e6:	4620      	mov	r0, r4
    14e8:	4629      	mov	r1, r5
    14ea:	f7fe ffbd 	bl	468 <__aeabi_dmul>
    14ee:	4602      	mov	r2, r0
    14f0:	460b      	mov	r3, r1
    14f2:	4640      	mov	r0, r8
    14f4:	4649      	mov	r1, r9
    14f6:	f7fe fe01 	bl	fc <__adddf3>
    14fa:	4632      	mov	r2, r6
    14fc:	463b      	mov	r3, r7
    14fe:	4680      	mov	r8, r0
    1500:	4689      	mov	r9, r1
    1502:	4650      	mov	r0, sl
    1504:	4659      	mov	r1, fp
    1506:	f7fe ffaf 	bl	468 <__aeabi_dmul>
    150a:	4604      	mov	r4, r0
    150c:	460d      	mov	r5, r1
    150e:	460b      	mov	r3, r1
    1510:	4602      	mov	r2, r0
    1512:	4649      	mov	r1, r9
    1514:	4640      	mov	r0, r8
    1516:	e9cd 4502 	strd	r4, r5, [sp, #8]
    151a:	f7fe fdef 	bl	fc <__adddf3>
    151e:	4b1a      	ldr	r3, [pc, #104]	; (1588 <__ieee754_pow+0x3d0>)
    1520:	4682      	mov	sl, r0
    1522:	4299      	cmp	r1, r3
    1524:	460f      	mov	r7, r1
    1526:	460e      	mov	r6, r1
    1528:	f340 82ed 	ble.w	1b06 <__ieee754_pow+0x94e>
    152c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    1530:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    1534:	4303      	orrs	r3, r0
    1536:	f000 81e7 	beq.w	1908 <__ieee754_pow+0x750>
    153a:	a30d      	add	r3, pc, #52	; (adr r3, 1570 <__ieee754_pow+0x3b8>)
    153c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1540:	e9dd 0100 	ldrd	r0, r1, [sp]
    1544:	f7fe ff90 	bl	468 <__aeabi_dmul>
    1548:	a309      	add	r3, pc, #36	; (adr r3, 1570 <__ieee754_pow+0x3b8>)
    154a:	e9d3 2300 	ldrd	r2, r3, [r3]
    154e:	e6cc      	b.n	12ea <__ieee754_pow+0x132>
    1550:	60000000 	.word	0x60000000
    1554:	3ff71547 	.word	0x3ff71547
    1558:	f85ddf44 	.word	0xf85ddf44
    155c:	3e54ae0b 	.word	0x3e54ae0b
    1560:	55555555 	.word	0x55555555
    1564:	3fd55555 	.word	0x3fd55555
    1568:	652b82fe 	.word	0x652b82fe
    156c:	3ff71547 	.word	0x3ff71547
    1570:	8800759c 	.word	0x8800759c
    1574:	7e37e43c 	.word	0x7e37e43c
    1578:	3ff00000 	.word	0x3ff00000
    157c:	3fd00000 	.word	0x3fd00000
    1580:	3fe00000 	.word	0x3fe00000
    1584:	bff00000 	.word	0xbff00000
    1588:	408fffff 	.word	0x408fffff
    158c:	4bd4      	ldr	r3, [pc, #848]	; (18e0 <__ieee754_pow+0x728>)
    158e:	2200      	movs	r2, #0
    1590:	ea09 0303 	and.w	r3, r9, r3
    1594:	b943      	cbnz	r3, 15a8 <__ieee754_pow+0x3f0>
    1596:	4658      	mov	r0, fp
    1598:	4661      	mov	r1, ip
    159a:	4bd2      	ldr	r3, [pc, #840]	; (18e4 <__ieee754_pow+0x72c>)
    159c:	f7fe ff64 	bl	468 <__aeabi_dmul>
    15a0:	f06f 0234 	mvn.w	r2, #52	; 0x34
    15a4:	4683      	mov	fp, r0
    15a6:	460c      	mov	r4, r1
    15a8:	1523      	asrs	r3, r4, #20
    15aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    15ae:	4413      	add	r3, r2
    15b0:	930b      	str	r3, [sp, #44]	; 0x2c
    15b2:	4bcd      	ldr	r3, [pc, #820]	; (18e8 <__ieee754_pow+0x730>)
    15b4:	f3c4 0413 	ubfx	r4, r4, #0, #20
    15b8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
    15bc:	429c      	cmp	r4, r3
    15be:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    15c2:	dd08      	ble.n	15d6 <__ieee754_pow+0x41e>
    15c4:	4bc9      	ldr	r3, [pc, #804]	; (18ec <__ieee754_pow+0x734>)
    15c6:	429c      	cmp	r4, r3
    15c8:	f340 819c 	ble.w	1904 <__ieee754_pow+0x74c>
    15cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    15ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
    15d2:	3301      	adds	r3, #1
    15d4:	930b      	str	r3, [sp, #44]	; 0x2c
    15d6:	2600      	movs	r6, #0
    15d8:	00f3      	lsls	r3, r6, #3
    15da:	930d      	str	r3, [sp, #52]	; 0x34
    15dc:	4bc4      	ldr	r3, [pc, #784]	; (18f0 <__ieee754_pow+0x738>)
    15de:	4658      	mov	r0, fp
    15e0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    15e4:	e9d3 3400 	ldrd	r3, r4, [r3]
    15e8:	4629      	mov	r1, r5
    15ea:	461a      	mov	r2, r3
    15ec:	e9cd 3408 	strd	r3, r4, [sp, #32]
    15f0:	4623      	mov	r3, r4
    15f2:	f7fe fd81 	bl	f8 <__aeabi_dsub>
    15f6:	46da      	mov	sl, fp
    15f8:	462b      	mov	r3, r5
    15fa:	4652      	mov	r2, sl
    15fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    1600:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    1604:	f7fe fd7a 	bl	fc <__adddf3>
    1608:	4602      	mov	r2, r0
    160a:	460b      	mov	r3, r1
    160c:	2000      	movs	r0, #0
    160e:	49b9      	ldr	r1, [pc, #740]	; (18f4 <__ieee754_pow+0x73c>)
    1610:	f7ff f854 	bl	6bc <__aeabi_ddiv>
    1614:	4602      	mov	r2, r0
    1616:	460b      	mov	r3, r1
    1618:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    161c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    1620:	f7fe ff22 	bl	468 <__aeabi_dmul>
    1624:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1628:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    162c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    1630:	2300      	movs	r3, #0
    1632:	2200      	movs	r2, #0
    1634:	46ab      	mov	fp, r5
    1636:	106d      	asrs	r5, r5, #1
    1638:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
    163c:	9304      	str	r3, [sp, #16]
    163e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
    1642:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    1646:	eb05 4386 	add.w	r3, r5, r6, lsl #18
    164a:	4640      	mov	r0, r8
    164c:	4649      	mov	r1, r9
    164e:	4614      	mov	r4, r2
    1650:	461d      	mov	r5, r3
    1652:	f7fe ff09 	bl	468 <__aeabi_dmul>
    1656:	4602      	mov	r2, r0
    1658:	460b      	mov	r3, r1
    165a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    165e:	f7fe fd4b 	bl	f8 <__aeabi_dsub>
    1662:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    1666:	4606      	mov	r6, r0
    1668:	460f      	mov	r7, r1
    166a:	4620      	mov	r0, r4
    166c:	4629      	mov	r1, r5
    166e:	f7fe fd43 	bl	f8 <__aeabi_dsub>
    1672:	4602      	mov	r2, r0
    1674:	460b      	mov	r3, r1
    1676:	4650      	mov	r0, sl
    1678:	4659      	mov	r1, fp
    167a:	f7fe fd3d 	bl	f8 <__aeabi_dsub>
    167e:	4642      	mov	r2, r8
    1680:	464b      	mov	r3, r9
    1682:	f7fe fef1 	bl	468 <__aeabi_dmul>
    1686:	4602      	mov	r2, r0
    1688:	460b      	mov	r3, r1
    168a:	4630      	mov	r0, r6
    168c:	4639      	mov	r1, r7
    168e:	f7fe fd33 	bl	f8 <__aeabi_dsub>
    1692:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1696:	f7fe fee7 	bl	468 <__aeabi_dmul>
    169a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    169e:	e9cd 0108 	strd	r0, r1, [sp, #32]
    16a2:	4610      	mov	r0, r2
    16a4:	4619      	mov	r1, r3
    16a6:	f7fe fedf 	bl	468 <__aeabi_dmul>
    16aa:	a37b      	add	r3, pc, #492	; (adr r3, 1898 <__ieee754_pow+0x6e0>)
    16ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    16b0:	4604      	mov	r4, r0
    16b2:	460d      	mov	r5, r1
    16b4:	f7fe fed8 	bl	468 <__aeabi_dmul>
    16b8:	a379      	add	r3, pc, #484	; (adr r3, 18a0 <__ieee754_pow+0x6e8>)
    16ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    16be:	f7fe fd1d 	bl	fc <__adddf3>
    16c2:	4622      	mov	r2, r4
    16c4:	462b      	mov	r3, r5
    16c6:	f7fe fecf 	bl	468 <__aeabi_dmul>
    16ca:	a377      	add	r3, pc, #476	; (adr r3, 18a8 <__ieee754_pow+0x6f0>)
    16cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    16d0:	f7fe fd14 	bl	fc <__adddf3>
    16d4:	4622      	mov	r2, r4
    16d6:	462b      	mov	r3, r5
    16d8:	f7fe fec6 	bl	468 <__aeabi_dmul>
    16dc:	a374      	add	r3, pc, #464	; (adr r3, 18b0 <__ieee754_pow+0x6f8>)
    16de:	e9d3 2300 	ldrd	r2, r3, [r3]
    16e2:	f7fe fd0b 	bl	fc <__adddf3>
    16e6:	4622      	mov	r2, r4
    16e8:	462b      	mov	r3, r5
    16ea:	f7fe febd 	bl	468 <__aeabi_dmul>
    16ee:	a372      	add	r3, pc, #456	; (adr r3, 18b8 <__ieee754_pow+0x700>)
    16f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    16f4:	f7fe fd02 	bl	fc <__adddf3>
    16f8:	4622      	mov	r2, r4
    16fa:	462b      	mov	r3, r5
    16fc:	f7fe feb4 	bl	468 <__aeabi_dmul>
    1700:	a36f      	add	r3, pc, #444	; (adr r3, 18c0 <__ieee754_pow+0x708>)
    1702:	e9d3 2300 	ldrd	r2, r3, [r3]
    1706:	f7fe fcf9 	bl	fc <__adddf3>
    170a:	4622      	mov	r2, r4
    170c:	4606      	mov	r6, r0
    170e:	460f      	mov	r7, r1
    1710:	462b      	mov	r3, r5
    1712:	4620      	mov	r0, r4
    1714:	4629      	mov	r1, r5
    1716:	f7fe fea7 	bl	468 <__aeabi_dmul>
    171a:	4602      	mov	r2, r0
    171c:	460b      	mov	r3, r1
    171e:	4630      	mov	r0, r6
    1720:	4639      	mov	r1, r7
    1722:	f7fe fea1 	bl	468 <__aeabi_dmul>
    1726:	4604      	mov	r4, r0
    1728:	460d      	mov	r5, r1
    172a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    172e:	4642      	mov	r2, r8
    1730:	464b      	mov	r3, r9
    1732:	f7fe fce3 	bl	fc <__adddf3>
    1736:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    173a:	f7fe fe95 	bl	468 <__aeabi_dmul>
    173e:	4622      	mov	r2, r4
    1740:	462b      	mov	r3, r5
    1742:	f7fe fcdb 	bl	fc <__adddf3>
    1746:	4642      	mov	r2, r8
    1748:	4606      	mov	r6, r0
    174a:	460f      	mov	r7, r1
    174c:	464b      	mov	r3, r9
    174e:	4640      	mov	r0, r8
    1750:	4649      	mov	r1, r9
    1752:	f7fe fe89 	bl	468 <__aeabi_dmul>
    1756:	2200      	movs	r2, #0
    1758:	4b67      	ldr	r3, [pc, #412]	; (18f8 <__ieee754_pow+0x740>)
    175a:	4682      	mov	sl, r0
    175c:	468b      	mov	fp, r1
    175e:	f7fe fccd 	bl	fc <__adddf3>
    1762:	4632      	mov	r2, r6
    1764:	463b      	mov	r3, r7
    1766:	f7fe fcc9 	bl	fc <__adddf3>
    176a:	2400      	movs	r4, #0
    176c:	460d      	mov	r5, r1
    176e:	4622      	mov	r2, r4
    1770:	460b      	mov	r3, r1
    1772:	4640      	mov	r0, r8
    1774:	4649      	mov	r1, r9
    1776:	f7fe fe77 	bl	468 <__aeabi_dmul>
    177a:	2200      	movs	r2, #0
    177c:	4680      	mov	r8, r0
    177e:	4689      	mov	r9, r1
    1780:	4620      	mov	r0, r4
    1782:	4629      	mov	r1, r5
    1784:	4b5c      	ldr	r3, [pc, #368]	; (18f8 <__ieee754_pow+0x740>)
    1786:	f7fe fcb7 	bl	f8 <__aeabi_dsub>
    178a:	4652      	mov	r2, sl
    178c:	465b      	mov	r3, fp
    178e:	f7fe fcb3 	bl	f8 <__aeabi_dsub>
    1792:	4602      	mov	r2, r0
    1794:	460b      	mov	r3, r1
    1796:	4630      	mov	r0, r6
    1798:	4639      	mov	r1, r7
    179a:	f7fe fcad 	bl	f8 <__aeabi_dsub>
    179e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    17a2:	f7fe fe61 	bl	468 <__aeabi_dmul>
    17a6:	4622      	mov	r2, r4
    17a8:	4606      	mov	r6, r0
    17aa:	460f      	mov	r7, r1
    17ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    17b0:	462b      	mov	r3, r5
    17b2:	f7fe fe59 	bl	468 <__aeabi_dmul>
    17b6:	4602      	mov	r2, r0
    17b8:	460b      	mov	r3, r1
    17ba:	4630      	mov	r0, r6
    17bc:	4639      	mov	r1, r7
    17be:	f7fe fc9d 	bl	fc <__adddf3>
    17c2:	2400      	movs	r4, #0
    17c4:	4606      	mov	r6, r0
    17c6:	460f      	mov	r7, r1
    17c8:	4602      	mov	r2, r0
    17ca:	460b      	mov	r3, r1
    17cc:	4640      	mov	r0, r8
    17ce:	4649      	mov	r1, r9
    17d0:	f7fe fc94 	bl	fc <__adddf3>
    17d4:	a33c      	add	r3, pc, #240	; (adr r3, 18c8 <__ieee754_pow+0x710>)
    17d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    17da:	4620      	mov	r0, r4
    17dc:	460d      	mov	r5, r1
    17de:	f7fe fe43 	bl	468 <__aeabi_dmul>
    17e2:	4642      	mov	r2, r8
    17e4:	464b      	mov	r3, r9
    17e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
    17ea:	4620      	mov	r0, r4
    17ec:	4629      	mov	r1, r5
    17ee:	f7fe fc83 	bl	f8 <__aeabi_dsub>
    17f2:	4602      	mov	r2, r0
    17f4:	460b      	mov	r3, r1
    17f6:	4630      	mov	r0, r6
    17f8:	4639      	mov	r1, r7
    17fa:	f7fe fc7d 	bl	f8 <__aeabi_dsub>
    17fe:	a334      	add	r3, pc, #208	; (adr r3, 18d0 <__ieee754_pow+0x718>)
    1800:	e9d3 2300 	ldrd	r2, r3, [r3]
    1804:	f7fe fe30 	bl	468 <__aeabi_dmul>
    1808:	a333      	add	r3, pc, #204	; (adr r3, 18d8 <__ieee754_pow+0x720>)
    180a:	e9d3 2300 	ldrd	r2, r3, [r3]
    180e:	4606      	mov	r6, r0
    1810:	460f      	mov	r7, r1
    1812:	4620      	mov	r0, r4
    1814:	4629      	mov	r1, r5
    1816:	f7fe fe27 	bl	468 <__aeabi_dmul>
    181a:	4602      	mov	r2, r0
    181c:	460b      	mov	r3, r1
    181e:	4630      	mov	r0, r6
    1820:	4639      	mov	r1, r7
    1822:	f7fe fc6b 	bl	fc <__adddf3>
    1826:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1828:	4b34      	ldr	r3, [pc, #208]	; (18fc <__ieee754_pow+0x744>)
    182a:	f04f 0a00 	mov.w	sl, #0
    182e:	4413      	add	r3, r2
    1830:	e9d3 2300 	ldrd	r2, r3, [r3]
    1834:	f7fe fc62 	bl	fc <__adddf3>
    1838:	4680      	mov	r8, r0
    183a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    183c:	4689      	mov	r9, r1
    183e:	f7fe fda9 	bl	394 <__aeabi_i2d>
    1842:	4604      	mov	r4, r0
    1844:	460d      	mov	r5, r1
    1846:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1848:	4b2d      	ldr	r3, [pc, #180]	; (1900 <__ieee754_pow+0x748>)
    184a:	4413      	add	r3, r2
    184c:	e9d3 6700 	ldrd	r6, r7, [r3]
    1850:	4642      	mov	r2, r8
    1852:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1856:	464b      	mov	r3, r9
    1858:	f7fe fc50 	bl	fc <__adddf3>
    185c:	4632      	mov	r2, r6
    185e:	463b      	mov	r3, r7
    1860:	f7fe fc4c 	bl	fc <__adddf3>
    1864:	4622      	mov	r2, r4
    1866:	462b      	mov	r3, r5
    1868:	f7fe fc48 	bl	fc <__adddf3>
    186c:	4622      	mov	r2, r4
    186e:	462b      	mov	r3, r5
    1870:	4650      	mov	r0, sl
    1872:	468b      	mov	fp, r1
    1874:	f7fe fc40 	bl	f8 <__aeabi_dsub>
    1878:	4632      	mov	r2, r6
    187a:	463b      	mov	r3, r7
    187c:	f7fe fc3c 	bl	f8 <__aeabi_dsub>
    1880:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1884:	f7fe fc38 	bl	f8 <__aeabi_dsub>
    1888:	4602      	mov	r2, r0
    188a:	460b      	mov	r3, r1
    188c:	4640      	mov	r0, r8
    188e:	4649      	mov	r1, r9
    1890:	e608      	b.n	14a4 <__ieee754_pow+0x2ec>
    1892:	bf00      	nop
    1894:	f3af 8000 	nop.w
    1898:	4a454eef 	.word	0x4a454eef
    189c:	3fca7e28 	.word	0x3fca7e28
    18a0:	93c9db65 	.word	0x93c9db65
    18a4:	3fcd864a 	.word	0x3fcd864a
    18a8:	a91d4101 	.word	0xa91d4101
    18ac:	3fd17460 	.word	0x3fd17460
    18b0:	518f264d 	.word	0x518f264d
    18b4:	3fd55555 	.word	0x3fd55555
    18b8:	db6fabff 	.word	0xdb6fabff
    18bc:	3fdb6db6 	.word	0x3fdb6db6
    18c0:	33333303 	.word	0x33333303
    18c4:	3fe33333 	.word	0x3fe33333
    18c8:	e0000000 	.word	0xe0000000
    18cc:	3feec709 	.word	0x3feec709
    18d0:	dc3a03fd 	.word	0xdc3a03fd
    18d4:	3feec709 	.word	0x3feec709
    18d8:	145b01f5 	.word	0x145b01f5
    18dc:	be3e2fe0 	.word	0xbe3e2fe0
    18e0:	7ff00000 	.word	0x7ff00000
    18e4:	43400000 	.word	0x43400000
    18e8:	0003988e 	.word	0x0003988e
    18ec:	000bb679 	.word	0x000bb679
    18f0:	00017840 	.word	0x00017840
    18f4:	3ff00000 	.word	0x3ff00000
    18f8:	40080000 	.word	0x40080000
    18fc:	00017860 	.word	0x00017860
    1900:	00017850 	.word	0x00017850
    1904:	2601      	movs	r6, #1
    1906:	e667      	b.n	15d8 <__ieee754_pow+0x420>
    1908:	a39d      	add	r3, pc, #628	; (adr r3, 1b80 <__ieee754_pow+0x9c8>)
    190a:	e9d3 2300 	ldrd	r2, r3, [r3]
    190e:	4640      	mov	r0, r8
    1910:	4649      	mov	r1, r9
    1912:	f7fe fbf3 	bl	fc <__adddf3>
    1916:	4622      	mov	r2, r4
    1918:	e9cd 0104 	strd	r0, r1, [sp, #16]
    191c:	462b      	mov	r3, r5
    191e:	4650      	mov	r0, sl
    1920:	4639      	mov	r1, r7
    1922:	f7fe fbe9 	bl	f8 <__aeabi_dsub>
    1926:	4602      	mov	r2, r0
    1928:	460b      	mov	r3, r1
    192a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    192e:	f7ff f82b 	bl	988 <__aeabi_dcmpgt>
    1932:	2800      	cmp	r0, #0
    1934:	f47f ae01 	bne.w	153a <__ieee754_pow+0x382>
    1938:	4aa5      	ldr	r2, [pc, #660]	; (1bd0 <__ieee754_pow+0xa18>)
    193a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
    193e:	4293      	cmp	r3, r2
    1940:	f340 8103 	ble.w	1b4a <__ieee754_pow+0x992>
    1944:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
    1948:	2000      	movs	r0, #0
    194a:	151b      	asrs	r3, r3, #20
    194c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    1950:	fa4a f303 	asr.w	r3, sl, r3
    1954:	4433      	add	r3, r6
    1956:	f3c3 520a 	ubfx	r2, r3, #20, #11
    195a:	4f9e      	ldr	r7, [pc, #632]	; (1bd4 <__ieee754_pow+0xa1c>)
    195c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    1960:	4117      	asrs	r7, r2
    1962:	f3c3 0a13 	ubfx	sl, r3, #0, #20
    1966:	ea23 0107 	bic.w	r1, r3, r7
    196a:	f1c2 0214 	rsb	r2, r2, #20
    196e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
    1972:	460b      	mov	r3, r1
    1974:	fa4a fa02 	asr.w	sl, sl, r2
    1978:	2e00      	cmp	r6, #0
    197a:	4602      	mov	r2, r0
    197c:	4629      	mov	r1, r5
    197e:	4620      	mov	r0, r4
    1980:	bfb8      	it	lt
    1982:	f1ca 0a00 	rsblt	sl, sl, #0
    1986:	f7fe fbb7 	bl	f8 <__aeabi_dsub>
    198a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    198e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1992:	2400      	movs	r4, #0
    1994:	4642      	mov	r2, r8
    1996:	464b      	mov	r3, r9
    1998:	f7fe fbb0 	bl	fc <__adddf3>
    199c:	a37a      	add	r3, pc, #488	; (adr r3, 1b88 <__ieee754_pow+0x9d0>)
    199e:	e9d3 2300 	ldrd	r2, r3, [r3]
    19a2:	4620      	mov	r0, r4
    19a4:	460d      	mov	r5, r1
    19a6:	f7fe fd5f 	bl	468 <__aeabi_dmul>
    19aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    19ae:	4606      	mov	r6, r0
    19b0:	460f      	mov	r7, r1
    19b2:	4620      	mov	r0, r4
    19b4:	4629      	mov	r1, r5
    19b6:	f7fe fb9f 	bl	f8 <__aeabi_dsub>
    19ba:	4602      	mov	r2, r0
    19bc:	460b      	mov	r3, r1
    19be:	4640      	mov	r0, r8
    19c0:	4649      	mov	r1, r9
    19c2:	f7fe fb99 	bl	f8 <__aeabi_dsub>
    19c6:	a372      	add	r3, pc, #456	; (adr r3, 1b90 <__ieee754_pow+0x9d8>)
    19c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    19cc:	f7fe fd4c 	bl	468 <__aeabi_dmul>
    19d0:	a371      	add	r3, pc, #452	; (adr r3, 1b98 <__ieee754_pow+0x9e0>)
    19d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    19d6:	4680      	mov	r8, r0
    19d8:	4689      	mov	r9, r1
    19da:	4620      	mov	r0, r4
    19dc:	4629      	mov	r1, r5
    19de:	f7fe fd43 	bl	468 <__aeabi_dmul>
    19e2:	4602      	mov	r2, r0
    19e4:	460b      	mov	r3, r1
    19e6:	4640      	mov	r0, r8
    19e8:	4649      	mov	r1, r9
    19ea:	f7fe fb87 	bl	fc <__adddf3>
    19ee:	4604      	mov	r4, r0
    19f0:	460d      	mov	r5, r1
    19f2:	4602      	mov	r2, r0
    19f4:	460b      	mov	r3, r1
    19f6:	4630      	mov	r0, r6
    19f8:	4639      	mov	r1, r7
    19fa:	f7fe fb7f 	bl	fc <__adddf3>
    19fe:	4632      	mov	r2, r6
    1a00:	463b      	mov	r3, r7
    1a02:	4680      	mov	r8, r0
    1a04:	4689      	mov	r9, r1
    1a06:	f7fe fb77 	bl	f8 <__aeabi_dsub>
    1a0a:	4602      	mov	r2, r0
    1a0c:	460b      	mov	r3, r1
    1a0e:	4620      	mov	r0, r4
    1a10:	4629      	mov	r1, r5
    1a12:	f7fe fb71 	bl	f8 <__aeabi_dsub>
    1a16:	4642      	mov	r2, r8
    1a18:	4606      	mov	r6, r0
    1a1a:	460f      	mov	r7, r1
    1a1c:	464b      	mov	r3, r9
    1a1e:	4640      	mov	r0, r8
    1a20:	4649      	mov	r1, r9
    1a22:	f7fe fd21 	bl	468 <__aeabi_dmul>
    1a26:	a35e      	add	r3, pc, #376	; (adr r3, 1ba0 <__ieee754_pow+0x9e8>)
    1a28:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a2c:	4604      	mov	r4, r0
    1a2e:	460d      	mov	r5, r1
    1a30:	f7fe fd1a 	bl	468 <__aeabi_dmul>
    1a34:	a35c      	add	r3, pc, #368	; (adr r3, 1ba8 <__ieee754_pow+0x9f0>)
    1a36:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a3a:	f7fe fb5d 	bl	f8 <__aeabi_dsub>
    1a3e:	4622      	mov	r2, r4
    1a40:	462b      	mov	r3, r5
    1a42:	f7fe fd11 	bl	468 <__aeabi_dmul>
    1a46:	a35a      	add	r3, pc, #360	; (adr r3, 1bb0 <__ieee754_pow+0x9f8>)
    1a48:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a4c:	f7fe fb56 	bl	fc <__adddf3>
    1a50:	4622      	mov	r2, r4
    1a52:	462b      	mov	r3, r5
    1a54:	f7fe fd08 	bl	468 <__aeabi_dmul>
    1a58:	a357      	add	r3, pc, #348	; (adr r3, 1bb8 <__ieee754_pow+0xa00>)
    1a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a5e:	f7fe fb4b 	bl	f8 <__aeabi_dsub>
    1a62:	4622      	mov	r2, r4
    1a64:	462b      	mov	r3, r5
    1a66:	f7fe fcff 	bl	468 <__aeabi_dmul>
    1a6a:	a355      	add	r3, pc, #340	; (adr r3, 1bc0 <__ieee754_pow+0xa08>)
    1a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a70:	f7fe fb44 	bl	fc <__adddf3>
    1a74:	4622      	mov	r2, r4
    1a76:	462b      	mov	r3, r5
    1a78:	f7fe fcf6 	bl	468 <__aeabi_dmul>
    1a7c:	4602      	mov	r2, r0
    1a7e:	460b      	mov	r3, r1
    1a80:	4640      	mov	r0, r8
    1a82:	4649      	mov	r1, r9
    1a84:	f7fe fb38 	bl	f8 <__aeabi_dsub>
    1a88:	4604      	mov	r4, r0
    1a8a:	460d      	mov	r5, r1
    1a8c:	4602      	mov	r2, r0
    1a8e:	460b      	mov	r3, r1
    1a90:	4640      	mov	r0, r8
    1a92:	4649      	mov	r1, r9
    1a94:	f7fe fce8 	bl	468 <__aeabi_dmul>
    1a98:	2200      	movs	r2, #0
    1a9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1a9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1aa2:	4620      	mov	r0, r4
    1aa4:	4629      	mov	r1, r5
    1aa6:	f7fe fb27 	bl	f8 <__aeabi_dsub>
    1aaa:	4602      	mov	r2, r0
    1aac:	460b      	mov	r3, r1
    1aae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1ab2:	f7fe fe03 	bl	6bc <__aeabi_ddiv>
    1ab6:	4632      	mov	r2, r6
    1ab8:	4604      	mov	r4, r0
    1aba:	460d      	mov	r5, r1
    1abc:	463b      	mov	r3, r7
    1abe:	4640      	mov	r0, r8
    1ac0:	4649      	mov	r1, r9
    1ac2:	f7fe fcd1 	bl	468 <__aeabi_dmul>
    1ac6:	4632      	mov	r2, r6
    1ac8:	463b      	mov	r3, r7
    1aca:	f7fe fb17 	bl	fc <__adddf3>
    1ace:	4602      	mov	r2, r0
    1ad0:	460b      	mov	r3, r1
    1ad2:	4620      	mov	r0, r4
    1ad4:	4629      	mov	r1, r5
    1ad6:	f7fe fb0f 	bl	f8 <__aeabi_dsub>
    1ada:	4642      	mov	r2, r8
    1adc:	464b      	mov	r3, r9
    1ade:	f7fe fb0b 	bl	f8 <__aeabi_dsub>
    1ae2:	4602      	mov	r2, r0
    1ae4:	460b      	mov	r3, r1
    1ae6:	2000      	movs	r0, #0
    1ae8:	493b      	ldr	r1, [pc, #236]	; (1bd8 <__ieee754_pow+0xa20>)
    1aea:	f7fe fb05 	bl	f8 <__aeabi_dsub>
    1aee:	eb01 540a 	add.w	r4, r1, sl, lsl #20
    1af2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    1af6:	da2b      	bge.n	1b50 <__ieee754_pow+0x998>
    1af8:	4652      	mov	r2, sl
    1afa:	f7ff fadd 	bl	10b8 <scalbn>
    1afe:	e9dd 2300 	ldrd	r2, r3, [sp]
    1b02:	f7ff bbf2 	b.w	12ea <__ieee754_pow+0x132>
    1b06:	4b35      	ldr	r3, [pc, #212]	; (1bdc <__ieee754_pow+0xa24>)
    1b08:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    1b0c:	429f      	cmp	r7, r3
    1b0e:	f77f af13 	ble.w	1938 <__ieee754_pow+0x780>
    1b12:	4b33      	ldr	r3, [pc, #204]	; (1be0 <__ieee754_pow+0xa28>)
    1b14:	440b      	add	r3, r1
    1b16:	4303      	orrs	r3, r0
    1b18:	d00b      	beq.n	1b32 <__ieee754_pow+0x97a>
    1b1a:	a32b      	add	r3, pc, #172	; (adr r3, 1bc8 <__ieee754_pow+0xa10>)
    1b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b20:	e9dd 0100 	ldrd	r0, r1, [sp]
    1b24:	f7fe fca0 	bl	468 <__aeabi_dmul>
    1b28:	a327      	add	r3, pc, #156	; (adr r3, 1bc8 <__ieee754_pow+0xa10>)
    1b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b2e:	f7ff bbdc 	b.w	12ea <__ieee754_pow+0x132>
    1b32:	4622      	mov	r2, r4
    1b34:	462b      	mov	r3, r5
    1b36:	f7fe fadf 	bl	f8 <__aeabi_dsub>
    1b3a:	4642      	mov	r2, r8
    1b3c:	464b      	mov	r3, r9
    1b3e:	f7fe ff19 	bl	974 <__aeabi_dcmpge>
    1b42:	2800      	cmp	r0, #0
    1b44:	f43f aef8 	beq.w	1938 <__ieee754_pow+0x780>
    1b48:	e7e7      	b.n	1b1a <__ieee754_pow+0x962>
    1b4a:	f04f 0a00 	mov.w	sl, #0
    1b4e:	e71e      	b.n	198e <__ieee754_pow+0x7d6>
    1b50:	4621      	mov	r1, r4
    1b52:	e7d4      	b.n	1afe <__ieee754_pow+0x946>
    1b54:	f04f 0b00 	mov.w	fp, #0
    1b58:	f8df c07c 	ldr.w	ip, [pc, #124]	; 1bd8 <__ieee754_pow+0xa20>
    1b5c:	f7ff bbb0 	b.w	12c0 <__ieee754_pow+0x108>
    1b60:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
    1b64:	f7ff bbac 	b.w	12c0 <__ieee754_pow+0x108>
    1b68:	4638      	mov	r0, r7
    1b6a:	4641      	mov	r1, r8
    1b6c:	f7ff bbbf 	b.w	12ee <__ieee754_pow+0x136>
    1b70:	9200      	str	r2, [sp, #0]
    1b72:	f7ff bb7f 	b.w	1274 <__ieee754_pow+0xbc>
    1b76:	2300      	movs	r3, #0
    1b78:	f7ff bb69 	b.w	124e <__ieee754_pow+0x96>
    1b7c:	f3af 8000 	nop.w
    1b80:	652b82fe 	.word	0x652b82fe
    1b84:	3c971547 	.word	0x3c971547
    1b88:	00000000 	.word	0x00000000
    1b8c:	3fe62e43 	.word	0x3fe62e43
    1b90:	fefa39ef 	.word	0xfefa39ef
    1b94:	3fe62e42 	.word	0x3fe62e42
    1b98:	0ca86c39 	.word	0x0ca86c39
    1b9c:	be205c61 	.word	0xbe205c61
    1ba0:	72bea4d0 	.word	0x72bea4d0
    1ba4:	3e663769 	.word	0x3e663769
    1ba8:	c5d26bf1 	.word	0xc5d26bf1
    1bac:	3ebbbd41 	.word	0x3ebbbd41
    1bb0:	af25de2c 	.word	0xaf25de2c
    1bb4:	3f11566a 	.word	0x3f11566a
    1bb8:	16bebd93 	.word	0x16bebd93
    1bbc:	3f66c16c 	.word	0x3f66c16c
    1bc0:	5555553e 	.word	0x5555553e
    1bc4:	3fc55555 	.word	0x3fc55555
    1bc8:	c2f8f359 	.word	0xc2f8f359
    1bcc:	01a56e1f 	.word	0x01a56e1f
    1bd0:	3fe00000 	.word	0x3fe00000
    1bd4:	000fffff 	.word	0x000fffff
    1bd8:	3ff00000 	.word	0x3ff00000
    1bdc:	4090cbff 	.word	0x4090cbff
    1be0:	3f6f3400 	.word	0x3f6f3400
    1be4:	00000000 	.word	0x00000000

00001be8 <_strtod_l>:
    1be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bec:	469b      	mov	fp, r3
    1bee:	2300      	movs	r3, #0
    1bf0:	b09f      	sub	sp, #124	; 0x7c
    1bf2:	931a      	str	r3, [sp, #104]	; 0x68
    1bf4:	4b9e      	ldr	r3, [pc, #632]	; (1e70 <_strtod_l+0x288>)
    1bf6:	4682      	mov	sl, r0
    1bf8:	681f      	ldr	r7, [r3, #0]
    1bfa:	460e      	mov	r6, r1
    1bfc:	4638      	mov	r0, r7
    1bfe:	9215      	str	r2, [sp, #84]	; 0x54
    1c00:	f7ff f936 	bl	e70 <strlen>
    1c04:	f04f 0800 	mov.w	r8, #0
    1c08:	4604      	mov	r4, r0
    1c0a:	f04f 0900 	mov.w	r9, #0
    1c0e:	9619      	str	r6, [sp, #100]	; 0x64
    1c10:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1c12:	781a      	ldrb	r2, [r3, #0]
    1c14:	2a2b      	cmp	r2, #43	; 0x2b
    1c16:	d04c      	beq.n	1cb2 <_strtod_l+0xca>
    1c18:	d83a      	bhi.n	1c90 <_strtod_l+0xa8>
    1c1a:	2a0d      	cmp	r2, #13
    1c1c:	d833      	bhi.n	1c86 <_strtod_l+0x9e>
    1c1e:	2a08      	cmp	r2, #8
    1c20:	d833      	bhi.n	1c8a <_strtod_l+0xa2>
    1c22:	2a00      	cmp	r2, #0
    1c24:	d03d      	beq.n	1ca2 <_strtod_l+0xba>
    1c26:	2300      	movs	r3, #0
    1c28:	930a      	str	r3, [sp, #40]	; 0x28
    1c2a:	9d19      	ldr	r5, [sp, #100]	; 0x64
    1c2c:	782b      	ldrb	r3, [r5, #0]
    1c2e:	2b30      	cmp	r3, #48	; 0x30
    1c30:	f040 80aa 	bne.w	1d88 <_strtod_l+0x1a0>
    1c34:	786b      	ldrb	r3, [r5, #1]
    1c36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    1c3a:	2b58      	cmp	r3, #88	; 0x58
    1c3c:	d166      	bne.n	1d0c <_strtod_l+0x124>
    1c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1c40:	4650      	mov	r0, sl
    1c42:	9301      	str	r3, [sp, #4]
    1c44:	ab1a      	add	r3, sp, #104	; 0x68
    1c46:	9300      	str	r3, [sp, #0]
    1c48:	4a8a      	ldr	r2, [pc, #552]	; (1e74 <_strtod_l+0x28c>)
    1c4a:	f8cd b008 	str.w	fp, [sp, #8]
    1c4e:	ab1b      	add	r3, sp, #108	; 0x6c
    1c50:	a919      	add	r1, sp, #100	; 0x64
    1c52:	f00e fc09 	bl	10468 <__gethex>
    1c56:	f010 0607 	ands.w	r6, r0, #7
    1c5a:	4604      	mov	r4, r0
    1c5c:	d005      	beq.n	1c6a <_strtod_l+0x82>
    1c5e:	2e06      	cmp	r6, #6
    1c60:	d129      	bne.n	1cb6 <_strtod_l+0xce>
    1c62:	2300      	movs	r3, #0
    1c64:	3501      	adds	r5, #1
    1c66:	9519      	str	r5, [sp, #100]	; 0x64
    1c68:	930a      	str	r3, [sp, #40]	; 0x28
    1c6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	f040 858a 	bne.w	2786 <CONFIG_MAIN_STACK_SIZE+0x7e6>
    1c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1c74:	b1d3      	cbz	r3, 1cac <_strtod_l+0xc4>
    1c76:	4642      	mov	r2, r8
    1c78:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
    1c7c:	4610      	mov	r0, r2
    1c7e:	4619      	mov	r1, r3
    1c80:	b01f      	add	sp, #124	; 0x7c
    1c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c86:	2a20      	cmp	r2, #32
    1c88:	d1cd      	bne.n	1c26 <_strtod_l+0x3e>
    1c8a:	3301      	adds	r3, #1
    1c8c:	9319      	str	r3, [sp, #100]	; 0x64
    1c8e:	e7bf      	b.n	1c10 <_strtod_l+0x28>
    1c90:	2a2d      	cmp	r2, #45	; 0x2d
    1c92:	d1c8      	bne.n	1c26 <_strtod_l+0x3e>
    1c94:	2201      	movs	r2, #1
    1c96:	920a      	str	r2, [sp, #40]	; 0x28
    1c98:	1c5a      	adds	r2, r3, #1
    1c9a:	9219      	str	r2, [sp, #100]	; 0x64
    1c9c:	785b      	ldrb	r3, [r3, #1]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d1c3      	bne.n	1c2a <_strtod_l+0x42>
    1ca2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1ca4:	9619      	str	r6, [sp, #100]	; 0x64
    1ca6:	2b00      	cmp	r3, #0
    1ca8:	f040 856b 	bne.w	2782 <CONFIG_MAIN_STACK_SIZE+0x7e2>
    1cac:	4642      	mov	r2, r8
    1cae:	464b      	mov	r3, r9
    1cb0:	e7e4      	b.n	1c7c <_strtod_l+0x94>
    1cb2:	2200      	movs	r2, #0
    1cb4:	e7ef      	b.n	1c96 <_strtod_l+0xae>
    1cb6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    1cb8:	b13a      	cbz	r2, 1cca <_strtod_l+0xe2>
    1cba:	2135      	movs	r1, #53	; 0x35
    1cbc:	a81c      	add	r0, sp, #112	; 0x70
    1cbe:	f015 fb67 	bl	17390 <__copybits>
    1cc2:	4650      	mov	r0, sl
    1cc4:	991a      	ldr	r1, [sp, #104]	; 0x68
    1cc6:	f00e fe8b 	bl	109e0 <_Bfree>
    1cca:	3e01      	subs	r6, #1
    1ccc:	2e04      	cmp	r6, #4
    1cce:	d806      	bhi.n	1cde <_strtod_l+0xf6>
    1cd0:	e8df f006 	tbb	[pc, r6]
    1cd4:	1714030a 	.word	0x1714030a
    1cd8:	0a          	.byte	0x0a
    1cd9:	00          	.byte	0x00
    1cda:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
    1cde:	0721      	lsls	r1, r4, #28
    1ce0:	d5c3      	bpl.n	1c6a <_strtod_l+0x82>
    1ce2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
    1ce6:	e7c0      	b.n	1c6a <_strtod_l+0x82>
    1ce8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    1cea:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
    1cee:	f202 4233 	addw	r2, r2, #1075	; 0x433
    1cf2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    1cf6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
    1cfa:	e7f0      	b.n	1cde <_strtod_l+0xf6>
    1cfc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 1e78 <_strtod_l+0x290>
    1d00:	e7ed      	b.n	1cde <_strtod_l+0xf6>
    1d02:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    1d06:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1d0a:	e7e8      	b.n	1cde <_strtod_l+0xf6>
    1d0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1d0e:	1c5a      	adds	r2, r3, #1
    1d10:	9219      	str	r2, [sp, #100]	; 0x64
    1d12:	785b      	ldrb	r3, [r3, #1]
    1d14:	2b30      	cmp	r3, #48	; 0x30
    1d16:	d0f9      	beq.n	1d0c <_strtod_l+0x124>
    1d18:	2b00      	cmp	r3, #0
    1d1a:	d0a6      	beq.n	1c6a <_strtod_l+0x82>
    1d1c:	2301      	movs	r3, #1
    1d1e:	9307      	str	r3, [sp, #28]
    1d20:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1d22:	220a      	movs	r2, #10
    1d24:	9308      	str	r3, [sp, #32]
    1d26:	2300      	movs	r3, #0
    1d28:	469b      	mov	fp, r3
    1d2a:	e9cd 3305 	strd	r3, r3, [sp, #20]
    1d2e:	9819      	ldr	r0, [sp, #100]	; 0x64
    1d30:	7805      	ldrb	r5, [r0, #0]
    1d32:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    1d36:	b2d9      	uxtb	r1, r3
    1d38:	2909      	cmp	r1, #9
    1d3a:	d927      	bls.n	1d8c <_strtod_l+0x1a4>
    1d3c:	4622      	mov	r2, r4
    1d3e:	4639      	mov	r1, r7
    1d40:	f015 f84a 	bl	16dd8 <strncmp>
    1d44:	2800      	cmp	r0, #0
    1d46:	d033      	beq.n	1db0 <_strtod_l+0x1c8>
    1d48:	2000      	movs	r0, #0
    1d4a:	462a      	mov	r2, r5
    1d4c:	465c      	mov	r4, fp
    1d4e:	4603      	mov	r3, r0
    1d50:	9004      	str	r0, [sp, #16]
    1d52:	2a65      	cmp	r2, #101	; 0x65
    1d54:	d001      	beq.n	1d5a <_strtod_l+0x172>
    1d56:	2a45      	cmp	r2, #69	; 0x45
    1d58:	d114      	bne.n	1d84 <_strtod_l+0x19c>
    1d5a:	b91c      	cbnz	r4, 1d64 <_strtod_l+0x17c>
    1d5c:	9a07      	ldr	r2, [sp, #28]
    1d5e:	4302      	orrs	r2, r0
    1d60:	d09f      	beq.n	1ca2 <_strtod_l+0xba>
    1d62:	2400      	movs	r4, #0
    1d64:	9e19      	ldr	r6, [sp, #100]	; 0x64
    1d66:	1c72      	adds	r2, r6, #1
    1d68:	9219      	str	r2, [sp, #100]	; 0x64
    1d6a:	7872      	ldrb	r2, [r6, #1]
    1d6c:	2a2b      	cmp	r2, #43	; 0x2b
    1d6e:	d079      	beq.n	1e64 <_strtod_l+0x27c>
    1d70:	2a2d      	cmp	r2, #45	; 0x2d
    1d72:	f000 8083 	beq.w	1e7c <_strtod_l+0x294>
    1d76:	2700      	movs	r7, #0
    1d78:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    1d7c:	2909      	cmp	r1, #9
    1d7e:	f240 8083 	bls.w	1e88 <_strtod_l+0x2a0>
    1d82:	9619      	str	r6, [sp, #100]	; 0x64
    1d84:	2500      	movs	r5, #0
    1d86:	e09f      	b.n	1ec8 <_strtod_l+0x2e0>
    1d88:	2300      	movs	r3, #0
    1d8a:	e7c8      	b.n	1d1e <_strtod_l+0x136>
    1d8c:	f1bb 0f08 	cmp.w	fp, #8
    1d90:	bfd5      	itete	le
    1d92:	9906      	ldrle	r1, [sp, #24]
    1d94:	9905      	ldrgt	r1, [sp, #20]
    1d96:	fb02 3301 	mlale	r3, r2, r1, r3
    1d9a:	fb02 3301 	mlagt	r3, r2, r1, r3
    1d9e:	f100 0001 	add.w	r0, r0, #1
    1da2:	bfd4      	ite	le
    1da4:	9306      	strle	r3, [sp, #24]
    1da6:	9305      	strgt	r3, [sp, #20]
    1da8:	f10b 0b01 	add.w	fp, fp, #1
    1dac:	9019      	str	r0, [sp, #100]	; 0x64
    1dae:	e7be      	b.n	1d2e <_strtod_l+0x146>
    1db0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1db2:	191a      	adds	r2, r3, r4
    1db4:	9219      	str	r2, [sp, #100]	; 0x64
    1db6:	5d1a      	ldrb	r2, [r3, r4]
    1db8:	f1bb 0f00 	cmp.w	fp, #0
    1dbc:	d036      	beq.n	1e2c <_strtod_l+0x244>
    1dbe:	465c      	mov	r4, fp
    1dc0:	9004      	str	r0, [sp, #16]
    1dc2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    1dc6:	2b09      	cmp	r3, #9
    1dc8:	d912      	bls.n	1df0 <_strtod_l+0x208>
    1dca:	2301      	movs	r3, #1
    1dcc:	e7c1      	b.n	1d52 <_strtod_l+0x16a>
    1dce:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1dd0:	3001      	adds	r0, #1
    1dd2:	1c5a      	adds	r2, r3, #1
    1dd4:	9219      	str	r2, [sp, #100]	; 0x64
    1dd6:	785a      	ldrb	r2, [r3, #1]
    1dd8:	2a30      	cmp	r2, #48	; 0x30
    1dda:	d0f8      	beq.n	1dce <_strtod_l+0x1e6>
    1ddc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
    1de0:	2b08      	cmp	r3, #8
    1de2:	f200 84d5 	bhi.w	2790 <CONFIG_MAIN_STACK_SIZE+0x7f0>
    1de6:	9004      	str	r0, [sp, #16]
    1de8:	2000      	movs	r0, #0
    1dea:	4604      	mov	r4, r0
    1dec:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1dee:	9308      	str	r3, [sp, #32]
    1df0:	3a30      	subs	r2, #48	; 0x30
    1df2:	f100 0301 	add.w	r3, r0, #1
    1df6:	d013      	beq.n	1e20 <_strtod_l+0x238>
    1df8:	9904      	ldr	r1, [sp, #16]
    1dfa:	1905      	adds	r5, r0, r4
    1dfc:	4419      	add	r1, r3
    1dfe:	9104      	str	r1, [sp, #16]
    1e00:	4623      	mov	r3, r4
    1e02:	210a      	movs	r1, #10
    1e04:	42ab      	cmp	r3, r5
    1e06:	d113      	bne.n	1e30 <_strtod_l+0x248>
    1e08:	1823      	adds	r3, r4, r0
    1e0a:	2b08      	cmp	r3, #8
    1e0c:	f104 0401 	add.w	r4, r4, #1
    1e10:	4404      	add	r4, r0
    1e12:	dc1b      	bgt.n	1e4c <_strtod_l+0x264>
    1e14:	230a      	movs	r3, #10
    1e16:	9906      	ldr	r1, [sp, #24]
    1e18:	fb03 2301 	mla	r3, r3, r1, r2
    1e1c:	9306      	str	r3, [sp, #24]
    1e1e:	2300      	movs	r3, #0
    1e20:	9a19      	ldr	r2, [sp, #100]	; 0x64
    1e22:	4618      	mov	r0, r3
    1e24:	1c51      	adds	r1, r2, #1
    1e26:	9119      	str	r1, [sp, #100]	; 0x64
    1e28:	7852      	ldrb	r2, [r2, #1]
    1e2a:	e7ca      	b.n	1dc2 <_strtod_l+0x1da>
    1e2c:	4658      	mov	r0, fp
    1e2e:	e7d3      	b.n	1dd8 <_strtod_l+0x1f0>
    1e30:	2b08      	cmp	r3, #8
    1e32:	dc04      	bgt.n	1e3e <_strtod_l+0x256>
    1e34:	9f06      	ldr	r7, [sp, #24]
    1e36:	434f      	muls	r7, r1
    1e38:	9706      	str	r7, [sp, #24]
    1e3a:	3301      	adds	r3, #1
    1e3c:	e7e2      	b.n	1e04 <_strtod_l+0x21c>
    1e3e:	1c5f      	adds	r7, r3, #1
    1e40:	2f10      	cmp	r7, #16
    1e42:	bfde      	ittt	le
    1e44:	9f05      	ldrle	r7, [sp, #20]
    1e46:	434f      	mulle	r7, r1
    1e48:	9705      	strle	r7, [sp, #20]
    1e4a:	e7f6      	b.n	1e3a <_strtod_l+0x252>
    1e4c:	2c10      	cmp	r4, #16
    1e4e:	bfdf      	itttt	le
    1e50:	230a      	movle	r3, #10
    1e52:	9905      	ldrle	r1, [sp, #20]
    1e54:	fb03 2301 	mlale	r3, r3, r1, r2
    1e58:	9305      	strle	r3, [sp, #20]
    1e5a:	e7e0      	b.n	1e1e <_strtod_l+0x236>
    1e5c:	2300      	movs	r3, #0
    1e5e:	9304      	str	r3, [sp, #16]
    1e60:	2301      	movs	r3, #1
    1e62:	e77b      	b.n	1d5c <_strtod_l+0x174>
    1e64:	2700      	movs	r7, #0
    1e66:	1cb2      	adds	r2, r6, #2
    1e68:	9219      	str	r2, [sp, #100]	; 0x64
    1e6a:	78b2      	ldrb	r2, [r6, #2]
    1e6c:	e784      	b.n	1d78 <_strtod_l+0x190>
    1e6e:	bf00      	nop
    1e70:	00017cd8 	.word	0x00017cd8
    1e74:	00017cb0 	.word	0x00017cb0
    1e78:	7ff00000 	.word	0x7ff00000
    1e7c:	2701      	movs	r7, #1
    1e7e:	e7f2      	b.n	1e66 <_strtod_l+0x27e>
    1e80:	9a19      	ldr	r2, [sp, #100]	; 0x64
    1e82:	1c51      	adds	r1, r2, #1
    1e84:	9119      	str	r1, [sp, #100]	; 0x64
    1e86:	7852      	ldrb	r2, [r2, #1]
    1e88:	2a30      	cmp	r2, #48	; 0x30
    1e8a:	d0f9      	beq.n	1e80 <_strtod_l+0x298>
    1e8c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
    1e90:	2908      	cmp	r1, #8
    1e92:	f63f af77 	bhi.w	1d84 <_strtod_l+0x19c>
    1e96:	f04f 0e0a 	mov.w	lr, #10
    1e9a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
    1e9e:	9a19      	ldr	r2, [sp, #100]	; 0x64
    1ea0:	9209      	str	r2, [sp, #36]	; 0x24
    1ea2:	9a19      	ldr	r2, [sp, #100]	; 0x64
    1ea4:	1c51      	adds	r1, r2, #1
    1ea6:	9119      	str	r1, [sp, #100]	; 0x64
    1ea8:	7852      	ldrb	r2, [r2, #1]
    1eaa:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
    1eae:	2d09      	cmp	r5, #9
    1eb0:	d935      	bls.n	1f1e <_strtod_l+0x336>
    1eb2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    1eb4:	1b49      	subs	r1, r1, r5
    1eb6:	2908      	cmp	r1, #8
    1eb8:	f644 651f 	movw	r5, #19999	; 0x4e1f
    1ebc:	dc02      	bgt.n	1ec4 <_strtod_l+0x2dc>
    1ebe:	4565      	cmp	r5, ip
    1ec0:	bfa8      	it	ge
    1ec2:	4665      	movge	r5, ip
    1ec4:	b107      	cbz	r7, 1ec8 <_strtod_l+0x2e0>
    1ec6:	426d      	negs	r5, r5
    1ec8:	2c00      	cmp	r4, #0
    1eca:	d14c      	bne.n	1f66 <_strtod_l+0x37e>
    1ecc:	9907      	ldr	r1, [sp, #28]
    1ece:	4301      	orrs	r1, r0
    1ed0:	f47f aecb 	bne.w	1c6a <_strtod_l+0x82>
    1ed4:	2b00      	cmp	r3, #0
    1ed6:	f47f aee4 	bne.w	1ca2 <_strtod_l+0xba>
    1eda:	2a69      	cmp	r2, #105	; 0x69
    1edc:	d026      	beq.n	1f2c <_strtod_l+0x344>
    1ede:	dc23      	bgt.n	1f28 <_strtod_l+0x340>
    1ee0:	2a49      	cmp	r2, #73	; 0x49
    1ee2:	d023      	beq.n	1f2c <_strtod_l+0x344>
    1ee4:	2a4e      	cmp	r2, #78	; 0x4e
    1ee6:	f47f aedc 	bne.w	1ca2 <_strtod_l+0xba>
    1eea:	499d      	ldr	r1, [pc, #628]	; (2160 <CONFIG_MAIN_STACK_SIZE+0x1c0>)
    1eec:	a819      	add	r0, sp, #100	; 0x64
    1eee:	f015 f8ef 	bl	170d0 <__match>
    1ef2:	2800      	cmp	r0, #0
    1ef4:	f43f aed5 	beq.w	1ca2 <_strtod_l+0xba>
    1ef8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1efa:	781b      	ldrb	r3, [r3, #0]
    1efc:	2b28      	cmp	r3, #40	; 0x28
    1efe:	d12c      	bne.n	1f5a <_strtod_l+0x372>
    1f00:	4998      	ldr	r1, [pc, #608]	; (2164 <CONFIG_MAIN_STACK_SIZE+0x1c4>)
    1f02:	aa1c      	add	r2, sp, #112	; 0x70
    1f04:	a819      	add	r0, sp, #100	; 0x64
    1f06:	f015 f8f7 	bl	170f8 <__hexnan>
    1f0a:	2805      	cmp	r0, #5
    1f0c:	d125      	bne.n	1f5a <_strtod_l+0x372>
    1f0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1f10:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
    1f14:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
    1f18:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
    1f1c:	e6a5      	b.n	1c6a <_strtod_l+0x82>
    1f1e:	fb0e 2c0c 	mla	ip, lr, ip, r2
    1f22:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
    1f26:	e7bc      	b.n	1ea2 <_strtod_l+0x2ba>
    1f28:	2a6e      	cmp	r2, #110	; 0x6e
    1f2a:	e7dc      	b.n	1ee6 <_strtod_l+0x2fe>
    1f2c:	498e      	ldr	r1, [pc, #568]	; (2168 <CONFIG_MAIN_STACK_SIZE+0x1c8>)
    1f2e:	a819      	add	r0, sp, #100	; 0x64
    1f30:	f015 f8ce 	bl	170d0 <__match>
    1f34:	2800      	cmp	r0, #0
    1f36:	f43f aeb4 	beq.w	1ca2 <_strtod_l+0xba>
    1f3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1f3c:	498b      	ldr	r1, [pc, #556]	; (216c <CONFIG_MAIN_STACK_SIZE+0x1cc>)
    1f3e:	3b01      	subs	r3, #1
    1f40:	a819      	add	r0, sp, #100	; 0x64
    1f42:	9319      	str	r3, [sp, #100]	; 0x64
    1f44:	f015 f8c4 	bl	170d0 <__match>
    1f48:	b910      	cbnz	r0, 1f50 <_strtod_l+0x368>
    1f4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1f4c:	3301      	adds	r3, #1
    1f4e:	9319      	str	r3, [sp, #100]	; 0x64
    1f50:	f04f 0800 	mov.w	r8, #0
    1f54:	f8df 9218 	ldr.w	r9, [pc, #536]	; 2170 <CONFIG_MAIN_STACK_SIZE+0x1d0>
    1f58:	e687      	b.n	1c6a <_strtod_l+0x82>
    1f5a:	4886      	ldr	r0, [pc, #536]	; (2174 <CONFIG_MAIN_STACK_SIZE+0x1d4>)
    1f5c:	f00b f99e 	bl	d29c <nan>
    1f60:	4680      	mov	r8, r0
    1f62:	4689      	mov	r9, r1
    1f64:	e681      	b.n	1c6a <_strtod_l+0x82>
    1f66:	9b04      	ldr	r3, [sp, #16]
    1f68:	f1bb 0f00 	cmp.w	fp, #0
    1f6c:	bf08      	it	eq
    1f6e:	46a3      	moveq	fp, r4
    1f70:	1aeb      	subs	r3, r5, r3
    1f72:	2c10      	cmp	r4, #16
    1f74:	9806      	ldr	r0, [sp, #24]
    1f76:	4626      	mov	r6, r4
    1f78:	9307      	str	r3, [sp, #28]
    1f7a:	bfa8      	it	ge
    1f7c:	2610      	movge	r6, #16
    1f7e:	f7fe f9f9 	bl	374 <__aeabi_ui2d>
    1f82:	2c09      	cmp	r4, #9
    1f84:	4680      	mov	r8, r0
    1f86:	4689      	mov	r9, r1
    1f88:	dd13      	ble.n	1fb2 <CONFIG_MAIN_STACK_SIZE+0x12>
    1f8a:	4b7b      	ldr	r3, [pc, #492]	; (2178 <CONFIG_MAIN_STACK_SIZE+0x1d8>)
    1f8c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    1f90:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    1f94:	f7fe fa68 	bl	468 <__aeabi_dmul>
    1f98:	4680      	mov	r8, r0
    1f9a:	9805      	ldr	r0, [sp, #20]
    1f9c:	4689      	mov	r9, r1
    1f9e:	f7fe f9e9 	bl	374 <__aeabi_ui2d>
    1fa2:	4602      	mov	r2, r0
    1fa4:	460b      	mov	r3, r1
    1fa6:	4640      	mov	r0, r8
    1fa8:	4649      	mov	r1, r9
    1faa:	f7fe f8a7 	bl	fc <__adddf3>
    1fae:	4680      	mov	r8, r0
    1fb0:	4689      	mov	r9, r1
    1fb2:	2c0f      	cmp	r4, #15
    1fb4:	dc36      	bgt.n	2024 <CONFIG_MAIN_STACK_SIZE+0x84>
    1fb6:	9b07      	ldr	r3, [sp, #28]
    1fb8:	2b00      	cmp	r3, #0
    1fba:	f43f ae56 	beq.w	1c6a <_strtod_l+0x82>
    1fbe:	dd22      	ble.n	2006 <CONFIG_MAIN_STACK_SIZE+0x66>
    1fc0:	2b16      	cmp	r3, #22
    1fc2:	dc09      	bgt.n	1fd8 <CONFIG_MAIN_STACK_SIZE+0x38>
    1fc4:	496c      	ldr	r1, [pc, #432]	; (2178 <CONFIG_MAIN_STACK_SIZE+0x1d8>)
    1fc6:	4642      	mov	r2, r8
    1fc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    1fcc:	464b      	mov	r3, r9
    1fce:	e9d1 0100 	ldrd	r0, r1, [r1]
    1fd2:	f7fe fa49 	bl	468 <__aeabi_dmul>
    1fd6:	e7c3      	b.n	1f60 <_strtod_l+0x378>
    1fd8:	9a07      	ldr	r2, [sp, #28]
    1fda:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
    1fde:	4293      	cmp	r3, r2
    1fe0:	db20      	blt.n	2024 <CONFIG_MAIN_STACK_SIZE+0x84>
    1fe2:	4d65      	ldr	r5, [pc, #404]	; (2178 <CONFIG_MAIN_STACK_SIZE+0x1d8>)
    1fe4:	f1c4 040f 	rsb	r4, r4, #15
    1fe8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
    1fec:	4642      	mov	r2, r8
    1fee:	e9d1 0100 	ldrd	r0, r1, [r1]
    1ff2:	464b      	mov	r3, r9
    1ff4:	f7fe fa38 	bl	468 <__aeabi_dmul>
    1ff8:	9b07      	ldr	r3, [sp, #28]
    1ffa:	1b1c      	subs	r4, r3, r4
    1ffc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
    2000:	e9d5 2300 	ldrd	r2, r3, [r5]
    2004:	e7e5      	b.n	1fd2 <CONFIG_MAIN_STACK_SIZE+0x32>
    2006:	9b07      	ldr	r3, [sp, #28]
    2008:	3316      	adds	r3, #22
    200a:	db0b      	blt.n	2024 <CONFIG_MAIN_STACK_SIZE+0x84>
    200c:	9b04      	ldr	r3, [sp, #16]
    200e:	4640      	mov	r0, r8
    2010:	1b5d      	subs	r5, r3, r5
    2012:	4b59      	ldr	r3, [pc, #356]	; (2178 <CONFIG_MAIN_STACK_SIZE+0x1d8>)
    2014:	4649      	mov	r1, r9
    2016:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    201a:	e9d5 2300 	ldrd	r2, r3, [r5]
    201e:	f7fe fb4d 	bl	6bc <__aeabi_ddiv>
    2022:	e79d      	b.n	1f60 <_strtod_l+0x378>
    2024:	9b07      	ldr	r3, [sp, #28]
    2026:	1ba6      	subs	r6, r4, r6
    2028:	441e      	add	r6, r3
    202a:	2e00      	cmp	r6, #0
    202c:	dd74      	ble.n	2118 <CONFIG_MAIN_STACK_SIZE+0x178>
    202e:	f016 030f 	ands.w	r3, r6, #15
    2032:	d00a      	beq.n	204a <CONFIG_MAIN_STACK_SIZE+0xaa>
    2034:	4950      	ldr	r1, [pc, #320]	; (2178 <CONFIG_MAIN_STACK_SIZE+0x1d8>)
    2036:	4642      	mov	r2, r8
    2038:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    203c:	e9d1 0100 	ldrd	r0, r1, [r1]
    2040:	464b      	mov	r3, r9
    2042:	f7fe fa11 	bl	468 <__aeabi_dmul>
    2046:	4680      	mov	r8, r0
    2048:	4689      	mov	r9, r1
    204a:	f036 060f 	bics.w	r6, r6, #15
    204e:	d052      	beq.n	20f6 <CONFIG_MAIN_STACK_SIZE+0x156>
    2050:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
    2054:	dd27      	ble.n	20a6 <CONFIG_MAIN_STACK_SIZE+0x106>
    2056:	f04f 0b00 	mov.w	fp, #0
    205a:	f8cd b010 	str.w	fp, [sp, #16]
    205e:	f8cd b020 	str.w	fp, [sp, #32]
    2062:	f8cd b018 	str.w	fp, [sp, #24]
    2066:	2322      	movs	r3, #34	; 0x22
    2068:	f04f 0800 	mov.w	r8, #0
    206c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 2170 <CONFIG_MAIN_STACK_SIZE+0x1d0>
    2070:	f8ca 3000 	str.w	r3, [sl]
    2074:	9b08      	ldr	r3, [sp, #32]
    2076:	2b00      	cmp	r3, #0
    2078:	f43f adf7 	beq.w	1c6a <_strtod_l+0x82>
    207c:	4650      	mov	r0, sl
    207e:	991a      	ldr	r1, [sp, #104]	; 0x68
    2080:	f00e fcae 	bl	109e0 <_Bfree>
    2084:	4650      	mov	r0, sl
    2086:	9906      	ldr	r1, [sp, #24]
    2088:	f00e fcaa 	bl	109e0 <_Bfree>
    208c:	4650      	mov	r0, sl
    208e:	9904      	ldr	r1, [sp, #16]
    2090:	f00e fca6 	bl	109e0 <_Bfree>
    2094:	4650      	mov	r0, sl
    2096:	9908      	ldr	r1, [sp, #32]
    2098:	f00e fca2 	bl	109e0 <_Bfree>
    209c:	4659      	mov	r1, fp
    209e:	4650      	mov	r0, sl
    20a0:	f00e fc9e 	bl	109e0 <_Bfree>
    20a4:	e5e1      	b.n	1c6a <_strtod_l+0x82>
    20a6:	4b35      	ldr	r3, [pc, #212]	; (217c <CONFIG_MAIN_STACK_SIZE+0x1dc>)
    20a8:	4640      	mov	r0, r8
    20aa:	9305      	str	r3, [sp, #20]
    20ac:	2300      	movs	r3, #0
    20ae:	4649      	mov	r1, r9
    20b0:	461f      	mov	r7, r3
    20b2:	1136      	asrs	r6, r6, #4
    20b4:	2e01      	cmp	r6, #1
    20b6:	dc21      	bgt.n	20fc <CONFIG_MAIN_STACK_SIZE+0x15c>
    20b8:	b10b      	cbz	r3, 20be <CONFIG_MAIN_STACK_SIZE+0x11e>
    20ba:	4680      	mov	r8, r0
    20bc:	4689      	mov	r9, r1
    20be:	4b2f      	ldr	r3, [pc, #188]	; (217c <CONFIG_MAIN_STACK_SIZE+0x1dc>)
    20c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
    20c4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
    20c8:	4642      	mov	r2, r8
    20ca:	e9d7 0100 	ldrd	r0, r1, [r7]
    20ce:	464b      	mov	r3, r9
    20d0:	f7fe f9ca 	bl	468 <__aeabi_dmul>
    20d4:	4b26      	ldr	r3, [pc, #152]	; (2170 <CONFIG_MAIN_STACK_SIZE+0x1d0>)
    20d6:	460a      	mov	r2, r1
    20d8:	400b      	ands	r3, r1
    20da:	4929      	ldr	r1, [pc, #164]	; (2180 <CONFIG_MAIN_STACK_SIZE+0x1e0>)
    20dc:	4680      	mov	r8, r0
    20de:	428b      	cmp	r3, r1
    20e0:	d8b9      	bhi.n	2056 <CONFIG_MAIN_STACK_SIZE+0xb6>
    20e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    20e6:	428b      	cmp	r3, r1
    20e8:	bf86      	itte	hi
    20ea:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
    20ee:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 2184 <CONFIG_MAIN_STACK_SIZE+0x1e4>
    20f2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
    20f6:	2300      	movs	r3, #0
    20f8:	9305      	str	r3, [sp, #20]
    20fa:	e07f      	b.n	21fc <CONFIG_MAIN_STACK_SIZE+0x25c>
    20fc:	07f2      	lsls	r2, r6, #31
    20fe:	d505      	bpl.n	210c <CONFIG_MAIN_STACK_SIZE+0x16c>
    2100:	9b05      	ldr	r3, [sp, #20]
    2102:	e9d3 2300 	ldrd	r2, r3, [r3]
    2106:	f7fe f9af 	bl	468 <__aeabi_dmul>
    210a:	2301      	movs	r3, #1
    210c:	9a05      	ldr	r2, [sp, #20]
    210e:	3701      	adds	r7, #1
    2110:	3208      	adds	r2, #8
    2112:	1076      	asrs	r6, r6, #1
    2114:	9205      	str	r2, [sp, #20]
    2116:	e7cd      	b.n	20b4 <CONFIG_MAIN_STACK_SIZE+0x114>
    2118:	d0ed      	beq.n	20f6 <CONFIG_MAIN_STACK_SIZE+0x156>
    211a:	4276      	negs	r6, r6
    211c:	f016 020f 	ands.w	r2, r6, #15
    2120:	d00a      	beq.n	2138 <CONFIG_MAIN_STACK_SIZE+0x198>
    2122:	4b15      	ldr	r3, [pc, #84]	; (2178 <CONFIG_MAIN_STACK_SIZE+0x1d8>)
    2124:	4640      	mov	r0, r8
    2126:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    212a:	4649      	mov	r1, r9
    212c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2130:	f7fe fac4 	bl	6bc <__aeabi_ddiv>
    2134:	4680      	mov	r8, r0
    2136:	4689      	mov	r9, r1
    2138:	1136      	asrs	r6, r6, #4
    213a:	d0dc      	beq.n	20f6 <CONFIG_MAIN_STACK_SIZE+0x156>
    213c:	2e1f      	cmp	r6, #31
    213e:	dd23      	ble.n	2188 <CONFIG_MAIN_STACK_SIZE+0x1e8>
    2140:	f04f 0b00 	mov.w	fp, #0
    2144:	f8cd b010 	str.w	fp, [sp, #16]
    2148:	f8cd b020 	str.w	fp, [sp, #32]
    214c:	f8cd b018 	str.w	fp, [sp, #24]
    2150:	2322      	movs	r3, #34	; 0x22
    2152:	f04f 0800 	mov.w	r8, #0
    2156:	f04f 0900 	mov.w	r9, #0
    215a:	f8ca 3000 	str.w	r3, [sl]
    215e:	e789      	b.n	2074 <CONFIG_MAIN_STACK_SIZE+0xd4>
    2160:	000188af 	.word	0x000188af
    2164:	00017cc4 	.word	0x00017cc4
    2168:	00018bf9 	.word	0x00018bf9
    216c:	00018ca5 	.word	0x00018ca5
    2170:	7ff00000 	.word	0x7ff00000
    2174:	00018987 	.word	0x00018987
    2178:	000178d0 	.word	0x000178d0
    217c:	000178a8 	.word	0x000178a8
    2180:	7ca00000 	.word	0x7ca00000
    2184:	7fefffff 	.word	0x7fefffff
    2188:	f016 0310 	ands.w	r3, r6, #16
    218c:	bf18      	it	ne
    218e:	236a      	movne	r3, #106	; 0x6a
    2190:	4640      	mov	r0, r8
    2192:	9305      	str	r3, [sp, #20]
    2194:	4649      	mov	r1, r9
    2196:	2300      	movs	r3, #0
    2198:	4fb0      	ldr	r7, [pc, #704]	; (245c <CONFIG_MAIN_STACK_SIZE+0x4bc>)
    219a:	07f2      	lsls	r2, r6, #31
    219c:	d504      	bpl.n	21a8 <CONFIG_MAIN_STACK_SIZE+0x208>
    219e:	e9d7 2300 	ldrd	r2, r3, [r7]
    21a2:	f7fe f961 	bl	468 <__aeabi_dmul>
    21a6:	2301      	movs	r3, #1
    21a8:	1076      	asrs	r6, r6, #1
    21aa:	f107 0708 	add.w	r7, r7, #8
    21ae:	d1f4      	bne.n	219a <CONFIG_MAIN_STACK_SIZE+0x1fa>
    21b0:	b10b      	cbz	r3, 21b6 <CONFIG_MAIN_STACK_SIZE+0x216>
    21b2:	4680      	mov	r8, r0
    21b4:	4689      	mov	r9, r1
    21b6:	9b05      	ldr	r3, [sp, #20]
    21b8:	b1c3      	cbz	r3, 21ec <CONFIG_MAIN_STACK_SIZE+0x24c>
    21ba:	f3c9 520a 	ubfx	r2, r9, #20, #11
    21be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    21c2:	2b00      	cmp	r3, #0
    21c4:	4649      	mov	r1, r9
    21c6:	dd11      	ble.n	21ec <CONFIG_MAIN_STACK_SIZE+0x24c>
    21c8:	2b1f      	cmp	r3, #31
    21ca:	f340 8127 	ble.w	241c <CONFIG_MAIN_STACK_SIZE+0x47c>
    21ce:	2b34      	cmp	r3, #52	; 0x34
    21d0:	bfd8      	it	le
    21d2:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
    21d6:	f04f 0800 	mov.w	r8, #0
    21da:	bfcf      	iteee	gt
    21dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
    21e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
    21e4:	fa03 f202 	lslle.w	r2, r3, r2
    21e8:	ea02 0901 	andle.w	r9, r2, r1
    21ec:	2200      	movs	r2, #0
    21ee:	2300      	movs	r3, #0
    21f0:	4640      	mov	r0, r8
    21f2:	4649      	mov	r1, r9
    21f4:	f7fe fba0 	bl	938 <__aeabi_dcmpeq>
    21f8:	2800      	cmp	r0, #0
    21fa:	d1a1      	bne.n	2140 <CONFIG_MAIN_STACK_SIZE+0x1a0>
    21fc:	9b06      	ldr	r3, [sp, #24]
    21fe:	465a      	mov	r2, fp
    2200:	9300      	str	r3, [sp, #0]
    2202:	4650      	mov	r0, sl
    2204:	4623      	mov	r3, r4
    2206:	9908      	ldr	r1, [sp, #32]
    2208:	f00e fc52 	bl	10ab0 <__s2b>
    220c:	9008      	str	r0, [sp, #32]
    220e:	2800      	cmp	r0, #0
    2210:	f43f af21 	beq.w	2056 <CONFIG_MAIN_STACK_SIZE+0xb6>
    2214:	9b04      	ldr	r3, [sp, #16]
    2216:	f04f 0b00 	mov.w	fp, #0
    221a:	1b5d      	subs	r5, r3, r5
    221c:	9b07      	ldr	r3, [sp, #28]
    221e:	f8cd b010 	str.w	fp, [sp, #16]
    2222:	2b00      	cmp	r3, #0
    2224:	bfb4      	ite	lt
    2226:	462b      	movlt	r3, r5
    2228:	2300      	movge	r3, #0
    222a:	930e      	str	r3, [sp, #56]	; 0x38
    222c:	9b07      	ldr	r3, [sp, #28]
    222e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    2232:	9314      	str	r3, [sp, #80]	; 0x50
    2234:	9b08      	ldr	r3, [sp, #32]
    2236:	4650      	mov	r0, sl
    2238:	6859      	ldr	r1, [r3, #4]
    223a:	f00e fb91 	bl	10960 <_Balloc>
    223e:	9006      	str	r0, [sp, #24]
    2240:	2800      	cmp	r0, #0
    2242:	f43f af10 	beq.w	2066 <CONFIG_MAIN_STACK_SIZE+0xc6>
    2246:	9b08      	ldr	r3, [sp, #32]
    2248:	300c      	adds	r0, #12
    224a:	691a      	ldr	r2, [r3, #16]
    224c:	f103 010c 	add.w	r1, r3, #12
    2250:	3202      	adds	r2, #2
    2252:	0092      	lsls	r2, r2, #2
    2254:	f014 fd12 	bl	16c7c <memcpy>
    2258:	ab1c      	add	r3, sp, #112	; 0x70
    225a:	9301      	str	r3, [sp, #4]
    225c:	ab1b      	add	r3, sp, #108	; 0x6c
    225e:	9300      	str	r3, [sp, #0]
    2260:	4642      	mov	r2, r8
    2262:	464b      	mov	r3, r9
    2264:	4650      	mov	r0, sl
    2266:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
    226a:	f00e fef9 	bl	11060 <__d2b>
    226e:	901a      	str	r0, [sp, #104]	; 0x68
    2270:	2800      	cmp	r0, #0
    2272:	f43f aef8 	beq.w	2066 <CONFIG_MAIN_STACK_SIZE+0xc6>
    2276:	2101      	movs	r1, #1
    2278:	4650      	mov	r0, sl
    227a:	f00e fc63 	bl	10b44 <__i2b>
    227e:	4603      	mov	r3, r0
    2280:	9004      	str	r0, [sp, #16]
    2282:	2800      	cmp	r0, #0
    2284:	f43f aeef 	beq.w	2066 <CONFIG_MAIN_STACK_SIZE+0xc6>
    2288:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
    228a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    228c:	2d00      	cmp	r5, #0
    228e:	bfab      	itete	ge
    2290:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
    2292:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
    2294:	18ee      	addge	r6, r5, r3
    2296:	1b5c      	sublt	r4, r3, r5
    2298:	9b05      	ldr	r3, [sp, #20]
    229a:	bfa8      	it	ge
    229c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
    229e:	eba5 0503 	sub.w	r5, r5, r3
    22a2:	4415      	add	r5, r2
    22a4:	4b6e      	ldr	r3, [pc, #440]	; (2460 <CONFIG_MAIN_STACK_SIZE+0x4c0>)
    22a6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
    22aa:	bfb8      	it	lt
    22ac:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
    22ae:	429d      	cmp	r5, r3
    22b0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    22b4:	f280 80c4 	bge.w	2440 <CONFIG_MAIN_STACK_SIZE+0x4a0>
    22b8:	1b5b      	subs	r3, r3, r5
    22ba:	2b1f      	cmp	r3, #31
    22bc:	f04f 0701 	mov.w	r7, #1
    22c0:	eba2 0203 	sub.w	r2, r2, r3
    22c4:	f300 80b1 	bgt.w	242a <CONFIG_MAIN_STACK_SIZE+0x48a>
    22c8:	2500      	movs	r5, #0
    22ca:	fa07 f303 	lsl.w	r3, r7, r3
    22ce:	930f      	str	r3, [sp, #60]	; 0x3c
    22d0:	18b7      	adds	r7, r6, r2
    22d2:	9b05      	ldr	r3, [sp, #20]
    22d4:	42be      	cmp	r6, r7
    22d6:	4414      	add	r4, r2
    22d8:	441c      	add	r4, r3
    22da:	4633      	mov	r3, r6
    22dc:	bfa8      	it	ge
    22de:	463b      	movge	r3, r7
    22e0:	42a3      	cmp	r3, r4
    22e2:	bfa8      	it	ge
    22e4:	4623      	movge	r3, r4
    22e6:	2b00      	cmp	r3, #0
    22e8:	bfc2      	ittt	gt
    22ea:	1aff      	subgt	r7, r7, r3
    22ec:	1ae4      	subgt	r4, r4, r3
    22ee:	1af6      	subgt	r6, r6, r3
    22f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    22f2:	2b00      	cmp	r3, #0
    22f4:	dd17      	ble.n	2326 <CONFIG_MAIN_STACK_SIZE+0x386>
    22f6:	461a      	mov	r2, r3
    22f8:	4650      	mov	r0, sl
    22fa:	9904      	ldr	r1, [sp, #16]
    22fc:	f00e fce0 	bl	10cc0 <__pow5mult>
    2300:	9004      	str	r0, [sp, #16]
    2302:	2800      	cmp	r0, #0
    2304:	f43f aeaf 	beq.w	2066 <CONFIG_MAIN_STACK_SIZE+0xc6>
    2308:	4601      	mov	r1, r0
    230a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    230c:	4650      	mov	r0, sl
    230e:	f00e fc2f 	bl	10b70 <__multiply>
    2312:	9009      	str	r0, [sp, #36]	; 0x24
    2314:	2800      	cmp	r0, #0
    2316:	f43f aea6 	beq.w	2066 <CONFIG_MAIN_STACK_SIZE+0xc6>
    231a:	4650      	mov	r0, sl
    231c:	991a      	ldr	r1, [sp, #104]	; 0x68
    231e:	f00e fb5f 	bl	109e0 <_Bfree>
    2322:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2324:	931a      	str	r3, [sp, #104]	; 0x68
    2326:	2f00      	cmp	r7, #0
    2328:	f300 808e 	bgt.w	2448 <CONFIG_MAIN_STACK_SIZE+0x4a8>
    232c:	9b07      	ldr	r3, [sp, #28]
    232e:	2b00      	cmp	r3, #0
    2330:	dd08      	ble.n	2344 <CONFIG_MAIN_STACK_SIZE+0x3a4>
    2332:	4650      	mov	r0, sl
    2334:	9a14      	ldr	r2, [sp, #80]	; 0x50
    2336:	9906      	ldr	r1, [sp, #24]
    2338:	f00e fcc2 	bl	10cc0 <__pow5mult>
    233c:	9006      	str	r0, [sp, #24]
    233e:	2800      	cmp	r0, #0
    2340:	f43f ae91 	beq.w	2066 <CONFIG_MAIN_STACK_SIZE+0xc6>
    2344:	2c00      	cmp	r4, #0
    2346:	dd08      	ble.n	235a <CONFIG_MAIN_STACK_SIZE+0x3ba>
    2348:	4622      	mov	r2, r4
    234a:	4650      	mov	r0, sl
    234c:	9906      	ldr	r1, [sp, #24]
    234e:	f00e fd11 	bl	10d74 <__lshift>
    2352:	9006      	str	r0, [sp, #24]
    2354:	2800      	cmp	r0, #0
    2356:	f43f ae86 	beq.w	2066 <CONFIG_MAIN_STACK_SIZE+0xc6>
    235a:	2e00      	cmp	r6, #0
    235c:	dd08      	ble.n	2370 <CONFIG_MAIN_STACK_SIZE+0x3d0>
    235e:	4632      	mov	r2, r6
    2360:	4650      	mov	r0, sl
    2362:	9904      	ldr	r1, [sp, #16]
    2364:	f00e fd06 	bl	10d74 <__lshift>
    2368:	9004      	str	r0, [sp, #16]
    236a:	2800      	cmp	r0, #0
    236c:	f43f ae7b 	beq.w	2066 <CONFIG_MAIN_STACK_SIZE+0xc6>
    2370:	4650      	mov	r0, sl
    2372:	9a06      	ldr	r2, [sp, #24]
    2374:	991a      	ldr	r1, [sp, #104]	; 0x68
    2376:	f00e fd6d 	bl	10e54 <__mdiff>
    237a:	4683      	mov	fp, r0
    237c:	2800      	cmp	r0, #0
    237e:	f43f ae72 	beq.w	2066 <CONFIG_MAIN_STACK_SIZE+0xc6>
    2382:	2400      	movs	r4, #0
    2384:	68c3      	ldr	r3, [r0, #12]
    2386:	9904      	ldr	r1, [sp, #16]
    2388:	60c4      	str	r4, [r0, #12]
    238a:	930b      	str	r3, [sp, #44]	; 0x2c
    238c:	f014 ffb7 	bl	172fe <__mcmp>
    2390:	42a0      	cmp	r0, r4
    2392:	da6b      	bge.n	246c <CONFIG_MAIN_STACK_SIZE+0x4cc>
    2394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2396:	ea53 0308 	orrs.w	r3, r3, r8
    239a:	f040 8091 	bne.w	24c0 <CONFIG_MAIN_STACK_SIZE+0x520>
    239e:	f3c9 0313 	ubfx	r3, r9, #0, #20
    23a2:	2b00      	cmp	r3, #0
    23a4:	f040 808c 	bne.w	24c0 <CONFIG_MAIN_STACK_SIZE+0x520>
    23a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    23ac:	0d1b      	lsrs	r3, r3, #20
    23ae:	051b      	lsls	r3, r3, #20
    23b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    23b4:	f240 8084 	bls.w	24c0 <CONFIG_MAIN_STACK_SIZE+0x520>
    23b8:	f8db 3014 	ldr.w	r3, [fp, #20]
    23bc:	b91b      	cbnz	r3, 23c6 <CONFIG_MAIN_STACK_SIZE+0x426>
    23be:	f8db 3010 	ldr.w	r3, [fp, #16]
    23c2:	2b01      	cmp	r3, #1
    23c4:	dd7c      	ble.n	24c0 <CONFIG_MAIN_STACK_SIZE+0x520>
    23c6:	4659      	mov	r1, fp
    23c8:	2201      	movs	r2, #1
    23ca:	4650      	mov	r0, sl
    23cc:	f00e fcd2 	bl	10d74 <__lshift>
    23d0:	9904      	ldr	r1, [sp, #16]
    23d2:	4683      	mov	fp, r0
    23d4:	f014 ff93 	bl	172fe <__mcmp>
    23d8:	2800      	cmp	r0, #0
    23da:	dd71      	ble.n	24c0 <CONFIG_MAIN_STACK_SIZE+0x520>
    23dc:	9905      	ldr	r1, [sp, #20]
    23de:	464b      	mov	r3, r9
    23e0:	4a20      	ldr	r2, [pc, #128]	; (2464 <CONFIG_MAIN_STACK_SIZE+0x4c4>)
    23e2:	2900      	cmp	r1, #0
    23e4:	f000 808c 	beq.w	2500 <CONFIG_MAIN_STACK_SIZE+0x560>
    23e8:	ea02 0109 	and.w	r1, r2, r9
    23ec:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
    23f0:	f300 8086 	bgt.w	2500 <CONFIG_MAIN_STACK_SIZE+0x560>
    23f4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
    23f8:	f77f aeaa 	ble.w	2150 <CONFIG_MAIN_STACK_SIZE+0x1b0>
    23fc:	4640      	mov	r0, r8
    23fe:	4649      	mov	r1, r9
    2400:	4b19      	ldr	r3, [pc, #100]	; (2468 <CONFIG_MAIN_STACK_SIZE+0x4c8>)
    2402:	2200      	movs	r2, #0
    2404:	f7fe f830 	bl	468 <__aeabi_dmul>
    2408:	460b      	mov	r3, r1
    240a:	4303      	orrs	r3, r0
    240c:	bf08      	it	eq
    240e:	2322      	moveq	r3, #34	; 0x22
    2410:	4680      	mov	r8, r0
    2412:	4689      	mov	r9, r1
    2414:	bf08      	it	eq
    2416:	f8ca 3000 	streq.w	r3, [sl]
    241a:	e62f      	b.n	207c <CONFIG_MAIN_STACK_SIZE+0xdc>
    241c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2420:	fa02 f303 	lsl.w	r3, r2, r3
    2424:	ea03 0808 	and.w	r8, r3, r8
    2428:	e6e0      	b.n	21ec <CONFIG_MAIN_STACK_SIZE+0x24c>
    242a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
    242e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
    2432:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
    2436:	35e2      	adds	r5, #226	; 0xe2
    2438:	fa07 f505 	lsl.w	r5, r7, r5
    243c:	970f      	str	r7, [sp, #60]	; 0x3c
    243e:	e747      	b.n	22d0 <CONFIG_MAIN_STACK_SIZE+0x330>
    2440:	2301      	movs	r3, #1
    2442:	2500      	movs	r5, #0
    2444:	930f      	str	r3, [sp, #60]	; 0x3c
    2446:	e743      	b.n	22d0 <CONFIG_MAIN_STACK_SIZE+0x330>
    2448:	463a      	mov	r2, r7
    244a:	4650      	mov	r0, sl
    244c:	991a      	ldr	r1, [sp, #104]	; 0x68
    244e:	f00e fc91 	bl	10d74 <__lshift>
    2452:	901a      	str	r0, [sp, #104]	; 0x68
    2454:	2800      	cmp	r0, #0
    2456:	f47f af69 	bne.w	232c <CONFIG_MAIN_STACK_SIZE+0x38c>
    245a:	e604      	b.n	2066 <CONFIG_MAIN_STACK_SIZE+0xc6>
    245c:	00017880 	.word	0x00017880
    2460:	fffffc02 	.word	0xfffffc02
    2464:	7ff00000 	.word	0x7ff00000
    2468:	39500000 	.word	0x39500000
    246c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    2470:	d165      	bne.n	253e <CONFIG_MAIN_STACK_SIZE+0x59e>
    2472:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2474:	f3c9 0313 	ubfx	r3, r9, #0, #20
    2478:	b35a      	cbz	r2, 24d2 <CONFIG_MAIN_STACK_SIZE+0x532>
    247a:	4a99      	ldr	r2, [pc, #612]	; (26e0 <CONFIG_MAIN_STACK_SIZE+0x740>)
    247c:	4293      	cmp	r3, r2
    247e:	d12b      	bne.n	24d8 <CONFIG_MAIN_STACK_SIZE+0x538>
    2480:	9b05      	ldr	r3, [sp, #20]
    2482:	4641      	mov	r1, r8
    2484:	b303      	cbz	r3, 24c8 <CONFIG_MAIN_STACK_SIZE+0x528>
    2486:	464a      	mov	r2, r9
    2488:	4b96      	ldr	r3, [pc, #600]	; (26e4 <CONFIG_MAIN_STACK_SIZE+0x744>)
    248a:	4013      	ands	r3, r2
    248c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    2490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2494:	d81b      	bhi.n	24ce <CONFIG_MAIN_STACK_SIZE+0x52e>
    2496:	0d1b      	lsrs	r3, r3, #20
    2498:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    249c:	fa02 f303 	lsl.w	r3, r2, r3
    24a0:	4299      	cmp	r1, r3
    24a2:	d119      	bne.n	24d8 <CONFIG_MAIN_STACK_SIZE+0x538>
    24a4:	4b90      	ldr	r3, [pc, #576]	; (26e8 <CONFIG_MAIN_STACK_SIZE+0x748>)
    24a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    24a8:	429a      	cmp	r2, r3
    24aa:	d102      	bne.n	24b2 <CONFIG_MAIN_STACK_SIZE+0x512>
    24ac:	3101      	adds	r1, #1
    24ae:	f43f adda 	beq.w	2066 <CONFIG_MAIN_STACK_SIZE+0xc6>
    24b2:	f04f 0800 	mov.w	r8, #0
    24b6:	4b8b      	ldr	r3, [pc, #556]	; (26e4 <CONFIG_MAIN_STACK_SIZE+0x744>)
    24b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    24ba:	401a      	ands	r2, r3
    24bc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
    24c0:	9b05      	ldr	r3, [sp, #20]
    24c2:	2b00      	cmp	r3, #0
    24c4:	d19a      	bne.n	23fc <CONFIG_MAIN_STACK_SIZE+0x45c>
    24c6:	e5d9      	b.n	207c <CONFIG_MAIN_STACK_SIZE+0xdc>
    24c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    24cc:	e7e8      	b.n	24a0 <CONFIG_MAIN_STACK_SIZE+0x500>
    24ce:	4613      	mov	r3, r2
    24d0:	e7e6      	b.n	24a0 <CONFIG_MAIN_STACK_SIZE+0x500>
    24d2:	ea53 0308 	orrs.w	r3, r3, r8
    24d6:	d081      	beq.n	23dc <CONFIG_MAIN_STACK_SIZE+0x43c>
    24d8:	b1e5      	cbz	r5, 2514 <CONFIG_MAIN_STACK_SIZE+0x574>
    24da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    24dc:	421d      	tst	r5, r3
    24de:	d0ef      	beq.n	24c0 <CONFIG_MAIN_STACK_SIZE+0x520>
    24e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    24e2:	4640      	mov	r0, r8
    24e4:	4649      	mov	r1, r9
    24e6:	9a05      	ldr	r2, [sp, #20]
    24e8:	b1c3      	cbz	r3, 251c <CONFIG_MAIN_STACK_SIZE+0x57c>
    24ea:	f014 fcbd 	bl	16e68 <sulp>
    24ee:	4602      	mov	r2, r0
    24f0:	460b      	mov	r3, r1
    24f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    24f6:	f7fd fe01 	bl	fc <__adddf3>
    24fa:	4680      	mov	r8, r0
    24fc:	4689      	mov	r9, r1
    24fe:	e7df      	b.n	24c0 <CONFIG_MAIN_STACK_SIZE+0x520>
    2500:	4013      	ands	r3, r2
    2502:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    2506:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    250a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    250e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    2512:	e7d5      	b.n	24c0 <CONFIG_MAIN_STACK_SIZE+0x520>
    2514:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2516:	ea13 0f08 	tst.w	r3, r8
    251a:	e7e0      	b.n	24de <CONFIG_MAIN_STACK_SIZE+0x53e>
    251c:	f014 fca4 	bl	16e68 <sulp>
    2520:	4602      	mov	r2, r0
    2522:	460b      	mov	r3, r1
    2524:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    2528:	f7fd fde6 	bl	f8 <__aeabi_dsub>
    252c:	2200      	movs	r2, #0
    252e:	2300      	movs	r3, #0
    2530:	4680      	mov	r8, r0
    2532:	4689      	mov	r9, r1
    2534:	f7fe fa00 	bl	938 <__aeabi_dcmpeq>
    2538:	2800      	cmp	r0, #0
    253a:	d0c1      	beq.n	24c0 <CONFIG_MAIN_STACK_SIZE+0x520>
    253c:	e608      	b.n	2150 <CONFIG_MAIN_STACK_SIZE+0x1b0>
    253e:	4658      	mov	r0, fp
    2540:	9904      	ldr	r1, [sp, #16]
    2542:	f014 fef7 	bl	17334 <__ratio>
    2546:	2200      	movs	r2, #0
    2548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    254c:	4606      	mov	r6, r0
    254e:	460f      	mov	r7, r1
    2550:	f7fe fa06 	bl	960 <__aeabi_dcmple>
    2554:	2800      	cmp	r0, #0
    2556:	d070      	beq.n	263a <CONFIG_MAIN_STACK_SIZE+0x69a>
    2558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    255a:	2b00      	cmp	r3, #0
    255c:	d042      	beq.n	25e4 <CONFIG_MAIN_STACK_SIZE+0x644>
    255e:	2600      	movs	r6, #0
    2560:	4f62      	ldr	r7, [pc, #392]	; (26ec <CONFIG_MAIN_STACK_SIZE+0x74c>)
    2562:	4d62      	ldr	r5, [pc, #392]	; (26ec <CONFIG_MAIN_STACK_SIZE+0x74c>)
    2564:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2566:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    256a:	0d1b      	lsrs	r3, r3, #20
    256c:	051b      	lsls	r3, r3, #20
    256e:	930f      	str	r3, [sp, #60]	; 0x3c
    2570:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2572:	4b5f      	ldr	r3, [pc, #380]	; (26f0 <CONFIG_MAIN_STACK_SIZE+0x750>)
    2574:	429a      	cmp	r2, r3
    2576:	f040 80c3 	bne.w	2700 <CONFIG_MAIN_STACK_SIZE+0x760>
    257a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    257c:	4640      	mov	r0, r8
    257e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
    2582:	4649      	mov	r1, r9
    2584:	f00e fcf2 	bl	10f6c <__ulp>
    2588:	4602      	mov	r2, r0
    258a:	460b      	mov	r3, r1
    258c:	4630      	mov	r0, r6
    258e:	4639      	mov	r1, r7
    2590:	f7fd ff6a 	bl	468 <__aeabi_dmul>
    2594:	4642      	mov	r2, r8
    2596:	464b      	mov	r3, r9
    2598:	f7fd fdb0 	bl	fc <__adddf3>
    259c:	460b      	mov	r3, r1
    259e:	4951      	ldr	r1, [pc, #324]	; (26e4 <CONFIG_MAIN_STACK_SIZE+0x744>)
    25a0:	4a54      	ldr	r2, [pc, #336]	; (26f4 <CONFIG_MAIN_STACK_SIZE+0x754>)
    25a2:	4019      	ands	r1, r3
    25a4:	4291      	cmp	r1, r2
    25a6:	4680      	mov	r8, r0
    25a8:	d95d      	bls.n	2666 <CONFIG_MAIN_STACK_SIZE+0x6c6>
    25aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    25ac:	4b4e      	ldr	r3, [pc, #312]	; (26e8 <CONFIG_MAIN_STACK_SIZE+0x748>)
    25ae:	429a      	cmp	r2, r3
    25b0:	d103      	bne.n	25ba <CONFIG_MAIN_STACK_SIZE+0x61a>
    25b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    25b4:	3301      	adds	r3, #1
    25b6:	f43f ad56 	beq.w	2066 <CONFIG_MAIN_STACK_SIZE+0xc6>
    25ba:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    25be:	f8df 9128 	ldr.w	r9, [pc, #296]	; 26e8 <CONFIG_MAIN_STACK_SIZE+0x748>
    25c2:	4650      	mov	r0, sl
    25c4:	991a      	ldr	r1, [sp, #104]	; 0x68
    25c6:	f00e fa0b 	bl	109e0 <_Bfree>
    25ca:	4650      	mov	r0, sl
    25cc:	9906      	ldr	r1, [sp, #24]
    25ce:	f00e fa07 	bl	109e0 <_Bfree>
    25d2:	4650      	mov	r0, sl
    25d4:	9904      	ldr	r1, [sp, #16]
    25d6:	f00e fa03 	bl	109e0 <_Bfree>
    25da:	4659      	mov	r1, fp
    25dc:	4650      	mov	r0, sl
    25de:	f00e f9ff 	bl	109e0 <_Bfree>
    25e2:	e627      	b.n	2234 <CONFIG_MAIN_STACK_SIZE+0x294>
    25e4:	f1b8 0f00 	cmp.w	r8, #0
    25e8:	d119      	bne.n	261e <CONFIG_MAIN_STACK_SIZE+0x67e>
    25ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
    25f0:	b9e3      	cbnz	r3, 262c <CONFIG_MAIN_STACK_SIZE+0x68c>
    25f2:	2200      	movs	r2, #0
    25f4:	4630      	mov	r0, r6
    25f6:	4639      	mov	r1, r7
    25f8:	4b3c      	ldr	r3, [pc, #240]	; (26ec <CONFIG_MAIN_STACK_SIZE+0x74c>)
    25fa:	f7fe f9a7 	bl	94c <__aeabi_dcmplt>
    25fe:	b9c8      	cbnz	r0, 2634 <CONFIG_MAIN_STACK_SIZE+0x694>
    2600:	2200      	movs	r2, #0
    2602:	4630      	mov	r0, r6
    2604:	4639      	mov	r1, r7
    2606:	4b3c      	ldr	r3, [pc, #240]	; (26f8 <CONFIG_MAIN_STACK_SIZE+0x758>)
    2608:	f7fd ff2e 	bl	468 <__aeabi_dmul>
    260c:	4604      	mov	r4, r0
    260e:	460d      	mov	r5, r1
    2610:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    2614:	9416      	str	r4, [sp, #88]	; 0x58
    2616:	9317      	str	r3, [sp, #92]	; 0x5c
    2618:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    261c:	e7a2      	b.n	2564 <CONFIG_MAIN_STACK_SIZE+0x5c4>
    261e:	f1b8 0f01 	cmp.w	r8, #1
    2622:	d103      	bne.n	262c <CONFIG_MAIN_STACK_SIZE+0x68c>
    2624:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2626:	2b00      	cmp	r3, #0
    2628:	f43f ad92 	beq.w	2150 <CONFIG_MAIN_STACK_SIZE+0x1b0>
    262c:	2600      	movs	r6, #0
    262e:	2400      	movs	r4, #0
    2630:	4f32      	ldr	r7, [pc, #200]	; (26fc <CONFIG_MAIN_STACK_SIZE+0x75c>)
    2632:	e796      	b.n	2562 <CONFIG_MAIN_STACK_SIZE+0x5c2>
    2634:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    2636:	4d30      	ldr	r5, [pc, #192]	; (26f8 <CONFIG_MAIN_STACK_SIZE+0x758>)
    2638:	e7ea      	b.n	2610 <CONFIG_MAIN_STACK_SIZE+0x670>
    263a:	4b2f      	ldr	r3, [pc, #188]	; (26f8 <CONFIG_MAIN_STACK_SIZE+0x758>)
    263c:	2200      	movs	r2, #0
    263e:	4630      	mov	r0, r6
    2640:	4639      	mov	r1, r7
    2642:	f7fd ff11 	bl	468 <__aeabi_dmul>
    2646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2648:	4604      	mov	r4, r0
    264a:	460d      	mov	r5, r1
    264c:	b933      	cbnz	r3, 265c <CONFIG_MAIN_STACK_SIZE+0x6bc>
    264e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    2652:	9010      	str	r0, [sp, #64]	; 0x40
    2654:	9311      	str	r3, [sp, #68]	; 0x44
    2656:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    265a:	e783      	b.n	2564 <CONFIG_MAIN_STACK_SIZE+0x5c4>
    265c:	4602      	mov	r2, r0
    265e:	460b      	mov	r3, r1
    2660:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    2664:	e7f7      	b.n	2656 <CONFIG_MAIN_STACK_SIZE+0x6b6>
    2666:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
    266a:	9b05      	ldr	r3, [sp, #20]
    266c:	2b00      	cmp	r3, #0
    266e:	d1a8      	bne.n	25c2 <CONFIG_MAIN_STACK_SIZE+0x622>
    2670:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    2674:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2676:	0d1b      	lsrs	r3, r3, #20
    2678:	051b      	lsls	r3, r3, #20
    267a:	429a      	cmp	r2, r3
    267c:	d1a1      	bne.n	25c2 <CONFIG_MAIN_STACK_SIZE+0x622>
    267e:	4620      	mov	r0, r4
    2680:	4629      	mov	r1, r5
    2682:	f7fe fa7f 	bl	b84 <__aeabi_d2lz>
    2686:	f7fd fec1 	bl	40c <__aeabi_l2d>
    268a:	4602      	mov	r2, r0
    268c:	460b      	mov	r3, r1
    268e:	4620      	mov	r0, r4
    2690:	4629      	mov	r1, r5
    2692:	f7fd fd31 	bl	f8 <__aeabi_dsub>
    2696:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2698:	f3c9 0313 	ubfx	r3, r9, #0, #20
    269c:	ea43 0308 	orr.w	r3, r3, r8
    26a0:	4313      	orrs	r3, r2
    26a2:	4604      	mov	r4, r0
    26a4:	460d      	mov	r5, r1
    26a6:	d066      	beq.n	2776 <CONFIG_MAIN_STACK_SIZE+0x7d6>
    26a8:	a309      	add	r3, pc, #36	; (adr r3, 26d0 <CONFIG_MAIN_STACK_SIZE+0x730>)
    26aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    26ae:	f7fe f94d 	bl	94c <__aeabi_dcmplt>
    26b2:	2800      	cmp	r0, #0
    26b4:	f47f ace2 	bne.w	207c <CONFIG_MAIN_STACK_SIZE+0xdc>
    26b8:	a307      	add	r3, pc, #28	; (adr r3, 26d8 <CONFIG_MAIN_STACK_SIZE+0x738>)
    26ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    26be:	4620      	mov	r0, r4
    26c0:	4629      	mov	r1, r5
    26c2:	f7fe f961 	bl	988 <__aeabi_dcmpgt>
    26c6:	2800      	cmp	r0, #0
    26c8:	f43f af7b 	beq.w	25c2 <CONFIG_MAIN_STACK_SIZE+0x622>
    26cc:	e4d6      	b.n	207c <CONFIG_MAIN_STACK_SIZE+0xdc>
    26ce:	bf00      	nop
    26d0:	94a03595 	.word	0x94a03595
    26d4:	3fdfffff 	.word	0x3fdfffff
    26d8:	35afe535 	.word	0x35afe535
    26dc:	3fe00000 	.word	0x3fe00000
    26e0:	000fffff 	.word	0x000fffff
    26e4:	7ff00000 	.word	0x7ff00000
    26e8:	7fefffff 	.word	0x7fefffff
    26ec:	3ff00000 	.word	0x3ff00000
    26f0:	7fe00000 	.word	0x7fe00000
    26f4:	7c9fffff 	.word	0x7c9fffff
    26f8:	3fe00000 	.word	0x3fe00000
    26fc:	bff00000 	.word	0xbff00000
    2700:	9b05      	ldr	r3, [sp, #20]
    2702:	b313      	cbz	r3, 274a <CONFIG_MAIN_STACK_SIZE+0x7aa>
    2704:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2706:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    270a:	d81e      	bhi.n	274a <CONFIG_MAIN_STACK_SIZE+0x7aa>
    270c:	a326      	add	r3, pc, #152	; (adr r3, 27a8 <CONFIG_MAIN_STACK_SIZE+0x808>)
    270e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2712:	4620      	mov	r0, r4
    2714:	4629      	mov	r1, r5
    2716:	f7fe f923 	bl	960 <__aeabi_dcmple>
    271a:	b190      	cbz	r0, 2742 <CONFIG_MAIN_STACK_SIZE+0x7a2>
    271c:	4629      	mov	r1, r5
    271e:	4620      	mov	r0, r4
    2720:	f7fe f9c4 	bl	aac <__aeabi_d2uiz>
    2724:	2801      	cmp	r0, #1
    2726:	bf38      	it	cc
    2728:	2001      	movcc	r0, #1
    272a:	f7fd fe23 	bl	374 <__aeabi_ui2d>
    272e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2730:	4604      	mov	r4, r0
    2732:	460d      	mov	r5, r1
    2734:	b9d3      	cbnz	r3, 276c <CONFIG_MAIN_STACK_SIZE+0x7cc>
    2736:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    273a:	9012      	str	r0, [sp, #72]	; 0x48
    273c:	9313      	str	r3, [sp, #76]	; 0x4c
    273e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    2742:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2744:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
    2748:	1a9f      	subs	r7, r3, r2
    274a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    274e:	f00e fc0d 	bl	10f6c <__ulp>
    2752:	4602      	mov	r2, r0
    2754:	460b      	mov	r3, r1
    2756:	4630      	mov	r0, r6
    2758:	4639      	mov	r1, r7
    275a:	f7fd fe85 	bl	468 <__aeabi_dmul>
    275e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    2762:	f7fd fccb 	bl	fc <__adddf3>
    2766:	4680      	mov	r8, r0
    2768:	4689      	mov	r9, r1
    276a:	e77e      	b.n	266a <CONFIG_MAIN_STACK_SIZE+0x6ca>
    276c:	4602      	mov	r2, r0
    276e:	460b      	mov	r3, r1
    2770:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    2774:	e7e3      	b.n	273e <CONFIG_MAIN_STACK_SIZE+0x79e>
    2776:	a30e      	add	r3, pc, #56	; (adr r3, 27b0 <CONFIG_MAIN_STACK_SIZE+0x810>)
    2778:	e9d3 2300 	ldrd	r2, r3, [r3]
    277c:	f7fe f8e6 	bl	94c <__aeabi_dcmplt>
    2780:	e7a1      	b.n	26c6 <CONFIG_MAIN_STACK_SIZE+0x726>
    2782:	2300      	movs	r3, #0
    2784:	930a      	str	r3, [sp, #40]	; 0x28
    2786:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2788:	9a15      	ldr	r2, [sp, #84]	; 0x54
    278a:	6013      	str	r3, [r2, #0]
    278c:	f7ff ba71 	b.w	1c72 <_strtod_l+0x8a>
    2790:	2a65      	cmp	r2, #101	; 0x65
    2792:	f43f ab63 	beq.w	1e5c <_strtod_l+0x274>
    2796:	2a45      	cmp	r2, #69	; 0x45
    2798:	f43f ab60 	beq.w	1e5c <_strtod_l+0x274>
    279c:	2301      	movs	r3, #1
    279e:	f7ff bb95 	b.w	1ecc <_strtod_l+0x2e4>
    27a2:	bf00      	nop
    27a4:	f3af 8000 	nop.w
    27a8:	ffc00000 	.word	0xffc00000
    27ac:	41dfffff 	.word	0x41dfffff
    27b0:	94a03595 	.word	0x94a03595
    27b4:	3fcfffff 	.word	0x3fcfffff

000027b8 <_dtoa_r>:
    27b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27bc:	4616      	mov	r6, r2
    27be:	461f      	mov	r7, r3
    27c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
    27c2:	b099      	sub	sp, #100	; 0x64
    27c4:	4605      	mov	r5, r0
    27c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
    27ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    27ce:	b974      	cbnz	r4, 27ee <_dtoa_r+0x36>
    27d0:	2010      	movs	r0, #16
    27d2:	f00a ffe1 	bl	d798 <malloc>
    27d6:	4602      	mov	r2, r0
    27d8:	6268      	str	r0, [r5, #36]	; 0x24
    27da:	b920      	cbnz	r0, 27e6 <_dtoa_r+0x2e>
    27dc:	21ea      	movs	r1, #234	; 0xea
    27de:	4ba8      	ldr	r3, [pc, #672]	; (2a80 <_dtoa_r+0x2c8>)
    27e0:	48a8      	ldr	r0, [pc, #672]	; (2a84 <_dtoa_r+0x2cc>)
    27e2:	f00d fca7 	bl	10134 <__assert_func>
    27e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
    27ea:	6004      	str	r4, [r0, #0]
    27ec:	60c4      	str	r4, [r0, #12]
    27ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    27f0:	6819      	ldr	r1, [r3, #0]
    27f2:	b151      	cbz	r1, 280a <_dtoa_r+0x52>
    27f4:	685a      	ldr	r2, [r3, #4]
    27f6:	2301      	movs	r3, #1
    27f8:	4093      	lsls	r3, r2
    27fa:	604a      	str	r2, [r1, #4]
    27fc:	608b      	str	r3, [r1, #8]
    27fe:	4628      	mov	r0, r5
    2800:	f00e f8ee 	bl	109e0 <_Bfree>
    2804:	2200      	movs	r2, #0
    2806:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2808:	601a      	str	r2, [r3, #0]
    280a:	1e3b      	subs	r3, r7, #0
    280c:	bfaf      	iteee	ge
    280e:	2300      	movge	r3, #0
    2810:	2201      	movlt	r2, #1
    2812:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    2816:	9305      	strlt	r3, [sp, #20]
    2818:	bfa8      	it	ge
    281a:	f8c8 3000 	strge.w	r3, [r8]
    281e:	f8dd 9014 	ldr.w	r9, [sp, #20]
    2822:	4b99      	ldr	r3, [pc, #612]	; (2a88 <_dtoa_r+0x2d0>)
    2824:	bfb8      	it	lt
    2826:	f8c8 2000 	strlt.w	r2, [r8]
    282a:	ea33 0309 	bics.w	r3, r3, r9
    282e:	d119      	bne.n	2864 <_dtoa_r+0xac>
    2830:	f242 730f 	movw	r3, #9999	; 0x270f
    2834:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2836:	6013      	str	r3, [r2, #0]
    2838:	f3c9 0313 	ubfx	r3, r9, #0, #20
    283c:	4333      	orrs	r3, r6
    283e:	f000 857f 	beq.w	3340 <_dtoa_r+0xb88>
    2842:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2844:	b953      	cbnz	r3, 285c <_dtoa_r+0xa4>
    2846:	4b91      	ldr	r3, [pc, #580]	; (2a8c <_dtoa_r+0x2d4>)
    2848:	e022      	b.n	2890 <_dtoa_r+0xd8>
    284a:	4b91      	ldr	r3, [pc, #580]	; (2a90 <_dtoa_r+0x2d8>)
    284c:	9303      	str	r3, [sp, #12]
    284e:	3308      	adds	r3, #8
    2850:	9a26      	ldr	r2, [sp, #152]	; 0x98
    2852:	6013      	str	r3, [r2, #0]
    2854:	9803      	ldr	r0, [sp, #12]
    2856:	b019      	add	sp, #100	; 0x64
    2858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    285c:	4b8b      	ldr	r3, [pc, #556]	; (2a8c <_dtoa_r+0x2d4>)
    285e:	9303      	str	r3, [sp, #12]
    2860:	3303      	adds	r3, #3
    2862:	e7f5      	b.n	2850 <_dtoa_r+0x98>
    2864:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    2868:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    286c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    2870:	2200      	movs	r2, #0
    2872:	2300      	movs	r3, #0
    2874:	f7fe f860 	bl	938 <__aeabi_dcmpeq>
    2878:	4680      	mov	r8, r0
    287a:	b158      	cbz	r0, 2894 <_dtoa_r+0xdc>
    287c:	2301      	movs	r3, #1
    287e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2880:	6013      	str	r3, [r2, #0]
    2882:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2884:	2b00      	cmp	r3, #0
    2886:	f000 8558 	beq.w	333a <_dtoa_r+0xb82>
    288a:	4882      	ldr	r0, [pc, #520]	; (2a94 <_dtoa_r+0x2dc>)
    288c:	6018      	str	r0, [r3, #0]
    288e:	1e43      	subs	r3, r0, #1
    2890:	9303      	str	r3, [sp, #12]
    2892:	e7df      	b.n	2854 <_dtoa_r+0x9c>
    2894:	ab16      	add	r3, sp, #88	; 0x58
    2896:	9301      	str	r3, [sp, #4]
    2898:	ab17      	add	r3, sp, #92	; 0x5c
    289a:	9300      	str	r3, [sp, #0]
    289c:	4628      	mov	r0, r5
    289e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    28a2:	f00e fbdd 	bl	11060 <__d2b>
    28a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
    28aa:	4683      	mov	fp, r0
    28ac:	2c00      	cmp	r4, #0
    28ae:	d07f      	beq.n	29b0 <_dtoa_r+0x1f8>
    28b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    28b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    28b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    28ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
    28be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    28c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    28c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    28ca:	2200      	movs	r2, #0
    28cc:	4b72      	ldr	r3, [pc, #456]	; (2a98 <_dtoa_r+0x2e0>)
    28ce:	f7fd fc13 	bl	f8 <__aeabi_dsub>
    28d2:	a365      	add	r3, pc, #404	; (adr r3, 2a68 <_dtoa_r+0x2b0>)
    28d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    28d8:	f7fd fdc6 	bl	468 <__aeabi_dmul>
    28dc:	a364      	add	r3, pc, #400	; (adr r3, 2a70 <_dtoa_r+0x2b8>)
    28de:	e9d3 2300 	ldrd	r2, r3, [r3]
    28e2:	f7fd fc0b 	bl	fc <__adddf3>
    28e6:	4606      	mov	r6, r0
    28e8:	4620      	mov	r0, r4
    28ea:	460f      	mov	r7, r1
    28ec:	f7fd fd52 	bl	394 <__aeabi_i2d>
    28f0:	a361      	add	r3, pc, #388	; (adr r3, 2a78 <_dtoa_r+0x2c0>)
    28f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    28f6:	f7fd fdb7 	bl	468 <__aeabi_dmul>
    28fa:	4602      	mov	r2, r0
    28fc:	460b      	mov	r3, r1
    28fe:	4630      	mov	r0, r6
    2900:	4639      	mov	r1, r7
    2902:	f7fd fbfb 	bl	fc <__adddf3>
    2906:	4606      	mov	r6, r0
    2908:	460f      	mov	r7, r1
    290a:	f7fe f913 	bl	b34 <__aeabi_d2iz>
    290e:	2200      	movs	r2, #0
    2910:	4682      	mov	sl, r0
    2912:	2300      	movs	r3, #0
    2914:	4630      	mov	r0, r6
    2916:	4639      	mov	r1, r7
    2918:	f7fe f818 	bl	94c <__aeabi_dcmplt>
    291c:	b148      	cbz	r0, 2932 <_dtoa_r+0x17a>
    291e:	4650      	mov	r0, sl
    2920:	f7fd fd38 	bl	394 <__aeabi_i2d>
    2924:	4632      	mov	r2, r6
    2926:	463b      	mov	r3, r7
    2928:	f7fe f806 	bl	938 <__aeabi_dcmpeq>
    292c:	b908      	cbnz	r0, 2932 <_dtoa_r+0x17a>
    292e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2932:	f1ba 0f16 	cmp.w	sl, #22
    2936:	d858      	bhi.n	29ea <_dtoa_r+0x232>
    2938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    293c:	4b57      	ldr	r3, [pc, #348]	; (2a9c <_dtoa_r+0x2e4>)
    293e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    2942:	e9d3 2300 	ldrd	r2, r3, [r3]
    2946:	f7fe f801 	bl	94c <__aeabi_dcmplt>
    294a:	2800      	cmp	r0, #0
    294c:	d04f      	beq.n	29ee <_dtoa_r+0x236>
    294e:	2300      	movs	r3, #0
    2950:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2954:	930f      	str	r3, [sp, #60]	; 0x3c
    2956:	9b16      	ldr	r3, [sp, #88]	; 0x58
    2958:	1b1c      	subs	r4, r3, r4
    295a:	1e63      	subs	r3, r4, #1
    295c:	9309      	str	r3, [sp, #36]	; 0x24
    295e:	bf49      	itett	mi
    2960:	f1c4 0301 	rsbmi	r3, r4, #1
    2964:	2300      	movpl	r3, #0
    2966:	9306      	strmi	r3, [sp, #24]
    2968:	2300      	movmi	r3, #0
    296a:	bf54      	ite	pl
    296c:	9306      	strpl	r3, [sp, #24]
    296e:	9309      	strmi	r3, [sp, #36]	; 0x24
    2970:	f1ba 0f00 	cmp.w	sl, #0
    2974:	db3d      	blt.n	29f2 <_dtoa_r+0x23a>
    2976:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2978:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    297c:	4453      	add	r3, sl
    297e:	9309      	str	r3, [sp, #36]	; 0x24
    2980:	2300      	movs	r3, #0
    2982:	930a      	str	r3, [sp, #40]	; 0x28
    2984:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2986:	2b09      	cmp	r3, #9
    2988:	f200 808c 	bhi.w	2aa4 <_dtoa_r+0x2ec>
    298c:	2b05      	cmp	r3, #5
    298e:	bfc4      	itt	gt
    2990:	3b04      	subgt	r3, #4
    2992:	9322      	strgt	r3, [sp, #136]	; 0x88
    2994:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2996:	bfc8      	it	gt
    2998:	2400      	movgt	r4, #0
    299a:	f1a3 0302 	sub.w	r3, r3, #2
    299e:	bfd8      	it	le
    29a0:	2401      	movle	r4, #1
    29a2:	2b03      	cmp	r3, #3
    29a4:	f200 808a 	bhi.w	2abc <_dtoa_r+0x304>
    29a8:	e8df f003 	tbb	[pc, r3]
    29ac:	5b4d4f2d 	.word	0x5b4d4f2d
    29b0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    29b4:	441c      	add	r4, r3
    29b6:	f204 4332 	addw	r3, r4, #1074	; 0x432
    29ba:	2b20      	cmp	r3, #32
    29bc:	bfc3      	ittte	gt
    29be:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    29c2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    29c6:	fa09 f303 	lslgt.w	r3, r9, r3
    29ca:	f1c3 0320 	rsble	r3, r3, #32
    29ce:	bfc6      	itte	gt
    29d0:	fa26 f000 	lsrgt.w	r0, r6, r0
    29d4:	4318      	orrgt	r0, r3
    29d6:	fa06 f003 	lslle.w	r0, r6, r3
    29da:	f7fd fccb 	bl	374 <__aeabi_ui2d>
    29de:	2301      	movs	r3, #1
    29e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    29e4:	3c01      	subs	r4, #1
    29e6:	9313      	str	r3, [sp, #76]	; 0x4c
    29e8:	e76f      	b.n	28ca <_dtoa_r+0x112>
    29ea:	2301      	movs	r3, #1
    29ec:	e7b2      	b.n	2954 <_dtoa_r+0x19c>
    29ee:	900f      	str	r0, [sp, #60]	; 0x3c
    29f0:	e7b1      	b.n	2956 <_dtoa_r+0x19e>
    29f2:	9b06      	ldr	r3, [sp, #24]
    29f4:	eba3 030a 	sub.w	r3, r3, sl
    29f8:	9306      	str	r3, [sp, #24]
    29fa:	f1ca 0300 	rsb	r3, sl, #0
    29fe:	930a      	str	r3, [sp, #40]	; 0x28
    2a00:	2300      	movs	r3, #0
    2a02:	930e      	str	r3, [sp, #56]	; 0x38
    2a04:	e7be      	b.n	2984 <_dtoa_r+0x1cc>
    2a06:	2300      	movs	r3, #0
    2a08:	930b      	str	r3, [sp, #44]	; 0x2c
    2a0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	dc58      	bgt.n	2ac2 <_dtoa_r+0x30a>
    2a10:	f04f 0901 	mov.w	r9, #1
    2a14:	464b      	mov	r3, r9
    2a16:	f8cd 9020 	str.w	r9, [sp, #32]
    2a1a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    2a1e:	2200      	movs	r2, #0
    2a20:	6a68      	ldr	r0, [r5, #36]	; 0x24
    2a22:	6042      	str	r2, [r0, #4]
    2a24:	2204      	movs	r2, #4
    2a26:	f102 0614 	add.w	r6, r2, #20
    2a2a:	429e      	cmp	r6, r3
    2a2c:	6841      	ldr	r1, [r0, #4]
    2a2e:	d94e      	bls.n	2ace <_dtoa_r+0x316>
    2a30:	4628      	mov	r0, r5
    2a32:	f00d ff95 	bl	10960 <_Balloc>
    2a36:	9003      	str	r0, [sp, #12]
    2a38:	2800      	cmp	r0, #0
    2a3a:	d14c      	bne.n	2ad6 <_dtoa_r+0x31e>
    2a3c:	4602      	mov	r2, r0
    2a3e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    2a42:	4b17      	ldr	r3, [pc, #92]	; (2aa0 <_dtoa_r+0x2e8>)
    2a44:	e6cc      	b.n	27e0 <_dtoa_r+0x28>
    2a46:	2301      	movs	r3, #1
    2a48:	e7de      	b.n	2a08 <_dtoa_r+0x250>
    2a4a:	2300      	movs	r3, #0
    2a4c:	930b      	str	r3, [sp, #44]	; 0x2c
    2a4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2a50:	eb0a 0903 	add.w	r9, sl, r3
    2a54:	f109 0301 	add.w	r3, r9, #1
    2a58:	2b01      	cmp	r3, #1
    2a5a:	9308      	str	r3, [sp, #32]
    2a5c:	bfb8      	it	lt
    2a5e:	2301      	movlt	r3, #1
    2a60:	e7dd      	b.n	2a1e <_dtoa_r+0x266>
    2a62:	2301      	movs	r3, #1
    2a64:	e7f2      	b.n	2a4c <_dtoa_r+0x294>
    2a66:	bf00      	nop
    2a68:	636f4361 	.word	0x636f4361
    2a6c:	3fd287a7 	.word	0x3fd287a7
    2a70:	8b60c8b3 	.word	0x8b60c8b3
    2a74:	3fc68a28 	.word	0x3fc68a28
    2a78:	509f79fb 	.word	0x509f79fb
    2a7c:	3fd34413 	.word	0x3fd34413
    2a80:	00018cab 	.word	0x00018cab
    2a84:	00018cc2 	.word	0x00018cc2
    2a88:	7ff00000 	.word	0x7ff00000
    2a8c:	000187c4 	.word	0x000187c4
    2a90:	00018ca2 	.word	0x00018ca2
    2a94:	00017d65 	.word	0x00017d65
    2a98:	3ff80000 	.word	0x3ff80000
    2a9c:	000178d0 	.word	0x000178d0
    2aa0:	00018d1e 	.word	0x00018d1e
    2aa4:	2401      	movs	r4, #1
    2aa6:	2300      	movs	r3, #0
    2aa8:	940b      	str	r4, [sp, #44]	; 0x2c
    2aaa:	9322      	str	r3, [sp, #136]	; 0x88
    2aac:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    2ab0:	2200      	movs	r2, #0
    2ab2:	2312      	movs	r3, #18
    2ab4:	f8cd 9020 	str.w	r9, [sp, #32]
    2ab8:	9223      	str	r2, [sp, #140]	; 0x8c
    2aba:	e7b0      	b.n	2a1e <_dtoa_r+0x266>
    2abc:	2301      	movs	r3, #1
    2abe:	930b      	str	r3, [sp, #44]	; 0x2c
    2ac0:	e7f4      	b.n	2aac <_dtoa_r+0x2f4>
    2ac2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    2ac6:	464b      	mov	r3, r9
    2ac8:	f8cd 9020 	str.w	r9, [sp, #32]
    2acc:	e7a7      	b.n	2a1e <_dtoa_r+0x266>
    2ace:	3101      	adds	r1, #1
    2ad0:	6041      	str	r1, [r0, #4]
    2ad2:	0052      	lsls	r2, r2, #1
    2ad4:	e7a7      	b.n	2a26 <_dtoa_r+0x26e>
    2ad6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2ad8:	9a03      	ldr	r2, [sp, #12]
    2ada:	601a      	str	r2, [r3, #0]
    2adc:	9b08      	ldr	r3, [sp, #32]
    2ade:	2b0e      	cmp	r3, #14
    2ae0:	f200 80a8 	bhi.w	2c34 <_dtoa_r+0x47c>
    2ae4:	2c00      	cmp	r4, #0
    2ae6:	f000 80a5 	beq.w	2c34 <_dtoa_r+0x47c>
    2aea:	f1ba 0f00 	cmp.w	sl, #0
    2aee:	dd34      	ble.n	2b5a <_dtoa_r+0x3a2>
    2af0:	4a9a      	ldr	r2, [pc, #616]	; (2d5c <_dtoa_r+0x5a4>)
    2af2:	f00a 030f 	and.w	r3, sl, #15
    2af6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    2afa:	f41a 7f80 	tst.w	sl, #256	; 0x100
    2afe:	e9d3 3400 	ldrd	r3, r4, [r3]
    2b02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    2b06:	ea4f 142a 	mov.w	r4, sl, asr #4
    2b0a:	d016      	beq.n	2b3a <_dtoa_r+0x382>
    2b0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    2b10:	4b93      	ldr	r3, [pc, #588]	; (2d60 <_dtoa_r+0x5a8>)
    2b12:	2703      	movs	r7, #3
    2b14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    2b18:	f7fd fdd0 	bl	6bc <__aeabi_ddiv>
    2b1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2b20:	f004 040f 	and.w	r4, r4, #15
    2b24:	4e8e      	ldr	r6, [pc, #568]	; (2d60 <_dtoa_r+0x5a8>)
    2b26:	b954      	cbnz	r4, 2b3e <_dtoa_r+0x386>
    2b28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2b2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2b30:	f7fd fdc4 	bl	6bc <__aeabi_ddiv>
    2b34:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2b38:	e029      	b.n	2b8e <_dtoa_r+0x3d6>
    2b3a:	2702      	movs	r7, #2
    2b3c:	e7f2      	b.n	2b24 <_dtoa_r+0x36c>
    2b3e:	07e1      	lsls	r1, r4, #31
    2b40:	d508      	bpl.n	2b54 <_dtoa_r+0x39c>
    2b42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2b46:	e9d6 2300 	ldrd	r2, r3, [r6]
    2b4a:	f7fd fc8d 	bl	468 <__aeabi_dmul>
    2b4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    2b52:	3701      	adds	r7, #1
    2b54:	1064      	asrs	r4, r4, #1
    2b56:	3608      	adds	r6, #8
    2b58:	e7e5      	b.n	2b26 <_dtoa_r+0x36e>
    2b5a:	f000 80a5 	beq.w	2ca8 <_dtoa_r+0x4f0>
    2b5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    2b62:	f1ca 0400 	rsb	r4, sl, #0
    2b66:	4b7d      	ldr	r3, [pc, #500]	; (2d5c <_dtoa_r+0x5a4>)
    2b68:	f004 020f 	and.w	r2, r4, #15
    2b6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2b70:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b74:	f7fd fc78 	bl	468 <__aeabi_dmul>
    2b78:	2702      	movs	r7, #2
    2b7a:	2300      	movs	r3, #0
    2b7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2b80:	4e77      	ldr	r6, [pc, #476]	; (2d60 <_dtoa_r+0x5a8>)
    2b82:	1124      	asrs	r4, r4, #4
    2b84:	2c00      	cmp	r4, #0
    2b86:	f040 8084 	bne.w	2c92 <_dtoa_r+0x4da>
    2b8a:	2b00      	cmp	r3, #0
    2b8c:	d1d2      	bne.n	2b34 <_dtoa_r+0x37c>
    2b8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2b90:	2b00      	cmp	r3, #0
    2b92:	f000 808b 	beq.w	2cac <_dtoa_r+0x4f4>
    2b96:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    2b9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    2b9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2ba2:	2200      	movs	r2, #0
    2ba4:	4b6f      	ldr	r3, [pc, #444]	; (2d64 <_dtoa_r+0x5ac>)
    2ba6:	f7fd fed1 	bl	94c <__aeabi_dcmplt>
    2baa:	2800      	cmp	r0, #0
    2bac:	d07e      	beq.n	2cac <_dtoa_r+0x4f4>
    2bae:	9b08      	ldr	r3, [sp, #32]
    2bb0:	2b00      	cmp	r3, #0
    2bb2:	d07b      	beq.n	2cac <_dtoa_r+0x4f4>
    2bb4:	f1b9 0f00 	cmp.w	r9, #0
    2bb8:	dd38      	ble.n	2c2c <_dtoa_r+0x474>
    2bba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2bbe:	2200      	movs	r2, #0
    2bc0:	4b69      	ldr	r3, [pc, #420]	; (2d68 <_dtoa_r+0x5b0>)
    2bc2:	f7fd fc51 	bl	468 <__aeabi_dmul>
    2bc6:	464c      	mov	r4, r9
    2bc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2bcc:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
    2bd0:	3701      	adds	r7, #1
    2bd2:	4638      	mov	r0, r7
    2bd4:	f7fd fbde 	bl	394 <__aeabi_i2d>
    2bd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    2bdc:	f7fd fc44 	bl	468 <__aeabi_dmul>
    2be0:	2200      	movs	r2, #0
    2be2:	4b62      	ldr	r3, [pc, #392]	; (2d6c <_dtoa_r+0x5b4>)
    2be4:	f7fd fa8a 	bl	fc <__adddf3>
    2be8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    2bec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    2bf0:	9611      	str	r6, [sp, #68]	; 0x44
    2bf2:	2c00      	cmp	r4, #0
    2bf4:	d15d      	bne.n	2cb2 <_dtoa_r+0x4fa>
    2bf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2bfa:	2200      	movs	r2, #0
    2bfc:	4b5c      	ldr	r3, [pc, #368]	; (2d70 <_dtoa_r+0x5b8>)
    2bfe:	f7fd fa7b 	bl	f8 <__aeabi_dsub>
    2c02:	4602      	mov	r2, r0
    2c04:	460b      	mov	r3, r1
    2c06:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2c0a:	4633      	mov	r3, r6
    2c0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2c0e:	f7fd febb 	bl	988 <__aeabi_dcmpgt>
    2c12:	2800      	cmp	r0, #0
    2c14:	f040 829c 	bne.w	3150 <_dtoa_r+0x998>
    2c18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2c1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2c1e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    2c22:	f7fd fe93 	bl	94c <__aeabi_dcmplt>
    2c26:	2800      	cmp	r0, #0
    2c28:	f040 8290 	bne.w	314c <_dtoa_r+0x994>
    2c2c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    2c30:	e9cd 3404 	strd	r3, r4, [sp, #16]
    2c34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    2c36:	2b00      	cmp	r3, #0
    2c38:	f2c0 8152 	blt.w	2ee0 <_dtoa_r+0x728>
    2c3c:	f1ba 0f0e 	cmp.w	sl, #14
    2c40:	f300 814e 	bgt.w	2ee0 <_dtoa_r+0x728>
    2c44:	4b45      	ldr	r3, [pc, #276]	; (2d5c <_dtoa_r+0x5a4>)
    2c46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    2c4a:	e9d3 3400 	ldrd	r3, r4, [r3]
    2c4e:	e9cd 3406 	strd	r3, r4, [sp, #24]
    2c52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2c54:	2b00      	cmp	r3, #0
    2c56:	f280 80db 	bge.w	2e10 <_dtoa_r+0x658>
    2c5a:	9b08      	ldr	r3, [sp, #32]
    2c5c:	2b00      	cmp	r3, #0
    2c5e:	f300 80d7 	bgt.w	2e10 <_dtoa_r+0x658>
    2c62:	f040 8272 	bne.w	314a <_dtoa_r+0x992>
    2c66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    2c6a:	2200      	movs	r2, #0
    2c6c:	4b40      	ldr	r3, [pc, #256]	; (2d70 <_dtoa_r+0x5b8>)
    2c6e:	f7fd fbfb 	bl	468 <__aeabi_dmul>
    2c72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    2c76:	f7fd fe7d 	bl	974 <__aeabi_dcmpge>
    2c7a:	9c08      	ldr	r4, [sp, #32]
    2c7c:	4626      	mov	r6, r4
    2c7e:	2800      	cmp	r0, #0
    2c80:	f040 8248 	bne.w	3114 <_dtoa_r+0x95c>
    2c84:	2331      	movs	r3, #49	; 0x31
    2c86:	9f03      	ldr	r7, [sp, #12]
    2c88:	f10a 0a01 	add.w	sl, sl, #1
    2c8c:	f807 3b01 	strb.w	r3, [r7], #1
    2c90:	e244      	b.n	311c <_dtoa_r+0x964>
    2c92:	07e2      	lsls	r2, r4, #31
    2c94:	d505      	bpl.n	2ca2 <_dtoa_r+0x4ea>
    2c96:	e9d6 2300 	ldrd	r2, r3, [r6]
    2c9a:	f7fd fbe5 	bl	468 <__aeabi_dmul>
    2c9e:	2301      	movs	r3, #1
    2ca0:	3701      	adds	r7, #1
    2ca2:	1064      	asrs	r4, r4, #1
    2ca4:	3608      	adds	r6, #8
    2ca6:	e76d      	b.n	2b84 <_dtoa_r+0x3cc>
    2ca8:	2702      	movs	r7, #2
    2caa:	e770      	b.n	2b8e <_dtoa_r+0x3d6>
    2cac:	46d0      	mov	r8, sl
    2cae:	9c08      	ldr	r4, [sp, #32]
    2cb0:	e78f      	b.n	2bd2 <_dtoa_r+0x41a>
    2cb2:	9903      	ldr	r1, [sp, #12]
    2cb4:	4b29      	ldr	r3, [pc, #164]	; (2d5c <_dtoa_r+0x5a4>)
    2cb6:	4421      	add	r1, r4
    2cb8:	9112      	str	r1, [sp, #72]	; 0x48
    2cba:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2cbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    2cc0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    2cc4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    2cc8:	2900      	cmp	r1, #0
    2cca:	d055      	beq.n	2d78 <_dtoa_r+0x5c0>
    2ccc:	2000      	movs	r0, #0
    2cce:	4929      	ldr	r1, [pc, #164]	; (2d74 <_dtoa_r+0x5bc>)
    2cd0:	f7fd fcf4 	bl	6bc <__aeabi_ddiv>
    2cd4:	463b      	mov	r3, r7
    2cd6:	4632      	mov	r2, r6
    2cd8:	f7fd fa0e 	bl	f8 <__aeabi_dsub>
    2cdc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    2ce0:	9f03      	ldr	r7, [sp, #12]
    2ce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2ce6:	f7fd ff25 	bl	b34 <__aeabi_d2iz>
    2cea:	4604      	mov	r4, r0
    2cec:	f7fd fb52 	bl	394 <__aeabi_i2d>
    2cf0:	4602      	mov	r2, r0
    2cf2:	460b      	mov	r3, r1
    2cf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2cf8:	f7fd f9fe 	bl	f8 <__aeabi_dsub>
    2cfc:	4602      	mov	r2, r0
    2cfe:	460b      	mov	r3, r1
    2d00:	3430      	adds	r4, #48	; 0x30
    2d02:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2d06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2d0a:	f807 4b01 	strb.w	r4, [r7], #1
    2d0e:	f7fd fe1d 	bl	94c <__aeabi_dcmplt>
    2d12:	2800      	cmp	r0, #0
    2d14:	d174      	bne.n	2e00 <_dtoa_r+0x648>
    2d16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    2d1a:	2000      	movs	r0, #0
    2d1c:	4911      	ldr	r1, [pc, #68]	; (2d64 <_dtoa_r+0x5ac>)
    2d1e:	f7fd f9eb 	bl	f8 <__aeabi_dsub>
    2d22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2d26:	f7fd fe11 	bl	94c <__aeabi_dcmplt>
    2d2a:	2800      	cmp	r0, #0
    2d2c:	f040 80b7 	bne.w	2e9e <_dtoa_r+0x6e6>
    2d30:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2d32:	429f      	cmp	r7, r3
    2d34:	f43f af7a 	beq.w	2c2c <_dtoa_r+0x474>
    2d38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2d3c:	2200      	movs	r2, #0
    2d3e:	4b0a      	ldr	r3, [pc, #40]	; (2d68 <_dtoa_r+0x5b0>)
    2d40:	f7fd fb92 	bl	468 <__aeabi_dmul>
    2d44:	2200      	movs	r2, #0
    2d46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    2d4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2d4e:	4b06      	ldr	r3, [pc, #24]	; (2d68 <_dtoa_r+0x5b0>)
    2d50:	f7fd fb8a 	bl	468 <__aeabi_dmul>
    2d54:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2d58:	e7c3      	b.n	2ce2 <_dtoa_r+0x52a>
    2d5a:	bf00      	nop
    2d5c:	000178d0 	.word	0x000178d0
    2d60:	000178a8 	.word	0x000178a8
    2d64:	3ff00000 	.word	0x3ff00000
    2d68:	40240000 	.word	0x40240000
    2d6c:	401c0000 	.word	0x401c0000
    2d70:	40140000 	.word	0x40140000
    2d74:	3fe00000 	.word	0x3fe00000
    2d78:	4630      	mov	r0, r6
    2d7a:	4639      	mov	r1, r7
    2d7c:	f7fd fb74 	bl	468 <__aeabi_dmul>
    2d80:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2d82:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    2d86:	9c03      	ldr	r4, [sp, #12]
    2d88:	9314      	str	r3, [sp, #80]	; 0x50
    2d8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2d8e:	f7fd fed1 	bl	b34 <__aeabi_d2iz>
    2d92:	9015      	str	r0, [sp, #84]	; 0x54
    2d94:	f7fd fafe 	bl	394 <__aeabi_i2d>
    2d98:	4602      	mov	r2, r0
    2d9a:	460b      	mov	r3, r1
    2d9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2da0:	f7fd f9aa 	bl	f8 <__aeabi_dsub>
    2da4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2da6:	4606      	mov	r6, r0
    2da8:	3330      	adds	r3, #48	; 0x30
    2daa:	f804 3b01 	strb.w	r3, [r4], #1
    2dae:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2db0:	460f      	mov	r7, r1
    2db2:	429c      	cmp	r4, r3
    2db4:	f04f 0200 	mov.w	r2, #0
    2db8:	d124      	bne.n	2e04 <_dtoa_r+0x64c>
    2dba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2dbe:	4bb0      	ldr	r3, [pc, #704]	; (3080 <_dtoa_r+0x8c8>)
    2dc0:	f7fd f99c 	bl	fc <__adddf3>
    2dc4:	4602      	mov	r2, r0
    2dc6:	460b      	mov	r3, r1
    2dc8:	4630      	mov	r0, r6
    2dca:	4639      	mov	r1, r7
    2dcc:	f7fd fddc 	bl	988 <__aeabi_dcmpgt>
    2dd0:	2800      	cmp	r0, #0
    2dd2:	d163      	bne.n	2e9c <_dtoa_r+0x6e4>
    2dd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2dd8:	2000      	movs	r0, #0
    2dda:	49a9      	ldr	r1, [pc, #676]	; (3080 <_dtoa_r+0x8c8>)
    2ddc:	f7fd f98c 	bl	f8 <__aeabi_dsub>
    2de0:	4602      	mov	r2, r0
    2de2:	460b      	mov	r3, r1
    2de4:	4630      	mov	r0, r6
    2de6:	4639      	mov	r1, r7
    2de8:	f7fd fdb0 	bl	94c <__aeabi_dcmplt>
    2dec:	2800      	cmp	r0, #0
    2dee:	f43f af1d 	beq.w	2c2c <_dtoa_r+0x474>
    2df2:	9f14      	ldr	r7, [sp, #80]	; 0x50
    2df4:	1e7b      	subs	r3, r7, #1
    2df6:	9314      	str	r3, [sp, #80]	; 0x50
    2df8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    2dfc:	2b30      	cmp	r3, #48	; 0x30
    2dfe:	d0f8      	beq.n	2df2 <_dtoa_r+0x63a>
    2e00:	46c2      	mov	sl, r8
    2e02:	e03b      	b.n	2e7c <_dtoa_r+0x6c4>
    2e04:	4b9f      	ldr	r3, [pc, #636]	; (3084 <_dtoa_r+0x8cc>)
    2e06:	f7fd fb2f 	bl	468 <__aeabi_dmul>
    2e0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2e0e:	e7bc      	b.n	2d8a <_dtoa_r+0x5d2>
    2e10:	9f03      	ldr	r7, [sp, #12]
    2e12:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    2e16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2e1a:	4640      	mov	r0, r8
    2e1c:	4649      	mov	r1, r9
    2e1e:	f7fd fc4d 	bl	6bc <__aeabi_ddiv>
    2e22:	f7fd fe87 	bl	b34 <__aeabi_d2iz>
    2e26:	4604      	mov	r4, r0
    2e28:	f7fd fab4 	bl	394 <__aeabi_i2d>
    2e2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2e30:	f7fd fb1a 	bl	468 <__aeabi_dmul>
    2e34:	4602      	mov	r2, r0
    2e36:	460b      	mov	r3, r1
    2e38:	4640      	mov	r0, r8
    2e3a:	4649      	mov	r1, r9
    2e3c:	f7fd f95c 	bl	f8 <__aeabi_dsub>
    2e40:	f104 0630 	add.w	r6, r4, #48	; 0x30
    2e44:	f807 6b01 	strb.w	r6, [r7], #1
    2e48:	9e03      	ldr	r6, [sp, #12]
    2e4a:	f8dd c020 	ldr.w	ip, [sp, #32]
    2e4e:	1bbe      	subs	r6, r7, r6
    2e50:	45b4      	cmp	ip, r6
    2e52:	4602      	mov	r2, r0
    2e54:	460b      	mov	r3, r1
    2e56:	d136      	bne.n	2ec6 <_dtoa_r+0x70e>
    2e58:	f7fd f950 	bl	fc <__adddf3>
    2e5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2e60:	4680      	mov	r8, r0
    2e62:	4689      	mov	r9, r1
    2e64:	f7fd fd90 	bl	988 <__aeabi_dcmpgt>
    2e68:	bb58      	cbnz	r0, 2ec2 <_dtoa_r+0x70a>
    2e6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2e6e:	4640      	mov	r0, r8
    2e70:	4649      	mov	r1, r9
    2e72:	f7fd fd61 	bl	938 <__aeabi_dcmpeq>
    2e76:	b108      	cbz	r0, 2e7c <_dtoa_r+0x6c4>
    2e78:	07e1      	lsls	r1, r4, #31
    2e7a:	d422      	bmi.n	2ec2 <_dtoa_r+0x70a>
    2e7c:	4628      	mov	r0, r5
    2e7e:	4659      	mov	r1, fp
    2e80:	f00d fdae 	bl	109e0 <_Bfree>
    2e84:	2300      	movs	r3, #0
    2e86:	703b      	strb	r3, [r7, #0]
    2e88:	9b24      	ldr	r3, [sp, #144]	; 0x90
    2e8a:	f10a 0001 	add.w	r0, sl, #1
    2e8e:	6018      	str	r0, [r3, #0]
    2e90:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2e92:	2b00      	cmp	r3, #0
    2e94:	f43f acde 	beq.w	2854 <_dtoa_r+0x9c>
    2e98:	601f      	str	r7, [r3, #0]
    2e9a:	e4db      	b.n	2854 <_dtoa_r+0x9c>
    2e9c:	4627      	mov	r7, r4
    2e9e:	463b      	mov	r3, r7
    2ea0:	461f      	mov	r7, r3
    2ea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    2ea6:	2a39      	cmp	r2, #57	; 0x39
    2ea8:	d107      	bne.n	2eba <_dtoa_r+0x702>
    2eaa:	9a03      	ldr	r2, [sp, #12]
    2eac:	429a      	cmp	r2, r3
    2eae:	d1f7      	bne.n	2ea0 <_dtoa_r+0x6e8>
    2eb0:	2230      	movs	r2, #48	; 0x30
    2eb2:	9903      	ldr	r1, [sp, #12]
    2eb4:	f108 0801 	add.w	r8, r8, #1
    2eb8:	700a      	strb	r2, [r1, #0]
    2eba:	781a      	ldrb	r2, [r3, #0]
    2ebc:	3201      	adds	r2, #1
    2ebe:	701a      	strb	r2, [r3, #0]
    2ec0:	e79e      	b.n	2e00 <_dtoa_r+0x648>
    2ec2:	46d0      	mov	r8, sl
    2ec4:	e7eb      	b.n	2e9e <_dtoa_r+0x6e6>
    2ec6:	2200      	movs	r2, #0
    2ec8:	4b6e      	ldr	r3, [pc, #440]	; (3084 <_dtoa_r+0x8cc>)
    2eca:	f7fd facd 	bl	468 <__aeabi_dmul>
    2ece:	2200      	movs	r2, #0
    2ed0:	2300      	movs	r3, #0
    2ed2:	4680      	mov	r8, r0
    2ed4:	4689      	mov	r9, r1
    2ed6:	f7fd fd2f 	bl	938 <__aeabi_dcmpeq>
    2eda:	2800      	cmp	r0, #0
    2edc:	d09b      	beq.n	2e16 <_dtoa_r+0x65e>
    2ede:	e7cd      	b.n	2e7c <_dtoa_r+0x6c4>
    2ee0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2ee2:	2a00      	cmp	r2, #0
    2ee4:	f000 80d0 	beq.w	3088 <_dtoa_r+0x8d0>
    2ee8:	9a22      	ldr	r2, [sp, #136]	; 0x88
    2eea:	2a01      	cmp	r2, #1
    2eec:	f300 80ae 	bgt.w	304c <_dtoa_r+0x894>
    2ef0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    2ef2:	2a00      	cmp	r2, #0
    2ef4:	f000 80a6 	beq.w	3044 <_dtoa_r+0x88c>
    2ef8:	f203 4333 	addw	r3, r3, #1075	; 0x433
    2efc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2efe:	9f06      	ldr	r7, [sp, #24]
    2f00:	9a06      	ldr	r2, [sp, #24]
    2f02:	2101      	movs	r1, #1
    2f04:	441a      	add	r2, r3
    2f06:	9206      	str	r2, [sp, #24]
    2f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2f0a:	4628      	mov	r0, r5
    2f0c:	441a      	add	r2, r3
    2f0e:	9209      	str	r2, [sp, #36]	; 0x24
    2f10:	f00d fe18 	bl	10b44 <__i2b>
    2f14:	4606      	mov	r6, r0
    2f16:	2f00      	cmp	r7, #0
    2f18:	dd0c      	ble.n	2f34 <_dtoa_r+0x77c>
    2f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	dd09      	ble.n	2f34 <_dtoa_r+0x77c>
    2f20:	42bb      	cmp	r3, r7
    2f22:	bfa8      	it	ge
    2f24:	463b      	movge	r3, r7
    2f26:	9a06      	ldr	r2, [sp, #24]
    2f28:	1aff      	subs	r7, r7, r3
    2f2a:	1ad2      	subs	r2, r2, r3
    2f2c:	9206      	str	r2, [sp, #24]
    2f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2f30:	1ad3      	subs	r3, r2, r3
    2f32:	9309      	str	r3, [sp, #36]	; 0x24
    2f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2f36:	b1f3      	cbz	r3, 2f76 <_dtoa_r+0x7be>
    2f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	f000 80a8 	beq.w	3090 <_dtoa_r+0x8d8>
    2f40:	2c00      	cmp	r4, #0
    2f42:	dd10      	ble.n	2f66 <_dtoa_r+0x7ae>
    2f44:	4631      	mov	r1, r6
    2f46:	4622      	mov	r2, r4
    2f48:	4628      	mov	r0, r5
    2f4a:	f00d feb9 	bl	10cc0 <__pow5mult>
    2f4e:	465a      	mov	r2, fp
    2f50:	4601      	mov	r1, r0
    2f52:	4606      	mov	r6, r0
    2f54:	4628      	mov	r0, r5
    2f56:	f00d fe0b 	bl	10b70 <__multiply>
    2f5a:	4680      	mov	r8, r0
    2f5c:	4659      	mov	r1, fp
    2f5e:	4628      	mov	r0, r5
    2f60:	f00d fd3e 	bl	109e0 <_Bfree>
    2f64:	46c3      	mov	fp, r8
    2f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2f68:	1b1a      	subs	r2, r3, r4
    2f6a:	d004      	beq.n	2f76 <_dtoa_r+0x7be>
    2f6c:	4659      	mov	r1, fp
    2f6e:	4628      	mov	r0, r5
    2f70:	f00d fea6 	bl	10cc0 <__pow5mult>
    2f74:	4683      	mov	fp, r0
    2f76:	2101      	movs	r1, #1
    2f78:	4628      	mov	r0, r5
    2f7a:	f00d fde3 	bl	10b44 <__i2b>
    2f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2f80:	4604      	mov	r4, r0
    2f82:	2b00      	cmp	r3, #0
    2f84:	f340 8086 	ble.w	3094 <_dtoa_r+0x8dc>
    2f88:	461a      	mov	r2, r3
    2f8a:	4601      	mov	r1, r0
    2f8c:	4628      	mov	r0, r5
    2f8e:	f00d fe97 	bl	10cc0 <__pow5mult>
    2f92:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2f94:	4604      	mov	r4, r0
    2f96:	2b01      	cmp	r3, #1
    2f98:	dd7f      	ble.n	309a <_dtoa_r+0x8e2>
    2f9a:	f04f 0800 	mov.w	r8, #0
    2f9e:	6923      	ldr	r3, [r4, #16]
    2fa0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    2fa4:	6918      	ldr	r0, [r3, #16]
    2fa6:	f014 f95d 	bl	17264 <__hi0bits>
    2faa:	f1c0 0020 	rsb	r0, r0, #32
    2fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2fb0:	4418      	add	r0, r3
    2fb2:	f010 001f 	ands.w	r0, r0, #31
    2fb6:	f000 8092 	beq.w	30de <_dtoa_r+0x926>
    2fba:	f1c0 0320 	rsb	r3, r0, #32
    2fbe:	2b04      	cmp	r3, #4
    2fc0:	f340 808a 	ble.w	30d8 <_dtoa_r+0x920>
    2fc4:	f1c0 001c 	rsb	r0, r0, #28
    2fc8:	9b06      	ldr	r3, [sp, #24]
    2fca:	4407      	add	r7, r0
    2fcc:	4403      	add	r3, r0
    2fce:	9306      	str	r3, [sp, #24]
    2fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2fd2:	4403      	add	r3, r0
    2fd4:	9309      	str	r3, [sp, #36]	; 0x24
    2fd6:	9b06      	ldr	r3, [sp, #24]
    2fd8:	2b00      	cmp	r3, #0
    2fda:	dd05      	ble.n	2fe8 <_dtoa_r+0x830>
    2fdc:	4659      	mov	r1, fp
    2fde:	461a      	mov	r2, r3
    2fe0:	4628      	mov	r0, r5
    2fe2:	f00d fec7 	bl	10d74 <__lshift>
    2fe6:	4683      	mov	fp, r0
    2fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2fea:	2b00      	cmp	r3, #0
    2fec:	dd05      	ble.n	2ffa <_dtoa_r+0x842>
    2fee:	4621      	mov	r1, r4
    2ff0:	461a      	mov	r2, r3
    2ff2:	4628      	mov	r0, r5
    2ff4:	f00d febe 	bl	10d74 <__lshift>
    2ff8:	4604      	mov	r4, r0
    2ffa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2ffc:	2b00      	cmp	r3, #0
    2ffe:	d070      	beq.n	30e2 <_dtoa_r+0x92a>
    3000:	4621      	mov	r1, r4
    3002:	4658      	mov	r0, fp
    3004:	f014 f97b 	bl	172fe <__mcmp>
    3008:	2800      	cmp	r0, #0
    300a:	da6a      	bge.n	30e2 <_dtoa_r+0x92a>
    300c:	2300      	movs	r3, #0
    300e:	4659      	mov	r1, fp
    3010:	220a      	movs	r2, #10
    3012:	4628      	mov	r0, r5
    3014:	f00d fd06 	bl	10a24 <__multadd>
    3018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    301a:	4683      	mov	fp, r0
    301c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    3020:	2b00      	cmp	r3, #0
    3022:	f000 8194 	beq.w	334e <_dtoa_r+0xb96>
    3026:	4631      	mov	r1, r6
    3028:	2300      	movs	r3, #0
    302a:	220a      	movs	r2, #10
    302c:	4628      	mov	r0, r5
    302e:	f00d fcf9 	bl	10a24 <__multadd>
    3032:	f1b9 0f00 	cmp.w	r9, #0
    3036:	4606      	mov	r6, r0
    3038:	f300 8093 	bgt.w	3162 <_dtoa_r+0x9aa>
    303c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    303e:	2b02      	cmp	r3, #2
    3040:	dc57      	bgt.n	30f2 <_dtoa_r+0x93a>
    3042:	e08e      	b.n	3162 <_dtoa_r+0x9aa>
    3044:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3046:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    304a:	e757      	b.n	2efc <_dtoa_r+0x744>
    304c:	9b08      	ldr	r3, [sp, #32]
    304e:	1e5c      	subs	r4, r3, #1
    3050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3052:	42a3      	cmp	r3, r4
    3054:	bfb7      	itett	lt
    3056:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    3058:	1b1c      	subge	r4, r3, r4
    305a:	1ae2      	sublt	r2, r4, r3
    305c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    305e:	bfbe      	ittt	lt
    3060:	940a      	strlt	r4, [sp, #40]	; 0x28
    3062:	189b      	addlt	r3, r3, r2
    3064:	930e      	strlt	r3, [sp, #56]	; 0x38
    3066:	9b08      	ldr	r3, [sp, #32]
    3068:	bfb8      	it	lt
    306a:	2400      	movlt	r4, #0
    306c:	2b00      	cmp	r3, #0
    306e:	bfbb      	ittet	lt
    3070:	9b06      	ldrlt	r3, [sp, #24]
    3072:	9a08      	ldrlt	r2, [sp, #32]
    3074:	9f06      	ldrge	r7, [sp, #24]
    3076:	1a9f      	sublt	r7, r3, r2
    3078:	bfac      	ite	ge
    307a:	9b08      	ldrge	r3, [sp, #32]
    307c:	2300      	movlt	r3, #0
    307e:	e73f      	b.n	2f00 <_dtoa_r+0x748>
    3080:	3fe00000 	.word	0x3fe00000
    3084:	40240000 	.word	0x40240000
    3088:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    308a:	9f06      	ldr	r7, [sp, #24]
    308c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    308e:	e742      	b.n	2f16 <_dtoa_r+0x75e>
    3090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3092:	e76b      	b.n	2f6c <_dtoa_r+0x7b4>
    3094:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3096:	2b01      	cmp	r3, #1
    3098:	dc19      	bgt.n	30ce <_dtoa_r+0x916>
    309a:	9b04      	ldr	r3, [sp, #16]
    309c:	b9bb      	cbnz	r3, 30ce <_dtoa_r+0x916>
    309e:	9b05      	ldr	r3, [sp, #20]
    30a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
    30a4:	b99b      	cbnz	r3, 30ce <_dtoa_r+0x916>
    30a6:	9b05      	ldr	r3, [sp, #20]
    30a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    30ac:	0d1b      	lsrs	r3, r3, #20
    30ae:	051b      	lsls	r3, r3, #20
    30b0:	b183      	cbz	r3, 30d4 <_dtoa_r+0x91c>
    30b2:	f04f 0801 	mov.w	r8, #1
    30b6:	9b06      	ldr	r3, [sp, #24]
    30b8:	3301      	adds	r3, #1
    30ba:	9306      	str	r3, [sp, #24]
    30bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    30be:	3301      	adds	r3, #1
    30c0:	9309      	str	r3, [sp, #36]	; 0x24
    30c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    30c4:	2b00      	cmp	r3, #0
    30c6:	f47f af6a 	bne.w	2f9e <_dtoa_r+0x7e6>
    30ca:	2001      	movs	r0, #1
    30cc:	e76f      	b.n	2fae <_dtoa_r+0x7f6>
    30ce:	f04f 0800 	mov.w	r8, #0
    30d2:	e7f6      	b.n	30c2 <_dtoa_r+0x90a>
    30d4:	4698      	mov	r8, r3
    30d6:	e7f4      	b.n	30c2 <_dtoa_r+0x90a>
    30d8:	f43f af7d 	beq.w	2fd6 <_dtoa_r+0x81e>
    30dc:	4618      	mov	r0, r3
    30de:	301c      	adds	r0, #28
    30e0:	e772      	b.n	2fc8 <_dtoa_r+0x810>
    30e2:	9b08      	ldr	r3, [sp, #32]
    30e4:	2b00      	cmp	r3, #0
    30e6:	dc36      	bgt.n	3156 <_dtoa_r+0x99e>
    30e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    30ea:	2b02      	cmp	r3, #2
    30ec:	dd33      	ble.n	3156 <_dtoa_r+0x99e>
    30ee:	f8dd 9020 	ldr.w	r9, [sp, #32]
    30f2:	f1b9 0f00 	cmp.w	r9, #0
    30f6:	d10d      	bne.n	3114 <_dtoa_r+0x95c>
    30f8:	4621      	mov	r1, r4
    30fa:	464b      	mov	r3, r9
    30fc:	2205      	movs	r2, #5
    30fe:	4628      	mov	r0, r5
    3100:	f00d fc90 	bl	10a24 <__multadd>
    3104:	4601      	mov	r1, r0
    3106:	4604      	mov	r4, r0
    3108:	4658      	mov	r0, fp
    310a:	f014 f8f8 	bl	172fe <__mcmp>
    310e:	2800      	cmp	r0, #0
    3110:	f73f adb8 	bgt.w	2c84 <_dtoa_r+0x4cc>
    3114:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3116:	9f03      	ldr	r7, [sp, #12]
    3118:	ea6f 0a03 	mvn.w	sl, r3
    311c:	f04f 0800 	mov.w	r8, #0
    3120:	4621      	mov	r1, r4
    3122:	4628      	mov	r0, r5
    3124:	f00d fc5c 	bl	109e0 <_Bfree>
    3128:	2e00      	cmp	r6, #0
    312a:	f43f aea7 	beq.w	2e7c <_dtoa_r+0x6c4>
    312e:	f1b8 0f00 	cmp.w	r8, #0
    3132:	d005      	beq.n	3140 <_dtoa_r+0x988>
    3134:	45b0      	cmp	r8, r6
    3136:	d003      	beq.n	3140 <_dtoa_r+0x988>
    3138:	4641      	mov	r1, r8
    313a:	4628      	mov	r0, r5
    313c:	f00d fc50 	bl	109e0 <_Bfree>
    3140:	4631      	mov	r1, r6
    3142:	4628      	mov	r0, r5
    3144:	f00d fc4c 	bl	109e0 <_Bfree>
    3148:	e698      	b.n	2e7c <_dtoa_r+0x6c4>
    314a:	2400      	movs	r4, #0
    314c:	4626      	mov	r6, r4
    314e:	e7e1      	b.n	3114 <_dtoa_r+0x95c>
    3150:	46c2      	mov	sl, r8
    3152:	4626      	mov	r6, r4
    3154:	e596      	b.n	2c84 <_dtoa_r+0x4cc>
    3156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3158:	f8dd 9020 	ldr.w	r9, [sp, #32]
    315c:	2b00      	cmp	r3, #0
    315e:	f000 80fd 	beq.w	335c <_dtoa_r+0xba4>
    3162:	2f00      	cmp	r7, #0
    3164:	dd05      	ble.n	3172 <_dtoa_r+0x9ba>
    3166:	4631      	mov	r1, r6
    3168:	463a      	mov	r2, r7
    316a:	4628      	mov	r0, r5
    316c:	f00d fe02 	bl	10d74 <__lshift>
    3170:	4606      	mov	r6, r0
    3172:	f1b8 0f00 	cmp.w	r8, #0
    3176:	d05c      	beq.n	3232 <_dtoa_r+0xa7a>
    3178:	4628      	mov	r0, r5
    317a:	6871      	ldr	r1, [r6, #4]
    317c:	f00d fbf0 	bl	10960 <_Balloc>
    3180:	4607      	mov	r7, r0
    3182:	b928      	cbnz	r0, 3190 <_dtoa_r+0x9d8>
    3184:	4602      	mov	r2, r0
    3186:	f240 21ea 	movw	r1, #746	; 0x2ea
    318a:	4b7f      	ldr	r3, [pc, #508]	; (3388 <_dtoa_r+0xbd0>)
    318c:	f7ff bb28 	b.w	27e0 <_dtoa_r+0x28>
    3190:	6932      	ldr	r2, [r6, #16]
    3192:	f106 010c 	add.w	r1, r6, #12
    3196:	3202      	adds	r2, #2
    3198:	0092      	lsls	r2, r2, #2
    319a:	300c      	adds	r0, #12
    319c:	f013 fd6e 	bl	16c7c <memcpy>
    31a0:	2201      	movs	r2, #1
    31a2:	4639      	mov	r1, r7
    31a4:	4628      	mov	r0, r5
    31a6:	f00d fde5 	bl	10d74 <__lshift>
    31aa:	46b0      	mov	r8, r6
    31ac:	4606      	mov	r6, r0
    31ae:	9b03      	ldr	r3, [sp, #12]
    31b0:	3301      	adds	r3, #1
    31b2:	9308      	str	r3, [sp, #32]
    31b4:	9b03      	ldr	r3, [sp, #12]
    31b6:	444b      	add	r3, r9
    31b8:	930a      	str	r3, [sp, #40]	; 0x28
    31ba:	9b04      	ldr	r3, [sp, #16]
    31bc:	f003 0301 	and.w	r3, r3, #1
    31c0:	9309      	str	r3, [sp, #36]	; 0x24
    31c2:	9b08      	ldr	r3, [sp, #32]
    31c4:	4621      	mov	r1, r4
    31c6:	3b01      	subs	r3, #1
    31c8:	4658      	mov	r0, fp
    31ca:	9304      	str	r3, [sp, #16]
    31cc:	f013 fe7a 	bl	16ec4 <quorem>
    31d0:	4603      	mov	r3, r0
    31d2:	4641      	mov	r1, r8
    31d4:	3330      	adds	r3, #48	; 0x30
    31d6:	9006      	str	r0, [sp, #24]
    31d8:	4658      	mov	r0, fp
    31da:	930b      	str	r3, [sp, #44]	; 0x2c
    31dc:	f014 f88f 	bl	172fe <__mcmp>
    31e0:	4632      	mov	r2, r6
    31e2:	4681      	mov	r9, r0
    31e4:	4621      	mov	r1, r4
    31e6:	4628      	mov	r0, r5
    31e8:	f00d fe34 	bl	10e54 <__mdiff>
    31ec:	68c2      	ldr	r2, [r0, #12]
    31ee:	4607      	mov	r7, r0
    31f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    31f2:	bb02      	cbnz	r2, 3236 <_dtoa_r+0xa7e>
    31f4:	4601      	mov	r1, r0
    31f6:	4658      	mov	r0, fp
    31f8:	f014 f881 	bl	172fe <__mcmp>
    31fc:	4602      	mov	r2, r0
    31fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3200:	4639      	mov	r1, r7
    3202:	4628      	mov	r0, r5
    3204:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    3208:	f00d fbea 	bl	109e0 <_Bfree>
    320c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    320e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3210:	9f08      	ldr	r7, [sp, #32]
    3212:	ea43 0102 	orr.w	r1, r3, r2
    3216:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3218:	430b      	orrs	r3, r1
    321a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    321c:	d10d      	bne.n	323a <_dtoa_r+0xa82>
    321e:	2b39      	cmp	r3, #57	; 0x39
    3220:	d029      	beq.n	3276 <_dtoa_r+0xabe>
    3222:	f1b9 0f00 	cmp.w	r9, #0
    3226:	dd01      	ble.n	322c <_dtoa_r+0xa74>
    3228:	9b06      	ldr	r3, [sp, #24]
    322a:	3331      	adds	r3, #49	; 0x31
    322c:	9a04      	ldr	r2, [sp, #16]
    322e:	7013      	strb	r3, [r2, #0]
    3230:	e776      	b.n	3120 <_dtoa_r+0x968>
    3232:	4630      	mov	r0, r6
    3234:	e7b9      	b.n	31aa <_dtoa_r+0x9f2>
    3236:	2201      	movs	r2, #1
    3238:	e7e2      	b.n	3200 <_dtoa_r+0xa48>
    323a:	f1b9 0f00 	cmp.w	r9, #0
    323e:	db06      	blt.n	324e <_dtoa_r+0xa96>
    3240:	9922      	ldr	r1, [sp, #136]	; 0x88
    3242:	ea41 0909 	orr.w	r9, r1, r9
    3246:	9909      	ldr	r1, [sp, #36]	; 0x24
    3248:	ea59 0101 	orrs.w	r1, r9, r1
    324c:	d120      	bne.n	3290 <_dtoa_r+0xad8>
    324e:	2a00      	cmp	r2, #0
    3250:	ddec      	ble.n	322c <_dtoa_r+0xa74>
    3252:	4659      	mov	r1, fp
    3254:	2201      	movs	r2, #1
    3256:	4628      	mov	r0, r5
    3258:	9308      	str	r3, [sp, #32]
    325a:	f00d fd8b 	bl	10d74 <__lshift>
    325e:	4621      	mov	r1, r4
    3260:	4683      	mov	fp, r0
    3262:	f014 f84c 	bl	172fe <__mcmp>
    3266:	2800      	cmp	r0, #0
    3268:	9b08      	ldr	r3, [sp, #32]
    326a:	dc02      	bgt.n	3272 <_dtoa_r+0xaba>
    326c:	d1de      	bne.n	322c <_dtoa_r+0xa74>
    326e:	07da      	lsls	r2, r3, #31
    3270:	d5dc      	bpl.n	322c <_dtoa_r+0xa74>
    3272:	2b39      	cmp	r3, #57	; 0x39
    3274:	d1d8      	bne.n	3228 <_dtoa_r+0xa70>
    3276:	2339      	movs	r3, #57	; 0x39
    3278:	9a04      	ldr	r2, [sp, #16]
    327a:	7013      	strb	r3, [r2, #0]
    327c:	463b      	mov	r3, r7
    327e:	461f      	mov	r7, r3
    3280:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    3284:	3b01      	subs	r3, #1
    3286:	2a39      	cmp	r2, #57	; 0x39
    3288:	d050      	beq.n	332c <_dtoa_r+0xb74>
    328a:	3201      	adds	r2, #1
    328c:	701a      	strb	r2, [r3, #0]
    328e:	e747      	b.n	3120 <_dtoa_r+0x968>
    3290:	2a00      	cmp	r2, #0
    3292:	dd03      	ble.n	329c <_dtoa_r+0xae4>
    3294:	2b39      	cmp	r3, #57	; 0x39
    3296:	d0ee      	beq.n	3276 <_dtoa_r+0xabe>
    3298:	3301      	adds	r3, #1
    329a:	e7c7      	b.n	322c <_dtoa_r+0xa74>
    329c:	9a08      	ldr	r2, [sp, #32]
    329e:	990a      	ldr	r1, [sp, #40]	; 0x28
    32a0:	f802 3c01 	strb.w	r3, [r2, #-1]
    32a4:	428a      	cmp	r2, r1
    32a6:	d02a      	beq.n	32fe <_dtoa_r+0xb46>
    32a8:	4659      	mov	r1, fp
    32aa:	2300      	movs	r3, #0
    32ac:	220a      	movs	r2, #10
    32ae:	4628      	mov	r0, r5
    32b0:	f00d fbb8 	bl	10a24 <__multadd>
    32b4:	45b0      	cmp	r8, r6
    32b6:	4683      	mov	fp, r0
    32b8:	f04f 0300 	mov.w	r3, #0
    32bc:	f04f 020a 	mov.w	r2, #10
    32c0:	4641      	mov	r1, r8
    32c2:	4628      	mov	r0, r5
    32c4:	d107      	bne.n	32d6 <_dtoa_r+0xb1e>
    32c6:	f00d fbad 	bl	10a24 <__multadd>
    32ca:	4680      	mov	r8, r0
    32cc:	4606      	mov	r6, r0
    32ce:	9b08      	ldr	r3, [sp, #32]
    32d0:	3301      	adds	r3, #1
    32d2:	9308      	str	r3, [sp, #32]
    32d4:	e775      	b.n	31c2 <_dtoa_r+0xa0a>
    32d6:	f00d fba5 	bl	10a24 <__multadd>
    32da:	4631      	mov	r1, r6
    32dc:	4680      	mov	r8, r0
    32de:	2300      	movs	r3, #0
    32e0:	220a      	movs	r2, #10
    32e2:	4628      	mov	r0, r5
    32e4:	f00d fb9e 	bl	10a24 <__multadd>
    32e8:	4606      	mov	r6, r0
    32ea:	e7f0      	b.n	32ce <_dtoa_r+0xb16>
    32ec:	f1b9 0f00 	cmp.w	r9, #0
    32f0:	bfcc      	ite	gt
    32f2:	464f      	movgt	r7, r9
    32f4:	2701      	movle	r7, #1
    32f6:	f04f 0800 	mov.w	r8, #0
    32fa:	9a03      	ldr	r2, [sp, #12]
    32fc:	4417      	add	r7, r2
    32fe:	4659      	mov	r1, fp
    3300:	2201      	movs	r2, #1
    3302:	4628      	mov	r0, r5
    3304:	9308      	str	r3, [sp, #32]
    3306:	f00d fd35 	bl	10d74 <__lshift>
    330a:	4621      	mov	r1, r4
    330c:	4683      	mov	fp, r0
    330e:	f013 fff6 	bl	172fe <__mcmp>
    3312:	2800      	cmp	r0, #0
    3314:	dcb2      	bgt.n	327c <_dtoa_r+0xac4>
    3316:	d102      	bne.n	331e <_dtoa_r+0xb66>
    3318:	9b08      	ldr	r3, [sp, #32]
    331a:	07db      	lsls	r3, r3, #31
    331c:	d4ae      	bmi.n	327c <_dtoa_r+0xac4>
    331e:	463b      	mov	r3, r7
    3320:	461f      	mov	r7, r3
    3322:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    3326:	2a30      	cmp	r2, #48	; 0x30
    3328:	d0fa      	beq.n	3320 <_dtoa_r+0xb68>
    332a:	e6f9      	b.n	3120 <_dtoa_r+0x968>
    332c:	9a03      	ldr	r2, [sp, #12]
    332e:	429a      	cmp	r2, r3
    3330:	d1a5      	bne.n	327e <_dtoa_r+0xac6>
    3332:	2331      	movs	r3, #49	; 0x31
    3334:	f10a 0a01 	add.w	sl, sl, #1
    3338:	e779      	b.n	322e <_dtoa_r+0xa76>
    333a:	4b14      	ldr	r3, [pc, #80]	; (338c <_dtoa_r+0xbd4>)
    333c:	f7ff baa8 	b.w	2890 <_dtoa_r+0xd8>
    3340:	9b26      	ldr	r3, [sp, #152]	; 0x98
    3342:	2b00      	cmp	r3, #0
    3344:	f47f aa81 	bne.w	284a <_dtoa_r+0x92>
    3348:	4b11      	ldr	r3, [pc, #68]	; (3390 <_dtoa_r+0xbd8>)
    334a:	f7ff baa1 	b.w	2890 <_dtoa_r+0xd8>
    334e:	f1b9 0f00 	cmp.w	r9, #0
    3352:	dc03      	bgt.n	335c <_dtoa_r+0xba4>
    3354:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3356:	2b02      	cmp	r3, #2
    3358:	f73f aecb 	bgt.w	30f2 <_dtoa_r+0x93a>
    335c:	9f03      	ldr	r7, [sp, #12]
    335e:	4621      	mov	r1, r4
    3360:	4658      	mov	r0, fp
    3362:	f013 fdaf 	bl	16ec4 <quorem>
    3366:	9a03      	ldr	r2, [sp, #12]
    3368:	f100 0330 	add.w	r3, r0, #48	; 0x30
    336c:	f807 3b01 	strb.w	r3, [r7], #1
    3370:	1aba      	subs	r2, r7, r2
    3372:	4591      	cmp	r9, r2
    3374:	ddba      	ble.n	32ec <_dtoa_r+0xb34>
    3376:	4659      	mov	r1, fp
    3378:	2300      	movs	r3, #0
    337a:	220a      	movs	r2, #10
    337c:	4628      	mov	r0, r5
    337e:	f00d fb51 	bl	10a24 <__multadd>
    3382:	4683      	mov	fp, r0
    3384:	e7eb      	b.n	335e <_dtoa_r+0xba6>
    3386:	bf00      	nop
    3388:	00018d1e 	.word	0x00018d1e
    338c:	00017d64 	.word	0x00017d64
    3390:	00018ca2 	.word	0x00018ca2

00003394 <main>:
#include <lua/lua.h>
#include <lua/lauxlib.h>
#include <lua/lualib.h>

int main(void)
{
    3394:	b537      	push	{r0, r1, r2, r4, r5, lr}
	printk("LUA starting ...\n");
    3396:	480e      	ldr	r0, [pc, #56]	; (33d0 <main+0x3c>)
    3398:	f00e faf3 	bl	11982 <printk>

	lua_State *L = luaL_newstate();
    339c:	f001 f8fa 	bl	4594 <luaL_newstate>
	luaL_loadstring(L, "print('Hello, world!')");
	lua_pcall(L, 0, LUA_MULTRET, 0);
    33a0:	2400      	movs	r4, #0
	lua_State *L = luaL_newstate();
    33a2:	4605      	mov	r5, r0
	luaL_loadstring(L, "print('Hello, world!')");
    33a4:	490b      	ldr	r1, [pc, #44]	; (33d4 <main+0x40>)
    33a6:	f00e fbfa 	bl	11b9e <luaL_loadstring>
	lua_pcall(L, 0, LUA_MULTRET, 0);
    33aa:	4623      	mov	r3, r4
    33ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    33b0:	4621      	mov	r1, r4
    33b2:	4628      	mov	r0, r5
    33b4:	e9cd 4400 	strd	r4, r4, [sp]
    33b8:	f000 ffc4 	bl	4344 <lua_pcallk>
	lua_close(L);
    33bc:	4628      	mov	r0, r5
    33be:	f012 fa7e 	bl	158be <lua_close>

	printk("LUA done ...\n");
    33c2:	4805      	ldr	r0, [pc, #20]	; (33d8 <main+0x44>)
    33c4:	f00e fadd 	bl	11982 <printk>

	return 0;
    33c8:	4620      	mov	r0, r4
    33ca:	b003      	add	sp, #12
    33cc:	bd30      	pop	{r4, r5, pc}
    33ce:	bf00      	nop
    33d0:	00017cf0 	.word	0x00017cf0
    33d4:	00017d02 	.word	0x00017d02
    33d8:	00017d19 	.word	0x00017d19

000033dc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    33dc:	680b      	ldr	r3, [r1, #0]
    33de:	3301      	adds	r3, #1
    33e0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    33e2:	4b01      	ldr	r3, [pc, #4]	; (33e8 <char_out+0xc>)
    33e4:	681b      	ldr	r3, [r3, #0]
    33e6:	4718      	bx	r3
    33e8:	20000000 	.word	0x20000000

000033ec <__printk_hook_install>:
	_char_out = fn;
    33ec:	4b01      	ldr	r3, [pc, #4]	; (33f4 <__printk_hook_install+0x8>)
    33ee:	6018      	str	r0, [r3, #0]
}
    33f0:	4770      	bx	lr
    33f2:	bf00      	nop
    33f4:	20000000 	.word	0x20000000

000033f8 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    33f8:	b507      	push	{r0, r1, r2, lr}
    33fa:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    33fc:	2100      	movs	r1, #0
{
    33fe:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    3400:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    3402:	4803      	ldr	r0, [pc, #12]	; (3410 <vprintk+0x18>)
    3404:	a901      	add	r1, sp, #4
    3406:	f000 f865 	bl	34d4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    340a:	b003      	add	sp, #12
    340c:	f85d fb04 	ldr.w	pc, [sp], #4
    3410:	000033dd 	.word	0x000033dd

00003414 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    3414:	b5f0      	push	{r4, r5, r6, r7, lr}
    3416:	4603      	mov	r3, r0
    3418:	6802      	ldr	r2, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    341a:	270a      	movs	r7, #10
	size_t val = 0;
    341c:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    341e:	4e06      	ldr	r6, [pc, #24]	; (3438 <extract_decimal+0x24>)
    3420:	4611      	mov	r1, r2
    3422:	780c      	ldrb	r4, [r1, #0]
    3424:	3201      	adds	r2, #1
    3426:	5da5      	ldrb	r5, [r4, r6]
    3428:	076d      	lsls	r5, r5, #29
    342a:	d401      	bmi.n	3430 <extract_decimal+0x1c>
	}
	*str = sp;
    342c:	6019      	str	r1, [r3, #0]
	return val;
}
    342e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    3430:	fb07 4000 	mla	r0, r7, r0, r4
    3434:	3830      	subs	r0, #48	; 0x30
    3436:	e7f3      	b.n	3420 <extract_decimal+0xc>
    3438:	00018aec 	.word	0x00018aec

0000343c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    343c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3440:	4615      	mov	r5, r2
    3442:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    3444:	78d3      	ldrb	r3, [r2, #3]
    3446:	4a22      	ldr	r2, [pc, #136]	; (34d0 <encode_uint+0x94>)
	switch (specifier) {
    3448:	2b6f      	cmp	r3, #111	; 0x6f
    344a:	f813 b002 	ldrb.w	fp, [r3, r2]
{
    344e:	4680      	mov	r8, r0
    3450:	460f      	mov	r7, r1
    3452:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    3456:	d029      	beq.n	34ac <encode_uint+0x70>
    3458:	d824      	bhi.n	34a4 <encode_uint+0x68>
		return 16;
    345a:	2b58      	cmp	r3, #88	; 0x58
    345c:	bf14      	ite	ne
    345e:	260a      	movne	r6, #10
    3460:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    3462:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    3466:	4632      	mov	r2, r6
    3468:	2300      	movs	r3, #0
    346a:	4640      	mov	r0, r8
    346c:	4639      	mov	r1, r7
    346e:	f7fd fae5 	bl	a3c <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    3472:	2a09      	cmp	r2, #9
    3474:	b2d4      	uxtb	r4, r2
    3476:	d81e      	bhi.n	34b6 <encode_uint+0x7a>
    3478:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    347a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    347c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    347e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3482:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    3486:	d301      	bcc.n	348c <encode_uint+0x50>
    3488:	45d1      	cmp	r9, sl
    348a:	d811      	bhi.n	34b0 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    348c:	782b      	ldrb	r3, [r5, #0]
    348e:	069b      	lsls	r3, r3, #26
    3490:	d505      	bpl.n	349e <encode_uint+0x62>
		if (radix == 8) {
    3492:	2e08      	cmp	r6, #8
    3494:	d115      	bne.n	34c2 <encode_uint+0x86>
			conv->altform_0 = true;
    3496:	78ab      	ldrb	r3, [r5, #2]
    3498:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    349c:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    349e:	4648      	mov	r0, r9
    34a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    34a4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    34a8:	2b70      	cmp	r3, #112	; 0x70
    34aa:	e7d7      	b.n	345c <encode_uint+0x20>
	switch (specifier) {
    34ac:	2608      	movs	r6, #8
    34ae:	e7d8      	b.n	3462 <encode_uint+0x26>
		value /= radix;
    34b0:	4680      	mov	r8, r0
    34b2:	460f      	mov	r7, r1
    34b4:	e7d7      	b.n	3466 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    34b6:	f1bb 0f01 	cmp.w	fp, #1
    34ba:	bf0c      	ite	eq
    34bc:	3437      	addeq	r4, #55	; 0x37
    34be:	3457      	addne	r4, #87	; 0x57
    34c0:	e7db      	b.n	347a <encode_uint+0x3e>
		} else if (radix == 16) {
    34c2:	2e10      	cmp	r6, #16
    34c4:	d1eb      	bne.n	349e <encode_uint+0x62>
			conv->altform_0c = true;
    34c6:	78ab      	ldrb	r3, [r5, #2]
    34c8:	f043 0310 	orr.w	r3, r3, #16
    34cc:	e7e6      	b.n	349c <encode_uint+0x60>
    34ce:	bf00      	nop
    34d0:	00018aec 	.word	0x00018aec

000034d4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    34d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34d8:	4682      	mov	sl, r0
    34da:	468b      	mov	fp, r1
    34dc:	4691      	mov	r9, r2
    34de:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    34e0:	2500      	movs	r5, #0
{
    34e2:	b093      	sub	sp, #76	; 0x4c
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    34e4:	f899 0000 	ldrb.w	r0, [r9]
    34e8:	b908      	cbnz	r0, 34ee <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    34ea:	4628      	mov	r0, r5
    34ec:	e33d      	b.n	3b6a <cbvprintf+0x696>
			OUTC(*fp++);
    34ee:	f109 0301 	add.w	r3, r9, #1
		if (*fp != '%') {
    34f2:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    34f4:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    34f6:	d006      	beq.n	3506 <cbvprintf+0x32>
			OUTC('%');
    34f8:	4659      	mov	r1, fp
    34fa:	47d0      	blx	sl
    34fc:	2800      	cmp	r0, #0
    34fe:	f2c0 8334 	blt.w	3b6a <cbvprintf+0x696>
    3502:	3501      	adds	r5, #1
			break;
    3504:	e1f5      	b.n	38f2 <cbvprintf+0x41e>
		} state = {
    3506:	2218      	movs	r2, #24
    3508:	2100      	movs	r1, #0
    350a:	a80c      	add	r0, sp, #48	; 0x30
    350c:	f013 fbc4 	bl	16c98 <memset>
	if (*sp == '%') {
    3510:	f899 3001 	ldrb.w	r3, [r9, #1]
    3514:	2b25      	cmp	r3, #37	; 0x25
    3516:	d05a      	beq.n	35ce <cbvprintf+0xfa>
    3518:	f109 0201 	add.w	r2, r9, #1
    351c:	4616      	mov	r6, r2
		switch (*sp) {
    351e:	f812 3b01 	ldrb.w	r3, [r2], #1
    3522:	2b2b      	cmp	r3, #43	; 0x2b
    3524:	f000 808b 	beq.w	363e <cbvprintf+0x16a>
    3528:	d879      	bhi.n	361e <cbvprintf+0x14a>
    352a:	2b20      	cmp	r3, #32
    352c:	f000 808c 	beq.w	3648 <cbvprintf+0x174>
    3530:	2b23      	cmp	r3, #35	; 0x23
    3532:	f000 808e 	beq.w	3652 <cbvprintf+0x17e>
	if (conv->flag_zero && conv->flag_dash) {
    3536:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    353a:	f003 0244 	and.w	r2, r3, #68	; 0x44
    353e:	2a44      	cmp	r2, #68	; 0x44
    3540:	d103      	bne.n	354a <cbvprintf+0x76>
		conv->flag_zero = false;
    3542:	f36f 1386 	bfc	r3, #6, #1
    3546:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    354a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    354e:	9605      	str	r6, [sp, #20]
    3550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3554:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    3558:	7833      	ldrb	r3, [r6, #0]
    355a:	2b2a      	cmp	r3, #42	; 0x2a
    355c:	d17e      	bne.n	365c <cbvprintf+0x188>
		conv->width_star = true;
    355e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3562:	f043 0301 	orr.w	r3, r3, #1
    3566:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    356a:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    356c:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    356e:	781a      	ldrb	r2, [r3, #0]
    3570:	2a2e      	cmp	r2, #46	; 0x2e
    3572:	bf0c      	ite	eq
    3574:	2101      	moveq	r1, #1
    3576:	2100      	movne	r1, #0
    3578:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    357c:	f361 0241 	bfi	r2, r1, #1, #1
    3580:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    3584:	d10b      	bne.n	359e <cbvprintf+0xca>
	++sp;
    3586:	1c5a      	adds	r2, r3, #1
    3588:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    358a:	785a      	ldrb	r2, [r3, #1]
    358c:	2a2a      	cmp	r2, #42	; 0x2a
    358e:	d17b      	bne.n	3688 <cbvprintf+0x1b4>
		conv->prec_star = true;
    3590:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    3594:	3302      	adds	r3, #2
		conv->prec_star = true;
    3596:	f042 0204 	orr.w	r2, r2, #4
    359a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	switch (*sp) {
    359e:	4619      	mov	r1, r3
    35a0:	f811 0b01 	ldrb.w	r0, [r1], #1
    35a4:	286c      	cmp	r0, #108	; 0x6c
    35a6:	f000 80b6 	beq.w	3716 <cbvprintf+0x242>
    35aa:	d87d      	bhi.n	36a8 <cbvprintf+0x1d4>
    35ac:	2868      	cmp	r0, #104	; 0x68
    35ae:	f000 8084 	beq.w	36ba <cbvprintf+0x1e6>
    35b2:	286a      	cmp	r0, #106	; 0x6a
    35b4:	f000 80b9 	beq.w	372a <cbvprintf+0x256>
    35b8:	284c      	cmp	r0, #76	; 0x4c
    35ba:	f000 80bd 	beq.w	3738 <cbvprintf+0x264>
		conv->length_mod = LENGTH_NONE;
    35be:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		break;
    35c2:	4619      	mov	r1, r3
		conv->length_mod = LENGTH_NONE;
    35c4:	f36f 02c6 	bfc	r2, #3, #4
    35c8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    35cc:	e080      	b.n	36d0 <cbvprintf+0x1fc>
		conv->specifier = *sp++;
    35ce:	f109 0202 	add.w	r2, r9, #2
    35d2:	9202      	str	r2, [sp, #8]
    35d4:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    35d8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    35dc:	07d9      	lsls	r1, r3, #31
    35de:	f140 814a 	bpl.w	3876 <cbvprintf+0x3a2>
			width = va_arg(ap, int);
    35e2:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    35e6:	f1b8 0f00 	cmp.w	r8, #0
    35ea:	da07      	bge.n	35fc <cbvprintf+0x128>
				conv->flag_dash = true;
    35ec:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				width = -width;
    35f0:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    35f4:	f042 0204 	orr.w	r2, r2, #4
    35f8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		if (conv->prec_star) {
    35fc:	075a      	lsls	r2, r3, #29
    35fe:	f140 8143 	bpl.w	3888 <cbvprintf+0x3b4>
			int arg = va_arg(ap, int);
    3602:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    3606:	2f00      	cmp	r7, #0
    3608:	f280 8142 	bge.w	3890 <cbvprintf+0x3bc>
				conv->prec_present = false;
    360c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3610:	f36f 0341 	bfc	r3, #1, #1
    3614:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    3618:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    361c:	e138      	b.n	3890 <cbvprintf+0x3bc>
		switch (*sp) {
    361e:	2b2d      	cmp	r3, #45	; 0x2d
    3620:	d006      	beq.n	3630 <cbvprintf+0x15c>
    3622:	2b30      	cmp	r3, #48	; 0x30
    3624:	d187      	bne.n	3536 <cbvprintf+0x62>
			conv->flag_zero = true;
    3626:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    362a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    362e:	e003      	b.n	3638 <cbvprintf+0x164>
			conv->flag_dash = true;
    3630:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3634:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    3638:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    363c:	e76e      	b.n	351c <cbvprintf+0x48>
			conv->flag_plus = true;
    363e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3642:	f043 0308 	orr.w	r3, r3, #8
    3646:	e7f7      	b.n	3638 <cbvprintf+0x164>
			conv->flag_space = true;
    3648:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    364c:	f043 0310 	orr.w	r3, r3, #16
    3650:	e7f2      	b.n	3638 <cbvprintf+0x164>
			conv->flag_hash = true;
    3652:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3656:	f043 0320 	orr.w	r3, r3, #32
    365a:	e7ed      	b.n	3638 <cbvprintf+0x164>
	size_t width = extract_decimal(&sp);
    365c:	a805      	add	r0, sp, #20
    365e:	f7ff fed9 	bl	3414 <extract_decimal>
	if (sp != wp) {
    3662:	9b05      	ldr	r3, [sp, #20]
    3664:	42b3      	cmp	r3, r6
    3666:	d081      	beq.n	356c <cbvprintf+0x98>
		conv->unsupported |= ((conv->width_value < 0)
    3668:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    366c:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    366e:	f3c1 0240 	ubfx	r2, r1, #1, #1
    3672:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    3676:	0052      	lsls	r2, r2, #1
    3678:	f062 027f 	orn	r2, r2, #127	; 0x7f
    367c:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    3680:	430a      	orrs	r2, r1
    3682:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    3686:	e771      	b.n	356c <cbvprintf+0x98>
	size_t prec = extract_decimal(&sp);
    3688:	a805      	add	r0, sp, #20
    368a:	f7ff fec3 	bl	3414 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    368e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    3692:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    3694:	f3c3 0240 	ubfx	r2, r3, #1, #1
    3698:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    369c:	f360 0341 	bfi	r3, r0, #1, #1
    36a0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    36a4:	9b05      	ldr	r3, [sp, #20]
    36a6:	e77a      	b.n	359e <cbvprintf+0xca>
	switch (*sp) {
    36a8:	2874      	cmp	r0, #116	; 0x74
    36aa:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    36ae:	d040      	beq.n	3732 <cbvprintf+0x25e>
    36b0:	287a      	cmp	r0, #122	; 0x7a
    36b2:	d184      	bne.n	35be <cbvprintf+0xea>
		conv->length_mod = LENGTH_Z;
    36b4:	4613      	mov	r3, r2
    36b6:	2206      	movs	r2, #6
    36b8:	e028      	b.n	370c <cbvprintf+0x238>
		if (*++sp == 'h') {
    36ba:	785a      	ldrb	r2, [r3, #1]
    36bc:	2a68      	cmp	r2, #104	; 0x68
    36be:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    36c2:	d121      	bne.n	3708 <cbvprintf+0x234>
			conv->length_mod = LENGTH_HH;
    36c4:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    36c6:	f361 02c6 	bfi	r2, r1, #3, #4
    36ca:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    36ce:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    36d0:	460b      	mov	r3, r1
    36d2:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
    36d6:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    36d8:	9302      	str	r3, [sp, #8]
    36da:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
		if (conv->length_mod == LENGTH_UPPER_L) {
    36de:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	switch (conv->specifier) {
    36e2:	f200 80c0 	bhi.w	3866 <cbvprintf+0x392>
    36e6:	2a57      	cmp	r2, #87	; 0x57
    36e8:	d833      	bhi.n	3752 <cbvprintf+0x27e>
    36ea:	2a41      	cmp	r2, #65	; 0x41
    36ec:	d003      	beq.n	36f6 <cbvprintf+0x222>
    36ee:	3a45      	subs	r2, #69	; 0x45
    36f0:	2a02      	cmp	r2, #2
    36f2:	f200 80b8 	bhi.w	3866 <cbvprintf+0x392>
		conv->specifier_cat = SPECIFIER_FP;
    36f6:	2204      	movs	r2, #4
    36f8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    36fc:	f362 0302 	bfi	r3, r2, #0, #3
    3700:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    3704:	2301      	movs	r3, #1
			break;
    3706:	e085      	b.n	3814 <cbvprintf+0x340>
			conv->length_mod = LENGTH_H;
    3708:	4613      	mov	r3, r2
    370a:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    370c:	f362 03c6 	bfi	r3, r2, #3, #4
    3710:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    3714:	e7dc      	b.n	36d0 <cbvprintf+0x1fc>
		if (*++sp == 'l') {
    3716:	785a      	ldrb	r2, [r3, #1]
    3718:	2a6c      	cmp	r2, #108	; 0x6c
    371a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    371e:	d101      	bne.n	3724 <cbvprintf+0x250>
			conv->length_mod = LENGTH_LL;
    3720:	2104      	movs	r1, #4
    3722:	e7d0      	b.n	36c6 <cbvprintf+0x1f2>
			conv->length_mod = LENGTH_L;
    3724:	4613      	mov	r3, r2
    3726:	2203      	movs	r2, #3
    3728:	e7f0      	b.n	370c <cbvprintf+0x238>
		conv->length_mod = LENGTH_J;
    372a:	2205      	movs	r2, #5
    372c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3730:	e7ec      	b.n	370c <cbvprintf+0x238>
		conv->length_mod = LENGTH_T;
    3732:	4613      	mov	r3, r2
    3734:	2207      	movs	r2, #7
    3736:	e7e9      	b.n	370c <cbvprintf+0x238>
		conv->unsupported = true;
    3738:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    373c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    3740:	f023 0302 	bic.w	r3, r3, #2
    3744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    3748:	f043 0302 	orr.w	r3, r3, #2
    374c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    3750:	e7be      	b.n	36d0 <cbvprintf+0x1fc>
	switch (conv->specifier) {
    3752:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    3756:	2920      	cmp	r1, #32
    3758:	f200 8085 	bhi.w	3866 <cbvprintf+0x392>
    375c:	a001      	add	r0, pc, #4	; (adr r0, 3764 <cbvprintf+0x290>)
    375e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    3762:	bf00      	nop
    3764:	00003829 	.word	0x00003829
    3768:	00003867 	.word	0x00003867
    376c:	00003867 	.word	0x00003867
    3770:	00003867 	.word	0x00003867
    3774:	00003867 	.word	0x00003867
    3778:	00003867 	.word	0x00003867
    377c:	00003867 	.word	0x00003867
    3780:	00003867 	.word	0x00003867
    3784:	00003867 	.word	0x00003867
    3788:	000036f7 	.word	0x000036f7
    378c:	00003867 	.word	0x00003867
    3790:	00003829 	.word	0x00003829
    3794:	000037e9 	.word	0x000037e9
    3798:	000036f7 	.word	0x000036f7
    379c:	000036f7 	.word	0x000036f7
    37a0:	000036f7 	.word	0x000036f7
    37a4:	00003867 	.word	0x00003867
    37a8:	000037e9 	.word	0x000037e9
    37ac:	00003867 	.word	0x00003867
    37b0:	00003867 	.word	0x00003867
    37b4:	00003867 	.word	0x00003867
    37b8:	00003867 	.word	0x00003867
    37bc:	00003831 	.word	0x00003831
    37c0:	00003829 	.word	0x00003829
    37c4:	0000384d 	.word	0x0000384d
    37c8:	00003867 	.word	0x00003867
    37cc:	00003867 	.word	0x00003867
    37d0:	0000384d 	.word	0x0000384d
    37d4:	00003867 	.word	0x00003867
    37d8:	00003829 	.word	0x00003829
    37dc:	00003867 	.word	0x00003867
    37e0:	00003867 	.word	0x00003867
    37e4:	00003829 	.word	0x00003829
		conv->specifier_cat = SPECIFIER_SINT;
    37e8:	2001      	movs	r0, #1
    37ea:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    37ee:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    37f2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    37f6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    37f8:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    37fc:	bf02      	ittt	eq
    37fe:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    3802:	f041 0101 	orreq.w	r1, r1, #1
    3806:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    380a:	2a63      	cmp	r2, #99	; 0x63
    380c:	d131      	bne.n	3872 <cbvprintf+0x39e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    380e:	3b00      	subs	r3, #0
    3810:	bf18      	it	ne
    3812:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    3814:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    3818:	f3c2 0140 	ubfx	r1, r2, #1, #1
    381c:	430b      	orrs	r3, r1
    381e:	f363 0241 	bfi	r2, r3, #1, #1
    3822:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    3826:	e6d7      	b.n	35d8 <cbvprintf+0x104>
		conv->specifier_cat = SPECIFIER_UINT;
    3828:	2002      	movs	r0, #2
    382a:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    382e:	e7de      	b.n	37ee <cbvprintf+0x31a>
		conv->specifier_cat = SPECIFIER_PTR;
    3830:	2103      	movs	r1, #3
    3832:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    3836:	f003 0378 	and.w	r3, r3, #120	; 0x78
    383a:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    383e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    3842:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    3844:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    3848:	4143      	adcs	r3, r0
    384a:	e7e3      	b.n	3814 <cbvprintf+0x340>
		conv->specifier_cat = SPECIFIER_PTR;
    384c:	2103      	movs	r1, #3
    384e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    3852:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    3856:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    385a:	bf14      	ite	ne
    385c:	2301      	movne	r3, #1
    385e:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    3860:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    3864:	e7d6      	b.n	3814 <cbvprintf+0x340>
		conv->invalid = true;
    3866:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    386a:	f043 0301 	orr.w	r3, r3, #1
    386e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    3872:	2300      	movs	r3, #0
    3874:	e7ce      	b.n	3814 <cbvprintf+0x340>
		} else if (conv->width_present) {
    3876:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    387a:	2a00      	cmp	r2, #0
		int width = -1;
    387c:	bfac      	ite	ge
    387e:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
			width = conv->width_value;
    3882:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
    3886:	e6b9      	b.n	35fc <cbvprintf+0x128>
		} else if (conv->prec_present) {
    3888:	079f      	lsls	r7, r3, #30
    388a:	f57f aec5 	bpl.w	3618 <cbvprintf+0x144>
			precision = conv->prec_value;
    388e:	9f10      	ldr	r7, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    3890:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    3892:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
    3896:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			= (enum length_mod_enum)conv->length_mod;
    389a:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		enum specifier_cat_enum specifier_cat
    389e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    38a2:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    38a4:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    38a8:	d139      	bne.n	391e <cbvprintf+0x44a>
			switch (length_mod) {
    38aa:	1ecb      	subs	r3, r1, #3
    38ac:	2b04      	cmp	r3, #4
    38ae:	d823      	bhi.n	38f8 <cbvprintf+0x424>
    38b0:	e8df f003 	tbb	[pc, r3]
    38b4:	22090903 	.word	0x22090903
    38b8:	22          	.byte	0x22
    38b9:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    38ba:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    38be:	17da      	asrs	r2, r3, #31
    38c0:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    38c4:	e006      	b.n	38d4 <cbvprintf+0x400>
					(sint_value_type)va_arg(ap, intmax_t);
    38c6:	3407      	adds	r4, #7
    38c8:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    38cc:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    38d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    38d4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    38d8:	f013 0603 	ands.w	r6, r3, #3
    38dc:	d057      	beq.n	398e <cbvprintf+0x4ba>
			OUTS(sp, fp);
    38de:	464a      	mov	r2, r9
    38e0:	4659      	mov	r1, fp
    38e2:	4650      	mov	r0, sl
    38e4:	9b02      	ldr	r3, [sp, #8]
    38e6:	f00e f863 	bl	119b0 <outs>
    38ea:	2800      	cmp	r0, #0
    38ec:	f2c0 813d 	blt.w	3b6a <cbvprintf+0x696>
    38f0:	4405      	add	r5, r0
			OUTS(bps, bpe);
    38f2:	f8dd 9008 	ldr.w	r9, [sp, #8]
    38f6:	e5f5      	b.n	34e4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    38f8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    38fc:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    38fe:	ea4f 72e3 	mov.w	r2, r3, asr #31
    3902:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    3906:	d105      	bne.n	3914 <cbvprintf+0x440>
				value->uint = (unsigned char)value->uint;
    3908:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    390c:	930c      	str	r3, [sp, #48]	; 0x30
    390e:	2300      	movs	r3, #0
    3910:	930d      	str	r3, [sp, #52]	; 0x34
    3912:	e7df      	b.n	38d4 <cbvprintf+0x400>
			} else if (length_mod == LENGTH_H) {
    3914:	2902      	cmp	r1, #2
    3916:	d1dd      	bne.n	38d4 <cbvprintf+0x400>
				value->sint = (short)value->sint;
    3918:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    391c:	e7cf      	b.n	38be <cbvprintf+0x3ea>
		} else if (specifier_cat == SPECIFIER_UINT) {
    391e:	2b02      	cmp	r3, #2
    3920:	d123      	bne.n	396a <cbvprintf+0x496>
			switch (length_mod) {
    3922:	1ecb      	subs	r3, r1, #3
    3924:	2b04      	cmp	r3, #4
    3926:	d813      	bhi.n	3950 <cbvprintf+0x47c>
    3928:	e8df f003 	tbb	[pc, r3]
    392c:	120a0a03 	.word	0x120a0a03
    3930:	12          	.byte	0x12
    3931:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    3932:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    3934:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    3936:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    3938:	920c      	str	r2, [sp, #48]	; 0x30
    393a:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    393c:	4604      	mov	r4, r0
    393e:	e7c9      	b.n	38d4 <cbvprintf+0x400>
					(uint_value_type)va_arg(ap,
    3940:	1de0      	adds	r0, r4, #7
    3942:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    3946:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    394a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    394e:	e7f5      	b.n	393c <cbvprintf+0x468>
					(uint_value_type)va_arg(ap, size_t);
    3950:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    3954:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    3956:	930c      	str	r3, [sp, #48]	; 0x30
    3958:	f04f 0300 	mov.w	r3, #0
    395c:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    395e:	d0d3      	beq.n	3908 <cbvprintf+0x434>
			} else if (length_mod == LENGTH_H) {
    3960:	2902      	cmp	r1, #2
    3962:	d1b7      	bne.n	38d4 <cbvprintf+0x400>
				value->uint = (unsigned short)value->uint;
    3964:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    3968:	e7d0      	b.n	390c <cbvprintf+0x438>
		} else if (specifier_cat == SPECIFIER_FP) {
    396a:	2b04      	cmp	r3, #4
    396c:	d109      	bne.n	3982 <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, long long);
    396e:	1de3      	adds	r3, r4, #7
    3970:	f023 0307 	bic.w	r3, r3, #7
    3974:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    3978:	e9d3 2300 	ldrd	r2, r3, [r3]
    397c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    3980:	e7a8      	b.n	38d4 <cbvprintf+0x400>
		} else if (specifier_cat == SPECIFIER_PTR) {
    3982:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    3984:	bf04      	itt	eq
    3986:	f854 3b04 	ldreq.w	r3, [r4], #4
    398a:	930c      	streq	r3, [sp, #48]	; 0x30
    398c:	e7a2      	b.n	38d4 <cbvprintf+0x400>
		switch (conv->specifier) {
    398e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    3992:	2878      	cmp	r0, #120	; 0x78
    3994:	d8ad      	bhi.n	38f2 <cbvprintf+0x41e>
    3996:	2862      	cmp	r0, #98	; 0x62
    3998:	d820      	bhi.n	39dc <cbvprintf+0x508>
    399a:	2825      	cmp	r0, #37	; 0x25
    399c:	f43f adac 	beq.w	34f8 <cbvprintf+0x24>
    39a0:	2858      	cmp	r0, #88	; 0x58
    39a2:	d1a6      	bne.n	38f2 <cbvprintf+0x41e>
			bps = encode_uint(value->uint, conv, buf, bpe);
    39a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    39a8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    39ac:	9300      	str	r3, [sp, #0]
    39ae:	aa0e      	add	r2, sp, #56	; 0x38
    39b0:	ab06      	add	r3, sp, #24
    39b2:	f7ff fd43 	bl	343c <encode_uint>
    39b6:	4681      	mov	r9, r0
			if (precision >= 0) {
    39b8:	2f00      	cmp	r7, #0
    39ba:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    39be:	db0b      	blt.n	39d8 <cbvprintf+0x504>
				conv->flag_zero = false;
    39c0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    39c4:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
    39c8:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    39cc:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    39ce:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    39d2:	d901      	bls.n	39d8 <cbvprintf+0x504>
					conv->pad0_value = precision - (int)len;
    39d4:	1afb      	subs	r3, r7, r3
    39d6:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    39d8:	4607      	mov	r7, r0
    39da:	e03c      	b.n	3a56 <cbvprintf+0x582>
		switch (conv->specifier) {
    39dc:	3863      	subs	r0, #99	; 0x63
    39de:	2815      	cmp	r0, #21
    39e0:	d887      	bhi.n	38f2 <cbvprintf+0x41e>
    39e2:	a201      	add	r2, pc, #4	; (adr r2, 39e8 <cbvprintf+0x514>)
    39e4:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    39e8:	00003a67 	.word	0x00003a67
    39ec:	00003ac9 	.word	0x00003ac9
    39f0:	000038f3 	.word	0x000038f3
    39f4:	000038f3 	.word	0x000038f3
    39f8:	000038f3 	.word	0x000038f3
    39fc:	000038f3 	.word	0x000038f3
    3a00:	00003ac9 	.word	0x00003ac9
    3a04:	000038f3 	.word	0x000038f3
    3a08:	000038f3 	.word	0x000038f3
    3a0c:	000038f3 	.word	0x000038f3
    3a10:	000038f3 	.word	0x000038f3
    3a14:	00003b23 	.word	0x00003b23
    3a18:	00003af1 	.word	0x00003af1
    3a1c:	00003af5 	.word	0x00003af5
    3a20:	000038f3 	.word	0x000038f3
    3a24:	000038f3 	.word	0x000038f3
    3a28:	00003a41 	.word	0x00003a41
    3a2c:	000038f3 	.word	0x000038f3
    3a30:	00003af1 	.word	0x00003af1
    3a34:	000038f3 	.word	0x000038f3
    3a38:	000038f3 	.word	0x000038f3
    3a3c:	00003af1 	.word	0x00003af1
			if (precision >= 0) {
    3a40:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    3a42:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
    3a46:	db0a      	blt.n	3a5e <cbvprintf+0x58a>
				len = strnlen(bps, precision);
    3a48:	4639      	mov	r1, r7
    3a4a:	4648      	mov	r0, r9
    3a4c:	f013 f9d8 	bl	16e00 <strnlen>
		char sign = 0;
    3a50:	2600      	movs	r6, #0
			bpe = bps + len;
    3a52:	eb09 0700 	add.w	r7, r9, r0
		if (bps == NULL) {
    3a56:	f1b9 0f00 	cmp.w	r9, #0
    3a5a:	d10c      	bne.n	3a76 <cbvprintf+0x5a2>
    3a5c:	e749      	b.n	38f2 <cbvprintf+0x41e>
				len = strlen(bps);
    3a5e:	4648      	mov	r0, r9
    3a60:	f7fd fa06 	bl	e70 <strlen>
    3a64:	e7f4      	b.n	3a50 <cbvprintf+0x57c>
			break;
    3a66:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    3a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			bpe = buf + 1;
    3a6a:	f10d 0719 	add.w	r7, sp, #25
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    3a6e:	f88d 3018 	strb.w	r3, [sp, #24]
			bps = buf;
    3a72:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
    3a76:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
    3a7a:	b106      	cbz	r6, 3a7e <cbvprintf+0x5aa>
			nj_len += 1U;
    3a7c:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    3a7e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    3a82:	06d0      	lsls	r0, r2, #27
    3a84:	d566      	bpl.n	3b54 <cbvprintf+0x680>
			nj_len += 2U;
    3a86:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    3a88:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    3a8a:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
    3a8c:	bf48      	it	mi
    3a8e:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
    3a90:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    3a92:	bf48      	it	mi
    3a94:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    3a96:	f1b8 0f00 	cmp.w	r8, #0
    3a9a:	dd73      	ble.n	3b84 <cbvprintf+0x6b0>
			if (!conv->flag_dash) {
    3a9c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
    3aa0:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    3aa4:	f3c2 0380 	ubfx	r3, r2, #2, #1
    3aa8:	9303      	str	r3, [sp, #12]
    3aaa:	0753      	lsls	r3, r2, #29
    3aac:	d46a      	bmi.n	3b84 <cbvprintf+0x6b0>
				if (conv->flag_zero) {
    3aae:	0650      	lsls	r0, r2, #25
    3ab0:	d55e      	bpl.n	3b70 <cbvprintf+0x69c>
					if (sign != 0) {
    3ab2:	b13e      	cbz	r6, 3ac4 <cbvprintf+0x5f0>
						OUTC(sign);
    3ab4:	4659      	mov	r1, fp
    3ab6:	4630      	mov	r0, r6
    3ab8:	47d0      	blx	sl
    3aba:	2800      	cmp	r0, #0
    3abc:	db55      	blt.n	3b6a <cbvprintf+0x696>
						sign = 0;
    3abe:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    3ac0:	3501      	adds	r5, #1
						sign = 0;
    3ac2:	461e      	mov	r6, r3
					pad = '0';
    3ac4:	2330      	movs	r3, #48	; 0x30
    3ac6:	e054      	b.n	3b72 <cbvprintf+0x69e>
			if (conv->flag_plus) {
    3ac8:	071e      	lsls	r6, r3, #28
    3aca:	d40f      	bmi.n	3aec <cbvprintf+0x618>
				sign = ' ';
    3acc:	f013 0610 	ands.w	r6, r3, #16
    3ad0:	bf18      	it	ne
    3ad2:	2620      	movne	r6, #32
			sint = value->sint;
    3ad4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    3ad8:	2b00      	cmp	r3, #0
    3ada:	f6bf af63 	bge.w	39a4 <cbvprintf+0x4d0>
				value->uint = (uint_value_type)-sint;
    3ade:	4252      	negs	r2, r2
    3ae0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    3ae4:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    3ae6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    3aea:	e75b      	b.n	39a4 <cbvprintf+0x4d0>
				sign = '+';
    3aec:	262b      	movs	r6, #43	; 0x2b
    3aee:	e7f1      	b.n	3ad4 <cbvprintf+0x600>
		switch (conv->specifier) {
    3af0:	2600      	movs	r6, #0
    3af2:	e757      	b.n	39a4 <cbvprintf+0x4d0>
			if (value->ptr != NULL) {
    3af4:	980c      	ldr	r0, [sp, #48]	; 0x30
    3af6:	b340      	cbz	r0, 3b4a <cbvprintf+0x676>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3af8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    3afc:	9300      	str	r3, [sp, #0]
    3afe:	2100      	movs	r1, #0
    3b00:	ab06      	add	r3, sp, #24
    3b02:	aa0e      	add	r2, sp, #56	; 0x38
    3b04:	f7ff fc9a 	bl	343c <encode_uint>
				conv->altform_0c = true;
    3b08:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3b0c:	4681      	mov	r9, r0
				conv->altform_0c = true;
    3b0e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    3b12:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    3b16:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    3b1a:	2600      	movs	r6, #0
				conv->altform_0c = true;
    3b1c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
				goto prec_int_pad0;
    3b20:	e74a      	b.n	39b8 <cbvprintf+0x4e4>
				store_count(conv, value->ptr, count);
    3b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    3b24:	2907      	cmp	r1, #7
    3b26:	f63f aee4 	bhi.w	38f2 <cbvprintf+0x41e>
    3b2a:	e8df f001 	tbb	[pc, r1]
    3b2e:	040c      	.short	0x040c
    3b30:	08080c06 	.word	0x08080c06
    3b34:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    3b36:	701d      	strb	r5, [r3, #0]
		break;
    3b38:	e6db      	b.n	38f2 <cbvprintf+0x41e>
		*(short *)dp = (short)count;
    3b3a:	801d      	strh	r5, [r3, #0]
		break;
    3b3c:	e6d9      	b.n	38f2 <cbvprintf+0x41e>
		*(intmax_t *)dp = (intmax_t)count;
    3b3e:	17ea      	asrs	r2, r5, #31
    3b40:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    3b44:	e6d5      	b.n	38f2 <cbvprintf+0x41e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3b46:	601d      	str	r5, [r3, #0]
		break;
    3b48:	e6d3      	b.n	38f2 <cbvprintf+0x41e>
			bpe = bps + 5;
    3b4a:	4f2e      	ldr	r7, [pc, #184]	; (3c04 <cbvprintf+0x730>)
    3b4c:	4606      	mov	r6, r0
			bps = "(nil)";
    3b4e:	f1a7 0905 	sub.w	r9, r7, #5
    3b52:	e790      	b.n	3a76 <cbvprintf+0x5a2>
		} else if (conv->altform_0) {
    3b54:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    3b56:	bf48      	it	mi
    3b58:	3301      	addmi	r3, #1
    3b5a:	e795      	b.n	3a88 <cbvprintf+0x5b4>
					OUTC(pad);
    3b5c:	4618      	mov	r0, r3
    3b5e:	4659      	mov	r1, fp
    3b60:	9303      	str	r3, [sp, #12]
    3b62:	47d0      	blx	sl
    3b64:	2800      	cmp	r0, #0
    3b66:	9b03      	ldr	r3, [sp, #12]
    3b68:	da04      	bge.n	3b74 <cbvprintf+0x6a0>
#undef OUTS
#undef OUTC
}
    3b6a:	b013      	add	sp, #76	; 0x4c
    3b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    3b70:	2320      	movs	r3, #32
    3b72:	4445      	add	r5, r8
    3b74:	4642      	mov	r2, r8
				while (width-- > 0) {
    3b76:	2a00      	cmp	r2, #0
    3b78:	eba5 0108 	sub.w	r1, r5, r8
    3b7c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3b80:	dcec      	bgt.n	3b5c <cbvprintf+0x688>
    3b82:	460d      	mov	r5, r1
		if (sign != 0) {
    3b84:	b12e      	cbz	r6, 3b92 <cbvprintf+0x6be>
			OUTC(sign);
    3b86:	4659      	mov	r1, fp
    3b88:	4630      	mov	r0, r6
    3b8a:	47d0      	blx	sl
    3b8c:	2800      	cmp	r0, #0
    3b8e:	dbec      	blt.n	3b6a <cbvprintf+0x696>
    3b90:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    3b92:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3b96:	06d9      	lsls	r1, r3, #27
    3b98:	d401      	bmi.n	3b9e <cbvprintf+0x6ca>
    3b9a:	071a      	lsls	r2, r3, #28
    3b9c:	d505      	bpl.n	3baa <cbvprintf+0x6d6>
				OUTC('0');
    3b9e:	4659      	mov	r1, fp
    3ba0:	2030      	movs	r0, #48	; 0x30
    3ba2:	47d0      	blx	sl
    3ba4:	2800      	cmp	r0, #0
    3ba6:	dbe0      	blt.n	3b6a <cbvprintf+0x696>
    3ba8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    3baa:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3bae:	06db      	lsls	r3, r3, #27
    3bb0:	d506      	bpl.n	3bc0 <cbvprintf+0x6ec>
				OUTC(conv->specifier);
    3bb2:	4659      	mov	r1, fp
    3bb4:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    3bb8:	47d0      	blx	sl
    3bba:	2800      	cmp	r0, #0
    3bbc:	dbd5      	blt.n	3b6a <cbvprintf+0x696>
    3bbe:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    3bc0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    3bc2:	442e      	add	r6, r5
    3bc4:	1b73      	subs	r3, r6, r5
    3bc6:	2b00      	cmp	r3, #0
    3bc8:	dc15      	bgt.n	3bf6 <cbvprintf+0x722>
			OUTS(bps, bpe);
    3bca:	463b      	mov	r3, r7
    3bcc:	464a      	mov	r2, r9
    3bce:	4659      	mov	r1, fp
    3bd0:	4650      	mov	r0, sl
    3bd2:	f00d feed 	bl	119b0 <outs>
    3bd6:	2800      	cmp	r0, #0
    3bd8:	dbc7      	blt.n	3b6a <cbvprintf+0x696>
    3bda:	4405      	add	r5, r0
		while (width > 0) {
    3bdc:	44a8      	add	r8, r5
    3bde:	eba8 0305 	sub.w	r3, r8, r5
    3be2:	2b00      	cmp	r3, #0
    3be4:	f77f ae85 	ble.w	38f2 <cbvprintf+0x41e>
			OUTC(' ');
    3be8:	4659      	mov	r1, fp
    3bea:	2020      	movs	r0, #32
    3bec:	47d0      	blx	sl
    3bee:	2800      	cmp	r0, #0
    3bf0:	dbbb      	blt.n	3b6a <cbvprintf+0x696>
    3bf2:	3501      	adds	r5, #1
			--width;
    3bf4:	e7f3      	b.n	3bde <cbvprintf+0x70a>
				OUTC('0');
    3bf6:	4659      	mov	r1, fp
    3bf8:	2030      	movs	r0, #48	; 0x30
    3bfa:	47d0      	blx	sl
    3bfc:	2800      	cmp	r0, #0
    3bfe:	dbb4      	blt.n	3b6a <cbvprintf+0x696>
    3c00:	3501      	adds	r5, #1
    3c02:	e7df      	b.n	3bc4 <cbvprintf+0x6f0>
    3c04:	00017d2c 	.word	0x00017d2c

00003c08 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3c08:	4901      	ldr	r1, [pc, #4]	; (3c10 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3c0a:	2210      	movs	r2, #16
	str	r2, [r1]
    3c0c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3c0e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3c10:	e000ed10 	.word	0xe000ed10

00003c14 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3c14:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3c16:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3c18:	f380 8811 	msr	BASEPRI, r0
	isb
    3c1c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3c20:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3c24:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3c26:	b662      	cpsie	i
	isb
    3c28:	f3bf 8f6f 	isb	sy

	bx	lr
    3c2c:	4770      	bx	lr
    3c2e:	bf00      	nop

00003c30 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3c30:	bf30      	wfi
    b z_SysNmiOnReset
    3c32:	f7ff bffd 	b.w	3c30 <z_SysNmiOnReset>
    3c36:	bf00      	nop

00003c38 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    3c38:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3c3a:	4b09      	ldr	r3, [pc, #36]	; (3c60 <z_arm_prep_c+0x28>)
    3c3c:	4a09      	ldr	r2, [pc, #36]	; (3c64 <z_arm_prep_c+0x2c>)
    3c3e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    3c42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    3c46:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3c48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c4c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3c50:	f008 fab2 	bl	c1b8 <z_bss_zero>
	z_data_copy();
    3c54:	f008 ff0a 	bl	ca6c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3c58:	f000 f98a 	bl	3f70 <z_arm_interrupt_init>
	z_cstart();
    3c5c:	f008 fab6 	bl	c1cc <z_cstart>
    3c60:	00000000 	.word	0x00000000
    3c64:	e000ed00 	.word	0xe000ed00

00003c68 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3c68:	4a09      	ldr	r2, [pc, #36]	; (3c90 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3c6a:	490a      	ldr	r1, [pc, #40]	; (3c94 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3c6c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3c6e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    3c70:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
    3c72:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3c74:	4908      	ldr	r1, [pc, #32]	; (3c98 <arch_swap+0x30>)
    3c76:	684b      	ldr	r3, [r1, #4]
    3c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3c7c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    3c7e:	2300      	movs	r3, #0
    3c80:	f383 8811 	msr	BASEPRI, r3
    3c84:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3c88:	6893      	ldr	r3, [r2, #8]
}
    3c8a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    3c8c:	4770      	bx	lr
    3c8e:	bf00      	nop
    3c90:	20000348 	.word	0x20000348
    3c94:	00017c48 	.word	0x00017c48
    3c98:	e000ed00 	.word	0xe000ed00

00003c9c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3c9c:	490f      	ldr	r1, [pc, #60]	; (3cdc <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3c9e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3ca0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3ca4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3ca6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3caa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3cae:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3cb0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3cb4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3cb8:	4f09      	ldr	r7, [pc, #36]	; (3ce0 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3cba:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3cbe:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    3cc0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3cc2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3cc4:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
    3cc6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3cc8:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3cca:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3cce:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3cd2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3cd6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3cda:	4770      	bx	lr
    ldr r1, =_kernel
    3cdc:	20000348 	.word	0x20000348
    ldr v4, =_SCS_ICSR
    3ce0:	e000ed04 	.word	0xe000ed04

00003ce4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3ce4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3ce8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3cea:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3cee:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3cf2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3cf4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3cf8:	2902      	cmp	r1, #2
    beq _oops
    3cfa:	d0ff      	beq.n	3cfc <_oops>

00003cfc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3cfc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3cfe:	f00d fe70 	bl	119e2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3d02:	bd01      	pop	{r0, pc}

00003d04 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3d04:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3d08:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    3d0a:	490b      	ldr	r1, [pc, #44]	; (3d38 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    3d0c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    3d10:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    3d12:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    3d16:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3d1a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    3d1c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    3d20:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3d24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3d28:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3d2c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3d2e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3d30:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3d32:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3d34:	4770      	bx	lr
    3d36:	bf00      	nop
    3d38:	0001199d 	.word	0x0001199d

00003d3c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3d3c:	4b07      	ldr	r3, [pc, #28]	; (3d5c <arch_switch_to_main_thread+0x20>)
    3d3e:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3d40:	4610      	mov	r0, r2
    3d42:	f381 8809 	msr	PSP, r1
    3d46:	2100      	movs	r1, #0
    3d48:	b663      	cpsie	if
    3d4a:	f381 8811 	msr	BASEPRI, r1
    3d4e:	f3bf 8f6f 	isb	sy
    3d52:	2200      	movs	r2, #0
    3d54:	2300      	movs	r3, #0
    3d56:	f00d fe21 	bl	1199c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3d5a:	bf00      	nop
    3d5c:	20000348 	.word	0x20000348

00003d60 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3d60:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3d62:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3d66:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3d6a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3d6e:	4904      	ldr	r1, [pc, #16]	; (3d80 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3d70:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3d72:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3d74:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3d76:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3d7a:	4902      	ldr	r1, [pc, #8]	; (3d84 <_isr_wrapper+0x24>)
	bx r1
    3d7c:	4708      	bx	r1
    3d7e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    3d80:	00017670 	.word	0x00017670
	ldr r1, =z_arm_int_exit
    3d84:	00003d89 	.word	0x00003d89

00003d88 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3d88:	4b04      	ldr	r3, [pc, #16]	; (3d9c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3d8a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3d8c:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    3d8e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3d90:	d003      	beq.n	3d9a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3d92:	4903      	ldr	r1, [pc, #12]	; (3da0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3d98:	600a      	str	r2, [r1, #0]

00003d9a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3d9a:	4770      	bx	lr
	ldr r3, =_kernel
    3d9c:	20000348 	.word	0x20000348
	ldr r1, =_SCS_ICSR
    3da0:	e000ed04 	.word	0xe000ed04

00003da4 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3da4:	4b0c      	ldr	r3, [pc, #48]	; (3dd8 <bus_fault.constprop.0+0x34>)
    3da6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3dac:	0592      	lsls	r2, r2, #22
    3dae:	d508      	bpl.n	3dc2 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3db2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3db4:	0412      	lsls	r2, r2, #16
    3db6:	d504      	bpl.n	3dc2 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    3db8:	b118      	cbz	r0, 3dc2 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3dbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3dc0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    3dc2:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3dc4:	4b04      	ldr	r3, [pc, #16]	; (3dd8 <bus_fault.constprop.0+0x34>)
    3dc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3dca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3dcc:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    3dd0:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3dd2:	7008      	strb	r0, [r1, #0]

	return reason;
}
    3dd4:	4770      	bx	lr
    3dd6:	bf00      	nop
    3dd8:	e000ed00 	.word	0xe000ed00

00003ddc <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3ddc:	4b0d      	ldr	r3, [pc, #52]	; (3e14 <mem_manage_fault.constprop.0+0x38>)
    3dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3de2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3de4:	0792      	lsls	r2, r2, #30
    3de6:	d508      	bpl.n	3dfa <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
    3de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3dea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3dec:	0612      	lsls	r2, r2, #24
    3dee:	d504      	bpl.n	3dfa <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
    3df0:	b118      	cbz	r0, 3dfa <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    3df8:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3dfa:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3dfc:	4b05      	ldr	r3, [pc, #20]	; (3e14 <mem_manage_fault.constprop.0+0x38>)
    3dfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e02:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3e04:	bf58      	it	pl
    3e06:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e0a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    3e0e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3e10:	7008      	strb	r0, [r1, #0]
}
    3e12:	4770      	bx	lr
    3e14:	e000ed00 	.word	0xe000ed00

00003e18 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3e18:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3e1a:	4b4b      	ldr	r3, [pc, #300]	; (3f48 <z_arm_fault+0x130>)
{
    3e1c:	460c      	mov	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3e1e:	685b      	ldr	r3, [r3, #4]
    3e20:	2500      	movs	r5, #0
{
    3e22:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3e28:	f385 8811 	msr	BASEPRI, r5
    3e2c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3e30:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    3e34:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    3e38:	d111      	bne.n	3e5e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3e3a:	f002 010c 	and.w	r1, r2, #12
    3e3e:	2908      	cmp	r1, #8
    3e40:	d00d      	beq.n	3e5e <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3e42:	0716      	lsls	r6, r2, #28
    3e44:	d401      	bmi.n	3e4a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    3e46:	4604      	mov	r4, r0
			*nested_exc = true;
    3e48:	2501      	movs	r5, #1
	*recoverable = false;
    3e4a:	2200      	movs	r2, #0
	switch (fault) {
    3e4c:	3b03      	subs	r3, #3
	*recoverable = false;
    3e4e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    3e52:	2b03      	cmp	r3, #3
    3e54:	d870      	bhi.n	3f38 <z_arm_fault+0x120>
    3e56:	e8df f003 	tbb	[pc, r3]
    3e5a:	5a04      	.short	0x5a04
    3e5c:	625e      	.short	0x625e
		return NULL;
    3e5e:	462c      	mov	r4, r5
    3e60:	e7f3      	b.n	3e4a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3e62:	4a39      	ldr	r2, [pc, #228]	; (3f48 <z_arm_fault+0x130>)
    3e64:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    3e66:	f013 0302 	ands.w	r3, r3, #2
    3e6a:	d165      	bne.n	3f38 <z_arm_fault+0x120>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3e6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    3e6e:	2900      	cmp	r1, #0
    3e70:	db14      	blt.n	3e9c <z_arm_fault+0x84>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3e72:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    3e74:	0049      	lsls	r1, r1, #1
    3e76:	d511      	bpl.n	3e9c <z_arm_fault+0x84>
	uint16_t fault_insn = *(ret_addr - 1);
    3e78:	69a1      	ldr	r1, [r4, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3e7a:	f831 0c02 	ldrh.w	r0, [r1, #-2]
    3e7e:	f64d 7102 	movw	r1, #57090	; 0xdf02
    3e82:	4288      	cmp	r0, r1
    3e84:	d009      	beq.n	3e9a <z_arm_fault+0x82>
		} else if (SCB_MMFSR != 0) {
    3e86:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
    3e8a:	b331      	cbz	r1, 3eda <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    3e8c:	2001      	movs	r0, #1
    3e8e:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    3e92:	f7ff ffa3 	bl	3ddc <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
    3e96:	4603      	mov	r3, r0
		break;
    3e98:	e000      	b.n	3e9c <z_arm_fault+0x84>
			reason = esf->basic.r0;
    3e9a:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3e9c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3ea0:	b9ca      	cbnz	r2, 3ed6 <z_arm_fault+0xbe>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3ea2:	ae02      	add	r6, sp, #8
    3ea4:	f104 0720 	add.w	r7, r4, #32
    3ea8:	4632      	mov	r2, r6
    3eaa:	6820      	ldr	r0, [r4, #0]
    3eac:	6861      	ldr	r1, [r4, #4]
    3eae:	3408      	adds	r4, #8
    3eb0:	c203      	stmia	r2!, {r0, r1}
    3eb2:	42bc      	cmp	r4, r7
    3eb4:	4616      	mov	r6, r2
    3eb6:	d1f7      	bne.n	3ea8 <z_arm_fault+0x90>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3eba:	2d00      	cmp	r5, #0
    3ebc:	d03e      	beq.n	3f3c <z_arm_fault+0x124>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3ebe:	f3c2 0108 	ubfx	r1, r2, #0, #9
    3ec2:	b921      	cbnz	r1, 3ece <z_arm_fault+0xb6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3ec4:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    3ec8:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3ecc:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    3ece:	4618      	mov	r0, r3
    3ed0:	a902      	add	r1, sp, #8
    3ed2:	f00d fd84 	bl	119de <z_arm_fatal_error>
}
    3ed6:	b00b      	add	sp, #44	; 0x2c
    3ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
    3eda:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
    3ede:	b129      	cbz	r1, 3eec <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    3ee0:	2001      	movs	r0, #1
    3ee2:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    3ee6:	f7ff ff5d 	bl	3da4 <bus_fault.constprop.0>
    3eea:	e7d4      	b.n	3e96 <z_arm_fault+0x7e>
		} else if (SCB_UFSR != 0) {
    3eec:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
    3eee:	b289      	uxth	r1, r1
    3ef0:	2900      	cmp	r1, #0
    3ef2:	d0d3      	beq.n	3e9c <z_arm_fault+0x84>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3ef4:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3ef6:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3ef8:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3efa:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3efc:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3efe:	6a91      	ldr	r1, [r2, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3f00:	6a91      	ldr	r1, [r2, #40]	; 0x28
    3f02:	ea6f 4101 	mvn.w	r1, r1, lsl #16
    3f06:	ea6f 4111 	mvn.w	r1, r1, lsr #16
    3f0a:	6291      	str	r1, [r2, #40]	; 0x28
	return reason;
    3f0c:	e7c6      	b.n	3e9c <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
    3f0e:	2000      	movs	r0, #0
    3f10:	f10d 0107 	add.w	r1, sp, #7
    3f14:	e7bd      	b.n	3e92 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    3f16:	2000      	movs	r0, #0
    3f18:	f10d 0107 	add.w	r1, sp, #7
    3f1c:	e7e3      	b.n	3ee6 <z_arm_fault+0xce>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3f1e:	4b0a      	ldr	r3, [pc, #40]	; (3f48 <z_arm_fault+0x130>)
    3f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3f22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f2e:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    3f32:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    3f36:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3f38:	2300      	movs	r3, #0
    3f3a:	e7af      	b.n	3e9c <z_arm_fault+0x84>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3f3c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    3f40:	f022 0201 	bic.w	r2, r2, #1
    3f44:	e7c2      	b.n	3ecc <z_arm_fault+0xb4>
    3f46:	bf00      	nop
    3f48:	e000ed00 	.word	0xe000ed00

00003f4c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3f4c:	4a02      	ldr	r2, [pc, #8]	; (3f58 <z_arm_fault_init+0xc>)
    3f4e:	6953      	ldr	r3, [r2, #20]
    3f50:	f043 0310 	orr.w	r3, r3, #16
    3f54:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    3f56:	4770      	bx	lr
    3f58:	e000ed00 	.word	0xe000ed00

00003f5c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3f5c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3f60:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3f64:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3f66:	4672      	mov	r2, lr
	bl z_arm_fault
    3f68:	f7ff ff56 	bl	3e18 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3f6c:	bd01      	pop	{r0, pc}
    3f6e:	bf00      	nop

00003f70 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3f70:	2300      	movs	r3, #0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3f72:	2120      	movs	r1, #32
    3f74:	4803      	ldr	r0, [pc, #12]	; (3f84 <z_arm_interrupt_init+0x14>)
    3f76:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3f78:	3301      	adds	r3, #1
    3f7a:	2b2b      	cmp	r3, #43	; 0x2b
    3f7c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3f80:	d1f9      	bne.n	3f76 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3f82:	4770      	bx	lr
    3f84:	e000e100 	.word	0xe000e100

00003f88 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3f88:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3f8a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3f8e:	4808      	ldr	r0, [pc, #32]	; (3fb0 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    3f94:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3f96:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3f9a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3f9e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3fa0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3fa2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3fa6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3faa:	f7ff fe45 	bl	3c38 <z_arm_prep_c>
    3fae:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    3fb0:	20002528 	.word	0x20002528

00003fb4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3fb4:	4b06      	ldr	r3, [pc, #24]	; (3fd0 <z_impl_k_thread_abort+0x1c>)
    3fb6:	689b      	ldr	r3, [r3, #8]
    3fb8:	4283      	cmp	r3, r0
    3fba:	d107      	bne.n	3fcc <z_impl_k_thread_abort+0x18>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3fbc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3fc0:	b123      	cbz	r3, 3fcc <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3fc2:	4a04      	ldr	r2, [pc, #16]	; (3fd4 <z_impl_k_thread_abort+0x20>)
    3fc4:	6853      	ldr	r3, [r2, #4]
    3fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3fca:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    3fcc:	f008 bce6 	b.w	c99c <z_thread_abort>
    3fd0:	20000348 	.word	0x20000348
    3fd4:	e000ed00 	.word	0xe000ed00

00003fd8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3fd8:	4b01      	ldr	r3, [pc, #4]	; (3fe0 <__stdout_hook_install+0x8>)
    3fda:	6018      	str	r0, [r3, #0]
}
    3fdc:	4770      	bx	lr
    3fde:	bf00      	nop
    3fe0:	20000008 	.word	0x20000008

00003fe4 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    3fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fe6:	4606      	mov	r6, r0
    3fe8:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    3fea:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
    3fec:	4f06      	ldr	r7, [pc, #24]	; (4008 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
    3fee:	42ac      	cmp	r4, r5
    3ff0:	da08      	bge.n	4004 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    3ff2:	683b      	ldr	r3, [r7, #0]
    3ff4:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    3ff6:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    3ff8:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
    3ffa:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    3ffe:	d001      	beq.n	4004 <z_impl_zephyr_read_stdin+0x20>
    4000:	280d      	cmp	r0, #13
    4002:	d1f4      	bne.n	3fee <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    4004:	4620      	mov	r0, r4
    4006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4008:	20000004 	.word	0x20000004

0000400c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    400e:	460d      	mov	r5, r1
    4010:	4f09      	ldr	r7, [pc, #36]	; (4038 <z_impl_zephyr_write_stdout+0x2c>)
    4012:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    4014:	f1c0 0401 	rsb	r4, r0, #1
    4018:	19a3      	adds	r3, r4, r6
    401a:	429d      	cmp	r5, r3
    401c:	dc01      	bgt.n	4022 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    401e:	4628      	mov	r0, r5
    4020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    4022:	7873      	ldrb	r3, [r6, #1]
    4024:	2b0a      	cmp	r3, #10
    4026:	d102      	bne.n	402e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    4028:	200d      	movs	r0, #13
    402a:	683b      	ldr	r3, [r7, #0]
    402c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    402e:	683b      	ldr	r3, [r7, #0]
    4030:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4034:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    4036:	e7ef      	b.n	4018 <z_impl_zephyr_write_stdout+0xc>
    4038:	20000008 	.word	0x20000008

0000403c <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    403c:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    403e:	2105      	movs	r1, #5
    4040:	4801      	ldr	r0, [pc, #4]	; (4048 <_exit+0xc>)
    4042:	f7ff ffe3 	bl	400c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    4046:	e7fe      	b.n	4046 <_exit+0xa>
    4048:	00017d2d 	.word	0x00017d2d

0000404c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    404c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    404e:	4c07      	ldr	r4, [pc, #28]	; (406c <_sbrk+0x20>)
    4050:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    4052:	18c2      	adds	r2, r0, r3
    4054:	4806      	ldr	r0, [pc, #24]	; (4070 <_sbrk+0x24>)
    4056:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    405a:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
    405e:	428a      	cmp	r2, r1
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
    4060:	bf2e      	itee	cs
    4062:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
    4066:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    4068:	6022      	strcc	r2, [r4, #0]
	}

	return ret;
}
    406a:	bd10      	pop	{r4, pc}
    406c:	20000330 	.word	0x20000330
    4070:	20002d28 	.word	0x20002d28

00004074 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    4074:	b508      	push	{r3, lr}
    4076:	211d      	movs	r1, #29
    4078:	4804      	ldr	r0, [pc, #16]	; (408c <__chk_fail+0x18>)
    407a:	f7ff ffc7 	bl	400c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    407e:	4040      	eors	r0, r0
    4080:	f380 8811 	msr	BASEPRI, r0
    4084:	f04f 0003 	mov.w	r0, #3
    4088:	df02      	svc	2
	CODE_UNREACHABLE;
    408a:	bf00      	nop
    408c:	00017d33 	.word	0x00017d33

00004090 <uart_stellaris_init>:
#define RCGC1_UART2_EN 0x00000004

static int uart_stellaris_init(const struct device *dev)
{
#ifdef CONFIG_UART_STELLARIS_PORT_0
	RCGC1 |= RCGC1_UART0_EN;
    4090:	4b0a      	ldr	r3, [pc, #40]	; (40bc <uart_stellaris_init+0x2c>)
#ifdef CONFIG_UART_STELLARIS_PORT_2
	RCGC1 |= RCGC1_UART2_EN;
#endif

	return 0;
}
    4092:	2000      	movs	r0, #0
	RCGC1 |= RCGC1_UART0_EN;
    4094:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    4098:	f042 0201 	orr.w	r2, r2, #1
    409c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	RCGC1 |= RCGC1_UART1_EN;
    40a0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    40a4:	f042 0202 	orr.w	r2, r2, #2
    40a8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	RCGC1 |= RCGC1_UART2_EN;
    40ac:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    40b0:	f042 0204 	orr.w	r2, r2, #4
    40b4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
    40b8:	4770      	bx	lr
    40ba:	bf00      	nop
    40bc:	400fe000 	.word	0x400fe000

000040c0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    40c0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    40c2:	4808      	ldr	r0, [pc, #32]	; (40e4 <uart_console_init+0x24>)
    40c4:	4b08      	ldr	r3, [pc, #32]	; (40e8 <uart_console_init+0x28>)
    40c6:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    40c8:	f012 fbe6 	bl	16898 <z_device_ready>
    40cc:	b138      	cbz	r0, 40de <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    40ce:	4807      	ldr	r0, [pc, #28]	; (40ec <uart_console_init+0x2c>)
    40d0:	f7ff ff82 	bl	3fd8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    40d4:	4805      	ldr	r0, [pc, #20]	; (40ec <uart_console_init+0x2c>)
    40d6:	f7ff f989 	bl	33ec <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    40da:	2000      	movs	r0, #0
}
    40dc:	bd08      	pop	{r3, pc}
		return -ENODEV;
    40de:	f06f 0012 	mvn.w	r0, #18
    40e2:	e7fb      	b.n	40dc <uart_console_init+0x1c>
    40e4:	00017640 	.word	0x00017640
    40e8:	20000334 	.word	0x20000334
    40ec:	000040f1 	.word	0x000040f1

000040f0 <console_out>:
	if ('\n' == c) {
    40f0:	280a      	cmp	r0, #10
{
    40f2:	b538      	push	{r3, r4, r5, lr}
    40f4:	4604      	mov	r4, r0
    40f6:	4d07      	ldr	r5, [pc, #28]	; (4114 <console_out+0x24>)
	if ('\n' == c) {
    40f8:	d104      	bne.n	4104 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    40fa:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    40fc:	6883      	ldr	r3, [r0, #8]
    40fe:	210d      	movs	r1, #13
    4100:	685b      	ldr	r3, [r3, #4]
    4102:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    4104:	6828      	ldr	r0, [r5, #0]
    4106:	6883      	ldr	r3, [r0, #8]
    4108:	b2e1      	uxtb	r1, r4
    410a:	685b      	ldr	r3, [r3, #4]
    410c:	4798      	blx	r3
}
    410e:	4620      	mov	r0, r4
    4110:	bd38      	pop	{r3, r4, r5, pc}
    4112:	bf00      	nop
    4114:	20000334 	.word	0x20000334

00004118 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
    4118:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    411c:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
    411e:	6919      	ldr	r1, [r3, #16]
{
    4120:	b510      	push	{r4, lr}
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    4122:	f411 3f80 	tst.w	r1, #65536	; 0x10000
	uint32_t val2 = SysTick->VAL;	/* C */
    4126:	6998      	ldr	r0, [r3, #24]
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    4128:	4908      	ldr	r1, [pc, #32]	; (414c <elapsed+0x34>)
    412a:	4b09      	ldr	r3, [pc, #36]	; (4150 <elapsed+0x38>)
    412c:	d101      	bne.n	4132 <elapsed+0x1a>
	    || (val1 < val2)) {
    412e:	4282      	cmp	r2, r0
    4130:	d206      	bcs.n	4140 <elapsed+0x28>
		overflow_cyc += last_load;
    4132:	681a      	ldr	r2, [r3, #0]
    4134:	680c      	ldr	r4, [r1, #0]
    4136:	4422      	add	r2, r4
    4138:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
    413a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    413e:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
    4140:	681b      	ldr	r3, [r3, #0]
    4142:	680a      	ldr	r2, [r1, #0]
    4144:	4413      	add	r3, r2
}
    4146:	1a18      	subs	r0, r3, r0
    4148:	bd10      	pop	{r4, pc}
    414a:	bf00      	nop
    414c:	20000340 	.word	0x20000340
    4150:	20000344 	.word	0x20000344

00004154 <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
    4154:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
    4156:	f7ff ffdf 	bl	4118 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
    415a:	4b0b      	ldr	r3, [pc, #44]	; (4188 <sys_clock_isr+0x34>)
    415c:	4a0b      	ldr	r2, [pc, #44]	; (418c <sys_clock_isr+0x38>)
    415e:	6818      	ldr	r0, [r3, #0]
    4160:	6811      	ldr	r1, [r2, #0]
    4162:	4408      	add	r0, r1
    4164:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
    4166:	2200      	movs	r2, #0
    4168:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    416a:	4a09      	ldr	r2, [pc, #36]	; (4190 <sys_clock_isr+0x3c>)
    416c:	4909      	ldr	r1, [pc, #36]	; (4194 <sys_clock_isr+0x40>)
    416e:	6813      	ldr	r3, [r2, #0]
    4170:	1ac0      	subs	r0, r0, r3
    4172:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
    4176:	fb01 3300 	mla	r3, r1, r0, r3
    417a:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
    417c:	f008 fd56 	bl	cc2c <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
}
    4180:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4184:	f7ff be00 	b.w	3d88 <z_arm_exc_exit>
    4188:	20000344 	.word	0x20000344
    418c:	2000033c 	.word	0x2000033c
    4190:	20000338 	.word	0x20000338
    4194:	0001d4c0 	.word	0x0001d4c0

00004198 <sys_clock_driver_init>:
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4198:	2220      	movs	r2, #32
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
    419a:	2000      	movs	r0, #0
    419c:	4b08      	ldr	r3, [pc, #32]	; (41c0 <sys_clock_driver_init+0x28>)
    419e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
    41a2:	4a08      	ldr	r2, [pc, #32]	; (41c4 <sys_clock_driver_init+0x2c>)
    41a4:	4b08      	ldr	r3, [pc, #32]	; (41c8 <sys_clock_driver_init+0x30>)
    41a6:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
    41a8:	4b08      	ldr	r3, [pc, #32]	; (41cc <sys_clock_driver_init+0x34>)
    41aa:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
    41ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    41b0:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
    41b2:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
    41b4:	691a      	ldr	r2, [r3, #16]
    41b6:	f042 0207 	orr.w	r2, r2, #7
    41ba:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
    41bc:	4770      	bx	lr
    41be:	bf00      	nop
    41c0:	e000ed00 	.word	0xe000ed00
    41c4:	0001d4bf 	.word	0x0001d4bf
    41c8:	20000340 	.word	0x20000340
    41cc:	20000344 	.word	0x20000344

000041d0 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    41d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41d2:	4d30      	ldr	r5, [pc, #192]	; (4294 <sys_clock_set_timeout+0xc4>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
    41d4:	b159      	cbz	r1, 41ee <sys_clock_set_timeout+0x1e>
    41d6:	1c42      	adds	r2, r0, #1
    41d8:	d109      	bne.n	41ee <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    41da:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    41de:	6913      	ldr	r3, [r2, #16]
    41e0:	f023 0301 	bic.w	r3, r3, #1
    41e4:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
    41e6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    41ea:	602b      	str	r3, [r5, #0]
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
    41ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    41ee:	1c43      	adds	r3, r0, #1
    41f0:	bf08      	it	eq
    41f2:	208a      	moveq	r0, #138	; 0x8a
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    41f4:	1e44      	subs	r4, r0, #1
    41f6:	2c00      	cmp	r4, #0
	uint32_t last_load_ = last_load;
    41f8:	682f      	ldr	r7, [r5, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    41fa:	dd32      	ble.n	4262 <sys_clock_set_timeout+0x92>
    41fc:	2c8a      	cmp	r4, #138	; 0x8a
    41fe:	bfa8      	it	ge
    4200:	248a      	movge	r4, #138	; 0x8a
	__asm__ volatile(
    4202:	f04f 0320 	mov.w	r3, #32
    4206:	f3ef 8611 	mrs	r6, BASEPRI
    420a:	f383 8812 	msr	BASEPRI_MAX, r3
    420e:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
    4212:	f7ff ff81 	bl	4118 <elapsed>
	val1 = SysTick->VAL;
    4216:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
    421a:	2200      	movs	r2, #0
	cycle_count += pending;
    421c:	491e      	ldr	r1, [pc, #120]	; (4298 <sys_clock_set_timeout+0xc8>)
	val1 = SysTick->VAL;
    421e:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
    4222:	680b      	ldr	r3, [r1, #0]
    4224:	4418      	add	r0, r3
	overflow_cyc = 0U;
    4226:	4b1d      	ldr	r3, [pc, #116]	; (429c <sys_clock_set_timeout+0xcc>)
	cycle_count += pending;
    4228:	6008      	str	r0, [r1, #0]
	overflow_cyc = 0U;
    422a:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
    422c:	4b1c      	ldr	r3, [pc, #112]	; (42a0 <sys_clock_set_timeout+0xd0>)
    422e:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
    4230:	1ac2      	subs	r2, r0, r3
    4232:	d518      	bpl.n	4266 <sys_clock_set_timeout+0x96>
		last_load = MIN_DELAY;
    4234:	f641 534c 	movw	r3, #7500	; 0x1d4c
			last_load = MAX_CYCLES;
    4238:	602b      	str	r3, [r5, #0]
	val2 = SysTick->VAL;
    423a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
    423e:	682c      	ldr	r4, [r5, #0]
	val2 = SysTick->VAL;
    4240:	6993      	ldr	r3, [r2, #24]
	SysTick->LOAD = last_load - 1;
    4242:	3c01      	subs	r4, #1
    4244:	6154      	str	r4, [r2, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
    4246:	2400      	movs	r4, #0
	if (val1 < val2) {
    4248:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
    424a:	bf38      	it	cc
    424c:	44bc      	addcc	ip, r7
		cycle_count += (val1 - val2);
    424e:	ebac 0c03 	sub.w	ip, ip, r3
    4252:	4460      	add	r0, ip
	SysTick->VAL = 0; /* resets timer to last_load */
    4254:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
    4256:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
    4258:	f386 8811 	msr	BASEPRI, r6
    425c:	f3bf 8f6f 	isb	sy
    4260:	e7c4      	b.n	41ec <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4262:	2400      	movs	r4, #0
    4264:	e7cd      	b.n	4202 <sys_clock_set_timeout+0x32>
		delay = ticks * CYC_PER_TICK;
    4266:	f8df e03c 	ldr.w	lr, [pc, #60]	; 42a4 <sys_clock_set_timeout+0xd4>
		delay -= unannounced;
    426a:	1a1b      	subs	r3, r3, r0
		delay += unannounced;
    426c:	fb0e 2404 	mla	r4, lr, r4, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
    4270:	f504 34ea 	add.w	r4, r4, #119808	; 0x1d400
    4274:	34bf      	adds	r4, #191	; 0xbf
    4276:	fbb4 f4fe 	udiv	r4, r4, lr
		delay -= unannounced;
    427a:	fb0e 3404 	mla	r4, lr, r4, r3
		delay = MAX(delay, MIN_DELAY);
    427e:	f641 534c 	movw	r3, #7500	; 0x1d4c
    4282:	429c      	cmp	r4, r3
    4284:	d904      	bls.n	4290 <sys_clock_set_timeout+0xc0>
		if (delay > MAX_CYCLES) {
    4286:	4b08      	ldr	r3, [pc, #32]	; (42a8 <sys_clock_set_timeout+0xd8>)
    4288:	429c      	cmp	r4, r3
    428a:	d8d5      	bhi.n	4238 <sys_clock_set_timeout+0x68>
			last_load = delay;
    428c:	602c      	str	r4, [r5, #0]
    428e:	e7d4      	b.n	423a <sys_clock_set_timeout+0x6a>
		delay = MAX(delay, MIN_DELAY);
    4290:	461c      	mov	r4, r3
    4292:	e7fb      	b.n	428c <sys_clock_set_timeout+0xbc>
    4294:	20000340 	.word	0x20000340
    4298:	2000033c 	.word	0x2000033c
    429c:	20000344 	.word	0x20000344
    42a0:	20000338 	.word	0x20000338
    42a4:	0001d4c0 	.word	0x0001d4c0
    42a8:	00fcaf80 	.word	0x00fcaf80

000042ac <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    42ac:	b510      	push	{r4, lr}
	__asm__ volatile(
    42ae:	f04f 0320 	mov.w	r3, #32
    42b2:	f3ef 8411 	mrs	r4, BASEPRI
    42b6:	f383 8812 	msr	BASEPRI_MAX, r3
    42ba:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
    42be:	f7ff ff2b 	bl	4118 <elapsed>
    42c2:	4b07      	ldr	r3, [pc, #28]	; (42e0 <sys_clock_elapsed+0x34>)
    42c4:	4a07      	ldr	r2, [pc, #28]	; (42e4 <sys_clock_elapsed+0x38>)
    42c6:	681b      	ldr	r3, [r3, #0]
    42c8:	6812      	ldr	r2, [r2, #0]
    42ca:	1a9b      	subs	r3, r3, r2
    42cc:	4403      	add	r3, r0
	__asm__ volatile(
    42ce:	f384 8811 	msr	BASEPRI, r4
    42d2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
    42d6:	4804      	ldr	r0, [pc, #16]	; (42e8 <sys_clock_elapsed+0x3c>)
    42d8:	fbb3 f0f0 	udiv	r0, r3, r0
    42dc:	bd10      	pop	{r4, pc}
    42de:	bf00      	nop
    42e0:	2000033c 	.word	0x2000033c
    42e4:	20000338 	.word	0x20000338
    42e8:	0001d4c0 	.word	0x0001d4c0

000042ec <index2value>:
** Convert an acceptable index to a pointer to its respective value.
** Non-valid indices return the special nil value 'G(L)->nilvalue'.
*/
static TValue *index2value (lua_State *L, int idx) {
  CallInfo *ci = L->ci;
  if (idx > 0) {
    42ec:	2900      	cmp	r1, #0
static TValue *index2value (lua_State *L, int idx) {
    42ee:	4602      	mov	r2, r0
    42f0:	b510      	push	{r4, lr}
  CallInfo *ci = L->ci;
    42f2:	6943      	ldr	r3, [r0, #20]
  if (idx > 0) {
    42f4:	dd08      	ble.n	4308 <index2value+0x1c>
    StkId o = ci->func + idx;
    42f6:	6818      	ldr	r0, [r3, #0]
    api_check(L, idx <= L->ci->top - (ci->func + 1), "unacceptable index");
    if (o >= L->top) return &G(L)->nilvalue;
    42f8:	68d3      	ldr	r3, [r2, #12]
    StkId o = ci->func + idx;
    42fa:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    if (o >= L->top) return &G(L)->nilvalue;
    42fe:	4283      	cmp	r3, r0
    4300:	d801      	bhi.n	4306 <index2value+0x1a>
    4302:	6910      	ldr	r0, [r2, #16]
    4304:	3038      	adds	r0, #56	; 0x38
    else {  /* light C function or Lua function (through a hook)?) */
      api_check(L, ttislcf(s2v(ci->func)), "caller not a C function");
      return &G(L)->nilvalue;  /* no upvalues */
    }
  }
}
    4306:	bd10      	pop	{r4, pc}
  else if (!ispseudo(idx)) {  /* negative index */
    4308:	480c      	ldr	r0, [pc, #48]	; (433c <index2value+0x50>)
    430a:	4281      	cmp	r1, r0
    430c:	db03      	blt.n	4316 <index2value+0x2a>
    return s2v(L->top + idx);
    430e:	68d0      	ldr	r0, [r2, #12]
    4310:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    4314:	e7f7      	b.n	4306 <index2value+0x1a>
  else if (idx == LUA_REGISTRYINDEX)
    4316:	480a      	ldr	r0, [pc, #40]	; (4340 <index2value+0x54>)
    4318:	4281      	cmp	r1, r0
    431a:	d102      	bne.n	4322 <index2value+0x36>
    return &G(L)->l_registry;
    431c:	6910      	ldr	r0, [r2, #16]
    431e:	3028      	adds	r0, #40	; 0x28
    4320:	e7f1      	b.n	4306 <index2value+0x1a>
    if (ttisCclosure(s2v(ci->func))) {  /* C closure? */
    4322:	681b      	ldr	r3, [r3, #0]
    4324:	7a1c      	ldrb	r4, [r3, #8]
    4326:	2c66      	cmp	r4, #102	; 0x66
    4328:	d1eb      	bne.n	4302 <index2value+0x16>
      CClosure *func = clCvalue(s2v(ci->func));
    432a:	681b      	ldr	r3, [r3, #0]
    idx = LUA_REGISTRYINDEX - idx;
    432c:	1a40      	subs	r0, r0, r1
      return (idx <= func->nupvalues) ? &func->upvalue[idx-1]
    432e:	799c      	ldrb	r4, [r3, #6]
                                      : &G(L)->nilvalue;
    4330:	4284      	cmp	r4, r0
    4332:	dbe6      	blt.n	4302 <index2value+0x16>
    4334:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    4338:	e7e5      	b.n	4306 <index2value+0x1a>
    433a:	bf00      	nop
    433c:	fff0b9d9 	.word	0xfff0b9d9
    4340:	fff0b9d8 	.word	0xfff0b9d8

00004344 <lua_pcallk>:
}



LUA_API int lua_pcallk (lua_State *L, int nargs, int nresults, int errfunc,
                        lua_KContext ctx, lua_KFunction k) {
    4344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4348:	b085      	sub	sp, #20
    434a:	4690      	mov	r8, r2
    434c:	4604      	mov	r4, r0
    434e:	460d      	mov	r5, r1
  api_check(L, k == NULL || !isLua(L->ci),
    "cannot use continuations inside hooks");
  api_checknelems(L, nargs+1);
  api_check(L, L->status == LUA_OK, "cannot do calls on non-normal thread");
  checkresults(L, nargs, nresults);
  if (errfunc == 0)
    4350:	461f      	mov	r7, r3
                        lua_KContext ctx, lua_KFunction k) {
    4352:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  else {  /* prepare continuation (call is already protected by 'resume') */
    CallInfo *ci = L->ci;
    ci->u.c.k = k;  /* save continuation */
    ci->u.c.ctx = ctx;  /* save context */
    /* save information for error recovery */
    ci->u2.funcidx = cast_int(savestack(L, c.func));
    4356:	69c2      	ldr	r2, [r0, #28]
  if (errfunc == 0)
    4358:	b11b      	cbz	r3, 4362 <lua_pcallk+0x1e>
    StkId o = index2stack(L, errfunc);
    435a:	4619      	mov	r1, r3
    435c:	f00d fbc5 	bl	11aea <index2stack>
    func = savestack(L, o);
    4360:	1a87      	subs	r7, r0, r2
  c.func = L->top - (nargs+1);  /* function to be called */
    4362:	43ed      	mvns	r5, r5
    4364:	68e1      	ldr	r1, [r4, #12]
    4366:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    436a:	9102      	str	r1, [sp, #8]
    ci->u2.funcidx = cast_int(savestack(L, c.func));
    436c:	1a8b      	subs	r3, r1, r2
  if (k == NULL || !yieldable(L)) {  /* no continuation or no yieldable? */
    436e:	f1b9 0f00 	cmp.w	r9, #0
    4372:	d003      	beq.n	437c <lua_pcallk+0x38>
    4374:	6e25      	ldr	r5, [r4, #96]	; 0x60
    4376:	0c2d      	lsrs	r5, r5, #16
    4378:	042d      	lsls	r5, r5, #16
    437a:	b19d      	cbz	r5, 43a4 <lua_pcallk+0x60>
    status = luaD_pcall(L, f_call, &c, savestack(L, c.func), func);
    437c:	4620      	mov	r0, r4
    437e:	4918      	ldr	r1, [pc, #96]	; (43e0 <lua_pcallk+0x9c>)
    4380:	9700      	str	r7, [sp, #0]
    4382:	aa02      	add	r2, sp, #8
    c.nresults = nresults;  /* do a 'conventional' protected call */
    4384:	f8cd 800c 	str.w	r8, [sp, #12]
    status = luaD_pcall(L, f_call, &c, savestack(L, c.func), func);
    4388:	f00f f85a 	bl	13440 <luaD_pcall>
    luaD_call(L, c.func, nresults);  /* do the call */
    ci->callstatus &= ~CIST_YPCALL;
    L->errfunc = ci->u.c.old_errfunc;
    status = LUA_OK;  /* if it is here, there were no errors */
  }
  adjustresults(L, nresults);
    438c:	f1b8 0f00 	cmp.w	r8, #0
    4390:	da05      	bge.n	439e <lua_pcallk+0x5a>
    4392:	6963      	ldr	r3, [r4, #20]
    4394:	68e2      	ldr	r2, [r4, #12]
    4396:	6859      	ldr	r1, [r3, #4]
    4398:	4291      	cmp	r1, r2
    439a:	bf38      	it	cc
    439c:	605a      	strcc	r2, [r3, #4]
  lua_unlock(L);
  return status;
}
    439e:	b005      	add	sp, #20
    43a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CallInfo *ci = L->ci;
    43a4:	6966      	ldr	r6, [r4, #20]
    ci->u.c.ctx = ctx;  /* save context */
    43a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ci->u.c.k = k;  /* save continuation */
    43a8:	f8c6 9010 	str.w	r9, [r6, #16]
    ci->u2.funcidx = cast_int(savestack(L, c.func));
    43ac:	e9c6 2306 	strd	r2, r3, [r6, #24]
    ci->u.c.old_errfunc = L->errfunc;
    43b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    luaD_call(L, c.func, nresults);  /* do the call */
    43b2:	4620      	mov	r0, r4
    ci->u.c.old_errfunc = L->errfunc;
    43b4:	6173      	str	r3, [r6, #20]
    setoah(ci->callstatus, L->allowhook);  /* save value of 'allowhook' */
    43b6:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    L->errfunc = func;
    43b8:	65e7      	str	r7, [r4, #92]	; 0x5c
    setoah(ci->callstatus, L->allowhook);  /* save value of 'allowhook' */
    43ba:	f023 0201 	bic.w	r2, r3, #1
    43be:	79e3      	ldrb	r3, [r4, #7]
    43c0:	4313      	orrs	r3, r2
    ci->callstatus |= CIST_YPCALL;  /* function can do error recovery */
    43c2:	f043 0310 	orr.w	r3, r3, #16
    43c6:	8473      	strh	r3, [r6, #34]	; 0x22
    luaD_call(L, c.func, nresults);  /* do the call */
    43c8:	4642      	mov	r2, r8
    43ca:	f00f f832 	bl	13432 <luaD_call>
    ci->callstatus &= ~CIST_YPCALL;
    43ce:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    status = LUA_OK;  /* if it is here, there were no errors */
    43d0:	4628      	mov	r0, r5
    ci->callstatus &= ~CIST_YPCALL;
    43d2:	f023 0310 	bic.w	r3, r3, #16
    43d6:	8473      	strh	r3, [r6, #34]	; 0x22
    L->errfunc = ci->u.c.old_errfunc;
    43d8:	6973      	ldr	r3, [r6, #20]
    43da:	65e3      	str	r3, [r4, #92]	; 0x5c
    status = LUA_OK;  /* if it is here, there were no errors */
    43dc:	e7d6      	b.n	438c <lua_pcallk+0x48>
    43de:	bf00      	nop
    43e0:	00011afd 	.word	0x00011afd

000043e4 <lua_load>:


LUA_API int lua_load (lua_State *L, lua_Reader reader, void *data,
                      const char *chunkname, const char *mode) {
    43e4:	b570      	push	{r4, r5, r6, lr}
  ZIO z;
  int status;
  lua_lock(L);
  if (!chunkname) chunkname = "?";
    43e6:	4d1a      	ldr	r5, [pc, #104]	; (4450 <lua_load+0x6c>)
                      const char *chunkname, const char *mode) {
    43e8:	4604      	mov	r4, r0
  if (!chunkname) chunkname = "?";
    43ea:	2b00      	cmp	r3, #0
    43ec:	bf18      	it	ne
    43ee:	461d      	movne	r5, r3
                      const char *chunkname, const char *mode) {
    43f0:	b086      	sub	sp, #24
  luaZ_init(L, &z, reader, data);
    43f2:	4613      	mov	r3, r2
    43f4:	460a      	mov	r2, r1
    43f6:	a901      	add	r1, sp, #4
    43f8:	f012 fa20 	bl	1683c <luaZ_init>
  status = luaD_protectedparser(L, &z, chunkname, mode);
    43fc:	462a      	mov	r2, r5
    43fe:	4620      	mov	r0, r4
    4400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4402:	a901      	add	r1, sp, #4
    4404:	f001 f910 	bl	5628 <luaD_protectedparser>
  if (status == LUA_OK) {  /* no errors? */
    4408:	4605      	mov	r5, r0
    440a:	b9e8      	cbnz	r0, 4448 <lua_load+0x64>
    LClosure *f = clLvalue(s2v(L->top - 1));  /* get newly created function */
    440c:	68e3      	ldr	r3, [r4, #12]
    440e:	f853 3c10 	ldr.w	r3, [r3, #-16]
    if (f->nupvalues >= 1) {  /* does it have an upvalue? */
    4412:	799a      	ldrb	r2, [r3, #6]
    4414:	b1c2      	cbz	r2, 4448 <lua_load+0x64>
      /* get global table from registry */
      const TValue *gt = getGtable(L);
    4416:	6922      	ldr	r2, [r4, #16]
      /* set global table as 1st upvalue of 'f' (may be LUA_ENV) */
      setobj(L, f->upvals[0]->v, gt);
    4418:	6919      	ldr	r1, [r3, #16]
      const TValue *gt = getGtable(L);
    441a:	6a92      	ldr	r2, [r2, #40]	; 0x28
      setobj(L, f->upvals[0]->v, gt);
    441c:	688e      	ldr	r6, [r1, #8]
      const TValue *gt = getGtable(L);
    441e:	68d0      	ldr	r0, [r2, #12]
      setobj(L, f->upvals[0]->v, gt);
    4420:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    4424:	e9c6 2300 	strd	r2, r3, [r6]
    4428:	7e03      	ldrb	r3, [r0, #24]
    442a:	7233      	strb	r3, [r6, #8]
      luaC_barrier(L, f->upvals[0], gt);
    442c:	7e03      	ldrb	r3, [r0, #24]
    442e:	065a      	lsls	r2, r3, #25
    4430:	d50a      	bpl.n	4448 <lua_load+0x64>
    4432:	794b      	ldrb	r3, [r1, #5]
    4434:	069b      	lsls	r3, r3, #26
    4436:	d507      	bpl.n	4448 <lua_load+0x64>
    4438:	6902      	ldr	r2, [r0, #16]
    443a:	7953      	ldrb	r3, [r2, #5]
    443c:	f013 0f18 	tst.w	r3, #24
    4440:	d002      	beq.n	4448 <lua_load+0x64>
    4442:	4620      	mov	r0, r4
    4444:	f010 f85b 	bl	144fe <luaC_barrier_>
    }
  }
  lua_unlock(L);
  return status;
}
    4448:	4628      	mov	r0, r5
    444a:	b006      	add	sp, #24
    444c:	bd70      	pop	{r4, r5, r6, pc}
    444e:	bf00      	nop
    4450:	00017d70 	.word	0x00017d70

00004454 <checkcontrol>:

/*
** Check whether message is a control message. If so, execute the
** control or ignore it if unknown.
*/
static int checkcontrol (lua_State *L, const char *message, int tocont) {
    4454:	b538      	push	{r3, r4, r5, lr}
    4456:	4605      	mov	r5, r0
  if (tocont || *(message++) != '@')  /* not a control message? */
    4458:	4610      	mov	r0, r2
    445a:	b9c2      	cbnz	r2, 448e <checkcontrol+0x3a>
    445c:	780b      	ldrb	r3, [r1, #0]
    445e:	2b40      	cmp	r3, #64	; 0x40
    4460:	d116      	bne.n	4490 <checkcontrol+0x3c>
    4462:	1c4c      	adds	r4, r1, #1
    return 0;
  else {
    if (strcmp(message, "off") == 0)
    4464:	4620      	mov	r0, r4
    4466:	490b      	ldr	r1, [pc, #44]	; (4494 <checkcontrol+0x40>)
    4468:	f7fc fcf8 	bl	e5c <strcmp>
    446c:	b930      	cbnz	r0, 447c <checkcontrol+0x28>
      lua_setwarnf(L, warnfoff, L);  /* turn warnings off */
    446e:	462a      	mov	r2, r5
    4470:	4909      	ldr	r1, [pc, #36]	; (4498 <checkcontrol+0x44>)
    else if (strcmp(message, "on") == 0)
      lua_setwarnf(L, warnfon, L);   /* turn warnings on */
    4472:	4610      	mov	r0, r2
    4474:	f00d fb79 	bl	11b6a <lua_setwarnf>
    return 1;  /* it was a control message */
    4478:	2001      	movs	r0, #1
    447a:	e009      	b.n	4490 <checkcontrol+0x3c>
    else if (strcmp(message, "on") == 0)
    447c:	4620      	mov	r0, r4
    447e:	4907      	ldr	r1, [pc, #28]	; (449c <checkcontrol+0x48>)
    4480:	f7fc fcec 	bl	e5c <strcmp>
    4484:	2800      	cmp	r0, #0
    4486:	d1f7      	bne.n	4478 <checkcontrol+0x24>
      lua_setwarnf(L, warnfon, L);   /* turn warnings on */
    4488:	462a      	mov	r2, r5
    448a:	4905      	ldr	r1, [pc, #20]	; (44a0 <checkcontrol+0x4c>)
    448c:	e7f1      	b.n	4472 <checkcontrol+0x1e>
    return 0;
    448e:	2000      	movs	r0, #0
  }
}
    4490:	bd38      	pop	{r3, r4, r5, pc}
    4492:	bf00      	nop
    4494:	00017d72 	.word	0x00017d72
    4498:	00011b81 	.word	0x00011b81
    449c:	000187ff 	.word	0x000187ff
    44a0:	00004539 	.word	0x00004539

000044a4 <panic>:
static int panic (lua_State *L) {
    44a4:	b510      	push	{r4, lr}
  const char *msg = lua_tostring(L, -1);
    44a6:	2200      	movs	r2, #0
    44a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    44ac:	f00d fb2f 	bl	11b0e <lua_tolstring>
  lua_writestringerror("PANIC: unprotected error in call to Lua API (%s)\n",
    44b0:	4c07      	ldr	r4, [pc, #28]	; (44d0 <panic+0x2c>)
    44b2:	4a08      	ldr	r2, [pc, #32]	; (44d4 <panic+0x30>)
    44b4:	6823      	ldr	r3, [r4, #0]
    44b6:	2800      	cmp	r0, #0
    44b8:	bf18      	it	ne
    44ba:	4602      	movne	r2, r0
    44bc:	4906      	ldr	r1, [pc, #24]	; (44d8 <panic+0x34>)
    44be:	68d8      	ldr	r0, [r3, #12]
    44c0:	f009 f910 	bl	d6e4 <fprintf>
    44c4:	6823      	ldr	r3, [r4, #0]
    44c6:	68d8      	ldr	r0, [r3, #12]
    44c8:	f009 f83a 	bl	d540 <fflush>
}
    44cc:	2000      	movs	r0, #0
    44ce:	bd10      	pop	{r4, pc}
    44d0:	20000028 	.word	0x20000028
    44d4:	00017d76 	.word	0x00017d76
    44d8:	00017d93 	.word	0x00017d93

000044dc <warnfcont>:

/*
** Writes the message and handle 'tocont', finishing the message
** if needed and setting the next warn function.
*/
static void warnfcont (void *ud, const char *message, int tocont) {
    44dc:	b570      	push	{r4, r5, r6, lr}
    44de:	4616      	mov	r6, r2
  lua_State *L = (lua_State *)ud;
  lua_writestringerror("%s", message);  /* write message */
    44e0:	4d10      	ldr	r5, [pc, #64]	; (4524 <warnfcont+0x48>)
    44e2:	460a      	mov	r2, r1
    44e4:	682b      	ldr	r3, [r5, #0]
static void warnfcont (void *ud, const char *message, int tocont) {
    44e6:	4604      	mov	r4, r0
  lua_writestringerror("%s", message);  /* write message */
    44e8:	490f      	ldr	r1, [pc, #60]	; (4528 <warnfcont+0x4c>)
    44ea:	68d8      	ldr	r0, [r3, #12]
    44ec:	f009 f8fa 	bl	d6e4 <fprintf>
    44f0:	682b      	ldr	r3, [r5, #0]
    44f2:	68d8      	ldr	r0, [r3, #12]
    44f4:	f009 f824 	bl	d540 <fflush>
  if (tocont)  /* not the last part? */
    44f8:	b136      	cbz	r6, 4508 <warnfcont+0x2c>
    lua_setwarnf(L, warnfcont, L);  /* to be continued */
    44fa:	4622      	mov	r2, r4
    44fc:	490b      	ldr	r1, [pc, #44]	; (452c <warnfcont+0x50>)
  else {  /* last part */
    lua_writestringerror("%s", "\n");  /* finish message with end-of-line */
    lua_setwarnf(L, warnfon, L);  /* next call is a new message */
    44fe:	4610      	mov	r0, r2
  }
}
    4500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lua_setwarnf(L, warnfon, L);  /* next call is a new message */
    4504:	f00d bb31 	b.w	11b6a <lua_setwarnf>
    lua_writestringerror("%s", "\n");  /* finish message with end-of-line */
    4508:	682b      	ldr	r3, [r5, #0]
    450a:	4a09      	ldr	r2, [pc, #36]	; (4530 <warnfcont+0x54>)
    450c:	4906      	ldr	r1, [pc, #24]	; (4528 <warnfcont+0x4c>)
    450e:	68d8      	ldr	r0, [r3, #12]
    4510:	f009 f8e8 	bl	d6e4 <fprintf>
    4514:	682b      	ldr	r3, [r5, #0]
    4516:	68d8      	ldr	r0, [r3, #12]
    4518:	f009 f812 	bl	d540 <fflush>
    lua_setwarnf(L, warnfon, L);  /* next call is a new message */
    451c:	4622      	mov	r2, r4
    451e:	4905      	ldr	r1, [pc, #20]	; (4534 <warnfcont+0x58>)
    4520:	e7ed      	b.n	44fe <warnfcont+0x22>
    4522:	bf00      	nop
    4524:	20000028 	.word	0x20000028
    4528:	00017fbf 	.word	0x00017fbf
    452c:	000044dd 	.word	0x000044dd
    4530:	00018986 	.word	0x00018986
    4534:	00004539 	.word	0x00004539

00004538 <warnfon>:


static void warnfon (void *ud, const char *message, int tocont) {
    4538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    453a:	4604      	mov	r4, r0
    453c:	460d      	mov	r5, r1
    453e:	4616      	mov	r6, r2
  if (checkcontrol((lua_State *)ud, message, tocont))  /* control message? */
    4540:	f7ff ff88 	bl	4454 <checkcontrol>
    4544:	b988      	cbnz	r0, 456a <warnfon+0x32>
    return;  /* nothing else to be done */
  lua_writestringerror("%s", "Lua warning: ");  /* start a new warning */
    4546:	4f09      	ldr	r7, [pc, #36]	; (456c <warnfon+0x34>)
    4548:	4a09      	ldr	r2, [pc, #36]	; (4570 <warnfon+0x38>)
    454a:	683b      	ldr	r3, [r7, #0]
    454c:	4909      	ldr	r1, [pc, #36]	; (4574 <warnfon+0x3c>)
    454e:	68d8      	ldr	r0, [r3, #12]
    4550:	f009 f8c8 	bl	d6e4 <fprintf>
    4554:	683b      	ldr	r3, [r7, #0]
    4556:	68d8      	ldr	r0, [r3, #12]
    4558:	f008 fff2 	bl	d540 <fflush>
  warnfcont(ud, message, tocont);  /* finish processing */
    455c:	4632      	mov	r2, r6
    455e:	4629      	mov	r1, r5
    4560:	4620      	mov	r0, r4
}
    4562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  warnfcont(ud, message, tocont);  /* finish processing */
    4566:	f7ff bfb9 	b.w	44dc <warnfcont>
}
    456a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    456c:	20000028 	.word	0x20000028
    4570:	00017dc5 	.word	0x00017dc5
    4574:	00017fbf 	.word	0x00017fbf

00004578 <luaL_loadbufferx>:
                                 const char *name, const char *mode) {
    4578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ls.size = size;
    457a:	e9cd 1202 	strd	r1, r2, [sp, #8]
  return lua_load(L, getS, &ls, name, mode);
    457e:	9a06      	ldr	r2, [sp, #24]
    4580:	4903      	ldr	r1, [pc, #12]	; (4590 <luaL_loadbufferx+0x18>)
    4582:	9200      	str	r2, [sp, #0]
    4584:	aa02      	add	r2, sp, #8
    4586:	f7ff ff2d 	bl	43e4 <lua_load>
}
    458a:	b005      	add	sp, #20
    458c:	f85d fb04 	ldr.w	pc, [sp], #4
    4590:	00011b73 	.word	0x00011b73

00004594 <luaL_newstate>:


LUALIB_API lua_State *luaL_newstate (void) {
    4594:	b510      	push	{r4, lr}
  lua_State *L = lua_newstate(l_alloc, NULL);
    4596:	2100      	movs	r1, #0
    4598:	4807      	ldr	r0, [pc, #28]	; (45b8 <luaL_newstate+0x24>)
    459a:	f003 fd15 	bl	7fc8 <lua_newstate>
  if (l_likely(L)) {
    459e:	4604      	mov	r4, r0
    45a0:	b138      	cbz	r0, 45b2 <luaL_newstate+0x1e>
    lua_atpanic(L, &panic);
    45a2:	4906      	ldr	r1, [pc, #24]	; (45bc <luaL_newstate+0x28>)
    45a4:	f00d faad 	bl	11b02 <lua_atpanic>
    lua_setwarnf(L, warnfoff, L);  /* default is warnings off */
    45a8:	4622      	mov	r2, r4
    45aa:	4620      	mov	r0, r4
    45ac:	4904      	ldr	r1, [pc, #16]	; (45c0 <luaL_newstate+0x2c>)
    45ae:	f00d fadc 	bl	11b6a <lua_setwarnf>
  }
  return L;
}
    45b2:	4620      	mov	r0, r4
    45b4:	bd10      	pop	{r4, pc}
    45b6:	bf00      	nop
    45b8:	00011b85 	.word	0x00011b85
    45bc:	000044a5 	.word	0x000044a5
    45c0:	00011b81 	.word	0x00011b81

000045c4 <savelineinfo>:
** does not fit in a byte, of after that many instructions, save a new
** absolute line info; (in that case, the special value 'ABSLINEINFO'
** in 'lineinfo' signals the existence of this absolute information.)
** Otherwise, store the difference from last line in 'lineinfo'.
*/
static void savelineinfo (FuncState *fs, Proto *f, int line) {
    45c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  int linedif = line - fs->previousline;
    45c8:	6983      	ldr	r3, [r0, #24]
  int pc = fs->pc - 1;  /* last instruction coded */
    45ca:	6907      	ldr	r7, [r0, #16]
  int linedif = line - fs->previousline;
    45cc:	eba2 0803 	sub.w	r8, r2, r3
static void savelineinfo (FuncState *fs, Proto *f, int line) {
    45d0:	4604      	mov	r4, r0
  if (abs(linedif) >= LIMLINEDIFF || fs->iwthabs++ >= MAXIWTHABS) {
    45d2:	4640      	mov	r0, r8
static void savelineinfo (FuncState *fs, Proto *f, int line) {
    45d4:	460d      	mov	r5, r1
    45d6:	4616      	mov	r6, r2
  if (abs(linedif) >= LIMLINEDIFF || fs->iwthabs++ >= MAXIWTHABS) {
    45d8:	f012 fac2 	bl	16b60 <abs>
    45dc:	287f      	cmp	r0, #127	; 0x7f
  int pc = fs->pc - 1;  /* last instruction coded */
    45de:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
  if (abs(linedif) >= LIMLINEDIFF || fs->iwthabs++ >= MAXIWTHABS) {
    45e2:	dd32      	ble.n	464a <savelineinfo+0x86>
    luaM_growvector(fs->ls->L, f->abslineinfo, fs->nabslineinfo,
    45e4:	4b1d      	ldr	r3, [pc, #116]	; (465c <savelineinfo+0x98>)
    45e6:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
    45ea:	9302      	str	r3, [sp, #8]
    45ec:	2308      	movs	r3, #8
    45ee:	e9cd 3c00 	strd	r3, ip, [sp]
    45f2:	68a0      	ldr	r0, [r4, #8]
    45f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    45f6:	f105 0324 	add.w	r3, r5, #36	; 0x24
    45fa:	6c69      	ldr	r1, [r5, #68]	; 0x44
    45fc:	6b40      	ldr	r0, [r0, #52]	; 0x34
    45fe:	f001 ff2d 	bl	645c <luaM_growaux_>
                    f->sizeabslineinfo, AbsLineInfo, MAX_INT, "lines");
    f->abslineinfo[fs->nabslineinfo].pc = pc;
    4602:	6a63      	ldr	r3, [r4, #36]	; 0x24
    luaM_growvector(fs->ls->L, f->abslineinfo, fs->nabslineinfo,
    4604:	6468      	str	r0, [r5, #68]	; 0x44
    f->abslineinfo[fs->nabslineinfo].pc = pc;
    4606:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
    460a:	f840 7033 	str.w	r7, [r0, r3, lsl #3]
    f->abslineinfo[fs->nabslineinfo++].line = line;
    460e:	3301      	adds	r3, #1
    4610:	6263      	str	r3, [r4, #36]	; 0x24
    linedif = ABSLINEINFO;  /* signal that there is absolute information */
    fs->iwthabs = 1;  /* restart counter */
    4612:	2301      	movs	r3, #1
    linedif = ABSLINEINFO;  /* signal that there is absolute information */
    4614:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    f->abslineinfo[fs->nabslineinfo++].line = line;
    4618:	6056      	str	r6, [r2, #4]
    fs->iwthabs = 1;  /* restart counter */
    461a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  }
  luaM_growvector(fs->ls->L, f->lineinfo, pc, f->sizelineinfo, ls_byte,
    461e:	4b10      	ldr	r3, [pc, #64]	; (4660 <savelineinfo+0x9c>)
    4620:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4624:	9302      	str	r3, [sp, #8]
    4626:	2301      	movs	r3, #1
    4628:	e9cd 3200 	strd	r3, r2, [sp]
    462c:	68a0      	ldr	r0, [r4, #8]
    462e:	463a      	mov	r2, r7
    4630:	6c29      	ldr	r1, [r5, #64]	; 0x40
    4632:	f105 0318 	add.w	r3, r5, #24
    4636:	6b40      	ldr	r0, [r0, #52]	; 0x34
    4638:	f001 ff10 	bl	645c <luaM_growaux_>
    463c:	6428      	str	r0, [r5, #64]	; 0x40
                  MAX_INT, "opcodes");
  f->lineinfo[pc] = linedif;
    463e:	f800 8007 	strb.w	r8, [r0, r7]
  fs->previousline = line;  /* last line saved */
    4642:	61a6      	str	r6, [r4, #24]
}
    4644:	b004      	add	sp, #16
    4646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (abs(linedif) >= LIMLINEDIFF || fs->iwthabs++ >= MAXIWTHABS) {
    464a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    464e:	1c5a      	adds	r2, r3, #1
    4650:	0619      	lsls	r1, r3, #24
    4652:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    4656:	d4c5      	bmi.n	45e4 <savelineinfo+0x20>
    4658:	e7e1      	b.n	461e <savelineinfo+0x5a>
    465a:	bf00      	nop
    465c:	00018136 	.word	0x00018136
    4660:	00017dd3 	.word	0x00017dd3

00004664 <addk>:
** as keys (nil cannot be a key, integer keys can collapse with float
** keys), the caller must provide a useful 'key' for indexing the cache.
** Note that all functions share the same table, so entering or exiting
** a function can make some indices wrong.
*/
static int addk (FuncState *fs, TValue *key, TValue *v) {
    4664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TValue val;
  lua_State *L = fs->ls->L;
    4668:	6883      	ldr	r3, [r0, #8]
  Proto *f = fs->f;
    466a:	6807      	ldr	r7, [r0, #0]
static int addk (FuncState *fs, TValue *key, TValue *v) {
    466c:	4604      	mov	r4, r0
    466e:	b08b      	sub	sp, #44	; 0x2c
  const TValue *idx = luaH_get(fs->ls->h, key);  /* query scanner table */
    4670:	6c18      	ldr	r0, [r3, #64]	; 0x40
static int addk (FuncState *fs, TValue *key, TValue *v) {
    4672:	4616      	mov	r6, r2
  lua_State *L = fs->ls->L;
    4674:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
static int addk (FuncState *fs, TValue *key, TValue *v) {
    4678:	468a      	mov	sl, r1
  const TValue *idx = luaH_get(fs->ls->h, key);  /* query scanner table */
    467a:	f003 fed9 	bl	8430 <luaH_get>
  int k, oldsize;
  if (ttisinteger(idx)) {  /* is there an index there? */
    467e:	7a02      	ldrb	r2, [r0, #8]
  const TValue *idx = luaH_get(fs->ls->h, key);  /* query scanner table */
    4680:	4603      	mov	r3, r0
  if (ttisinteger(idx)) {  /* is there an index there? */
    4682:	2a03      	cmp	r2, #3
    4684:	d040      	beq.n	4708 <addk+0xa4>
                      luaV_rawequalobj(&f->k[k], v))
      return k;  /* reuse index */
  }
  /* constant not found; create a new entry */
  oldsize = f->sizek;
  k = fs->nk;
    4686:	69e5      	ldr	r5, [r4, #28]
  oldsize = f->sizek;
    4688:	46bb      	mov	fp, r7
  /* numerical value does not need GC barrier;
     table has no metatable, so it does not need to invalidate cache */
  setivalue(&val, k);
    468a:	17ea      	asrs	r2, r5, #31
    468c:	e9cd 5206 	strd	r5, r2, [sp, #24]
    4690:	2203      	movs	r2, #3
  luaH_finishset(L, fs->ls->h, key, idx, &val);
    4692:	68a1      	ldr	r1, [r4, #8]
  setivalue(&val, k);
    4694:	f88d 2020 	strb.w	r2, [sp, #32]
  luaH_finishset(L, fs->ls->h, key, idx, &val);
    4698:	aa06      	add	r2, sp, #24
  oldsize = f->sizek;
    469a:	f85b 9f10 	ldr.w	r9, [fp, #16]!
  luaH_finishset(L, fs->ls->h, key, idx, &val);
    469e:	9200      	str	r2, [sp, #0]
    46a0:	4640      	mov	r0, r8
    46a2:	4652      	mov	r2, sl
    46a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
    46a6:	f011 fb0b 	bl	15cc0 <luaH_finishset>
  luaM_growvector(L, f->k, k, f->sizek, TValue, MAXARG_Ax, "constants");
    46aa:	4b27      	ldr	r3, [pc, #156]	; (4748 <addk+0xe4>)
    46ac:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
    46b0:	9302      	str	r3, [sp, #8]
    46b2:	2310      	movs	r3, #16
    46b4:	e9cd 3100 	strd	r3, r1, [sp]
    46b8:	462a      	mov	r2, r5
    46ba:	465b      	mov	r3, fp
    46bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
    46be:	4640      	mov	r0, r8
    46c0:	f001 fecc 	bl	645c <luaM_growaux_>
  while (oldsize < f->sizek) setnilvalue(&f->k[oldsize++]);
    46c4:	2100      	movs	r1, #0
    46c6:	693b      	ldr	r3, [r7, #16]
  luaM_growvector(L, f->k, k, f->sizek, TValue, MAXARG_Ax, "constants");
    46c8:	6338      	str	r0, [r7, #48]	; 0x30
  while (oldsize < f->sizek) setnilvalue(&f->k[oldsize++]);
    46ca:	f1a0 0208 	sub.w	r2, r0, #8
    46ce:	454b      	cmp	r3, r9
    46d0:	dc32      	bgt.n	4738 <addk+0xd4>
  setobj(L, &f->k[k], v);
    46d2:	e9d6 2300 	ldrd	r2, r3, [r6]
    46d6:	eb00 1005 	add.w	r0, r0, r5, lsl #4
    46da:	e9c0 2300 	strd	r2, r3, [r0]
    46de:	7a33      	ldrb	r3, [r6, #8]
    46e0:	7203      	strb	r3, [r0, #8]
  fs->nk++;
    46e2:	69e3      	ldr	r3, [r4, #28]
    46e4:	3301      	adds	r3, #1
    46e6:	61e3      	str	r3, [r4, #28]
  luaC_barrier(L, f, v);
    46e8:	7a33      	ldrb	r3, [r6, #8]
    46ea:	065a      	lsls	r2, r3, #25
    46ec:	d520      	bpl.n	4730 <addk+0xcc>
    46ee:	797b      	ldrb	r3, [r7, #5]
    46f0:	069b      	lsls	r3, r3, #26
    46f2:	d51d      	bpl.n	4730 <addk+0xcc>
    46f4:	6832      	ldr	r2, [r6, #0]
    46f6:	7953      	ldrb	r3, [r2, #5]
    46f8:	f013 0f18 	tst.w	r3, #24
    46fc:	d018      	beq.n	4730 <addk+0xcc>
    46fe:	4639      	mov	r1, r7
    4700:	4640      	mov	r0, r8
    4702:	f00f fefc 	bl	144fe <luaC_barrier_>
    4706:	e013      	b.n	4730 <addk+0xcc>
    k = cast_int(ivalue(idx));
    4708:	6805      	ldr	r5, [r0, #0]
    if (k < fs->nk && ttypetag(&f->k[k]) == ttypetag(v) &&
    470a:	69e2      	ldr	r2, [r4, #28]
    470c:	42aa      	cmp	r2, r5
    470e:	ddba      	ble.n	4686 <addk+0x22>
    4710:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4712:	7a32      	ldrb	r2, [r6, #8]
    4714:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    4718:	7a08      	ldrb	r0, [r1, #8]
    471a:	4050      	eors	r0, r2
    471c:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
    4720:	d1b1      	bne.n	4686 <addk+0x22>
                      luaV_rawequalobj(&f->k[k], v))
    4722:	4632      	mov	r2, r6
    4724:	9305      	str	r3, [sp, #20]
    4726:	f011 ff78 	bl	1661a <luaV_equalobj>
    if (k < fs->nk && ttypetag(&f->k[k]) == ttypetag(v) &&
    472a:	9b05      	ldr	r3, [sp, #20]
    472c:	2800      	cmp	r0, #0
    472e:	d0aa      	beq.n	4686 <addk+0x22>
  return k;
}
    4730:	4628      	mov	r0, r5
    4732:	b00b      	add	sp, #44	; 0x2c
    4734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (oldsize < f->sizek) setnilvalue(&f->k[oldsize++]);
    4738:	f109 0901 	add.w	r9, r9, #1
    473c:	ea4f 1c09 	mov.w	ip, r9, lsl #4
    4740:	f802 100c 	strb.w	r1, [r2, ip]
    4744:	e7c3      	b.n	46ce <addk+0x6a>
    4746:	bf00      	nop
    4748:	00017ddb 	.word	0x00017ddb

0000474c <luaK_numberK>:
** (This method is not bulletproof: there may be another float
** with that value, and for floats larger than 2^53 the result is
** still an integer. At worst, this only wastes an entry with
** a duplicate.)
*/
static int luaK_numberK (FuncState *fs, lua_Number r) {
    474c:	b570      	push	{r4, r5, r6, lr}
    474e:	4614      	mov	r4, r2
    4750:	461d      	mov	r5, r3
  TValue o;
  lua_Integer ik;
  setfltvalue(&o, r);
    4752:	2313      	movs	r3, #19
static int luaK_numberK (FuncState *fs, lua_Number r) {
    4754:	b08a      	sub	sp, #40	; 0x28
    4756:	4606      	mov	r6, r0
  setfltvalue(&o, r);
    4758:	f88d 3010 	strb.w	r3, [sp, #16]
  if (!luaV_flttointeger(r, &ik, F2Ieq))  /* not an integral value? */
    475c:	466a      	mov	r2, sp
    475e:	2300      	movs	r3, #0
    4760:	4620      	mov	r0, r4
    4762:	4629      	mov	r1, r5
  setfltvalue(&o, r);
    4764:	e9cd 4502 	strd	r4, r5, [sp, #8]
  if (!luaV_flttointeger(r, &ik, F2Ieq))  /* not an integral value? */
    4768:	f004 fb48 	bl	8dfc <luaV_flttointeger>
    476c:	b930      	cbnz	r0, 477c <luaK_numberK+0x30>
    return addk(fs, &o, &o);  /* use number itself as key */
    476e:	aa02      	add	r2, sp, #8
    4770:	4611      	mov	r1, r2
    TValue kv;
    setfltvalue(&kv, k);
    /* result is not an integral value, unless value is too large */
    lua_assert(!luaV_flttointeger(k, &ik, F2Ieq) ||
                l_mathop(fabs)(r) >= l_mathop(1e6));
    return addk(fs, &kv, &o);
    4772:	4630      	mov	r0, r6
    4774:	f7ff ff76 	bl	4664 <addk>
  }
}
    4778:	b00a      	add	sp, #40	; 0x28
    477a:	bd70      	pop	{r4, r5, r6, pc}
    const lua_Number q = l_mathop(ldexp)(l_mathop(1.0), -nbm + 1);
    477c:	f06f 0233 	mvn.w	r2, #51	; 0x33
    4780:	2000      	movs	r0, #0
    4782:	490d      	ldr	r1, [pc, #52]	; (47b8 <luaK_numberK+0x6c>)
    4784:	f012 f9b9 	bl	16afa <ldexp>
    4788:	4602      	mov	r2, r0
    478a:	460b      	mov	r3, r1
    const lua_Number k = (ik == 0) ? q : r + r*q;  /* new key */
    478c:	e9dd 0100 	ldrd	r0, r1, [sp]
    4790:	4301      	orrs	r1, r0
    4792:	d009      	beq.n	47a8 <luaK_numberK+0x5c>
    4794:	4620      	mov	r0, r4
    4796:	4629      	mov	r1, r5
    4798:	f7fb fe66 	bl	468 <__aeabi_dmul>
    479c:	4622      	mov	r2, r4
    479e:	462b      	mov	r3, r5
    47a0:	f7fb fcac 	bl	fc <__adddf3>
    47a4:	4602      	mov	r2, r0
    47a6:	460b      	mov	r3, r1
    setfltvalue(&kv, k);
    47a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    47ac:	2313      	movs	r3, #19
    return addk(fs, &kv, &o);
    47ae:	aa02      	add	r2, sp, #8
    setfltvalue(&kv, k);
    47b0:	f88d 3020 	strb.w	r3, [sp, #32]
    return addk(fs, &kv, &o);
    47b4:	a906      	add	r1, sp, #24
    47b6:	e7dc      	b.n	4772 <luaK_numberK+0x26>
    47b8:	3ff00000 	.word	0x3ff00000

000047bc <fixjump>:
  int offset = dest - (pc + 1);
    47bc:	1a52      	subs	r2, r2, r1
  if (!(-OFFSET_sJ <= offset && offset <= MAXARG_sJ - OFFSET_sJ))
    47be:	f102 7280 	add.w	r2, r2, #16777216	; 0x1000000
  Instruction *jmp = &fs->f->code[pc];
    47c2:	6803      	ldr	r3, [r0, #0]
  if (!(-OFFSET_sJ <= offset && offset <= MAXARG_sJ - OFFSET_sJ))
    47c4:	3a02      	subs	r2, #2
    47c6:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
static void fixjump (FuncState *fs, int pc, int dest) {
    47ca:	b510      	push	{r4, lr}
  Instruction *jmp = &fs->f->code[pc];
    47cc:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (!(-OFFSET_sJ <= offset && offset <= MAXARG_sJ - OFFSET_sJ))
    47ce:	d303      	bcc.n	47d8 <fixjump+0x1c>
    luaX_syntaxerror(fs->ls, "control structure too long");
    47d0:	4906      	ldr	r1, [pc, #24]	; (47ec <fixjump+0x30>)
    47d2:	6880      	ldr	r0, [r0, #8]
    47d4:	f010 f909 	bl	149ea <luaX_syntaxerror>
  SETARG_sJ(*jmp, offset);
    47d8:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
    47dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    47e0:	ea43 12c2 	orr.w	r2, r3, r2, lsl #7
    47e4:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
}
    47e8:	bd10      	pop	{r4, pc}
    47ea:	bf00      	nop
    47ec:	00017de5 	.word	0x00017de5

000047f0 <getjumpcontrol.isra.0>:
  Instruction *pi = &fs->f->code[pc];
    47f0:	6b40      	ldr	r0, [r0, #52]	; 0x34
  if (pc >= 1 && testTMode(GET_OPCODE(*(pi-1))))
    47f2:	2900      	cmp	r1, #0
  Instruction *pi = &fs->f->code[pc];
    47f4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  if (pc >= 1 && testTMode(GET_OPCODE(*(pi-1))))
    47f8:	dd08      	ble.n	480c <getjumpcontrol.isra.0+0x1c>
    47fa:	f810 3c04 	ldrb.w	r3, [r0, #-4]
    47fe:	4a04      	ldr	r2, [pc, #16]	; (4810 <getjumpcontrol.isra.0+0x20>)
    4800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4804:	5cd3      	ldrb	r3, [r2, r3]
    4806:	06db      	lsls	r3, r3, #27
    return pi-1;
    4808:	bf48      	it	mi
    480a:	3804      	submi	r0, #4
}
    480c:	4770      	bx	lr
    480e:	bf00      	nop
    4810:	00018467 	.word	0x00018467

00004814 <luaK_code>:
int luaK_code (FuncState *fs, Instruction i) {
    4814:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  luaM_growvector(fs->ls->L, f->code, fs->pc, f->sizecode, Instruction,
    4816:	4b11      	ldr	r3, [pc, #68]	; (485c <luaK_code+0x48>)
  Proto *f = fs->f;
    4818:	6805      	ldr	r5, [r0, #0]
int luaK_code (FuncState *fs, Instruction i) {
    481a:	4604      	mov	r4, r0
  luaM_growvector(fs->ls->L, f->code, fs->pc, f->sizecode, Instruction,
    481c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    4820:	6880      	ldr	r0, [r0, #8]
    4822:	9302      	str	r3, [sp, #8]
    4824:	2304      	movs	r3, #4
    4826:	e9cd 3200 	strd	r3, r2, [sp]
int luaK_code (FuncState *fs, Instruction i) {
    482a:	460e      	mov	r6, r1
  luaM_growvector(fs->ls->L, f->code, fs->pc, f->sizecode, Instruction,
    482c:	6922      	ldr	r2, [r4, #16]
    482e:	6b69      	ldr	r1, [r5, #52]	; 0x34
    4830:	f105 0314 	add.w	r3, r5, #20
    4834:	6b40      	ldr	r0, [r0, #52]	; 0x34
    4836:	f001 fe11 	bl	645c <luaM_growaux_>
  f->code[fs->pc++] = i;
    483a:	6923      	ldr	r3, [r4, #16]
  luaM_growvector(fs->ls->L, f->code, fs->pc, f->sizecode, Instruction,
    483c:	6368      	str	r0, [r5, #52]	; 0x34
  f->code[fs->pc++] = i;
    483e:	1c5a      	adds	r2, r3, #1
    4840:	6122      	str	r2, [r4, #16]
    4842:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
  savelineinfo(fs, f, fs->ls->lastline);
    4846:	68a3      	ldr	r3, [r4, #8]
    4848:	4620      	mov	r0, r4
    484a:	4629      	mov	r1, r5
    484c:	689a      	ldr	r2, [r3, #8]
    484e:	f7ff feb9 	bl	45c4 <savelineinfo>
  return fs->pc - 1;  /* index of new instruction */
    4852:	6920      	ldr	r0, [r4, #16]
}
    4854:	3801      	subs	r0, #1
    4856:	b004      	add	sp, #16
    4858:	bd70      	pop	{r4, r5, r6, pc}
    485a:	bf00      	nop
    485c:	00017dd3 	.word	0x00017dd3

00004860 <luaK_jump>:
  return luaK_code(fs, CREATE_sJ(o, j, k));
    4860:	4901      	ldr	r1, [pc, #4]	; (4868 <luaK_jump+0x8>)
    4862:	f7ff bfd7 	b.w	4814 <luaK_code>
    4866:	bf00      	nop
    4868:	7fffff38 	.word	0x7fffff38

0000486c <luaK_nil>:
void luaK_nil (FuncState *fs, int from, int n) {
    486c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (fs->pc > fs->lasttarget)
    486e:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
    4872:	429c      	cmp	r4, r3
    return &fs->f->code[fs->pc - 1];  /* previous instruction */
    4874:	bfc3      	ittte	gt
    4876:	6803      	ldrgt	r3, [r0, #0]
    4878:	f104 4480 	addgt.w	r4, r4, #1073741824	; 0x40000000
    487c:	6b5e      	ldrgt	r6, [r3, #52]	; 0x34
    return cast(Instruction*, &invalidinstruction);
    487e:	4e1f      	ldrle	r6, [pc, #124]	; (48fc <luaK_nil+0x90>)
    return &fs->f->code[fs->pc - 1];  /* previous instruction */
    4880:	bfc4      	itt	gt
    4882:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
    4886:	eb06 0684 	addgt.w	r6, r6, r4, lsl #2
  if (GET_OPCODE(*previous) == OP_LOADNIL) {  /* previous is LOADNIL? */
    488a:	6835      	ldr	r5, [r6, #0]
    488c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
    4890:	2b08      	cmp	r3, #8
    4892:	d129      	bne.n	48e8 <luaK_nil+0x7c>
    int pfrom = GETARG_A(*previous);  /* get previous range */
    4894:	f3c5 14c7 	ubfx	r4, r5, #7, #8
    int pl = pfrom + GETARG_B(*previous);
    4898:	f3c5 4307 	ubfx	r3, r5, #16, #8
    if ((pfrom <= from && from <= pl + 1) ||
    489c:	42a1      	cmp	r1, r4
  int l = from + n - 1;  /* last register to set nil */
    489e:	eb01 0702 	add.w	r7, r1, r2
    int pl = pfrom + GETARG_B(*previous);
    48a2:	4423      	add	r3, r4
    if ((pfrom <= from && from <= pl + 1) ||
    48a4:	db05      	blt.n	48b2 <luaK_nil+0x46>
    48a6:	f103 0c01 	add.w	ip, r3, #1
    48aa:	458c      	cmp	ip, r1
    48ac:	da03      	bge.n	48b6 <luaK_nil+0x4a>
    48ae:	42a1      	cmp	r1, r4
    48b0:	d11a      	bne.n	48e8 <luaK_nil+0x7c>
        (from <= pfrom && pfrom <= l + 1)) {  /* can connect both? */
    48b2:	42a7      	cmp	r7, r4
    48b4:	db18      	blt.n	48e8 <luaK_nil+0x7c>
      if (pfrom < from) from = pfrom;  /* from = min(from, pfrom) */
    48b6:	428c      	cmp	r4, r1
    48b8:	bfa8      	it	ge
    48ba:	460c      	movge	r4, r1
  int l = from + n - 1;  /* last register to set nil */
    48bc:	3f01      	subs	r7, #1
      SETARG_A(*previous, from);
    48be:	01e2      	lsls	r2, r4, #7
      SETARG_B(*previous, l - from);
    48c0:	429f      	cmp	r7, r3
    48c2:	bfac      	ite	ge
    48c4:	ebc4 0407 	rsbge	r4, r4, r7
    48c8:	ebc4 0403 	rsblt	r4, r4, r3
      SETARG_A(*previous, from);
    48cc:	f425 057f 	bic.w	r5, r5, #16711680	; 0xff0000
    48d0:	f402 42ff 	and.w	r2, r2, #32640	; 0x7f80
    48d4:	f425 45ff 	bic.w	r5, r5, #32640	; 0x7f80
      SETARG_B(*previous, l - from);
    48d8:	0424      	lsls	r4, r4, #16
    48da:	4315      	orrs	r5, r2
    48dc:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
    48e0:	432c      	orrs	r4, r5
    48e2:	6034      	str	r4, [r6, #0]
}
    48e4:	b003      	add	sp, #12
    48e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  luaK_codeABC(fs, OP_LOADNIL, from, n - 1, 0);  /* else no optimization */
    48e8:	2300      	movs	r3, #0
    48ea:	e9cd 3300 	strd	r3, r3, [sp]
    48ee:	1e53      	subs	r3, r2, #1
    48f0:	460a      	mov	r2, r1
    48f2:	2108      	movs	r1, #8
    48f4:	f00d fbcd 	bl	12092 <luaK_codeABCk>
    48f8:	e7f4      	b.n	48e4 <luaK_nil+0x78>
    48fa:	bf00      	nop
    48fc:	000179bc 	.word	0x000179bc

00004900 <luaK_checkstack>:
void luaK_checkstack (FuncState *fs, int n) {
    4900:	b508      	push	{r3, lr}
  int newstack = fs->freereg + n;
    4902:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
    4906:	4419      	add	r1, r3
  if (newstack > fs->f->maxstacksize) {
    4908:	6803      	ldr	r3, [r0, #0]
    490a:	7a1a      	ldrb	r2, [r3, #8]
    490c:	428a      	cmp	r2, r1
    490e:	da06      	bge.n	491e <luaK_checkstack+0x1e>
    if (newstack >= MAXREGS)
    4910:	29fe      	cmp	r1, #254	; 0xfe
    4912:	dd03      	ble.n	491c <luaK_checkstack+0x1c>
      luaX_syntaxerror(fs->ls,
    4914:	4902      	ldr	r1, [pc, #8]	; (4920 <luaK_checkstack+0x20>)
    4916:	6880      	ldr	r0, [r0, #8]
    4918:	f010 f867 	bl	149ea <luaX_syntaxerror>
    fs->f->maxstacksize = cast_byte(newstack);
    491c:	7219      	strb	r1, [r3, #8]
}
    491e:	bd08      	pop	{r3, pc}
    4920:	00017e00 	.word	0x00017e00

00004924 <luaK_prefix>:


/*
** Apply prefix operation 'op' to expression 'e'.
*/
void luaK_prefix (FuncState *fs, UnOpr op, expdesc *e, int line) {
    4924:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4928:	460e      	mov	r6, r1
  static const expdesc ef = {VKINT, {0}, NO_JUMP, NO_JUMP};
  luaK_dischargevars(fs, e);
    492a:	4611      	mov	r1, r2
void luaK_prefix (FuncState *fs, UnOpr op, expdesc *e, int line) {
    492c:	4605      	mov	r5, r0
    492e:	4614      	mov	r4, r2
    4930:	461f      	mov	r7, r3
  luaK_dischargevars(fs, e);
    4932:	f00d fc64 	bl	121fe <luaK_dischargevars>
  switch (op) {
    4936:	2e02      	cmp	r6, #2
    4938:	d02b      	beq.n	4992 <luaK_prefix+0x6e>
    493a:	d904      	bls.n	4946 <luaK_prefix+0x22>
    493c:	2e03      	cmp	r6, #3
    493e:	d00b      	beq.n	4958 <luaK_prefix+0x34>
      codeunexpval(fs, cast(OpCode, op + OP_UNM), e, line);
      break;
    case OPR_NOT: codenot(fs, e); break;
    default: lua_assert(0);
  }
}
    4940:	b002      	add	sp, #8
    4942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (constfolding(fs, op + LUA_OPUNM, e, &ef))
    4946:	4622      	mov	r2, r4
    4948:	4628      	mov	r0, r5
    494a:	4b32      	ldr	r3, [pc, #200]	; (4a14 <luaK_prefix+0xf0>)
    494c:	f106 010c 	add.w	r1, r6, #12
    4950:	f00d f9d4 	bl	11cfc <constfolding>
    4954:	2800      	cmp	r0, #0
    4956:	d1f3      	bne.n	4940 <luaK_prefix+0x1c>
  int r = luaK_exp2anyreg(fs, e);  /* opcodes operate only on registers */
    4958:	4621      	mov	r1, r4
    495a:	4628      	mov	r0, r5
    495c:	f00d fe06 	bl	1256c <luaK_exp2anyreg>
  freeexp(fs, e);
    4960:	4621      	mov	r1, r4
  int r = luaK_exp2anyreg(fs, e);  /* opcodes operate only on registers */
    4962:	4680      	mov	r8, r0
  freeexp(fs, e);
    4964:	4628      	mov	r0, r5
    4966:	f00d f978 	bl	11c5a <freeexp>
  e->u.info = luaK_codeABC(fs, op, 0, r, 0);  /* generate opcode */
    496a:	2200      	movs	r2, #0
      codeunexpval(fs, cast(OpCode, op + OP_UNM), e, line);
    496c:	f106 0131 	add.w	r1, r6, #49	; 0x31
  e->u.info = luaK_codeABC(fs, op, 0, r, 0);  /* generate opcode */
    4970:	4643      	mov	r3, r8
    4972:	4628      	mov	r0, r5
    4974:	e9cd 2200 	strd	r2, r2, [sp]
    4978:	b2c9      	uxtb	r1, r1
    497a:	f00d fb8a 	bl	12092 <luaK_codeABCk>
  e->k = VRELOC;  /* all those operations are relocatable */
    497e:	2311      	movs	r3, #17
  e->u.info = luaK_codeABC(fs, op, 0, r, 0);  /* generate opcode */
    4980:	60a0      	str	r0, [r4, #8]
  luaK_fixline(fs, line);
    4982:	4639      	mov	r1, r7
    4984:	4628      	mov	r0, r5
  e->k = VRELOC;  /* all those operations are relocatable */
    4986:	7023      	strb	r3, [r4, #0]
}
    4988:	b002      	add	sp, #8
    498a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  luaK_fixline(fs, line);
    498e:	f00d bffc 	b.w	1298a <luaK_fixline>
  switch (e->k) {
    4992:	7823      	ldrb	r3, [r4, #0]
    4994:	1e5a      	subs	r2, r3, #1
    4996:	2a10      	cmp	r2, #16
    4998:	d813      	bhi.n	49c2 <luaK_prefix+0x9e>
    499a:	e8df f002 	tbb	[pc, r2]
    499e:	0c09      	.short	0x0c09
    49a0:	0c0c0c09 	.word	0x0c0c0c09
    49a4:	1212200c 	.word	0x1212200c
    49a8:	12121212 	.word	0x12121212
    49ac:	0e12      	.short	0x0e12
    49ae:	20          	.byte	0x20
    49af:	00          	.byte	0x00
      e->k = VTRUE;  /* true == not nil == not false */
    49b0:	2302      	movs	r3, #2
      e->k = VRELOC;
    49b2:	7023      	strb	r3, [r4, #0]
      break;
    49b4:	e005      	b.n	49c2 <luaK_prefix+0x9e>
      e->k = VFALSE;  /* false == not "x" == not 0.5 == not 1 == not true */
    49b6:	2303      	movs	r3, #3
    49b8:	e7fb      	b.n	49b2 <luaK_prefix+0x8e>
      negatecondition(fs, e);
    49ba:	68a1      	ldr	r1, [r4, #8]
    49bc:	6828      	ldr	r0, [r5, #0]
    49be:	f00d faa4 	bl	11f0a <negatecondition.isra.0>
  { int temp = e->f; e->f = e->t; e->t = temp; }
    49c2:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
  removevalues(fs, e->f);  /* values are useless when negated */
    49c6:	4628      	mov	r0, r5
  { int temp = e->f; e->f = e->t; e->t = temp; }
    49c8:	e9c4 3104 	strd	r3, r1, [r4, #16]
  removevalues(fs, e->f);  /* values are useless when negated */
    49cc:	f00d faee 	bl	11fac <removevalues>
  removevalues(fs, e->t);
    49d0:	4628      	mov	r0, r5
    49d2:	6921      	ldr	r1, [r4, #16]
}
    49d4:	b002      	add	sp, #8
    49d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  removevalues(fs, e->t);
    49da:	f00d bae7 	b.w	11fac <removevalues>
  if (e->k != VNONRELOC) {  /* no fixed register yet? */
    49de:	2b08      	cmp	r3, #8
    49e0:	d00a      	beq.n	49f8 <luaK_prefix+0xd4>
    luaK_reserveregs(fs, 1);  /* get a register */
    49e2:	2101      	movs	r1, #1
    49e4:	4628      	mov	r0, r5
    49e6:	f00d fb9d 	bl	12124 <luaK_reserveregs>
    discharge2reg(fs, e, fs->freereg-1);  /* put value there */
    49ea:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    49ee:	4621      	mov	r1, r4
    49f0:	4628      	mov	r0, r5
    49f2:	3a01      	subs	r2, #1
    49f4:	f00d fc86 	bl	12304 <discharge2reg>
      freeexp(fs, e);
    49f8:	4621      	mov	r1, r4
    49fa:	4628      	mov	r0, r5
    49fc:	f00d f92d 	bl	11c5a <freeexp>
  return luaK_code(fs, CREATE_ABCk(o, a, b, c, k));
    4a00:	68a1      	ldr	r1, [r4, #8]
    4a02:	4628      	mov	r0, r5
    4a04:	0409      	lsls	r1, r1, #16
    4a06:	f041 0133 	orr.w	r1, r1, #51	; 0x33
    4a0a:	f7ff ff03 	bl	4814 <luaK_code>
      e->k = VRELOC;
    4a0e:	2311      	movs	r3, #17
      e->u.info = luaK_codeABC(fs, OP_NOT, 0, e->u.info, 0);
    4a10:	60a0      	str	r0, [r4, #8]
      e->k = VRELOC;
    4a12:	e7ce      	b.n	49b2 <luaK_prefix+0x8e>
    4a14:	000177f0 	.word	0x000177f0

00004a18 <luaK_posfix>:

/*
** Finalize code for binary operation, after reading 2nd operand.
*/
void luaK_posfix (FuncState *fs, BinOpr opr,
                  expdesc *e1, expdesc *e2, int line) {
    4a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a1c:	460e      	mov	r6, r1
    4a1e:	b088      	sub	sp, #32
  luaK_dischargevars(fs, e2);
    4a20:	4619      	mov	r1, r3
                  expdesc *e1, expdesc *e2, int line) {
    4a22:	4680      	mov	r8, r0
    4a24:	4615      	mov	r5, r2
    4a26:	461c      	mov	r4, r3
    4a28:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  luaK_dischargevars(fs, e2);
    4a2c:	f00d fbe7 	bl	121fe <luaK_dischargevars>
  if (foldbinop(opr) && constfolding(fs, opr + LUA_OPADD, e1, e2))
    4a30:	2e0b      	cmp	r6, #11
    4a32:	d918      	bls.n	4a66 <luaK_posfix+0x4e>
    return;  /* done by folding */
  switch (opr) {
    4a34:	2e14      	cmp	r6, #20
    4a36:	d81e      	bhi.n	4a76 <luaK_posfix+0x5e>
    4a38:	e8df f016 	tbh	[pc, r6, lsl #1]
    4a3c:	00a5007c 	.word	0x00a5007c
    4a40:	00b1007c 	.word	0x00b1007c
    4a44:	00b100b1 	.word	0x00b100b1
    4a48:	00b600b1 	.word	0x00b600b1
    4a4c:	00b600b6 	.word	0x00b600b6
    4a50:	010e00e9 	.word	0x010e00e9
    4a54:	01250039 	.word	0x01250039
    4a58:	01660166 	.word	0x01660166
    4a5c:	01710125 	.word	0x01710125
    4a60:	00200171 	.word	0x00200171
    4a64:	002d      	.short	0x002d
  if (foldbinop(opr) && constfolding(fs, opr + LUA_OPADD, e1, e2))
    4a66:	4623      	mov	r3, r4
    4a68:	462a      	mov	r2, r5
    4a6a:	4631      	mov	r1, r6
    4a6c:	4640      	mov	r0, r8
    4a6e:	f00d f945 	bl	11cfc <constfolding>
    4a72:	2800      	cmp	r0, #0
    4a74:	d0de      	beq.n	4a34 <luaK_posfix+0x1c>
      codeorder(fs, op, e1, e2);
      break;
    }
    default: lua_assert(0);
  }
}
    4a76:	b008      	add	sp, #32
    4a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      luaK_concat(fs, &e2->f, e1->f);
    4a7c:	696a      	ldr	r2, [r5, #20]
    4a7e:	4640      	mov	r0, r8
    4a80:	f104 0114 	add.w	r1, r4, #20
    4a84:	f00d fade 	bl	12044 <luaK_concat>
      *e1 = *e2;
    4a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    4a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4a8c:	e894 0003 	ldmia.w	r4, {r0, r1}
      *e1 = *e2;
    4a90:	e885 0003 	stmia.w	r5, {r0, r1}
      break;
    4a94:	e7ef      	b.n	4a76 <luaK_posfix+0x5e>
      luaK_concat(fs, &e2->t, e1->t);
    4a96:	f104 0610 	add.w	r6, r4, #16
    4a9a:	692a      	ldr	r2, [r5, #16]
    4a9c:	4631      	mov	r1, r6
    4a9e:	4640      	mov	r0, r8
    4aa0:	f00d fad0 	bl	12044 <luaK_concat>
      *e1 = *e2;
    4aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    4aa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4aa8:	e896 0003 	ldmia.w	r6, {r0, r1}
    4aac:	e7f0      	b.n	4a90 <luaK_posfix+0x78>
      luaK_exp2nextreg(fs, e2);
    4aae:	4621      	mov	r1, r4
    4ab0:	4640      	mov	r0, r8
    4ab2:	f00d fd45 	bl	12540 <luaK_exp2nextreg>
  if (fs->pc > fs->lasttarget)
    4ab6:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
    4aba:	4293      	cmp	r3, r2
    return &fs->f->code[fs->pc - 1];  /* previous instruction */
    4abc:	bfc1      	itttt	gt
    4abe:	f8d8 2000 	ldrgt.w	r2, [r8]
    4ac2:	f103 4380 	addgt.w	r3, r3, #1073741824	; 0x40000000
    4ac6:	6b57      	ldrgt	r7, [r2, #52]	; 0x34
    4ac8:	f103 33ff 	addgt.w	r3, r3, #4294967295	; 0xffffffff
    return cast(Instruction*, &invalidinstruction);
    4acc:	bfd4      	ite	le
    4ace:	4f97      	ldrle	r7, [pc, #604]	; (4d2c <luaK_posfix+0x314>)
    return &fs->f->code[fs->pc - 1];  /* previous instruction */
    4ad0:	eb07 0783 	addgt.w	r7, r7, r3, lsl #2
  if (GET_OPCODE(*ie2) == OP_CONCAT) {  /* is 'e2' a concatenation? */
    4ad4:	683e      	ldr	r6, [r7, #0]
    4ad6:	f006 037f 	and.w	r3, r6, #127	; 0x7f
    4ada:	2b35      	cmp	r3, #53	; 0x35
    4adc:	d116      	bne.n	4b0c <luaK_posfix+0xf4>
    freeexp(fs, e2);
    4ade:	4621      	mov	r1, r4
    4ae0:	4640      	mov	r0, r8
    4ae2:	f00d f8ba 	bl	11c5a <freeexp>
    SETARG_A(*ie2, e1->u.info);  /* correct first element ('e1') */
    4ae6:	68ab      	ldr	r3, [r5, #8]
    SETARG_B(*ie2, n + 1);  /* will concatenate one more element */
    4ae8:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
    SETARG_A(*ie2, e1->u.info);  /* correct first element ('e1') */
    4aec:	01db      	lsls	r3, r3, #7
    4aee:	f403 42ff 	and.w	r2, r3, #32640	; 0x7f80
    4af2:	683b      	ldr	r3, [r7, #0]
    SETARG_B(*ie2, n + 1);  /* will concatenate one more element */
    4af4:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
    SETARG_A(*ie2, e1->u.info);  /* correct first element ('e1') */
    4af8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    4afc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
    SETARG_B(*ie2, n + 1);  /* will concatenate one more element */
    4b00:	4313      	orrs	r3, r2
    4b02:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
    4b06:	4333      	orrs	r3, r6
    4b08:	603b      	str	r3, [r7, #0]
    4b0a:	e7b4      	b.n	4a76 <luaK_posfix+0x5e>
    luaK_codeABC(fs, OP_CONCAT, e1->u.info, 2, 0);  /* new concat opcode */
    4b0c:	2300      	movs	r3, #0
    4b0e:	68aa      	ldr	r2, [r5, #8]
    4b10:	e9cd 3300 	strd	r3, r3, [sp]
    4b14:	2135      	movs	r1, #53	; 0x35
    4b16:	2302      	movs	r3, #2
    4b18:	4640      	mov	r0, r8
    4b1a:	f00d faba 	bl	12092 <luaK_codeABCk>
    freeexp(fs, e2);
    4b1e:	4621      	mov	r1, r4
    4b20:	4640      	mov	r0, r8
    4b22:	f00d f89a 	bl	11c5a <freeexp>
    luaK_fixline(fs, line);
    4b26:	4649      	mov	r1, r9
    4b28:	4640      	mov	r0, r8
}
    4b2a:	b008      	add	sp, #32
    4b2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    luaK_fixline(fs, line);
    4b30:	f00d bf2b 	b.w	1298a <luaK_fixline>
  if (tonumeral(e1, NULL)) {  /* is first operand a numeric constant? */
    4b34:	2100      	movs	r1, #0
    4b36:	4628      	mov	r0, r5
    4b38:	f00d f8c4 	bl	11cc4 <tonumeral>
    4b3c:	4601      	mov	r1, r0
    4b3e:	b120      	cbz	r0, 4b4a <luaK_posfix+0x132>
    swapexps(e1, e2);  /* change order */
    4b40:	4621      	mov	r1, r4
    4b42:	4628      	mov	r0, r5
    4b44:	f00d f851 	bl	11bea <swapexps>
    flip = 1;
    4b48:	2101      	movs	r1, #1
  if (op == OPR_ADD && isSCint(e2))  /* immediate operand? */
    4b4a:	b99e      	cbnz	r6, 4b74 <luaK_posfix+0x15c>
    4b4c:	4620      	mov	r0, r4
    4b4e:	f00d fe78 	bl	12842 <isSCint>
    4b52:	b178      	cbz	r0, 4b74 <luaK_posfix+0x15c>
  finishbinexpval(fs, e1, e2, op, v2, flip, line, OP_MMBINI, event);
    4b54:	232f      	movs	r3, #47	; 0x2f
    4b56:	2006      	movs	r0, #6
    4b58:	e9cd 3003 	strd	r3, r0, [sp, #12]
  int v2 = int2sC(cast_int(e2->u.ival));  /* immediate operand */
    4b5c:	68a3      	ldr	r3, [r4, #8]
  finishbinexpval(fs, e1, e2, op, v2, flip, line, OP_MMBINI, event);
    4b5e:	e9cd 1901 	strd	r1, r9, [sp, #4]
  int v2 = int2sC(cast_int(e2->u.ival));  /* immediate operand */
    4b62:	337f      	adds	r3, #127	; 0x7f
  finishbinexpval(fs, e1, e2, op, v2, flip, line, OP_MMBINI, event);
    4b64:	9300      	str	r3, [sp, #0]
    4b66:	2315      	movs	r3, #21
    4b68:	4622      	mov	r2, r4
    4b6a:	4629      	mov	r1, r5
    4b6c:	4640      	mov	r0, r8
    4b6e:	f00d ff15 	bl	1299c <finishbinexpval>
}
    4b72:	e780      	b.n	4a76 <luaK_posfix+0x5e>
    codearith(fs, op, e1, e2, flip, line);
    4b74:	e9cd 1900 	strd	r1, r9, [sp]
      codearith(fs, opr, e1, e2, 0, line);
    4b78:	4623      	mov	r3, r4
    4b7a:	462a      	mov	r2, r5
    4b7c:	4631      	mov	r1, r6
    4b7e:	4640      	mov	r0, r8
    4b80:	f00d ff9f 	bl	12ac2 <codearith>
      break;
    4b84:	e777      	b.n	4a76 <luaK_posfix+0x5e>
      if (finishbinexpneg(fs, e1, e2, OP_ADDI, line, TM_SUB))
    4b86:	2307      	movs	r3, #7
    4b88:	4622      	mov	r2, r4
    4b8a:	e9cd 9300 	strd	r9, r3, [sp]
    4b8e:	4629      	mov	r1, r5
    4b90:	2315      	movs	r3, #21
    4b92:	4640      	mov	r0, r8
    4b94:	f00d ff3d 	bl	12a12 <finishbinexpneg>
    4b98:	2800      	cmp	r0, #0
    4b9a:	f47f af6c 	bne.w	4a76 <luaK_posfix+0x5e>
      codearith(fs, opr, e1, e2, 0, line);
    4b9e:	2300      	movs	r3, #0
    4ba0:	f8cd 9004 	str.w	r9, [sp, #4]
    4ba4:	9300      	str	r3, [sp, #0]
    4ba6:	e7e7      	b.n	4b78 <luaK_posfix+0x160>
  if (e1->k == VKINT && luaK_exp2RK(fs, e1)) {
    4ba8:	782b      	ldrb	r3, [r5, #0]
    4baa:	2b06      	cmp	r3, #6
    4bac:	d117      	bne.n	4bde <luaK_posfix+0x1c6>
    4bae:	4629      	mov	r1, r5
    4bb0:	4640      	mov	r0, r8
    4bb2:	f00d fd59 	bl	12668 <luaK_exp2RK>
    4bb6:	b190      	cbz	r0, 4bde <luaK_posfix+0x1c6>
    swapexps(e1, e2);  /* 'e2' will be the constant operand */
    4bb8:	4621      	mov	r1, r4
    4bba:	4628      	mov	r0, r5
    4bbc:	f00d f815 	bl	11bea <swapexps>
    flip = 1;
    4bc0:	2201      	movs	r2, #1
  op = cast(OpCode, opr + OP_ADDK);
    4bc2:	b271      	sxtb	r1, r6
    4bc4:	f101 0316 	add.w	r3, r1, #22
                  cast(TMS, opr + TM_ADD));
    4bc8:	1d8e      	adds	r6, r1, #6
  finishbinexpval(fs, e1, e2, op, v2, flip, line, OP_MMBINK,
    4bca:	2130      	movs	r1, #48	; 0x30
    4bcc:	9201      	str	r2, [sp, #4]
    4bce:	68a2      	ldr	r2, [r4, #8]
    4bd0:	b2f6      	uxtb	r6, r6
    4bd2:	e9cd 9102 	strd	r9, r1, [sp, #8]
    4bd6:	9604      	str	r6, [sp, #16]
    4bd8:	9200      	str	r2, [sp, #0]
    4bda:	b2db      	uxtb	r3, r3
    4bdc:	e7c4      	b.n	4b68 <luaK_posfix+0x150>
  else if (!(e2->k == VKINT && luaK_exp2RK(fs, e2))) {  /* no constants? */
    4bde:	7823      	ldrb	r3, [r4, #0]
    4be0:	2b06      	cmp	r3, #6
    4be2:	d00c      	beq.n	4bfe <luaK_posfix+0x1e6>
    codebinexpval(fs, op, e1, e2, line);  /* all-register opcodes */
    4be4:	4623      	mov	r3, r4
    4be6:	462a      	mov	r2, r5
    op = cast(OpCode, opr + OP_ADD);
    4be8:	f106 0122 	add.w	r1, r6, #34	; 0x22
    codebinexpval(fs, op, e1, e2, line);  /* all-register opcodes */
    4bec:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    4bf0:	b2c9      	uxtb	r1, r1
       codebinexpval(fs, OP_SHL, e1, e2, line);
    4bf2:	4640      	mov	r0, r8
}
    4bf4:	b008      	add	sp, #32
    4bf6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
       codebinexpval(fs, OP_SHL, e1, e2, line);
    4bfa:	f00d bf46 	b.w	12a8a <codebinexpval>
  else if (!(e2->k == VKINT && luaK_exp2RK(fs, e2))) {  /* no constants? */
    4bfe:	4621      	mov	r1, r4
    4c00:	4640      	mov	r0, r8
    4c02:	f00d fd31 	bl	12668 <luaK_exp2RK>
    4c06:	2800      	cmp	r0, #0
    4c08:	d0ec      	beq.n	4be4 <luaK_posfix+0x1cc>
  int flip = 0;
    4c0a:	2200      	movs	r2, #0
    4c0c:	e7d9      	b.n	4bc2 <luaK_posfix+0x1aa>
      if (isSCint(e1)) {
    4c0e:	4628      	mov	r0, r5
    4c10:	f00d fe17 	bl	12842 <isSCint>
    4c14:	2610      	movs	r6, #16
    4c16:	b170      	cbz	r0, 4c36 <luaK_posfix+0x21e>
        swapexps(e1, e2);
    4c18:	4621      	mov	r1, r4
    4c1a:	4628      	mov	r0, r5
    4c1c:	f00c ffe5 	bl	11bea <swapexps>
  finishbinexpval(fs, e1, e2, op, v2, flip, line, OP_MMBINI, event);
    4c20:	232f      	movs	r3, #47	; 0x2f
    4c22:	e9cd 9302 	strd	r9, r3, [sp, #8]
    4c26:	2301      	movs	r3, #1
    4c28:	9301      	str	r3, [sp, #4]
  int v2 = int2sC(cast_int(e2->u.ival));  /* immediate operand */
    4c2a:	68a3      	ldr	r3, [r4, #8]
  finishbinexpval(fs, e1, e2, op, v2, flip, line, OP_MMBINI, event);
    4c2c:	9604      	str	r6, [sp, #16]
  int v2 = int2sC(cast_int(e2->u.ival));  /* immediate operand */
    4c2e:	337f      	adds	r3, #127	; 0x7f
  finishbinexpval(fs, e1, e2, op, v2, flip, line, OP_MMBINI, event);
    4c30:	9300      	str	r3, [sp, #0]
    4c32:	2321      	movs	r3, #33	; 0x21
    4c34:	e798      	b.n	4b68 <luaK_posfix+0x150>
      else if (finishbinexpneg(fs, e1, e2, OP_SHRI, line, TM_SHL)) {
    4c36:	2320      	movs	r3, #32
    4c38:	4622      	mov	r2, r4
    4c3a:	4629      	mov	r1, r5
    4c3c:	4640      	mov	r0, r8
    4c3e:	e9cd 9600 	strd	r9, r6, [sp]
    4c42:	f00d fee6 	bl	12a12 <finishbinexpneg>
    4c46:	2800      	cmp	r0, #0
    4c48:	f47f af15 	bne.w	4a76 <luaK_posfix+0x5e>
       codebinexpval(fs, OP_SHL, e1, e2, line);
    4c4c:	4623      	mov	r3, r4
    4c4e:	462a      	mov	r2, r5
    4c50:	212c      	movs	r1, #44	; 0x2c
    4c52:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    4c56:	e7cc      	b.n	4bf2 <luaK_posfix+0x1da>
      if (isSCint(e2))
    4c58:	4620      	mov	r0, r4
    4c5a:	f00d fdf2 	bl	12842 <isSCint>
    4c5e:	b160      	cbz	r0, 4c7a <luaK_posfix+0x262>
  finishbinexpval(fs, e1, e2, op, v2, flip, line, OP_MMBINI, event);
    4c60:	232f      	movs	r3, #47	; 0x2f
    4c62:	2211      	movs	r2, #17
    4c64:	e9cd 3203 	strd	r3, r2, [sp, #12]
    4c68:	2300      	movs	r3, #0
    4c6a:	9301      	str	r3, [sp, #4]
  int v2 = int2sC(cast_int(e2->u.ival));  /* immediate operand */
    4c6c:	68a3      	ldr	r3, [r4, #8]
  finishbinexpval(fs, e1, e2, op, v2, flip, line, OP_MMBINI, event);
    4c6e:	f8cd 9008 	str.w	r9, [sp, #8]
  int v2 = int2sC(cast_int(e2->u.ival));  /* immediate operand */
    4c72:	337f      	adds	r3, #127	; 0x7f
  finishbinexpval(fs, e1, e2, op, v2, flip, line, OP_MMBINI, event);
    4c74:	9300      	str	r3, [sp, #0]
    4c76:	2320      	movs	r3, #32
    4c78:	e776      	b.n	4b68 <luaK_posfix+0x150>
        codebinexpval(fs, OP_SHR, e1, e2, line);
    4c7a:	4623      	mov	r3, r4
    4c7c:	462a      	mov	r2, r5
    4c7e:	212d      	movs	r1, #45	; 0x2d
    4c80:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    4c84:	e7b5      	b.n	4bf2 <luaK_posfix+0x1da>
  int isfloat = 0;  /* not needed here, but kept for symmetry */
    4c86:	2300      	movs	r3, #0
    4c88:	9307      	str	r3, [sp, #28]
  if (e1->k != VNONRELOC) {
    4c8a:	782b      	ldrb	r3, [r5, #0]
    4c8c:	2b08      	cmp	r3, #8
    4c8e:	d003      	beq.n	4c98 <luaK_posfix+0x280>
    swapexps(e1, e2);
    4c90:	4621      	mov	r1, r4
    4c92:	4628      	mov	r0, r5
    4c94:	f00c ffa9 	bl	11bea <swapexps>
  r1 = luaK_exp2anyreg(fs, e1);  /* 1st expression must be in register */
    4c98:	4629      	mov	r1, r5
    4c9a:	4640      	mov	r0, r8
    4c9c:	f00d fc66 	bl	1256c <luaK_exp2anyreg>
  if (isSCnumber(e2, &im, &isfloat)) {
    4ca0:	aa07      	add	r2, sp, #28
  r1 = luaK_exp2anyreg(fs, e1);  /* 1st expression must be in register */
    4ca2:	4682      	mov	sl, r0
  if (isSCnumber(e2, &im, &isfloat)) {
    4ca4:	a906      	add	r1, sp, #24
    4ca6:	4620      	mov	r0, r4
    4ca8:	f00c ffde 	bl	11c68 <isSCnumber>
    4cac:	b1d8      	cbz	r0, 4ce6 <luaK_posfix+0x2ce>
    op = OP_EQI;
    4cae:	f04f 093d 	mov.w	r9, #61	; 0x3d
    r2 = im;  /* immediate operand */
    4cb2:	9f06      	ldr	r7, [sp, #24]
  freeexps(fs, e1, e2);
    4cb4:	4622      	mov	r2, r4
    4cb6:	4629      	mov	r1, r5
    4cb8:	4640      	mov	r0, r8
    4cba:	f00d f8b6 	bl	11e2a <freeexps>
  e1->u.info = condjump(fs, op, r1, r2, isfloat, (opr == OPR_EQ));
    4cbe:	f1a6 030d 	sub.w	r3, r6, #13
    4cc2:	425e      	negs	r6, r3
    4cc4:	415e      	adcs	r6, r3
  luaK_codeABCk(fs, op, A, B, C, k);
    4cc6:	9b07      	ldr	r3, [sp, #28]
    4cc8:	4652      	mov	r2, sl
    4cca:	4649      	mov	r1, r9
    4ccc:	9300      	str	r3, [sp, #0]
    4cce:	4640      	mov	r0, r8
    4cd0:	463b      	mov	r3, r7
    4cd2:	9601      	str	r6, [sp, #4]
    4cd4:	f00d f9dd 	bl	12092 <luaK_codeABCk>
  return luaK_jump(fs);
    4cd8:	4640      	mov	r0, r8
    4cda:	f7ff fdc1 	bl	4860 <luaK_jump>
  e1->k = VJMP;
    4cde:	2310      	movs	r3, #16
  e1->u.info = condjump(fs, op, r1, r2, isfloat, (opr == OPR_EQ));
    4ce0:	60a8      	str	r0, [r5, #8]
  e1->k = VJMP;
    4ce2:	702b      	strb	r3, [r5, #0]
}
    4ce4:	e6c7      	b.n	4a76 <luaK_posfix+0x5e>
  else if (luaK_exp2RK(fs, e2)) {  /* 1st expression is constant? */
    4ce6:	4621      	mov	r1, r4
    4ce8:	4640      	mov	r0, r8
    4cea:	f00d fcbd 	bl	12668 <luaK_exp2RK>
    4cee:	b118      	cbz	r0, 4cf8 <luaK_posfix+0x2e0>
    op = OP_EQK;
    4cf0:	f04f 093c 	mov.w	r9, #60	; 0x3c
    r2 = e2->u.info;  /* constant index */
    4cf4:	68a7      	ldr	r7, [r4, #8]
    4cf6:	e7dd      	b.n	4cb4 <luaK_posfix+0x29c>
    r2 = luaK_exp2anyreg(fs, e2);
    4cf8:	4621      	mov	r1, r4
    4cfa:	4640      	mov	r0, r8
    4cfc:	f00d fc36 	bl	1256c <luaK_exp2anyreg>
    op = OP_EQ;  /* will compare two registers */
    4d00:	f04f 0939 	mov.w	r9, #57	; 0x39
    r2 = luaK_exp2anyreg(fs, e2);
    4d04:	4607      	mov	r7, r0
    4d06:	e7d5      	b.n	4cb4 <luaK_posfix+0x29c>
      OpCode op = cast(OpCode, (opr - OPR_EQ) + OP_EQ);
    4d08:	f106 012c 	add.w	r1, r6, #44	; 0x2c
      codeorder(fs, op, e1, e2);
    4d0c:	4623      	mov	r3, r4
    4d0e:	462a      	mov	r2, r5
    4d10:	4640      	mov	r0, r8
    4d12:	b2c9      	uxtb	r1, r1
}
    4d14:	b008      	add	sp, #32
    4d16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      codeorder(fs, op, e1, e2);
    4d1a:	f00d bc46 	b.w	125aa <codeorder>
      swapexps(e1, e2);
    4d1e:	4621      	mov	r1, r4
    4d20:	4628      	mov	r0, r5
    4d22:	f00c ff62 	bl	11bea <swapexps>
      OpCode op = cast(OpCode, (opr - OPR_NE) + OP_EQ);
    4d26:	f106 0129 	add.w	r1, r6, #41	; 0x29
    4d2a:	e7ef      	b.n	4d0c <luaK_posfix+0x2f4>
    4d2c:	000179bc 	.word	0x000179bc

00004d30 <getobjname>:
  return (name && strcmp(name, LUA_ENV) == 0) ? "global" : "field";
}


static const char *getobjname (const Proto *p, int lastpc, int reg,
                               const char **name) {
    4d30:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d34:	4605      	mov	r5, r0
    4d36:	460f      	mov	r7, r1
    4d38:	4690      	mov	r8, r2
    4d3a:	461e      	mov	r6, r3
  if (testMMMode(GET_OPCODE(p->code[lastpc])))
    4d3c:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 4f1c <getobjname+0x1ec>
  int pc;
  *name = luaF_getlocalname(p, reg + 1, lastpc);
    4d40:	463a      	mov	r2, r7
    4d42:	4628      	mov	r0, r5
    4d44:	f108 0101 	add.w	r1, r8, #1
    4d48:	f00e fcda 	bl	13700 <luaF_getlocalname>
    4d4c:	6030      	str	r0, [r6, #0]
  if (*name)  /* is a local? */
    4d4e:	2800      	cmp	r0, #0
    4d50:	f040 80e2 	bne.w	4f18 <getobjname+0x1e8>
  int jmptarget = 0;  /* any code before this address is conditional */
    4d54:	f04f 0c00 	mov.w	ip, #0
    4d58:	6b69      	ldr	r1, [r5, #52]	; 0x34
  if (testMMMode(GET_OPCODE(p->code[lastpc])))
    4d5a:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
    4d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4d62:	f919 3003 	ldrsb.w	r3, [r9, r3]
    4d66:	2b00      	cmp	r3, #0
    lastpc--;  /* previous instruction was not actually executed */
    4d68:	bfac      	ite	ge
    4d6a:	46be      	movge	lr, r7
    4d6c:	f107 3eff 	addlt.w	lr, r7, #4294967295	; 0xffffffff
  for (pc = 0; pc < lastpc; pc++) {
    4d70:	4663      	mov	r3, ip
  int setreg = -1;  /* keep last instruction that changed 'reg' */
    4d72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
  for (pc = 0; pc < lastpc; pc++) {
    4d76:	4573      	cmp	r3, lr
    4d78:	db14      	blt.n	4da4 <getobjname+0x74>
    return "local";
  /* else try symbolic execution */
  pc = findsetreg(p, lastpc, reg);
  if (pc != -1) {  /* could find instruction? */
    4d7a:	1c7a      	adds	r2, r7, #1
    4d7c:	d054      	beq.n	4e28 <getobjname+0xf8>
    Instruction i = p->code[pc];
    4d7e:	f851 4027 	ldr.w	r4, [r1, r7, lsl #2]
    OpCode op = GET_OPCODE(i);
    4d82:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    switch (op) {
    4d86:	2b14      	cmp	r3, #20
    4d88:	d84e      	bhi.n	4e28 <getobjname+0xf8>
    4d8a:	e8df f003 	tbb	[pc, r3]
    4d8e:	4d47      	.short	0x4d47
    4d90:	4d92924d 	.word	0x4d92924d
    4d94:	864d4d4d 	.word	0x864d4d4d
    4d98:	7367504d 	.word	0x7367504d
    4d9c:	4d4d4d77 	.word	0x4d4d4d77
    4da0:	4d4d      	.short	0x4d4d
    4da2:	a8          	.byte	0xa8
    4da3:	00          	.byte	0x00
    Instruction i = p->code[pc];
    4da4:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
    OpCode op = GET_OPCODE(i);
    4da8:	f004 0a7f 	and.w	sl, r4, #127	; 0x7f
    switch (op) {
    4dac:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
    int a = GETARG_A(i);
    4db0:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    4db4:	f3c4 12c7 	ubfx	r2, r4, #7, #8
    switch (op) {
    4db8:	d80f      	bhi.n	4dda <getobjname+0xaa>
    4dba:	f1ba 0f43 	cmp.w	sl, #67	; 0x43
    4dbe:	d821      	bhi.n	4e04 <getobjname+0xd4>
    4dc0:	f1ba 0f08 	cmp.w	sl, #8
    4dc4:	d015      	beq.n	4df2 <getobjname+0xc2>
    4dc6:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
    4dca:	d01d      	beq.n	4e08 <getobjname+0xd8>
        change = (testAMode(op) && reg == a);
    4dcc:	f819 400a 	ldrb.w	r4, [r9, sl]
    4dd0:	0724      	lsls	r4, r4, #28
    4dd2:	d515      	bpl.n	4e00 <getobjname+0xd0>
    4dd4:	4590      	cmp	r8, r2
    4dd6:	d113      	bne.n	4e00 <getobjname+0xd0>
    4dd8:	e005      	b.n	4de6 <getobjname+0xb6>
    switch (op) {
    4dda:	f1ba 0f4c 	cmp.w	sl, #76	; 0x4c
    4dde:	d1f5      	bne.n	4dcc <getobjname+0x9c>
        change = (reg >= a + 2);
    4de0:	1c94      	adds	r4, r2, #2
    if (change)
    4de2:	45a0      	cmp	r8, r4
    4de4:	db0c      	blt.n	4e00 <getobjname+0xd0>
  if (pc < jmptarget)  /* is code conditional (inside a jump)? */
    4de6:	4563      	cmp	r3, ip
    4de8:	bfac      	ite	ge
    4dea:	461f      	movge	r7, r3
    4dec:	f04f 37ff 	movlt.w	r7, #4294967295	; 0xffffffff
    4df0:	e006      	b.n	4e00 <getobjname+0xd0>
        change = (a <= reg && reg <= a + b);
    4df2:	4590      	cmp	r8, r2
    4df4:	db04      	blt.n	4e00 <getobjname+0xd0>
        int b = GETARG_B(i);
    4df6:	f3c4 4407 	ubfx	r4, r4, #16, #8
        change = (a <= reg && reg <= a + b);
    4dfa:	4414      	add	r4, r2
    4dfc:	45a0      	cmp	r8, r4
    4dfe:	ddf2      	ble.n	4de6 <getobjname+0xb6>
  for (pc = 0; pc < lastpc; pc++) {
    4e00:	3301      	adds	r3, #1
    4e02:	e7b8      	b.n	4d76 <getobjname+0x46>
    if (change)
    4e04:	4590      	cmp	r8, r2
    4e06:	e7ed      	b.n	4de4 <getobjname+0xb4>
        int dest = pc + 1 + b;
    4e08:	f103 427f 	add.w	r2, r3, #4278190080	; 0xff000000
    4e0c:	3202      	adds	r2, #2
    4e0e:	445a      	add	r2, fp
        if (dest <= lastpc && dest > jmptarget)
    4e10:	4572      	cmp	r2, lr
    4e12:	dcf5      	bgt.n	4e00 <getobjname+0xd0>
    4e14:	4594      	cmp	ip, r2
    4e16:	bfb8      	it	lt
    4e18:	4694      	movlt	ip, r2
    4e1a:	e7f1      	b.n	4e00 <getobjname+0xd0>
      case OP_MOVE: {
        int b = GETARG_B(i);  /* move from 'b' to 'a' */
    4e1c:	f3c4 4807 	ubfx	r8, r4, #16, #8
        if (b < GETARG_A(i))
    4e20:	f3c4 14c7 	ubfx	r4, r4, #7, #8
    4e24:	4544      	cmp	r4, r8
    4e26:	dc8b      	bgt.n	4d40 <getobjname+0x10>
      }
      default: break;  /* go through to return NULL */
    }
  }
  return NULL;  /* could not find reasonable name */
}
    4e28:	b001      	add	sp, #4
    4e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TValue *kvalue = &p->k[c];
    4e2e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        int k = GETARG_C(i);  /* key index */
    4e30:	0e23      	lsrs	r3, r4, #24
  TValue *kvalue = &p->k[c];
    4e32:	0119      	lsls	r1, r3, #4
    4e34:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  *name = (ttisstring(kvalue)) ? svalue(kvalue) : "?";
    4e38:	7a1b      	ldrb	r3, [r3, #8]
    4e3a:	f003 030f 	and.w	r3, r3, #15
    4e3e:	2b04      	cmp	r3, #4
    4e40:	bf0a      	itet	eq
    4e42:	5853      	ldreq	r3, [r2, r1]
    4e44:	4b36      	ldrne	r3, [pc, #216]	; (4f20 <getobjname+0x1f0>)
    4e46:	3310      	addeq	r3, #16
    4e48:	6033      	str	r3, [r6, #0]
        return gxf(p, pc, i, 1);
    4e4a:	2301      	movs	r3, #1
        return gxf(p, pc, i, 0);
    4e4c:	4622      	mov	r2, r4
    4e4e:	4639      	mov	r1, r7
    4e50:	4628      	mov	r0, r5
}
    4e52:	b001      	add	sp, #4
    4e54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return gxf(p, pc, i, 0);
    4e58:	f000 b870 	b.w	4f3c <gxf>
  const char *what = getobjname(p, pc, c, name); /* search for 'c' */
    4e5c:	4633      	mov	r3, r6
    4e5e:	4639      	mov	r1, r7
    4e60:	4628      	mov	r0, r5
    4e62:	0e22      	lsrs	r2, r4, #24
    4e64:	f7ff ff64 	bl	4d30 <getobjname>
  if (!(what && *what == 'c'))  /* did not find a constant name? */
    4e68:	b110      	cbz	r0, 4e70 <getobjname+0x140>
    4e6a:	7803      	ldrb	r3, [r0, #0]
    4e6c:	2b63      	cmp	r3, #99	; 0x63
    4e6e:	d012      	beq.n	4e96 <getobjname+0x166>
  *name = (ttisstring(kvalue)) ? svalue(kvalue) : "?";
    4e70:	4b2b      	ldr	r3, [pc, #172]	; (4f20 <getobjname+0x1f0>)
    4e72:	e00f      	b.n	4e94 <getobjname+0x164>
        *name = "integer index";
    4e74:	4b2b      	ldr	r3, [pc, #172]	; (4f24 <getobjname+0x1f4>)
        return "field";
    4e76:	482c      	ldr	r0, [pc, #176]	; (4f28 <getobjname+0x1f8>)
        *name = "integer index";
    4e78:	6033      	str	r3, [r6, #0]
        return "field";
    4e7a:	e7d5      	b.n	4e28 <getobjname+0xf8>
  TValue *kvalue = &p->k[c];
    4e7c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        int k = GETARG_C(i);  /* key index */
    4e7e:	0e23      	lsrs	r3, r4, #24
  TValue *kvalue = &p->k[c];
    4e80:	0119      	lsls	r1, r3, #4
    4e82:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  *name = (ttisstring(kvalue)) ? svalue(kvalue) : "?";
    4e86:	7a1b      	ldrb	r3, [r3, #8]
    4e88:	f003 030f 	and.w	r3, r3, #15
    4e8c:	2b04      	cmp	r3, #4
    4e8e:	d1ef      	bne.n	4e70 <getobjname+0x140>
    4e90:	5853      	ldr	r3, [r2, r1]
    4e92:	3310      	adds	r3, #16
    4e94:	6033      	str	r3, [r6, #0]
        return gxf(p, pc, i, 0);
    4e96:	2300      	movs	r3, #0
    4e98:	e7d8      	b.n	4e4c <getobjname+0x11c>
  TString *s = check_exp(uv < p->sizeupvalues, p->upvalues[uv].name);
    4e9a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        *name = upvalname(p, GETARG_B(i));
    4e9c:	f3c4 4407 	ubfx	r4, r4, #16, #8
  TString *s = check_exp(uv < p->sizeupvalues, p->upvalues[uv].name);
    4ea0:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
  if (s == NULL) return "?";
    4ea4:	b11b      	cbz	r3, 4eae <getobjname+0x17e>
  else return getstr(s);
    4ea6:	3310      	adds	r3, #16
        return "upvalue";
    4ea8:	4820      	ldr	r0, [pc, #128]	; (4f2c <getobjname+0x1fc>)
        *name = upvalname(p, GETARG_B(i));
    4eaa:	6033      	str	r3, [r6, #0]
        return "upvalue";
    4eac:	e7bc      	b.n	4e28 <getobjname+0xf8>
  if (s == NULL) return "?";
    4eae:	4b1c      	ldr	r3, [pc, #112]	; (4f20 <getobjname+0x1f0>)
    4eb0:	e7fa      	b.n	4ea8 <getobjname+0x178>
                                 : GETARG_Ax(p->code[pc + 1]);
    4eb2:	2b03      	cmp	r3, #3
    4eb4:	bf1c      	itt	ne
    4eb6:	3701      	addne	r7, #1
    4eb8:	f851 4027 	ldrne.w	r4, [r1, r7, lsl #2]
        if (ttisstring(&p->k[b])) {
    4ebc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        int b = (op == OP_LOADK) ? GETARG_Bx(i)
    4ebe:	bf0c      	ite	eq
    4ec0:	0be4      	lsreq	r4, r4, #15
                                 : GETARG_Ax(p->code[pc + 1]);
    4ec2:	09e4      	lsrne	r4, r4, #7
        if (ttisstring(&p->k[b])) {
    4ec4:	0121      	lsls	r1, r4, #4
    4ec6:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    4eca:	7a23      	ldrb	r3, [r4, #8]
    4ecc:	f003 030f 	and.w	r3, r3, #15
    4ed0:	2b04      	cmp	r3, #4
    4ed2:	d1a9      	bne.n	4e28 <getobjname+0xf8>
          *name = svalue(&p->k[b]);
    4ed4:	5853      	ldr	r3, [r2, r1]
          return "constant";
    4ed6:	4816      	ldr	r0, [pc, #88]	; (4f30 <getobjname+0x200>)
          *name = svalue(&p->k[b]);
    4ed8:	3310      	adds	r3, #16
    4eda:	6033      	str	r3, [r6, #0]
          return "constant";
    4edc:	e7a4      	b.n	4e28 <getobjname+0xf8>
  if (GETARG_k(i))  /* is 'c' a constant? */
    4ede:	0423      	lsls	r3, r4, #16
  int c = GETARG_C(i);  /* key index */
    4ee0:	ea4f 6214 	mov.w	r2, r4, lsr #24
  if (GETARG_k(i))  /* is 'c' a constant? */
    4ee4:	d50d      	bpl.n	4f02 <getobjname+0x1d2>
  TValue *kvalue = &p->k[c];
    4ee6:	6b29      	ldr	r1, [r5, #48]	; 0x30
    4ee8:	0110      	lsls	r0, r2, #4
    4eea:	eb01 1202 	add.w	r2, r1, r2, lsl #4
  *name = (ttisstring(kvalue)) ? svalue(kvalue) : "?";
    4eee:	7a13      	ldrb	r3, [r2, #8]
    4ef0:	f003 030f 	and.w	r3, r3, #15
    4ef4:	2b04      	cmp	r3, #4
    4ef6:	d10d      	bne.n	4f14 <getobjname+0x1e4>
    4ef8:	580b      	ldr	r3, [r1, r0]
    4efa:	3310      	adds	r3, #16
    4efc:	6033      	str	r3, [r6, #0]
        return "method";
    4efe:	480d      	ldr	r0, [pc, #52]	; (4f34 <getobjname+0x204>)
    4f00:	e792      	b.n	4e28 <getobjname+0xf8>
  const char *what = getobjname(p, pc, c, name); /* search for 'c' */
    4f02:	4633      	mov	r3, r6
    4f04:	4639      	mov	r1, r7
    4f06:	4628      	mov	r0, r5
    4f08:	f7ff ff12 	bl	4d30 <getobjname>
  if (!(what && *what == 'c'))  /* did not find a constant name? */
    4f0c:	b110      	cbz	r0, 4f14 <getobjname+0x1e4>
    4f0e:	7803      	ldrb	r3, [r0, #0]
    4f10:	2b63      	cmp	r3, #99	; 0x63
    4f12:	d0f4      	beq.n	4efe <getobjname+0x1ce>
  *name = (ttisstring(kvalue)) ? svalue(kvalue) : "?";
    4f14:	4b02      	ldr	r3, [pc, #8]	; (4f20 <getobjname+0x1f0>)
    4f16:	e7f1      	b.n	4efc <getobjname+0x1cc>
    return "local";
    4f18:	4807      	ldr	r0, [pc, #28]	; (4f38 <getobjname+0x208>)
    4f1a:	e785      	b.n	4e28 <getobjname+0xf8>
    4f1c:	00018467 	.word	0x00018467
    4f20:	00017d70 	.word	0x00017d70
    4f24:	00017f4e 	.word	0x00017f4e
    4f28:	00017f31 	.word	0x00017f31
    4f2c:	00017f37 	.word	0x00017f37
    4f30:	00017f3f 	.word	0x00017f3f
    4f34:	00017f71 	.word	0x00017f71
    4f38:	00017f48 	.word	0x00017f48

00004f3c <gxf>:
static const char *gxf (const Proto *p, int pc, Instruction i, int isup) {
    4f3c:	b513      	push	{r0, r1, r4, lr}
  int t = GETARG_B(i);  /* table index */
    4f3e:	f3c2 4207 	ubfx	r2, r2, #16, #8
  if (isup)  /* is an upvalue? */
    4f42:	b183      	cbz	r3, 4f66 <gxf+0x2a>
  TString *s = check_exp(uv < p->sizeupvalues, p->upvalues[uv].name);
    4f44:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    4f46:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  if (s == NULL) return "?";
    4f4a:	b153      	cbz	r3, 4f62 <gxf+0x26>
  else return getstr(s);
    4f4c:	3310      	adds	r3, #16
    name = upvalname(p, t);
    4f4e:	9301      	str	r3, [sp, #4]
  return (name && strcmp(name, LUA_ENV) == 0) ? "global" : "field";
    4f50:	9801      	ldr	r0, [sp, #4]
    4f52:	b118      	cbz	r0, 4f5c <gxf+0x20>
    4f54:	4907      	ldr	r1, [pc, #28]	; (4f74 <gxf+0x38>)
    4f56:	f7fb ff81 	bl	e5c <strcmp>
    4f5a:	b140      	cbz	r0, 4f6e <gxf+0x32>
    4f5c:	4806      	ldr	r0, [pc, #24]	; (4f78 <gxf+0x3c>)
}
    4f5e:	b002      	add	sp, #8
    4f60:	bd10      	pop	{r4, pc}
  if (s == NULL) return "?";
    4f62:	4b06      	ldr	r3, [pc, #24]	; (4f7c <gxf+0x40>)
    4f64:	e7f3      	b.n	4f4e <gxf+0x12>
    getobjname(p, pc, t, &name);
    4f66:	ab01      	add	r3, sp, #4
    4f68:	f7ff fee2 	bl	4d30 <getobjname>
    4f6c:	e7f0      	b.n	4f50 <gxf+0x14>
  return (name && strcmp(name, LUA_ENV) == 0) ? "global" : "field";
    4f6e:	4804      	ldr	r0, [pc, #16]	; (4f80 <gxf+0x44>)
    4f70:	e7f5      	b.n	4f5e <gxf+0x22>
    4f72:	bf00      	nop
    4f74:	00017f63 	.word	0x00017f63
    4f78:	00017f31 	.word	0x00017f31
    4f7c:	00017d70 	.word	0x00017d70
    4f80:	00017f5c 	.word	0x00017f5c

00004f84 <funcnamefromcall>:
/*
** Try to find a name for a function based on how it was called.
*/
static const char *funcnamefromcall (lua_State *L, CallInfo *ci,
                                                   const char **name) {
  if (ci->callstatus & CIST_HOOKED) {  /* was it called inside a hook? */
    4f84:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
                                                   const char **name) {
    4f86:	b570      	push	{r4, r5, r6, lr}
    4f88:	4605      	mov	r5, r0
    4f8a:	4608      	mov	r0, r1
  if (ci->callstatus & CIST_HOOKED) {  /* was it called inside a hook? */
    4f8c:	0719      	lsls	r1, r3, #28
    4f8e:	d503      	bpl.n	4f98 <funcnamefromcall+0x14>
    *name = "?";
    4f90:	4b33      	ldr	r3, [pc, #204]	; (5060 <funcnamefromcall+0xdc>)
    return "hook";
    4f92:	4834      	ldr	r0, [pc, #208]	; (5064 <funcnamefromcall+0xe0>)
    *name = "?";
    4f94:	6013      	str	r3, [r2, #0]
  }
  else if (isLua(ci))
    return funcnamefromcode(L, ci_func(ci)->p, currentpc(ci), name);
  else
    return NULL;
}
    4f96:	bd70      	pop	{r4, r5, r6, pc}
  else if (ci->callstatus & CIST_FIN) {  /* was it called as a finalizer? */
    4f98:	f013 0480 	ands.w	r4, r3, #128	; 0x80
    4f9c:	d003      	beq.n	4fa6 <funcnamefromcall+0x22>
    *name = "__gc";
    4f9e:	4b32      	ldr	r3, [pc, #200]	; (5068 <funcnamefromcall+0xe4>)
  return "metamethod";
    4fa0:	4832      	ldr	r0, [pc, #200]	; (506c <funcnamefromcall+0xe8>)
  *name = getstr(G(L)->tmname[tm]) + 2;
    4fa2:	6013      	str	r3, [r2, #0]
  return "metamethod";
    4fa4:	e7f7      	b.n	4f96 <funcnamefromcall+0x12>
  else if (isLua(ci))
    4fa6:	079b      	lsls	r3, r3, #30
    4fa8:	d457      	bmi.n	505a <funcnamefromcall+0xd6>
    return funcnamefromcode(L, ci_func(ci)->p, currentpc(ci), name);
    4faa:	6803      	ldr	r3, [r0, #0]
    4fac:	681b      	ldr	r3, [r3, #0]
    4fae:	68de      	ldr	r6, [r3, #12]
    4fb0:	f00d fe61 	bl	12c76 <currentpc>
  Instruction i = p->code[pc];  /* calling instruction */
    4fb4:	6b73      	ldr	r3, [r6, #52]	; 0x34
    return funcnamefromcode(L, ci_func(ci)->p, currentpc(ci), name);
    4fb6:	4601      	mov	r1, r0
  Instruction i = p->code[pc];  /* calling instruction */
    4fb8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  switch (GET_OPCODE(i)) {
    4fbc:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    4fc0:	3b0b      	subs	r3, #11
    4fc2:	2b41      	cmp	r3, #65	; 0x41
    4fc4:	d849      	bhi.n	505a <funcnamefromcall+0xd6>
    4fc6:	e8df f003 	tbb	[pc, r3]
    4fca:	4646      	.short	0x4646
    4fcc:	21214646 	.word	0x21214646
    4fd0:	46482121 	.word	0x46482121
    4fd4:	48484848 	.word	0x48484848
    4fd8:	48484848 	.word	0x48484848
    4fdc:	48484848 	.word	0x48484848
    4fe0:	48484848 	.word	0x48484848
    4fe4:	48484848 	.word	0x48484848
    4fe8:	48484848 	.word	0x48484848
    4fec:	34343448 	.word	0x34343448
    4ff0:	3a483836 	.word	0x3a483836
    4ff4:	4848443c 	.word	0x4848443c
    4ff8:	4842403e 	.word	0x4842403e
    4ffc:	40424048 	.word	0x40424048
    5000:	29484842 	.word	0x29484842
    5004:	48484429 	.word	0x48484429
    5008:	31484848 	.word	0x31484848
    500c:	2101      	movs	r1, #1
  *name = getstr(G(L)->tmname[tm]) + 2;
    500e:	692b      	ldr	r3, [r5, #16]
    5010:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5014:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
    5018:	3312      	adds	r3, #18
    501a:	e7c1      	b.n	4fa0 <funcnamefromcall+0x1c>
      return getobjname(p, pc, GETARG_A(i), name);  /* get function name */
    501c:	4613      	mov	r3, r2
    501e:	4630      	mov	r0, r6
    5020:	f3c4 12c7 	ubfx	r2, r4, #7, #8
}
    5024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return getobjname(p, pc, GETARG_A(i), name);  /* get function name */
    5028:	f7ff be82 	b.w	4d30 <getobjname>
      *name = "for iterator";
    502c:	4810      	ldr	r0, [pc, #64]	; (5070 <funcnamefromcall+0xec>)
    502e:	6010      	str	r0, [r2, #0]
       return "for iterator";
    5030:	e7b1      	b.n	4f96 <funcnamefromcall+0x12>
      tm = cast(TMS, GETARG_C(i));
    5032:	0e21      	lsrs	r1, r4, #24
      break;
    5034:	e7eb      	b.n	500e <funcnamefromcall+0x8a>
    case OP_UNM: tm = TM_UNM; break;
    5036:	2112      	movs	r1, #18
    5038:	e7e9      	b.n	500e <funcnamefromcall+0x8a>
    case OP_BNOT: tm = TM_BNOT; break;
    503a:	2113      	movs	r1, #19
    503c:	e7e7      	b.n	500e <funcnamefromcall+0x8a>
    case OP_LEN: tm = TM_LEN; break;
    503e:	2104      	movs	r1, #4
    5040:	e7e5      	b.n	500e <funcnamefromcall+0x8a>
    case OP_CONCAT: tm = TM_CONCAT; break;
    5042:	2116      	movs	r1, #22
    5044:	e7e3      	b.n	500e <funcnamefromcall+0x8a>
    case OP_EQ: tm = TM_EQ; break;
    5046:	2105      	movs	r1, #5
    5048:	e7e1      	b.n	500e <funcnamefromcall+0x8a>
    case OP_LT: case OP_LTI: case OP_GTI: tm = TM_LT; break;
    504a:	2114      	movs	r1, #20
    504c:	e7df      	b.n	500e <funcnamefromcall+0x8a>
    case OP_LE: case OP_LEI: case OP_GEI: tm = TM_LE; break;
    504e:	2115      	movs	r1, #21
    5050:	e7dd      	b.n	500e <funcnamefromcall+0x8a>
    case OP_CLOSE: case OP_RETURN: tm = TM_CLOSE; break;
    5052:	2118      	movs	r1, #24
    5054:	e7db      	b.n	500e <funcnamefromcall+0x8a>
      tm = TM_INDEX;
    5056:	2100      	movs	r1, #0
    5058:	e7d9      	b.n	500e <funcnamefromcall+0x8a>
  switch (GET_OPCODE(i)) {
    505a:	2000      	movs	r0, #0
    505c:	e79b      	b.n	4f96 <funcnamefromcall+0x12>
    505e:	bf00      	nop
    5060:	00017d70 	.word	0x00017d70
    5064:	00017f68 	.word	0x00017f68
    5068:	00017f85 	.word	0x00017f85
    506c:	00017f6d 	.word	0x00017f6d
    5070:	00017f78 	.word	0x00017f78

00005074 <varinfo>:
** Build a string with a "description" for the value 'o', such as
** "variable 'x'" or "upvalue 'y'".
*/
static const char *varinfo (lua_State *L, const TValue *o) {
  CallInfo *ci = L->ci;
  const char *name = NULL;  /* to avoid warnings */
    5074:	2300      	movs	r3, #0
static const char *varinfo (lua_State *L, const TValue *o) {
    5076:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5078:	4605      	mov	r5, r0
  CallInfo *ci = L->ci;
    507a:	6940      	ldr	r0, [r0, #20]
  const char *name = NULL;  /* to avoid warnings */
    507c:	9301      	str	r3, [sp, #4]
  const char *kind = NULL;
  if (isLua(ci)) {
    507e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
static const char *varinfo (lua_State *L, const TValue *o) {
    5080:	460c      	mov	r4, r1
  if (isLua(ci)) {
    5082:	f013 0302 	ands.w	r3, r3, #2
    5086:	d002      	beq.n	508e <varinfo+0x1a>
    return "";  /* no information */
    5088:	481c      	ldr	r0, [pc, #112]	; (50fc <varinfo+0x88>)
    if (!kind && isinstack(ci, o))  /* no? try a register */
      kind = getobjname(ci_func(ci)->p, currentpc(ci),
                        cast_int(cast(StkId, o) - (ci->func + 1)), &name);
  }
  return formatvarinfo(L, kind, name);
}
    508a:	b003      	add	sp, #12
    508c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LClosure *c = ci_func(ci);
    508e:	6802      	ldr	r2, [r0, #0]
    5090:	6816      	ldr	r6, [r2, #0]
  for (i = 0; i < c->nupvalues; i++) {
    5092:	79b7      	ldrb	r7, [r6, #6]
    5094:	f106 0110 	add.w	r1, r6, #16
    5098:	42bb      	cmp	r3, r7
    509a:	db03      	blt.n	50a4 <varinfo+0x30>
  for (pos = ci->func + 1; pos < ci->top; pos++) {
    509c:	3210      	adds	r2, #16
    509e:	4613      	mov	r3, r2
    50a0:	6841      	ldr	r1, [r0, #4]
    50a2:	e01c      	b.n	50de <varinfo+0x6a>
    if (c->upvals[i]->v == o) {
    50a4:	f851 cb04 	ldr.w	ip, [r1], #4
    50a8:	f8dc c008 	ldr.w	ip, [ip, #8]
    50ac:	4564      	cmp	r4, ip
    50ae:	d111      	bne.n	50d4 <varinfo+0x60>
  TString *s = check_exp(uv < p->sizeupvalues, p->upvalues[uv].name);
    50b0:	68f2      	ldr	r2, [r6, #12]
    50b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    50b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  if (s == NULL) return "?";
    50b8:	b153      	cbz	r3, 50d0 <varinfo+0x5c>
  else return getstr(s);
    50ba:	3310      	adds	r3, #16
      return "upvalue";
    50bc:	4a10      	ldr	r2, [pc, #64]	; (5100 <varinfo+0x8c>)
      *name = upvalname(c->p, i);
    50be:	9301      	str	r3, [sp, #4]
  return formatvarinfo(L, kind, name);
    50c0:	9b01      	ldr	r3, [sp, #4]
  if (kind == NULL)
    50c2:	2a00      	cmp	r2, #0
    50c4:	d0e0      	beq.n	5088 <varinfo+0x14>
    return luaO_pushfstring(L, " (%s '%s')", kind, name);
    50c6:	4628      	mov	r0, r5
    50c8:	490e      	ldr	r1, [pc, #56]	; (5104 <varinfo+0x90>)
    50ca:	f00f ff14 	bl	14ef6 <luaO_pushfstring>
  return formatvarinfo(L, kind, name);
    50ce:	e7dc      	b.n	508a <varinfo+0x16>
  if (s == NULL) return "?";
    50d0:	4b0d      	ldr	r3, [pc, #52]	; (5108 <varinfo+0x94>)
    50d2:	e7f3      	b.n	50bc <varinfo+0x48>
  for (i = 0; i < c->nupvalues; i++) {
    50d4:	3301      	adds	r3, #1
    50d6:	e7df      	b.n	5098 <varinfo+0x24>
    if (o == s2v(pos))
    50d8:	429c      	cmp	r4, r3
    50da:	d003      	beq.n	50e4 <varinfo+0x70>
  for (pos = ci->func + 1; pos < ci->top; pos++) {
    50dc:	3310      	adds	r3, #16
    50de:	428b      	cmp	r3, r1
    50e0:	d3fa      	bcc.n	50d8 <varinfo+0x64>
    50e2:	e7d1      	b.n	5088 <varinfo+0x14>
      kind = getobjname(ci_func(ci)->p, currentpc(ci),
    50e4:	f00d fdc7 	bl	12c76 <currentpc>
                        cast_int(cast(StkId, o) - (ci->func + 1)), &name);
    50e8:	1aa2      	subs	r2, r4, r2
      kind = getobjname(ci_func(ci)->p, currentpc(ci),
    50ea:	4601      	mov	r1, r0
    50ec:	1112      	asrs	r2, r2, #4
    50ee:	68f0      	ldr	r0, [r6, #12]
    50f0:	ab01      	add	r3, sp, #4
    50f2:	f7ff fe1d 	bl	4d30 <getobjname>
    50f6:	4602      	mov	r2, r0
    50f8:	e7e2      	b.n	50c0 <varinfo+0x4c>
    50fa:	bf00      	nop
    50fc:	00018987 	.word	0x00018987
    5100:	00017f37 	.word	0x00017f37
    5104:	00017f8a 	.word	0x00017f8a
    5108:	00017d70 	.word	0x00017d70

0000510c <luaG_findlocal>:
const char *luaG_findlocal (lua_State *L, CallInfo *ci, int n, StkId *pos) {
    510c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5110:	4614      	mov	r4, r2
  if (isLua(ci)) {
    5112:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
const char *luaG_findlocal (lua_State *L, CallInfo *ci, int n, StkId *pos) {
    5114:	461e      	mov	r6, r3
  StkId base = ci->func + 1;
    5116:	680b      	ldr	r3, [r1, #0]
  if (isLua(ci)) {
    5118:	0792      	lsls	r2, r2, #30
const char *luaG_findlocal (lua_State *L, CallInfo *ci, int n, StkId *pos) {
    511a:	4680      	mov	r8, r0
    511c:	460d      	mov	r5, r1
  StkId base = ci->func + 1;
    511e:	f103 0710 	add.w	r7, r3, #16
  if (isLua(ci)) {
    5122:	d513      	bpl.n	514c <luaG_findlocal+0x40>
    StkId limit = (ci == L->ci) ? L->top : ci->next->func;
    5124:	f8d8 3014 	ldr.w	r3, [r8, #20]
    5128:	42ab      	cmp	r3, r5
    512a:	d13d      	bne.n	51a8 <luaG_findlocal+0x9c>
    512c:	f8d8 300c 	ldr.w	r3, [r8, #12]
    if (limit - base >= n && n > 0) {  /* is 'n' inside 'ci' stack? */
    5130:	1bdb      	subs	r3, r3, r7
    5132:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    5136:	dc11      	bgt.n	515c <luaG_findlocal+0x50>
    5138:	2c00      	cmp	r4, #0
    513a:	dd0f      	ble.n	515c <luaG_findlocal+0x50>
      name = isLua(ci) ? "(temporary)" : "(C temporary)";
    513c:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    513e:	481c      	ldr	r0, [pc, #112]	; (51b0 <luaG_findlocal+0xa4>)
    5140:	f013 0f02 	tst.w	r3, #2
    5144:	4b1b      	ldr	r3, [pc, #108]	; (51b4 <luaG_findlocal+0xa8>)
    5146:	bf18      	it	ne
    5148:	4618      	movne	r0, r3
    514a:	e024      	b.n	5196 <luaG_findlocal+0x8a>
  if (clLvalue(s2v(ci->func))->p->is_vararg) {
    514c:	681a      	ldr	r2, [r3, #0]
    if (n < 0)  /* access to vararg values? */
    514e:	2c00      	cmp	r4, #0
  if (clLvalue(s2v(ci->func))->p->is_vararg) {
    5150:	f8d2 900c 	ldr.w	r9, [r2, #12]
    if (n < 0)  /* access to vararg values? */
    5154:	da15      	bge.n	5182 <luaG_findlocal+0x76>
  if (clLvalue(s2v(ci->func))->p->is_vararg) {
    5156:	f899 2007 	ldrb.w	r2, [r9, #7]
    515a:	b912      	cbnz	r2, 5162 <luaG_findlocal+0x56>
  return NULL;  /* no such vararg */
    515c:	2000      	movs	r0, #0
}
    515e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    int nextra = ci->u.l.nextraargs;
    5162:	6989      	ldr	r1, [r1, #24]
    if (n >= -nextra) {  /* 'n' is negative */
    5164:	424a      	negs	r2, r1
    5166:	4294      	cmp	r4, r2
    5168:	dbf8      	blt.n	515c <luaG_findlocal+0x50>
      *pos = ci->func - nextra - (n + 1);
    516a:	f1c4 647f 	rsb	r4, r4, #267386880	; 0xff00000
    516e:	f504 247f 	add.w	r4, r4, #1044480	; 0xff000
    5172:	f604 74ff 	addw	r4, r4, #4095	; 0xfff
    5176:	1a64      	subs	r4, r4, r1
    5178:	eb03 1304 	add.w	r3, r3, r4, lsl #4
      return "(vararg)";  /* generic name for any vararg */
    517c:	480e      	ldr	r0, [pc, #56]	; (51b8 <luaG_findlocal+0xac>)
      *pos = ci->func - nextra - (n + 1);
    517e:	6033      	str	r3, [r6, #0]
      return "(vararg)";  /* generic name for any vararg */
    5180:	e7ed      	b.n	515e <luaG_findlocal+0x52>
      name = luaF_getlocalname(ci_func(ci)->p, n, currentpc(ci));
    5182:	4608      	mov	r0, r1
    5184:	f00d fd77 	bl	12c76 <currentpc>
    5188:	4621      	mov	r1, r4
    518a:	4602      	mov	r2, r0
    518c:	4648      	mov	r0, r9
    518e:	f00e fab7 	bl	13700 <luaF_getlocalname>
  if (name == NULL) {  /* no 'standard' name? */
    5192:	2800      	cmp	r0, #0
    5194:	d0c6      	beq.n	5124 <luaG_findlocal+0x18>
  if (pos)
    5196:	2e00      	cmp	r6, #0
    5198:	d0e1      	beq.n	515e <luaG_findlocal+0x52>
    *pos = base + (n - 1);
    519a:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
    519e:	3c01      	subs	r4, #1
    51a0:	eb07 1404 	add.w	r4, r7, r4, lsl #4
    51a4:	6034      	str	r4, [r6, #0]
    51a6:	e7da      	b.n	515e <luaG_findlocal+0x52>
    StkId limit = (ci == L->ci) ? L->top : ci->next->func;
    51a8:	68eb      	ldr	r3, [r5, #12]
    51aa:	681b      	ldr	r3, [r3, #0]
    51ac:	e7c0      	b.n	5130 <luaG_findlocal+0x24>
    51ae:	bf00      	nop
    51b0:	00017f95 	.word	0x00017f95
    51b4:	00017fa1 	.word	0x00017fa1
    51b8:	00017faf 	.word	0x00017faf

000051bc <luaG_addinfo>:
}


/* add src:line information to 'msg' */
const char *luaG_addinfo (lua_State *L, const char *msg, TString *src,
                                        int line) {
    51bc:	b570      	push	{r4, r5, r6, lr}
    51be:	4604      	mov	r4, r0
    51c0:	460e      	mov	r6, r1
    51c2:	461d      	mov	r5, r3
    51c4:	b092      	sub	sp, #72	; 0x48
  char buff[LUA_IDSIZE];
  if (src)
    51c6:	b192      	cbz	r2, 51ee <luaG_addinfo+0x32>
    luaO_chunkid(buff, getstr(src), tsslen(src));
    51c8:	7913      	ldrb	r3, [r2, #4]
    51ca:	f102 0110 	add.w	r1, r2, #16
    51ce:	2b04      	cmp	r3, #4
    51d0:	bf0c      	ite	eq
    51d2:	79d2      	ldrbeq	r2, [r2, #7]
    51d4:	68d2      	ldrne	r2, [r2, #12]
    51d6:	a803      	add	r0, sp, #12
    51d8:	f001 fb42 	bl	6860 <luaO_chunkid>
  else {  /* no source available; use "?" instead */
    buff[0] = '?'; buff[1] = '\0';
  }
  return luaO_pushfstring(L, "%s:%d: %s", buff, line, msg);
    51dc:	462b      	mov	r3, r5
    51de:	4620      	mov	r0, r4
    51e0:	4906      	ldr	r1, [pc, #24]	; (51fc <luaG_addinfo+0x40>)
    51e2:	9600      	str	r6, [sp, #0]
    51e4:	aa03      	add	r2, sp, #12
    51e6:	f00f fe86 	bl	14ef6 <luaO_pushfstring>
}
    51ea:	b012      	add	sp, #72	; 0x48
    51ec:	bd70      	pop	{r4, r5, r6, pc}
    buff[0] = '?'; buff[1] = '\0';
    51ee:	233f      	movs	r3, #63	; 0x3f
    51f0:	f88d 200d 	strb.w	r2, [sp, #13]
    51f4:	f88d 300c 	strb.w	r3, [sp, #12]
    51f8:	e7f0      	b.n	51dc <luaG_addinfo+0x20>
    51fa:	bf00      	nop
    51fc:	00017fb8 	.word	0x00017fb8

00005200 <luaG_typeerror>:
l_noret luaG_typeerror (lua_State *L, const TValue *o, const char *op) {
    5200:	b583      	push	{r0, r1, r7, lr}
    5202:	4604      	mov	r4, r0
    5204:	4615      	mov	r5, r2
    5206:	460f      	mov	r7, r1
  typeerror(L, o, op, varinfo(L, o));
    5208:	f7ff ff34 	bl	5074 <varinfo>
  const char *t = luaT_objtypename(L, o);
    520c:	4639      	mov	r1, r7
  typeerror(L, o, op, varinfo(L, o));
    520e:	4606      	mov	r6, r0
  const char *t = luaT_objtypename(L, o);
    5210:	4620      	mov	r0, r4
    5212:	f003 fba1 	bl	8958 <luaT_objtypename>
  luaG_runerror(L, "attempt to %s a %s value%s", op, t, extra);
    5216:	462a      	mov	r2, r5
  const char *t = luaT_objtypename(L, o);
    5218:	4603      	mov	r3, r0
  luaG_runerror(L, "attempt to %s a %s value%s", op, t, extra);
    521a:	4902      	ldr	r1, [pc, #8]	; (5224 <luaG_typeerror+0x24>)
    521c:	4620      	mov	r0, r4
    521e:	9600      	str	r6, [sp, #0]
    5220:	f00d fd86 	bl	12d30 <luaG_runerror>
    5224:	00017fc2 	.word	0x00017fc2

00005228 <luaG_concaterror>:
l_noret luaG_concaterror (lua_State *L, const TValue *p1, const TValue *p2) {
    5228:	4614      	mov	r4, r2
    522a:	b508      	push	{r3, lr}
  if (ttisstring(p1) || cvt2str(p1)) p1 = p2;
    522c:	7a0b      	ldrb	r3, [r1, #8]
  luaG_typeerror(L, p1, "concatenate");
    522e:	4a04      	ldr	r2, [pc, #16]	; (5240 <luaG_concaterror+0x18>)
  if (ttisstring(p1) || cvt2str(p1)) p1 = p2;
    5230:	f003 030f 	and.w	r3, r3, #15
    5234:	3b03      	subs	r3, #3
  luaG_typeerror(L, p1, "concatenate");
    5236:	2b01      	cmp	r3, #1
    5238:	bf98      	it	ls
    523a:	4621      	movls	r1, r4
    523c:	f7ff ffe0 	bl	5200 <luaG_typeerror>
    5240:	00017fdd 	.word	0x00017fdd

00005244 <luaG_forerror>:
l_noret luaG_forerror (lua_State *L, const TValue *o, const char *what) {
    5244:	b508      	push	{r3, lr}
    5246:	4604      	mov	r4, r0
    5248:	4615      	mov	r5, r2
  luaG_runerror(L, "bad 'for' %s (number expected, got %s)",
    524a:	f003 fb85 	bl	8958 <luaT_objtypename>
    524e:	462a      	mov	r2, r5
    5250:	4603      	mov	r3, r0
    5252:	4902      	ldr	r1, [pc, #8]	; (525c <luaG_forerror+0x18>)
    5254:	4620      	mov	r0, r4
    5256:	f00d fd6b 	bl	12d30 <luaG_runerror>
    525a:	bf00      	nop
    525c:	00017fe9 	.word	0x00017fe9

00005260 <luaG_tointerror>:
l_noret luaG_tointerror (lua_State *L, const TValue *p1, const TValue *p2) {
    5260:	460d      	mov	r5, r1
    5262:	b507      	push	{r0, r1, r2, lr}
    5264:	4604      	mov	r4, r0
    5266:	4616      	mov	r6, r2
  if (!luaV_tointegerns(p1, &temp, LUA_FLOORN2I))
    5268:	4669      	mov	r1, sp
    526a:	2200      	movs	r2, #0
    526c:	4628      	mov	r0, r5
    526e:	f011 f9af 	bl	165d0 <luaV_tointegerns>
  luaG_runerror(L, "number%s has no integer representation", varinfo(L, p2));
    5272:	2800      	cmp	r0, #0
    5274:	bf14      	ite	ne
    5276:	4631      	movne	r1, r6
    5278:	4629      	moveq	r1, r5
    527a:	4620      	mov	r0, r4
    527c:	f7ff fefa 	bl	5074 <varinfo>
    5280:	4902      	ldr	r1, [pc, #8]	; (528c <luaG_tointerror+0x2c>)
    5282:	4602      	mov	r2, r0
    5284:	4620      	mov	r0, r4
    5286:	f00d fd53 	bl	12d30 <luaG_runerror>
    528a:	bf00      	nop
    528c:	00018010 	.word	0x00018010

00005290 <luaG_ordererror>:
l_noret luaG_ordererror (lua_State *L, const TValue *p1, const TValue *p2) {
    5290:	b508      	push	{r3, lr}
    5292:	4616      	mov	r6, r2
    5294:	4604      	mov	r4, r0
  const char *t1 = luaT_objtypename(L, p1);
    5296:	f003 fb5f 	bl	8958 <luaT_objtypename>
  const char *t2 = luaT_objtypename(L, p2);
    529a:	4631      	mov	r1, r6
  const char *t1 = luaT_objtypename(L, p1);
    529c:	4605      	mov	r5, r0
  const char *t2 = luaT_objtypename(L, p2);
    529e:	4620      	mov	r0, r4
    52a0:	f003 fb5a 	bl	8958 <luaT_objtypename>
    52a4:	4606      	mov	r6, r0
  if (strcmp(t1, t2) == 0)
    52a6:	4601      	mov	r1, r0
    52a8:	4628      	mov	r0, r5
    52aa:	f7fb fdd7 	bl	e5c <strcmp>
    52ae:	b920      	cbnz	r0, 52ba <luaG_ordererror+0x2a>
    luaG_runerror(L, "attempt to compare two %s values", t1);
    52b0:	462a      	mov	r2, r5
    52b2:	4620      	mov	r0, r4
    52b4:	4904      	ldr	r1, [pc, #16]	; (52c8 <luaG_ordererror+0x38>)
    52b6:	f00d fd3b 	bl	12d30 <luaG_runerror>
    luaG_runerror(L, "attempt to compare %s with %s", t1, t2);
    52ba:	4633      	mov	r3, r6
    52bc:	462a      	mov	r2, r5
    52be:	4620      	mov	r0, r4
    52c0:	4902      	ldr	r1, [pc, #8]	; (52cc <luaG_ordererror+0x3c>)
    52c2:	f00d fd35 	bl	12d30 <luaG_runerror>
    52c6:	bf00      	nop
    52c8:	00018037 	.word	0x00018037
    52cc:	00018058 	.word	0x00018058

000052d0 <luaG_callerror>:
l_noret luaG_callerror (lua_State *L, const TValue *o) {
    52d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const char *name = NULL;  /* to avoid warnings */
    52d2:	2300      	movs	r3, #0
  const char *kind = funcnamefromcall(L, ci, &name);
    52d4:	aa03      	add	r2, sp, #12
l_noret luaG_callerror (lua_State *L, const TValue *o) {
    52d6:	460e      	mov	r6, r1
  const char *kind = funcnamefromcall(L, ci, &name);
    52d8:	6941      	ldr	r1, [r0, #20]
l_noret luaG_callerror (lua_State *L, const TValue *o) {
    52da:	4604      	mov	r4, r0
  const char *name = NULL;  /* to avoid warnings */
    52dc:	9303      	str	r3, [sp, #12]
  const char *kind = funcnamefromcall(L, ci, &name);
    52de:	f7ff fe51 	bl	4f84 <funcnamefromcall>
  const char *extra = kind ? formatvarinfo(L, kind, name) : varinfo(L, o);
    52e2:	4602      	mov	r2, r0
    52e4:	b180      	cbz	r0, 5308 <luaG_callerror+0x38>
    return luaO_pushfstring(L, " (%s '%s')", kind, name);
    52e6:	4620      	mov	r0, r4
    52e8:	9b03      	ldr	r3, [sp, #12]
    52ea:	490a      	ldr	r1, [pc, #40]	; (5314 <luaG_callerror+0x44>)
    52ec:	f00f fe03 	bl	14ef6 <luaO_pushfstring>
  const char *extra = kind ? formatvarinfo(L, kind, name) : varinfo(L, o);
    52f0:	4605      	mov	r5, r0
  const char *t = luaT_objtypename(L, o);
    52f2:	4631      	mov	r1, r6
    52f4:	4620      	mov	r0, r4
    52f6:	f003 fb2f 	bl	8958 <luaT_objtypename>
  luaG_runerror(L, "attempt to %s a %s value%s", op, t, extra);
    52fa:	4a07      	ldr	r2, [pc, #28]	; (5318 <luaG_callerror+0x48>)
  const char *t = luaT_objtypename(L, o);
    52fc:	4603      	mov	r3, r0
  luaG_runerror(L, "attempt to %s a %s value%s", op, t, extra);
    52fe:	4907      	ldr	r1, [pc, #28]	; (531c <luaG_callerror+0x4c>)
    5300:	4620      	mov	r0, r4
    5302:	9500      	str	r5, [sp, #0]
    5304:	f00d fd14 	bl	12d30 <luaG_runerror>
  const char *extra = kind ? formatvarinfo(L, kind, name) : varinfo(L, o);
    5308:	4631      	mov	r1, r6
    530a:	4620      	mov	r0, r4
    530c:	f7ff feb2 	bl	5074 <varinfo>
    5310:	e7ee      	b.n	52f0 <luaG_callerror+0x20>
    5312:	bf00      	nop
    5314:	00017f8a 	.word	0x00017f8a
    5318:	00018894 	.word	0x00018894
    531c:	00017fc2 	.word	0x00017fc2

00005320 <luaG_traceexec>:
** invalid; if so, use zero as a valid value. (A wrong but valid 'oldpc'
** at most causes an extra call to a line hook.)
** This function is not "Protected" when called, so it should correct
** 'L->top' before calling anything that can run the GC.
*/
int luaG_traceexec (lua_State *L, const Instruction *pc) {
    5320:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  CallInfo *ci = L->ci;
  lu_byte mask = L->hookmask;
    5324:	f8d0 9070 	ldr.w	r9, [r0, #112]	; 0x70
int luaG_traceexec (lua_State *L, const Instruction *pc) {
    5328:	4604      	mov	r4, r0
  CallInfo *ci = L->ci;
    532a:	6945      	ldr	r5, [r0, #20]
  const Proto *p = ci_func(ci)->p;
  int counthook;
  if (!(mask & (LUA_MASKLINE | LUA_MASKCOUNT))) {  /* no hooks? */
    532c:	f019 000c 	ands.w	r0, r9, #12
    5330:	d103      	bne.n	533a <luaG_traceexec+0x1a>
    ci->u.l.trap = 0;  /* don't need to stop again */
    5332:	6168      	str	r0, [r5, #20]
    ci->u.l.savedpc--;  /* undo increment (resume will increment it again) */
    ci->callstatus |= CIST_HOOKYIELD;  /* mark that it yielded */
    luaD_throw(L, LUA_YIELD);
  }
  return 1;  /* keep 'trap' on */
}
    5334:	b003      	add	sp, #12
    5336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  const Proto *p = ci_func(ci)->p;
    533a:	682b      	ldr	r3, [r5, #0]
  pc++;  /* reference is always next instruction */
    533c:	1d0f      	adds	r7, r1, #4
  const Proto *p = ci_func(ci)->p;
    533e:	681b      	ldr	r3, [r3, #0]
    5340:	68de      	ldr	r6, [r3, #12]
  counthook = (--L->hookcount == 0 && (mask & LUA_MASKCOUNT));
    5342:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  ci->u.l.savedpc = pc;  /* save 'pc' */
    5344:	612f      	str	r7, [r5, #16]
  counthook = (--L->hookcount == 0 && (mask & LUA_MASKCOUNT));
    5346:	3b01      	subs	r3, #1
    5348:	66e3      	str	r3, [r4, #108]	; 0x6c
    534a:	b973      	cbnz	r3, 536a <luaG_traceexec+0x4a>
    534c:	f019 0f08 	tst.w	r9, #8
    5350:	d00b      	beq.n	536a <luaG_traceexec+0x4a>
    5352:	f04f 0801 	mov.w	r8, #1
    resethookcount(L);  /* reset count */
    5356:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    5358:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (ci->callstatus & CIST_HOOKYIELD) {  /* called hook last time? */
    535a:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    535c:	0658      	lsls	r0, r3, #25
    535e:	d50a      	bpl.n	5376 <luaG_traceexec+0x56>
    ci->callstatus &= ~CIST_HOOKYIELD;  /* erase mark */
    5360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    5364:	846b      	strh	r3, [r5, #34]	; 0x22
    return 1;  /* no line hook and count != 0; nothing to be done now */
    5366:	2001      	movs	r0, #1
    5368:	e7e4      	b.n	5334 <luaG_traceexec+0x14>
  else if (!(mask & LUA_MASKLINE))
    536a:	f019 0f04 	tst.w	r9, #4
    536e:	d0fa      	beq.n	5366 <luaG_traceexec+0x46>
  counthook = (--L->hookcount == 0 && (mask & LUA_MASKCOUNT));
    5370:	f04f 0800 	mov.w	r8, #0
    5374:	e7f1      	b.n	535a <luaG_traceexec+0x3a>
  if (!isIT(*(ci->u.l.savedpc - 1)))  /* top not being used? */
    5376:	680b      	ldr	r3, [r1, #0]
    5378:	492f      	ldr	r1, [pc, #188]	; (5438 <luaG_traceexec+0x118>)
    537a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    537e:	5c8a      	ldrb	r2, [r1, r2]
    5380:	0692      	lsls	r2, r2, #26
    5382:	d502      	bpl.n	538a <luaG_traceexec+0x6a>
    5384:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    5388:	d001      	beq.n	538e <luaG_traceexec+0x6e>
    L->top = ci->top;  /* correct top */
    538a:	686b      	ldr	r3, [r5, #4]
    538c:	60e3      	str	r3, [r4, #12]
  if (counthook)
    538e:	f1b8 0f00 	cmp.w	r8, #0
    5392:	d007      	beq.n	53a4 <luaG_traceexec+0x84>
    luaD_hook(L, LUA_HOOKCOUNT, -1, 0, 0);  /* call count hook */
    5394:	2300      	movs	r3, #0
    5396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    539a:	2103      	movs	r1, #3
    539c:	4620      	mov	r0, r4
    539e:	9300      	str	r3, [sp, #0]
    53a0:	f00d fda9 	bl	12ef6 <luaD_hook>
  if (mask & LUA_MASKLINE) {
    53a4:	f019 0f04 	tst.w	r9, #4
    53a8:	d01d      	beq.n	53e6 <luaG_traceexec+0xc6>
    int oldpc = (L->oldpc < p->sizecode) ? L->oldpc : 0;
    53aa:	6973      	ldr	r3, [r6, #20]
    53ac:	6e61      	ldr	r1, [r4, #100]	; 0x64
    53ae:	4299      	cmp	r1, r3
    53b0:	bfa8      	it	ge
    53b2:	2100      	movge	r1, #0
    int npci = pcRel(pc, p);
    53b4:	6b73      	ldr	r3, [r6, #52]	; 0x34
    53b6:	1afb      	subs	r3, r7, r3
    53b8:	109a      	asrs	r2, r3, #2
    53ba:	1e57      	subs	r7, r2, #1
    if (npci <= oldpc ||  /* call hook when jump back (loop), */
    53bc:	42b9      	cmp	r1, r7
    53be:	da2e      	bge.n	541e <luaG_traceexec+0xfe>
  if (p->lineinfo == NULL)  /* no debug information? */
    53c0:	6c33      	ldr	r3, [r6, #64]	; 0x40
    53c2:	b17b      	cbz	r3, 53e4 <luaG_traceexec+0xc4>
  if (newpc - oldpc < MAXIWTHABS / 2) {  /* not too far apart? */
    53c4:	1a78      	subs	r0, r7, r1
    53c6:	283f      	cmp	r0, #63	; 0x3f
    53c8:	dc1f      	bgt.n	540a <luaG_traceexec+0xea>
    53ca:	1858      	adds	r0, r3, r1
    53cc:	3b01      	subs	r3, #1
    53ce:	4413      	add	r3, r2
    int delta = 0;  /* line diference */
    53d0:	2200      	movs	r2, #0
      int lineinfo = p->lineinfo[++pc];
    53d2:	f910 cf01 	ldrsb.w	ip, [r0, #1]!
      if (lineinfo == ABSLINEINFO)
    53d6:	f11c 0f80 	cmn.w	ip, #128	; 0x80
    53da:	d016      	beq.n	540a <luaG_traceexec+0xea>
      if (pc == newpc)
    53dc:	4298      	cmp	r0, r3
      delta += lineinfo;
    53de:	4462      	add	r2, ip
      if (pc == newpc)
    53e0:	d1f7      	bne.n	53d2 <luaG_traceexec+0xb2>
    if (npci <= oldpc ||  /* call hook when jump back (loop), */
    53e2:	b9e2      	cbnz	r2, 541e <luaG_traceexec+0xfe>
    L->oldpc = npci;  /* 'pc' of last call to line hook */
    53e4:	6667      	str	r7, [r4, #100]	; 0x64
  if (L->status == LUA_YIELD) {  /* did hook yield? */
    53e6:	79a3      	ldrb	r3, [r4, #6]
    53e8:	2b01      	cmp	r3, #1
    53ea:	d1bc      	bne.n	5366 <luaG_traceexec+0x46>
    if (counthook)
    53ec:	f1b8 0f00 	cmp.w	r8, #0
    53f0:	d000      	beq.n	53f4 <luaG_traceexec+0xd4>
      L->hookcount = 1;  /* undo decrement to zero */
    53f2:	66e3      	str	r3, [r4, #108]	; 0x6c
    ci->u.l.savedpc--;  /* undo increment (resume will increment it again) */
    53f4:	692b      	ldr	r3, [r5, #16]
    luaD_throw(L, LUA_YIELD);
    53f6:	2101      	movs	r1, #1
    ci->u.l.savedpc--;  /* undo increment (resume will increment it again) */
    53f8:	3b04      	subs	r3, #4
    53fa:	612b      	str	r3, [r5, #16]
    ci->callstatus |= CIST_HOOKYIELD;  /* mark that it yielded */
    53fc:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    luaD_throw(L, LUA_YIELD);
    53fe:	4620      	mov	r0, r4
    ci->callstatus |= CIST_HOOKYIELD;  /* mark that it yielded */
    5400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5404:	846b      	strh	r3, [r5, #34]	; 0x22
    luaD_throw(L, LUA_YIELD);
    5406:	f00d fcc4 	bl	12d92 <luaD_throw>
  return (luaG_getfuncline(p, oldpc) != luaG_getfuncline(p, newpc));
    540a:	4630      	mov	r0, r6
    540c:	f00d fc3c 	bl	12c88 <luaG_getfuncline>
    5410:	4639      	mov	r1, r7
    5412:	4681      	mov	r9, r0
    5414:	4630      	mov	r0, r6
    5416:	f00d fc37 	bl	12c88 <luaG_getfuncline>
    if (npci <= oldpc ||  /* call hook when jump back (loop), */
    541a:	4581      	cmp	r9, r0
    541c:	d0e2      	beq.n	53e4 <luaG_traceexec+0xc4>
      int newline = luaG_getfuncline(p, npci);
    541e:	4639      	mov	r1, r7
    5420:	4630      	mov	r0, r6
    5422:	f00d fc31 	bl	12c88 <luaG_getfuncline>
      luaD_hook(L, LUA_HOOKLINE, newline, 0, 0);  /* call line hook */
    5426:	2300      	movs	r3, #0
      int newline = luaG_getfuncline(p, npci);
    5428:	4602      	mov	r2, r0
      luaD_hook(L, LUA_HOOKLINE, newline, 0, 0);  /* call line hook */
    542a:	2102      	movs	r1, #2
    542c:	4620      	mov	r0, r4
    542e:	9300      	str	r3, [sp, #0]
    5430:	f00d fd61 	bl	12ef6 <luaD_hook>
    5434:	e7d6      	b.n	53e4 <luaG_traceexec+0xc4>
    5436:	bf00      	nop
    5438:	00018467 	.word	0x00018467

0000543c <luaD_seterrorobj>:
  volatile int status;  /* error code */
};


void luaD_seterrorobj (lua_State *L, int errcode, StkId oldtop) {
  switch (errcode) {
    543c:	2904      	cmp	r1, #4
void luaD_seterrorobj (lua_State *L, int errcode, StkId oldtop) {
    543e:	b538      	push	{r3, r4, r5, lr}
    5440:	4605      	mov	r5, r0
    5442:	4614      	mov	r4, r2
  switch (errcode) {
    5444:	d006      	beq.n	5454 <luaD_seterrorobj+0x18>
    5446:	2905      	cmp	r1, #5
    5448:	d00d      	beq.n	5466 <luaD_seterrorobj+0x2a>
    544a:	b999      	cbnz	r1, 5474 <luaD_seterrorobj+0x38>
    case LUA_ERRERR: {
      setsvalue2s(L, oldtop, luaS_newliteral(L, "error in error handling"));
      break;
    }
    case LUA_OK: {  /* special case only for closing upvalues */
      setnilvalue(s2v(oldtop));  /* no error message */
    544c:	7211      	strb	r1, [r2, #8]
      lua_assert(errorstatus(errcode));  /* real error */
      setobjs2s(L, oldtop, L->top - 1);  /* error message on current top */
      break;
    }
  }
  L->top = oldtop + 1;
    544e:	3410      	adds	r4, #16
    5450:	60ec      	str	r4, [r5, #12]
}
    5452:	bd38      	pop	{r3, r4, r5, pc}
      setsvalue2s(L, oldtop, G(L)->memerrmsg); /* reuse preregistered msg. */
    5454:	6903      	ldr	r3, [r0, #16]
    5456:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    545a:	6013      	str	r3, [r2, #0]
    545c:	791b      	ldrb	r3, [r3, #4]
      setsvalue2s(L, oldtop, luaS_newliteral(L, "error in error handling"));
    545e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      setobjs2s(L, oldtop, L->top - 1);  /* error message on current top */
    5462:	7223      	strb	r3, [r4, #8]
      break;
    5464:	e7f3      	b.n	544e <luaD_seterrorobj+0x12>
      setsvalue2s(L, oldtop, luaS_newliteral(L, "error in error handling"));
    5466:	2217      	movs	r2, #23
    5468:	4906      	ldr	r1, [pc, #24]	; (5484 <luaD_seterrorobj+0x48>)
    546a:	f010 fb57 	bl	15b1c <luaS_newlstr>
    546e:	6020      	str	r0, [r4, #0]
    5470:	7903      	ldrb	r3, [r0, #4]
    5472:	e7f4      	b.n	545e <luaD_seterrorobj+0x22>
      setobjs2s(L, oldtop, L->top - 1);  /* error message on current top */
    5474:	68c1      	ldr	r1, [r0, #12]
    5476:	e951 2304 	ldrd	r2, r3, [r1, #-16]
    547a:	e9c4 2300 	strd	r2, r3, [r4]
    547e:	f811 3c08 	ldrb.w	r3, [r1, #-8]
    5482:	e7ee      	b.n	5462 <luaD_seterrorobj+0x26>
    5484:	00018076 	.word	0x00018076

00005488 <checkmode>:
  const char *mode;
  const char *name;
};


static void checkmode (lua_State *L, const char *mode, const char *x) {
    5488:	b570      	push	{r4, r5, r6, lr}
    548a:	4605      	mov	r5, r0
    548c:	4616      	mov	r6, r2
  if (mode && strchr(mode, x[0]) == NULL) {
    548e:	460c      	mov	r4, r1
    5490:	b171      	cbz	r1, 54b0 <checkmode+0x28>
    5492:	4620      	mov	r0, r4
    5494:	7811      	ldrb	r1, [r2, #0]
    5496:	f011 fc74 	bl	16d82 <strchr>
    549a:	b948      	cbnz	r0, 54b0 <checkmode+0x28>
    luaO_pushfstring(L,
    549c:	4905      	ldr	r1, [pc, #20]	; (54b4 <checkmode+0x2c>)
    549e:	4623      	mov	r3, r4
    54a0:	4632      	mov	r2, r6
    54a2:	4628      	mov	r0, r5
    54a4:	f00f fd27 	bl	14ef6 <luaO_pushfstring>
       "attempt to load a %s chunk (mode is '%s')", x, mode);
    luaD_throw(L, LUA_ERRSYNTAX);
    54a8:	2103      	movs	r1, #3
    54aa:	4628      	mov	r0, r5
    54ac:	f00d fc71 	bl	12d92 <luaD_throw>
  }
}
    54b0:	bd70      	pop	{r4, r5, r6, pc}
    54b2:	bf00      	nop
    54b4:	0001808e 	.word	0x0001808e

000054b8 <f_parser>:


static void f_parser (lua_State *L, void *ud) {
    54b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    54ba:	4605      	mov	r5, r0
  LClosure *cl;
  struct SParser *p = cast(struct SParser *, ud);
  int c = zgetc(p->z);  /* read first character */
    54bc:	6808      	ldr	r0, [r1, #0]
static void f_parser (lua_State *L, void *ud) {
    54be:	460c      	mov	r4, r1
  int c = zgetc(p->z);  /* read first character */
    54c0:	6803      	ldr	r3, [r0, #0]
    54c2:	1e5a      	subs	r2, r3, #1
    54c4:	6002      	str	r2, [r0, #0]
    54c6:	b1b3      	cbz	r3, 54f6 <f_parser+0x3e>
    54c8:	6843      	ldr	r3, [r0, #4]
    54ca:	1c5a      	adds	r2, r3, #1
    54cc:	6042      	str	r2, [r0, #4]
    54ce:	781e      	ldrb	r6, [r3, #0]
  if (c == LUA_SIGNATURE[0]) {
    54d0:	2e1b      	cmp	r6, #27
    checkmode(L, p->mode, "binary");
    54d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
  if (c == LUA_SIGNATURE[0]) {
    54d4:	d113      	bne.n	54fe <f_parser+0x46>
    checkmode(L, p->mode, "binary");
    54d6:	4628      	mov	r0, r5
    54d8:	4a10      	ldr	r2, [pc, #64]	; (551c <f_parser+0x64>)
    54da:	f7ff ffd5 	bl	5488 <checkmode>
    cl = luaU_undump(L, p->z, p->name);
    54de:	4628      	mov	r0, r5
    54e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    54e2:	6821      	ldr	r1, [r4, #0]
    54e4:	f7fb fccc 	bl	e80 <luaU_undump>
  }
  else {
    checkmode(L, p->mode, "text");
    cl = luaY_parser(L, p->z, &p->buff, &p->dyd, p->name, c);
    54e8:	4601      	mov	r1, r0
  }
  lua_assert(cl->nupvalues == cl->p->sizeupvalues);
  luaF_initupvals(L, cl);
    54ea:	4628      	mov	r0, r5
}
    54ec:	b002      	add	sp, #8
    54ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  luaF_initupvals(L, cl);
    54f2:	f00d bfdd 	b.w	134b0 <luaF_initupvals>
  int c = zgetc(p->z);  /* read first character */
    54f6:	f011 f98d 	bl	16814 <luaZ_fill>
    54fa:	4606      	mov	r6, r0
    54fc:	e7e8      	b.n	54d0 <f_parser+0x18>
    checkmode(L, p->mode, "text");
    54fe:	4628      	mov	r0, r5
    5500:	4a07      	ldr	r2, [pc, #28]	; (5520 <f_parser+0x68>)
    5502:	f7ff ffc1 	bl	5488 <checkmode>
    cl = luaY_parser(L, p->z, &p->buff, &p->dyd, p->name, c);
    5506:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5508:	4628      	mov	r0, r5
    550a:	9300      	str	r3, [sp, #0]
    550c:	6821      	ldr	r1, [r4, #0]
    550e:	9601      	str	r6, [sp, #4]
    5510:	f104 0310 	add.w	r3, r4, #16
    5514:	1d22      	adds	r2, r4, #4
    5516:	f010 f82c 	bl	15572 <luaY_parser>
    551a:	e7e5      	b.n	54e8 <f_parser+0x30>
    551c:	000180b8 	.word	0x000180b8
    5520:	000180bf 	.word	0x000180bf

00005524 <luaD_growstack>:
int luaD_growstack (lua_State *L, int n, int raiseerror) {
    5524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int size = stacksize(L);
    5526:	e9d0 6c06 	ldrd	r6, ip, [r0, #24]
  if (l_unlikely(size > LUAI_MAXSTACK)) {
    552a:	4f15      	ldr	r7, [pc, #84]	; (5580 <luaD_growstack+0x5c>)
  int size = stacksize(L);
    552c:	eba6 060c 	sub.w	r6, r6, ip
  if (l_unlikely(size > LUAI_MAXSTACK)) {
    5530:	42be      	cmp	r6, r7
int luaD_growstack (lua_State *L, int n, int raiseerror) {
    5532:	4604      	mov	r4, r0
    5534:	4615      	mov	r5, r2
  int size = stacksize(L);
    5536:	ea4f 1326 	mov.w	r3, r6, asr #4
  if (l_unlikely(size > LUAI_MAXSTACK)) {
    553a:	dd03      	ble.n	5544 <luaD_growstack+0x20>
    if (raiseerror)
    553c:	b1ea      	cbz	r2, 557a <luaD_growstack+0x56>
      luaD_throw(L, LUA_ERRERR);  /* error inside message handler */
    553e:	2105      	movs	r1, #5
    5540:	f00d fc27 	bl	12d92 <luaD_throw>
    int newsize = 2 * size;  /* tentative new size */
    5544:	4f0f      	ldr	r7, [pc, #60]	; (5584 <luaD_growstack+0x60>)
    5546:	005b      	lsls	r3, r3, #1
    if (newsize > LUAI_MAXSTACK)  /* cannot cross the limit */
    5548:	42bb      	cmp	r3, r7
    554a:	bfa8      	it	ge
    554c:	463b      	movge	r3, r7
    int needed = cast_int(L->top - L->stack) + n;
    554e:	68c6      	ldr	r6, [r0, #12]
    5550:	eba6 060c 	sub.w	r6, r6, ip
    5554:	eb01 1126 	add.w	r1, r1, r6, asr #4
    5558:	4299      	cmp	r1, r3
    555a:	bfb8      	it	lt
    555c:	4619      	movlt	r1, r3
    if (l_likely(newsize <= LUAI_MAXSTACK))
    555e:	42b9      	cmp	r1, r7
    5560:	dc03      	bgt.n	556a <luaD_growstack+0x46>
}
    5562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      return luaD_reallocstack(L, newsize, raiseerror);
    5566:	f00d bc59 	b.w	12e1c <luaD_reallocstack>
      luaD_reallocstack(L, ERRORSTACKSIZE, raiseerror);
    556a:	4907      	ldr	r1, [pc, #28]	; (5588 <luaD_growstack+0x64>)
    556c:	f00d fc56 	bl	12e1c <luaD_reallocstack>
      if (raiseerror)
    5570:	b11d      	cbz	r5, 557a <luaD_growstack+0x56>
        luaG_runerror(L, "stack overflow");
    5572:	4620      	mov	r0, r4
    5574:	4905      	ldr	r1, [pc, #20]	; (558c <luaD_growstack+0x68>)
    5576:	f00d fbdb 	bl	12d30 <luaG_runerror>
}
    557a:	2000      	movs	r0, #0
    557c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    557e:	bf00      	nop
    5580:	00f42400 	.word	0x00f42400
    5584:	000f4240 	.word	0x000f4240
    5588:	000f4308 	.word	0x000f4308
    558c:	00018765 	.word	0x00018765

00005590 <luaD_shrinkstack>:
void luaD_shrinkstack (lua_State *L) {
    5590:	b538      	push	{r3, r4, r5, lr}
    5592:	4604      	mov	r4, r0
  StkId lim = L->top;
    5594:	68c3      	ldr	r3, [r0, #12]
  for (ci = L->ci; ci != NULL; ci = ci->previous) {
    5596:	6942      	ldr	r2, [r0, #20]
    5598:	bb0a      	cbnz	r2, 55de <luaD_shrinkstack+0x4e>
  res = cast_int(lim - L->stack) + 1;  /* part of stack in use */
    559a:	69e5      	ldr	r5, [r4, #28]
  if (max > LUAI_MAXSTACK) {
    559c:	4813      	ldr	r0, [pc, #76]	; (55ec <luaD_shrinkstack+0x5c>)
  res = cast_int(lim - L->stack) + 1;  /* part of stack in use */
    559e:	1b5b      	subs	r3, r3, r5
    55a0:	111b      	asrs	r3, r3, #4
    55a2:	3301      	adds	r3, #1
  if (res < LUA_MINSTACK)
    55a4:	2b14      	cmp	r3, #20
    55a6:	461a      	mov	r2, r3
    55a8:	bfb8      	it	lt
    55aa:	2214      	movlt	r2, #20
  int nsize = inuse * 2;  /* proposed new size */
    55ac:	0051      	lsls	r1, r2, #1
  int max = inuse * 3;  /* maximum "reasonable" size */
    55ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  if (max > LUAI_MAXSTACK) {
    55b2:	4282      	cmp	r2, r0
    55b4:	dd03      	ble.n	55be <luaD_shrinkstack+0x2e>
    if (nsize > LUAI_MAXSTACK)
    55b6:	4281      	cmp	r1, r0
    55b8:	bfa8      	it	ge
    55ba:	4601      	movge	r1, r0
    max = LUAI_MAXSTACK;  /* respect stack limit */
    55bc:	4602      	mov	r2, r0
  if (inuse <= LUAI_MAXSTACK && stacksize(L) > max)
    55be:	4283      	cmp	r3, r0
    55c0:	dc08      	bgt.n	55d4 <luaD_shrinkstack+0x44>
    55c2:	69a3      	ldr	r3, [r4, #24]
    55c4:	1b5b      	subs	r3, r3, r5
    55c6:	ebb2 1f23 	cmp.w	r2, r3, asr #4
    55ca:	da03      	bge.n	55d4 <luaD_shrinkstack+0x44>
    luaD_reallocstack(L, nsize, 0);  /* ok if that fails */
    55cc:	2200      	movs	r2, #0
    55ce:	4620      	mov	r0, r4
    55d0:	f00d fc24 	bl	12e1c <luaD_reallocstack>
  luaE_shrinkCI(L);  /* shrink CI list */
    55d4:	4620      	mov	r0, r4
}
    55d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  luaE_shrinkCI(L);  /* shrink CI list */
    55da:	f010 b910 	b.w	157fe <luaE_shrinkCI>
    if (lim < ci->top) lim = ci->top;
    55de:	6851      	ldr	r1, [r2, #4]
  for (ci = L->ci; ci != NULL; ci = ci->previous) {
    55e0:	6892      	ldr	r2, [r2, #8]
    55e2:	428b      	cmp	r3, r1
    55e4:	bf38      	it	cc
    55e6:	460b      	movcc	r3, r1
    55e8:	e7d6      	b.n	5598 <luaD_shrinkstack+0x8>
    55ea:	bf00      	nop
    55ec:	000f4240 	.word	0x000f4240

000055f0 <luaD_closeprotected>:
int luaD_closeprotected (lua_State *L, ptrdiff_t level, int status) {
    55f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    55f4:	4604      	mov	r4, r0
    55f6:	460d      	mov	r5, r1
  CallInfo *old_ci = L->ci;
    55f8:	6947      	ldr	r7, [r0, #20]
  lu_byte old_allowhooks = L->allowhook;
    55fa:	79c6      	ldrb	r6, [r0, #7]
    status = luaD_rawrunprotected(L, &closepaux, &pcl);
    55fc:	f8df 8024 	ldr.w	r8, [pc, #36]	; 5624 <luaD_closeprotected+0x34>
    pcl.level = restorestack(L, level); pcl.status = status;
    5600:	69e3      	ldr	r3, [r4, #28]
    status = luaD_rawrunprotected(L, &closepaux, &pcl);
    5602:	4641      	mov	r1, r8
    pcl.level = restorestack(L, level); pcl.status = status;
    5604:	442b      	add	r3, r5
    5606:	e9cd 3200 	strd	r3, r2, [sp]
    status = luaD_rawrunprotected(L, &closepaux, &pcl);
    560a:	4620      	mov	r0, r4
    560c:	466a      	mov	r2, sp
    560e:	f00d fbe6 	bl	12dde <luaD_rawrunprotected>
    if (l_likely(status == LUA_OK))  /* no more errors? */
    5612:	4602      	mov	r2, r0
    5614:	b110      	cbz	r0, 561c <luaD_closeprotected+0x2c>
      L->ci = old_ci;
    5616:	6167      	str	r7, [r4, #20]
      L->allowhook = old_allowhooks;
    5618:	71e6      	strb	r6, [r4, #7]
  for (;;) {  /* keep closing upvalues until no more errors */
    561a:	e7f1      	b.n	5600 <luaD_closeprotected+0x10>
      return pcl.status;
    561c:	9801      	ldr	r0, [sp, #4]
}
    561e:	b002      	add	sp, #8
    5620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5624:	00012d8b 	.word	0x00012d8b

00005628 <luaD_protectedparser>:


int luaD_protectedparser (lua_State *L, ZIO *z, const char *name,
                                        const char *mode) {
    5628:	b570      	push	{r4, r5, r6, lr}
  struct SParser p;
  int status;
  incnny(L);  /* cannot yield during parsing */
    562a:	6e05      	ldr	r5, [r0, #96]	; 0x60
                                        const char *mode) {
    562c:	b092      	sub	sp, #72	; 0x48
  incnny(L);  /* cannot yield during parsing */
    562e:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
    5632:	6605      	str	r5, [r0, #96]	; 0x60
  p.z = z; p.name = name; p.mode = mode;
  p.dyd.actvar.arr = NULL; p.dyd.actvar.size = 0;
    5634:	2500      	movs	r5, #0
  p.z = z; p.name = name; p.mode = mode;
    5636:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    563a:	9103      	str	r1, [sp, #12]
  p.dyd.gt.arr = NULL; p.dyd.gt.size = 0;
  p.dyd.label.arr = NULL; p.dyd.label.size = 0;
  luaZ_initbuffer(L, &p.buff);
  status = luaD_pcall(L, f_parser, &p, savestack(L, L->top), L->errfunc);
    563c:	68c2      	ldr	r2, [r0, #12]
    563e:	69c3      	ldr	r3, [r0, #28]
    5640:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    5642:	1ad3      	subs	r3, r2, r3
    5644:	9100      	str	r1, [sp, #0]
    5646:	aa03      	add	r2, sp, #12
    5648:	4917      	ldr	r1, [pc, #92]	; (56a8 <luaD_protectedparser+0x80>)
                                        const char *mode) {
    564a:	4604      	mov	r4, r0
  p.dyd.gt.arr = NULL; p.dyd.gt.size = 0;
    564c:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  p.dyd.label.arr = NULL; p.dyd.label.size = 0;
    5650:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
  p.dyd.actvar.arr = NULL; p.dyd.actvar.size = 0;
    5654:	9507      	str	r5, [sp, #28]
  p.dyd.label.arr = NULL; p.dyd.label.size = 0;
    5656:	950f      	str	r5, [sp, #60]	; 0x3c
  luaZ_initbuffer(L, &p.buff);
    5658:	9504      	str	r5, [sp, #16]
    565a:	9506      	str	r5, [sp, #24]
  status = luaD_pcall(L, f_parser, &p, savestack(L, L->top), L->errfunc);
    565c:	f00d fef0 	bl	13440 <luaD_pcall>
  luaZ_freebuffer(L, &p.buff);
    5660:	462b      	mov	r3, r5
  status = luaD_pcall(L, f_parser, &p, savestack(L, L->top), L->errfunc);
    5662:	4606      	mov	r6, r0
  luaZ_freebuffer(L, &p.buff);
    5664:	9a06      	ldr	r2, [sp, #24]
    5666:	9904      	ldr	r1, [sp, #16]
    5668:	4620      	mov	r0, r4
    566a:	f00f fa50 	bl	14b0e <luaM_saferealloc_>
  luaM_freearray(L, p.dyd.actvar.arr, p.dyd.actvar.size);
    566e:	2218      	movs	r2, #24
    5670:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5672:	9907      	ldr	r1, [sp, #28]
    5674:	435a      	muls	r2, r3
  luaZ_freebuffer(L, &p.buff);
    5676:	9004      	str	r0, [sp, #16]
  luaM_freearray(L, p.dyd.actvar.arr, p.dyd.actvar.size);
    5678:	4620      	mov	r0, r4
  luaZ_freebuffer(L, &p.buff);
    567a:	9506      	str	r5, [sp, #24]
  luaM_freearray(L, p.dyd.actvar.arr, p.dyd.actvar.size);
    567c:	f00f fa23 	bl	14ac6 <luaM_free_>
  luaM_freearray(L, p.dyd.gt.arr, p.dyd.gt.size);
    5680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5682:	4620      	mov	r0, r4
    5684:	990a      	ldr	r1, [sp, #40]	; 0x28
    5686:	0112      	lsls	r2, r2, #4
    5688:	f00f fa1d 	bl	14ac6 <luaM_free_>
  luaM_freearray(L, p.dyd.label.arr, p.dyd.label.size);
    568c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    568e:	4620      	mov	r0, r4
    5690:	990d      	ldr	r1, [sp, #52]	; 0x34
    5692:	0112      	lsls	r2, r2, #4
    5694:	f00f fa17 	bl	14ac6 <luaM_free_>
  decnny(L);
  return status;
}
    5698:	4630      	mov	r0, r6
  decnny(L);
    569a:	6e23      	ldr	r3, [r4, #96]	; 0x60
    569c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    56a0:	6623      	str	r3, [r4, #96]	; 0x60
}
    56a2:	b012      	add	sp, #72	; 0x48
    56a4:	bd70      	pop	{r4, r5, r6, pc}
    56a6:	bf00      	nop
    56a8:	000054b9 	.word	0x000054b9

000056ac <luaF_newtbcupval>:


/*
** Insert a variable in the list of to-be-closed variables.
*/
void luaF_newtbcupval (lua_State *L, StkId level) {
    56ac:	b538      	push	{r3, r4, r5, lr}
  lua_assert(level > L->tbclist);
  if (l_isfalse(s2v(level)))
    56ae:	7a0b      	ldrb	r3, [r1, #8]
void luaF_newtbcupval (lua_State *L, StkId level) {
    56b0:	4604      	mov	r4, r0
  if (l_isfalse(s2v(level)))
    56b2:	2b01      	cmp	r3, #1
void luaF_newtbcupval (lua_State *L, StkId level) {
    56b4:	460d      	mov	r5, r1
  if (l_isfalse(s2v(level)))
    56b6:	d011      	beq.n	56dc <luaF_newtbcupval+0x30>
    56b8:	071b      	lsls	r3, r3, #28
    56ba:	d00f      	beq.n	56dc <luaF_newtbcupval+0x30>
  const TValue *tm = luaT_gettmbyobj(L, s2v(level), TM_CLOSE);
    56bc:	2218      	movs	r2, #24
    56be:	f010 fc07 	bl	15ed0 <luaT_gettmbyobj>
  if (ttisnil(tm)) {  /* no metamethod? */
    56c2:	7a03      	ldrb	r3, [r0, #8]
    56c4:	f013 030f 	ands.w	r3, r3, #15
    56c8:	d009      	beq.n	56de <luaF_newtbcupval+0x32>
    return;  /* false doesn't need to be closed */
  checkclosemth(L, level);  /* value must have a close method */
  while (cast_uint(level - L->tbclist) > MAXDELTA) {
    L->tbclist += MAXDELTA;  /* create a dummy node at maximum delta */
    L->tbclist->tbclist.delta = 0;
    56ca:	2000      	movs	r0, #0
  while (cast_uint(level - L->tbclist) > MAXDELTA) {
    56cc:	490f      	ldr	r1, [pc, #60]	; (570c <luaF_newtbcupval+0x60>)
    56ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    56d0:	1aea      	subs	r2, r5, r3
    56d2:	428a      	cmp	r2, r1
    56d4:	d812      	bhi.n	56fc <luaF_newtbcupval+0x50>
  }
  level->tbclist.delta = cast(unsigned short, level - L->tbclist);
    56d6:	1112      	asrs	r2, r2, #4
    56d8:	816a      	strh	r2, [r5, #10]
  L->tbclist = level;
    56da:	6265      	str	r5, [r4, #36]	; 0x24
}
    56dc:	bd38      	pop	{r3, r4, r5, pc}
    int idx = cast_int(level - L->ci->func);  /* variable index */
    56de:	6961      	ldr	r1, [r4, #20]
    const char *vname = luaG_findlocal(L, L->ci, idx, NULL);
    56e0:	4620      	mov	r0, r4
    int idx = cast_int(level - L->ci->func);  /* variable index */
    56e2:	680a      	ldr	r2, [r1, #0]
    56e4:	1aaa      	subs	r2, r5, r2
    const char *vname = luaG_findlocal(L, L->ci, idx, NULL);
    56e6:	1112      	asrs	r2, r2, #4
    56e8:	f7ff fd10 	bl	510c <luaG_findlocal>
    luaG_runerror(L, "variable '%s' got a non-closable value", vname);
    56ec:	4a08      	ldr	r2, [pc, #32]	; (5710 <luaF_newtbcupval+0x64>)
    56ee:	4909      	ldr	r1, [pc, #36]	; (5714 <luaF_newtbcupval+0x68>)
    56f0:	2800      	cmp	r0, #0
    56f2:	bf18      	it	ne
    56f4:	4602      	movne	r2, r0
    56f6:	4620      	mov	r0, r4
    56f8:	f00d fb1a 	bl	12d30 <luaG_runerror>
    L->tbclist += MAXDELTA;  /* create a dummy node at maximum delta */
    56fc:	f503 237f 	add.w	r3, r3, #1044480	; 0xff000
    5700:	f503 627f 	add.w	r2, r3, #4080	; 0xff0
    5704:	6262      	str	r2, [r4, #36]	; 0x24
    L->tbclist->tbclist.delta = 0;
    5706:	f8a3 0ffa 	strh.w	r0, [r3, #4090]	; 0xffa
    570a:	e7e0      	b.n	56ce <luaF_newtbcupval+0x22>
    570c:	000ffff0 	.word	0x000ffff0
    5710:	00017d70 	.word	0x00017d70
    5714:	000180c4 	.word	0x000180c4

00005718 <GCTM>:
  UNUSED(ud);
  luaD_callnoyield(L, L->top - 2, 0);
}


static void GCTM (lua_State *L) {
    5718:	b5f0      	push	{r4, r5, r6, r7, lr}
  global_State *g = G(L);
    571a:	6905      	ldr	r5, [r0, #16]
static void GCTM (lua_State *L) {
    571c:	4604      	mov	r4, r0
  GCObject *o = g->tobefnz;  /* get first element */
    571e:	6fab      	ldr	r3, [r5, #120]	; 0x78
static void GCTM (lua_State *L) {
    5720:	b087      	sub	sp, #28
  g->tobefnz = o->next;  /* remove it from 'tobefnz' list */
    5722:	681a      	ldr	r2, [r3, #0]
    5724:	67aa      	str	r2, [r5, #120]	; 0x78
  o->next = g->allgc;  /* return it to 'allgc' list */
    5726:	6daa      	ldr	r2, [r5, #88]	; 0x58
    5728:	601a      	str	r2, [r3, #0]
  g->allgc = o;
    572a:	65ab      	str	r3, [r5, #88]	; 0x58
  resetbit(o->marked, FINALIZEDBIT);  /* object is "normal" again */
    572c:	7959      	ldrb	r1, [r3, #5]
    572e:	f001 00bf 	and.w	r0, r1, #191	; 0xbf
    5732:	7158      	strb	r0, [r3, #5]
  if (issweepphase(g))
    5734:	f895 204d 	ldrb.w	r2, [r5, #77]	; 0x4d
    5738:	3a03      	subs	r2, #3
    573a:	2a03      	cmp	r2, #3
    573c:	d84e      	bhi.n	57dc <GCTM+0xc4>
    makewhite(g, o);  /* "sweep" object */
    573e:	f895 204c 	ldrb.w	r2, [r5, #76]	; 0x4c
    5742:	f020 0038 	bic.w	r0, r0, #56	; 0x38
    5746:	f002 0218 	and.w	r2, r2, #24
    574a:	4302      	orrs	r2, r0
    574c:	715a      	strb	r2, [r3, #5]
  const TValue *tm;
  TValue v;
  lua_assert(!g->gcemergency);
  setgcovalue(L, &v, udata2finalize(g));
    574e:	9302      	str	r3, [sp, #8]
    5750:	791b      	ldrb	r3, [r3, #4]
  tm = luaT_gettmbyobj(L, &v, TM_GC);
    5752:	2202      	movs	r2, #2
  setgcovalue(L, &v, udata2finalize(g));
    5754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  tm = luaT_gettmbyobj(L, &v, TM_GC);
    5758:	4620      	mov	r0, r4
    575a:	a902      	add	r1, sp, #8
  setgcovalue(L, &v, udata2finalize(g));
    575c:	f88d 3010 	strb.w	r3, [sp, #16]
  tm = luaT_gettmbyobj(L, &v, TM_GC);
    5760:	f010 fbb6 	bl	15ed0 <luaT_gettmbyobj>
  if (!notm(tm)) {  /* is there a finalizer? */
    5764:	f890 c008 	ldrb.w	ip, [r0, #8]
    5768:	f01c 0f0f 	tst.w	ip, #15
    576c:	d034      	beq.n	57d8 <GCTM+0xc0>
    int status;
    lu_byte oldah = L->allowhook;
    int oldgcstp  = g->gcstp;
    g->gcstp |= GCSTPGC;  /* avoid GC steps */
    L->allowhook = 0;  /* stop debug hooks during GC metamethod */
    576e:	2200      	movs	r2, #0
    int oldgcstp  = g->gcstp;
    5770:	f895 6052 	ldrb.w	r6, [r5, #82]	; 0x52
    lu_byte oldah = L->allowhook;
    5774:	79e7      	ldrb	r7, [r4, #7]
    g->gcstp |= GCSTPGC;  /* avoid GC steps */
    5776:	f046 0302 	orr.w	r3, r6, #2
    577a:	f885 3052 	strb.w	r3, [r5, #82]	; 0x52
    setobj2s(L, L->top++, tm);  /* push finalizer... */
    577e:	68e3      	ldr	r3, [r4, #12]
    L->allowhook = 0;  /* stop debug hooks during GC metamethod */
    5780:	71e2      	strb	r2, [r4, #7]
    setobj2s(L, L->top++, tm);  /* push finalizer... */
    5782:	c803      	ldmia	r0, {r0, r1}
    5784:	e9c3 0100 	strd	r0, r1, [r3]
    5788:	f883 c008 	strb.w	ip, [r3, #8]
    setobj2s(L, L->top++, &v);  /* ... and its argument */
    578c:	f103 0120 	add.w	r1, r3, #32
    5790:	60e1      	str	r1, [r4, #12]
    5792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    5796:	e9c3 0104 	strd	r0, r1, [r3, #16]
    579a:	f89d 1010 	ldrb.w	r1, [sp, #16]
    579e:	7619      	strb	r1, [r3, #24]
    L->ci->callstatus |= CIST_FIN;  /* will run a finalizer */
    57a0:	6960      	ldr	r0, [r4, #20]
    57a2:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    57a4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    57a8:	8441      	strh	r1, [r0, #34]	; 0x22
    status = luaD_pcall(L, dothecall, NULL, savestack(L, L->top - 2), 0);
    57aa:	69e1      	ldr	r1, [r4, #28]
    57ac:	9200      	str	r2, [sp, #0]
    57ae:	1a5b      	subs	r3, r3, r1
    57b0:	4620      	mov	r0, r4
    57b2:	490e      	ldr	r1, [pc, #56]	; (57ec <GCTM+0xd4>)
    57b4:	f00d fe44 	bl	13440 <luaD_pcall>
    L->ci->callstatus &= ~CIST_FIN;  /* not running a finalizer anymore */
    57b8:	6962      	ldr	r2, [r4, #20]
    57ba:	8c53      	ldrh	r3, [r2, #34]	; 0x22
    57bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    57c0:	8453      	strh	r3, [r2, #34]	; 0x22
    L->allowhook = oldah;  /* restore hooks */
    57c2:	71e7      	strb	r7, [r4, #7]
    g->gcstp = oldgcstp;  /* restore state */
    57c4:	f885 6052 	strb.w	r6, [r5, #82]	; 0x52
    if (l_unlikely(status != LUA_OK)) {  /* error while running __gc? */
    57c8:	b130      	cbz	r0, 57d8 <GCTM+0xc0>
      luaE_warnerror(L, "__gc");
    57ca:	4620      	mov	r0, r4
    57cc:	4908      	ldr	r1, [pc, #32]	; (57f0 <GCTM+0xd8>)
    57ce:	f002 fcab 	bl	8128 <luaE_warnerror>
      L->top--;  /* pops error object */
    57d2:	68e3      	ldr	r3, [r4, #12]
    57d4:	3b10      	subs	r3, #16
    57d6:	60e3      	str	r3, [r4, #12]
    }
  }
}
    57d8:	b007      	add	sp, #28
    57da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (getage(o) == G_OLD1)
    57dc:	f001 0107 	and.w	r1, r1, #7
    57e0:	2903      	cmp	r1, #3
    g->firstold1 = o;  /* it is the first OLD1 object in the list */
    57e2:	bf08      	it	eq
    57e4:	f8c5 308c 	streq.w	r3, [r5, #140]	; 0x8c
    57e8:	e7b1      	b.n	574e <GCTM+0x36>
    57ea:	bf00      	nop
    57ec:	00013ab9 	.word	0x00013ab9
    57f0:	00017f85 	.word	0x00017f85

000057f4 <sweepgen.isra.0>:
** The ages of G_TOUCHED1 and G_TOUCHED2 objects cannot be advanced
** here, because these old-generation objects are usually not swept
** here.  They will all be advanced in 'correctgraylist'. That function
** will also remove objects turned white here from any gray list.
*/
static GCObject **sweepgen (lua_State *L, global_State *g, GCObject **p,
    57f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    57f8:	4607      	mov	r7, r0
    57fa:	461d      	mov	r5, r3
    G_TOUCHED1,  /* from G_TOUCHED1 (do not change) */
    G_TOUCHED2   /* from G_TOUCHED2 (do not change) */
  };
  int white = luaC_white(g);
  GCObject *curr;
  while ((curr = *p) != limit) {
    57fc:	4692      	mov	sl, r2
static GCObject **sweepgen (lua_State *L, global_State *g, GCObject **p,
    57fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
      if (getage(curr) == G_NEW) {  /* new objects go back to white */
        int marked = curr->marked & ~maskgcbits;  /* erase GC bits */
        curr->marked = cast_byte(marked | G_SURVIVAL | white);
      }
      else {  /* all other objects will be old, and so keep their color */
        setage(curr, nextage[getage(curr)]);
    5802:	f8df 9064 	ldr.w	r9, [pc, #100]	; 5868 <sweepgen.isra.0+0x74>
    5806:	f001 0618 	and.w	r6, r1, #24
  while ((curr = *p) != limit) {
    580a:	f8da 1000 	ldr.w	r1, [sl]
    580e:	42a9      	cmp	r1, r5
    5810:	d102      	bne.n	5818 <sweepgen.isra.0+0x24>
      }
      p = &curr->next;  /* go to next element */
    }
  }
  return p;
}
    5812:	4650      	mov	r0, sl
    5814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (iswhite(curr)) {  /* is 'curr' dead? */
    5818:	794c      	ldrb	r4, [r1, #5]
    581a:	f014 0f18 	tst.w	r4, #24
    581e:	d006      	beq.n	582e <sweepgen.isra.0+0x3a>
      *p = curr->next;  /* remove 'curr' from list */
    5820:	680b      	ldr	r3, [r1, #0]
      freeobj(L, curr);  /* erase 'curr' */
    5822:	4638      	mov	r0, r7
      *p = curr->next;  /* remove 'curr' from list */
    5824:	f8ca 3000 	str.w	r3, [sl]
      freeobj(L, curr);  /* erase 'curr' */
    5828:	f00e f88a 	bl	13940 <freeobj>
    582c:	e7ed      	b.n	580a <sweepgen.isra.0+0x16>
      if (getage(curr) == G_NEW) {  /* new objects go back to white */
    582e:	f014 0307 	ands.w	r3, r4, #7
    5832:	d107      	bne.n	5844 <sweepgen.isra.0+0x50>
        int marked = curr->marked & ~maskgcbits;  /* erase GC bits */
    5834:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
        curr->marked = cast_byte(marked | G_SURVIVAL | white);
    5838:	4334      	orrs	r4, r6
    583a:	f044 0401 	orr.w	r4, r4, #1
    583e:	714c      	strb	r4, [r1, #5]
      p = &curr->next;  /* go to next element */
    5840:	468a      	mov	sl, r1
    5842:	e7e2      	b.n	580a <sweepgen.isra.0+0x16>
        setage(curr, nextage[getage(curr)]);
    5844:	f819 3003 	ldrb.w	r3, [r9, r3]
    5848:	f024 0407 	bic.w	r4, r4, #7
    584c:	431c      	orrs	r4, r3
    584e:	714c      	strb	r4, [r1, #5]
        if (getage(curr) == G_OLD1 && *pfirstold1 == NULL)
    5850:	f004 0407 	and.w	r4, r4, #7
    5854:	2c03      	cmp	r4, #3
    5856:	d1f3      	bne.n	5840 <sweepgen.isra.0+0x4c>
    5858:	f8d8 3000 	ldr.w	r3, [r8]
    585c:	2b00      	cmp	r3, #0
    585e:	d1ef      	bne.n	5840 <sweepgen.isra.0+0x4c>
          *pfirstold1 = curr;  /* first OLD1 object in the list */
    5860:	f8c8 1000 	str.w	r1, [r8]
    5864:	e7ec      	b.n	5840 <sweepgen.isra.0+0x4c>
    5866:	bf00      	nop
    5868:	000180eb 	.word	0x000180eb

0000586c <luaX_init>:
  }
  b->buffer[luaZ_bufflen(b)++] = cast_char(c);
}


void luaX_init (lua_State *L) {
    586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int i;
  TString *e = luaS_newliteral(L, LUA_ENV);  /* create env name */
    586e:	2204      	movs	r2, #4
    5870:	490c      	ldr	r1, [pc, #48]	; (58a4 <luaX_init+0x38>)
void luaX_init (lua_State *L) {
    5872:	4604      	mov	r4, r0
  TString *e = luaS_newliteral(L, LUA_ENV);  /* create env name */
    5874:	f010 f952 	bl	15b1c <luaS_newlstr>
    5878:	4601      	mov	r1, r0
  luaC_fix(L, obj2gco(e));  /* never collect this name */
    587a:	4620      	mov	r0, r4
    587c:	f00e fe7e 	bl	1457c <luaC_fix>
    5880:	2501      	movs	r5, #1
    5882:	4f09      	ldr	r7, [pc, #36]	; (58a8 <luaX_init+0x3c>)
  for (i=0; i<NUM_RESERVED; i++) {
    TString *ts = luaS_new(L, luaX_tokens[i]);
    5884:	f857 1b04 	ldr.w	r1, [r7], #4
    5888:	4620      	mov	r0, r4
    588a:	f010 f960 	bl	15b4e <luaS_new>
    588e:	4606      	mov	r6, r0
    luaC_fix(L, obj2gco(ts));  /* reserved words are never collected */
    5890:	4601      	mov	r1, r0
    5892:	4620      	mov	r0, r4
    5894:	f00e fe72 	bl	1457c <luaC_fix>
    ts->extra = cast_byte(i+1);  /* reserved word */
    5898:	71b5      	strb	r5, [r6, #6]
  for (i=0; i<NUM_RESERVED; i++) {
    589a:	3501      	adds	r5, #1
    589c:	2d17      	cmp	r5, #23
    589e:	d1f1      	bne.n	5884 <luaX_init+0x18>
  }
}
    58a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58a2:	bf00      	nop
    58a4:	00017f63 	.word	0x00017f63
    58a8:	000179c0 	.word	0x000179c0

000058ac <luaX_token2str>:


const char *luaX_token2str (LexState *ls, int token) {
  if (token < FIRST_RESERVED) {  /* single-byte symbols? */
    58ac:	29ff      	cmp	r1, #255	; 0xff
const char *luaX_token2str (LexState *ls, int token) {
    58ae:	4603      	mov	r3, r0
    58b0:	460a      	mov	r2, r1
  if (token < FIRST_RESERVED) {  /* single-byte symbols? */
    58b2:	dc09      	bgt.n	58c8 <luaX_token2str+0x1c>
    if (lisprint(token))
    58b4:	4b0b      	ldr	r3, [pc, #44]	; (58e4 <luaX_token2str+0x38>)
    58b6:	6b40      	ldr	r0, [r0, #52]	; 0x34
    58b8:	440b      	add	r3, r1
    58ba:	785b      	ldrb	r3, [r3, #1]
    58bc:	075b      	lsls	r3, r3, #29
      return luaO_pushfstring(ls->L, "'%c'", token);
    58be:	bf4c      	ite	mi
    58c0:	4909      	ldrmi	r1, [pc, #36]	; (58e8 <luaX_token2str+0x3c>)
    else  /* control character */
      return luaO_pushfstring(ls->L, "'<\\%d>'", token);
    58c2:	490a      	ldrpl	r1, [pc, #40]	; (58ec <luaX_token2str+0x40>)
  }
  else {
    const char *s = luaX_tokens[token - FIRST_RESERVED];
    if (token < TK_EOS)  /* fixed format (symbols and reserved words)? */
      return luaO_pushfstring(ls->L, "'%s'", s);
    58c4:	f00f bb17 	b.w	14ef6 <luaO_pushfstring>
    const char *s = luaX_tokens[token - FIRST_RESERVED];
    58c8:	f5a1 7080 	sub.w	r0, r1, #256	; 0x100
    58cc:	4908      	ldr	r1, [pc, #32]	; (58f0 <luaX_token2str+0x44>)
    if (token < TK_EOS)  /* fixed format (symbols and reserved words)? */
    58ce:	f5b2 7f90 	cmp.w	r2, #288	; 0x120
    const char *s = luaX_tokens[token - FIRST_RESERVED];
    58d2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    if (token < TK_EOS)  /* fixed format (symbols and reserved words)? */
    58d6:	da03      	bge.n	58e0 <luaX_token2str+0x34>
      return luaO_pushfstring(ls->L, "'%s'", s);
    58d8:	4602      	mov	r2, r0
    58da:	4906      	ldr	r1, [pc, #24]	; (58f4 <luaX_token2str+0x48>)
    58dc:	6b58      	ldr	r0, [r3, #52]	; 0x34
    58de:	e7f1      	b.n	58c4 <luaX_token2str+0x18>
    else  /* names, strings, and numerals */
      return s;
  }
}
    58e0:	4770      	bx	lr
    58e2:	bf00      	nop
    58e4:	00017e30 	.word	0x00017e30
    58e8:	000180f2 	.word	0x000180f2
    58ec:	000180f7 	.word	0x000180f7
    58f0:	000179c0 	.word	0x000179c0
    58f4:	00018546 	.word	0x00018546

000058f8 <lexerror>:
  }
}


static l_noret lexerror (LexState *ls, const char *msg, int token) {
  msg = luaG_addinfo(ls->L, msg, ls->source, ls->linenumber);
    58f8:	6843      	ldr	r3, [r0, #4]
static l_noret lexerror (LexState *ls, const char *msg, int token) {
    58fa:	4604      	mov	r4, r0
    58fc:	4615      	mov	r5, r2
    58fe:	b580      	push	{r7, lr}
  msg = luaG_addinfo(ls->L, msg, ls->source, ls->linenumber);
    5900:	6c82      	ldr	r2, [r0, #72]	; 0x48
    5902:	6b40      	ldr	r0, [r0, #52]	; 0x34
    5904:	f7ff fc5a 	bl	51bc <luaG_addinfo>
    5908:	4606      	mov	r6, r0
  if (token)
    590a:	b1ad      	cbz	r5, 5938 <lexerror+0x40>
  switch (token) {
    590c:	f46f 7390 	mvn.w	r3, #288	; 0x120
    5910:	18eb      	adds	r3, r5, r3
    5912:	2b03      	cmp	r3, #3
    luaO_pushfstring(ls->L, "%s near %s", msg, txtToken(ls, token));
    5914:	6b67      	ldr	r7, [r4, #52]	; 0x34
  switch (token) {
    5916:	d813      	bhi.n	5940 <lexerror+0x48>
      save(ls, '\0');
    5918:	2100      	movs	r1, #0
    591a:	4620      	mov	r0, r4
    591c:	f000 f81a 	bl	5954 <save>
      return luaO_pushfstring(ls->L, "'%s'", luaZ_buffer(ls->buff));
    5920:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5922:	490a      	ldr	r1, [pc, #40]	; (594c <lexerror+0x54>)
    5924:	681a      	ldr	r2, [r3, #0]
    5926:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5928:	f00f fae5 	bl	14ef6 <luaO_pushfstring>
      return luaX_token2str(ls, token);
    592c:	4603      	mov	r3, r0
    luaO_pushfstring(ls->L, "%s near %s", msg, txtToken(ls, token));
    592e:	4632      	mov	r2, r6
    5930:	4638      	mov	r0, r7
    5932:	4907      	ldr	r1, [pc, #28]	; (5950 <lexerror+0x58>)
    5934:	f00f fadf 	bl	14ef6 <luaO_pushfstring>
  luaD_throw(ls->L, LUA_ERRSYNTAX);
    5938:	2103      	movs	r1, #3
    593a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    593c:	f00d fa29 	bl	12d92 <luaD_throw>
      return luaX_token2str(ls, token);
    5940:	4629      	mov	r1, r5
    5942:	4620      	mov	r0, r4
    5944:	f7ff ffb2 	bl	58ac <luaX_token2str>
    5948:	e7f0      	b.n	592c <lexerror+0x34>
    594a:	bf00      	nop
    594c:	00018546 	.word	0x00018546
    5950:	000180ff 	.word	0x000180ff

00005954 <save>:
static void save (LexState *ls, int c) {
    5954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Mbuffer *b = ls->buff;
    5956:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
static void save (LexState *ls, int c) {
    5958:	460e      	mov	r6, r1
  if (luaZ_bufflen(b) + 1 > luaZ_sizebuffer(b)) {
    595a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    595e:	3301      	adds	r3, #1
    5960:	4293      	cmp	r3, r2
    5962:	d90f      	bls.n	5984 <save+0x30>
    if (luaZ_sizebuffer(b) >= MAX_SIZE/2)
    5964:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    5968:	429a      	cmp	r2, r3
    596a:	d303      	bcc.n	5974 <save+0x20>
      lexerror(ls, "lexical element too long", 0);
    596c:	2200      	movs	r2, #0
    596e:	4908      	ldr	r1, [pc, #32]	; (5990 <save+0x3c>)
    5970:	f7ff ffc2 	bl	58f8 <lexerror>
    newsize = luaZ_sizebuffer(b) * 2;
    5974:	0057      	lsls	r7, r2, #1
    luaZ_resizebuffer(ls->L, b, newsize);
    5976:	463b      	mov	r3, r7
    5978:	6821      	ldr	r1, [r4, #0]
    597a:	6b40      	ldr	r0, [r0, #52]	; 0x34
    597c:	f00f f8c7 	bl	14b0e <luaM_saferealloc_>
    5980:	60a7      	str	r7, [r4, #8]
    5982:	6020      	str	r0, [r4, #0]
  b->buffer[luaZ_bufflen(b)++] = cast_char(c);
    5984:	e9d4 2300 	ldrd	r2, r3, [r4]
    5988:	1c59      	adds	r1, r3, #1
    598a:	6061      	str	r1, [r4, #4]
    598c:	54d6      	strb	r6, [r2, r3]
}
    598e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5990:	0001810a 	.word	0x0001810a

00005994 <inclinenumber>:

/*
** increment line number and skips newline sequence (any of
** \n, \r, \n\r, or \r\n)
*/
static void inclinenumber (LexState *ls) {
    5994:	b538      	push	{r3, r4, r5, lr}
  int old = ls->current;
    5996:	6805      	ldr	r5, [r0, #0]
static void inclinenumber (LexState *ls) {
    5998:	4604      	mov	r4, r0
  lua_assert(currIsNewline(ls));
  next(ls);  /* skip '\n' or '\r' */
    599a:	6b80      	ldr	r0, [r0, #56]	; 0x38
    599c:	6803      	ldr	r3, [r0, #0]
    599e:	1e5a      	subs	r2, r3, #1
    59a0:	6002      	str	r2, [r0, #0]
    59a2:	b303      	cbz	r3, 59e6 <inclinenumber+0x52>
    59a4:	6843      	ldr	r3, [r0, #4]
    59a6:	1c5a      	adds	r2, r3, #1
    59a8:	6042      	str	r2, [r0, #4]
    59aa:	7818      	ldrb	r0, [r3, #0]
  if (currIsNewline(ls) && ls->current != old)
    59ac:	280a      	cmp	r0, #10
  next(ls);  /* skip '\n' or '\r' */
    59ae:	6020      	str	r0, [r4, #0]
  if (currIsNewline(ls) && ls->current != old)
    59b0:	d001      	beq.n	59b6 <inclinenumber+0x22>
    59b2:	280d      	cmp	r0, #13
    59b4:	d10b      	bne.n	59ce <inclinenumber+0x3a>
    59b6:	42a8      	cmp	r0, r5
    59b8:	d009      	beq.n	59ce <inclinenumber+0x3a>
    next(ls);  /* skip '\n\r' or '\r\n' */
    59ba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    59bc:	6803      	ldr	r3, [r0, #0]
    59be:	1e5a      	subs	r2, r3, #1
    59c0:	6002      	str	r2, [r0, #0]
    59c2:	b19b      	cbz	r3, 59ec <inclinenumber+0x58>
    59c4:	6843      	ldr	r3, [r0, #4]
    59c6:	1c5a      	adds	r2, r3, #1
    59c8:	6042      	str	r2, [r0, #4]
    59ca:	7818      	ldrb	r0, [r3, #0]
    59cc:	6020      	str	r0, [r4, #0]
  if (++ls->linenumber >= MAX_INT)
    59ce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    59d2:	6863      	ldr	r3, [r4, #4]
    59d4:	3301      	adds	r3, #1
    59d6:	4293      	cmp	r3, r2
    59d8:	6063      	str	r3, [r4, #4]
    59da:	d10a      	bne.n	59f2 <inclinenumber+0x5e>
    lexerror(ls, "chunk has too many lines", 0);
    59dc:	2200      	movs	r2, #0
    59de:	4620      	mov	r0, r4
    59e0:	4904      	ldr	r1, [pc, #16]	; (59f4 <inclinenumber+0x60>)
    59e2:	f7ff ff89 	bl	58f8 <lexerror>
  next(ls);  /* skip '\n' or '\r' */
    59e6:	f010 ff15 	bl	16814 <luaZ_fill>
    59ea:	e7df      	b.n	59ac <inclinenumber+0x18>
    next(ls);  /* skip '\n\r' or '\r\n' */
    59ec:	f010 ff12 	bl	16814 <luaZ_fill>
    59f0:	e7ec      	b.n	59cc <inclinenumber+0x38>
}
    59f2:	bd38      	pop	{r3, r4, r5, pc}
    59f4:	00018123 	.word	0x00018123

000059f8 <gethexa>:
    lexerror(ls, msg, TK_STRING);
  }
}


static int gethexa (LexState *ls) {
    59f8:	b538      	push	{r3, r4, r5, lr}
    59fa:	4605      	mov	r5, r0
  save_and_next(ls);
    59fc:	6801      	ldr	r1, [r0, #0]
    59fe:	f7ff ffa9 	bl	5954 <save>
    5a02:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    5a04:	6803      	ldr	r3, [r0, #0]
    5a06:	1e5a      	subs	r2, r3, #1
    5a08:	6002      	str	r2, [r0, #0]
    5a0a:	b193      	cbz	r3, 5a32 <gethexa+0x3a>
    5a0c:	6843      	ldr	r3, [r0, #4]
    5a0e:	1c5a      	adds	r2, r3, #1
    5a10:	6042      	str	r2, [r0, #4]
    5a12:	781c      	ldrb	r4, [r3, #0]
  esccheck (ls, lisxdigit(ls->current), "hexadecimal digit expected");
    5a14:	4b09      	ldr	r3, [pc, #36]	; (5a3c <gethexa+0x44>)
    5a16:	4628      	mov	r0, r5
    5a18:	4423      	add	r3, r4
    5a1a:	7859      	ldrb	r1, [r3, #1]
  save_and_next(ls);
    5a1c:	602c      	str	r4, [r5, #0]
  esccheck (ls, lisxdigit(ls->current), "hexadecimal digit expected");
    5a1e:	4a08      	ldr	r2, [pc, #32]	; (5a40 <gethexa+0x48>)
    5a20:	f001 0110 	and.w	r1, r1, #16
    5a24:	f00e ffc4 	bl	149b0 <esccheck>
  return luaO_hexavalue(ls->current);
    5a28:	4620      	mov	r0, r4
}
    5a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return luaO_hexavalue(ls->current);
    5a2e:	f000 bd99 	b.w	6564 <luaO_hexavalue>
  save_and_next(ls);
    5a32:	f010 feef 	bl	16814 <luaZ_fill>
    5a36:	4604      	mov	r4, r0
    5a38:	e7ec      	b.n	5a14 <gethexa+0x1c>
    5a3a:	bf00      	nop
    5a3c:	00017e30 	.word	0x00017e30
    5a40:	0001813c 	.word	0x0001813c

00005a44 <read_numeral>:
static int read_numeral (LexState *ls, SemInfo *seminfo) {
    5a44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    5a48:	4604      	mov	r4, r0
  int first = ls->current;
    5a4a:	6806      	ldr	r6, [r0, #0]
static int read_numeral (LexState *ls, SemInfo *seminfo) {
    5a4c:	460d      	mov	r5, r1
  save_and_next(ls);
    5a4e:	4631      	mov	r1, r6
    5a50:	f7ff ff80 	bl	5954 <save>
    5a54:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5a56:	6803      	ldr	r3, [r0, #0]
    5a58:	1e5a      	subs	r2, r3, #1
    5a5a:	6002      	str	r2, [r0, #0]
    5a5c:	b1a3      	cbz	r3, 5a88 <read_numeral+0x44>
    5a5e:	6843      	ldr	r3, [r0, #4]
    5a60:	1c5a      	adds	r2, r3, #1
    5a62:	6042      	str	r2, [r0, #4]
    5a64:	7818      	ldrb	r0, [r3, #0]
  if (first == '0' && check_next2(ls, "xX"))  /* hexadecimal? */
    5a66:	2e30      	cmp	r6, #48	; 0x30
  save_and_next(ls);
    5a68:	6020      	str	r0, [r4, #0]
  if (first == '0' && check_next2(ls, "xX"))  /* hexadecimal? */
    5a6a:	d010      	beq.n	5a8e <read_numeral+0x4a>
  const char *expo = "Ee";
    5a6c:	4e33      	ldr	r6, [pc, #204]	; (5b3c <read_numeral+0xf8>)
    else if (lisxdigit(ls->current) || ls->current == '.')  /* '%x|%.' */
    5a6e:	4f34      	ldr	r7, [pc, #208]	; (5b40 <read_numeral+0xfc>)
      check_next2(ls, "-+");  /* optional exponent sign */
    5a70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 5b44 <read_numeral+0x100>
    if (check_next2(ls, expo))  /* exponent mark? */
    5a74:	4631      	mov	r1, r6
    5a76:	4620      	mov	r0, r4
    5a78:	f00e ff7c 	bl	14974 <check_next2>
    5a7c:	b178      	cbz	r0, 5a9e <read_numeral+0x5a>
      check_next2(ls, "-+");  /* optional exponent sign */
    5a7e:	4641      	mov	r1, r8
    5a80:	4620      	mov	r0, r4
    5a82:	f00e ff77 	bl	14974 <check_next2>
    5a86:	e7f5      	b.n	5a74 <read_numeral+0x30>
  save_and_next(ls);
    5a88:	f010 fec4 	bl	16814 <luaZ_fill>
    5a8c:	e7eb      	b.n	5a66 <read_numeral+0x22>
  if (first == '0' && check_next2(ls, "xX"))  /* hexadecimal? */
    5a8e:	4620      	mov	r0, r4
    5a90:	492d      	ldr	r1, [pc, #180]	; (5b48 <read_numeral+0x104>)
    5a92:	f00e ff6f 	bl	14974 <check_next2>
    5a96:	2800      	cmp	r0, #0
    5a98:	d0e8      	beq.n	5a6c <read_numeral+0x28>
    expo = "Pp";
    5a9a:	4e2c      	ldr	r6, [pc, #176]	; (5b4c <read_numeral+0x108>)
    5a9c:	e7e7      	b.n	5a6e <read_numeral+0x2a>
    else if (lisxdigit(ls->current) || ls->current == '.')  /* '%x|%.' */
    5a9e:	6821      	ldr	r1, [r4, #0]
    5aa0:	187b      	adds	r3, r7, r1
    5aa2:	785b      	ldrb	r3, [r3, #1]
    5aa4:	06da      	lsls	r2, r3, #27
    5aa6:	d401      	bmi.n	5aac <read_numeral+0x68>
    5aa8:	292e      	cmp	r1, #46	; 0x2e
    5aaa:	d110      	bne.n	5ace <read_numeral+0x8a>
      save_and_next(ls);
    5aac:	4620      	mov	r0, r4
    5aae:	f7ff ff51 	bl	5954 <save>
    5ab2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5ab4:	6803      	ldr	r3, [r0, #0]
    5ab6:	1e5a      	subs	r2, r3, #1
    5ab8:	6002      	str	r2, [r0, #0]
    5aba:	b12b      	cbz	r3, 5ac8 <read_numeral+0x84>
    5abc:	6843      	ldr	r3, [r0, #4]
    5abe:	1c5a      	adds	r2, r3, #1
    5ac0:	6042      	str	r2, [r0, #4]
    5ac2:	7818      	ldrb	r0, [r3, #0]
    5ac4:	6020      	str	r0, [r4, #0]
    5ac6:	e7d5      	b.n	5a74 <read_numeral+0x30>
    5ac8:	f010 fea4 	bl	16814 <luaZ_fill>
    5acc:	e7fa      	b.n	5ac4 <read_numeral+0x80>
  if (lislalpha(ls->current))  /* is numeral touching a letter? */
    5ace:	07db      	lsls	r3, r3, #31
    5ad0:	d50c      	bpl.n	5aec <read_numeral+0xa8>
    save_and_next(ls);  /* force an error */
    5ad2:	4620      	mov	r0, r4
    5ad4:	f7ff ff3e 	bl	5954 <save>
    5ad8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5ada:	6803      	ldr	r3, [r0, #0]
    5adc:	1e5a      	subs	r2, r3, #1
    5ade:	6002      	str	r2, [r0, #0]
    5ae0:	b1a3      	cbz	r3, 5b0c <read_numeral+0xc8>
    5ae2:	6843      	ldr	r3, [r0, #4]
    5ae4:	1c5a      	adds	r2, r3, #1
    5ae6:	6042      	str	r2, [r0, #4]
    5ae8:	7818      	ldrb	r0, [r3, #0]
    5aea:	6020      	str	r0, [r4, #0]
  save(ls, '\0');
    5aec:	2100      	movs	r1, #0
    5aee:	4620      	mov	r0, r4
    5af0:	f7ff ff30 	bl	5954 <save>
  if (luaO_str2num(luaZ_buffer(ls->buff), &obj) == 0)  /* format error? */
    5af4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5af6:	4669      	mov	r1, sp
    5af8:	6818      	ldr	r0, [r3, #0]
    5afa:	f000 fd3f 	bl	657c <luaO_str2num>
    5afe:	b940      	cbnz	r0, 5b12 <read_numeral+0xce>
    lexerror(ls, "malformed number", TK_FLT);
    5b00:	f240 1221 	movw	r2, #289	; 0x121
    5b04:	4620      	mov	r0, r4
    5b06:	4912      	ldr	r1, [pc, #72]	; (5b50 <read_numeral+0x10c>)
    5b08:	f7ff fef6 	bl	58f8 <lexerror>
    save_and_next(ls);  /* force an error */
    5b0c:	f010 fe82 	bl	16814 <luaZ_fill>
    5b10:	e7eb      	b.n	5aea <read_numeral+0xa6>
  if (ttisinteger(&obj)) {
    5b12:	f89d 3008 	ldrb.w	r3, [sp, #8]
    5b16:	2b03      	cmp	r3, #3
    5b18:	d108      	bne.n	5b2c <read_numeral+0xe8>
    seminfo->i = ivalue(&obj);
    5b1a:	e9dd 2300 	ldrd	r2, r3, [sp]
    return TK_INT;
    5b1e:	f44f 7091 	mov.w	r0, #290	; 0x122
    seminfo->i = ivalue(&obj);
    5b22:	e9c5 2300 	strd	r2, r3, [r5]
}
    5b26:	b004      	add	sp, #16
    5b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    seminfo->r = fltvalue(&obj);
    5b2c:	e9dd 2300 	ldrd	r2, r3, [sp]
    return TK_FLT;
    5b30:	f240 1021 	movw	r0, #289	; 0x121
    seminfo->r = fltvalue(&obj);
    5b34:	e9c5 2300 	strd	r2, r3, [r5]
    return TK_FLT;
    5b38:	e7f5      	b.n	5b26 <read_numeral+0xe2>
    5b3a:	bf00      	nop
    5b3c:	00018157 	.word	0x00018157
    5b40:	00017e30 	.word	0x00017e30
    5b44:	00018160 	.word	0x00018160
    5b48:	0001815d 	.word	0x0001815d
    5b4c:	0001815a 	.word	0x0001815a
    5b50:	00018163 	.word	0x00018163

00005b54 <read_long_string>:
static void read_long_string (LexState *ls, SemInfo *seminfo, size_t sep) {
    5b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b56:	4604      	mov	r4, r0
    5b58:	460d      	mov	r5, r1
  save_and_next(ls);  /* skip 2nd '[' */
    5b5a:	e9d0 1700 	ldrd	r1, r7, [r0]
static void read_long_string (LexState *ls, SemInfo *seminfo, size_t sep) {
    5b5e:	4616      	mov	r6, r2
  save_and_next(ls);  /* skip 2nd '[' */
    5b60:	f7ff fef8 	bl	5954 <save>
    5b64:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5b66:	6803      	ldr	r3, [r0, #0]
    5b68:	1e5a      	subs	r2, r3, #1
    5b6a:	6002      	str	r2, [r0, #0]
    5b6c:	b31b      	cbz	r3, 5bb6 <read_long_string+0x62>
    5b6e:	6843      	ldr	r3, [r0, #4]
    5b70:	1c5a      	adds	r2, r3, #1
    5b72:	6042      	str	r2, [r0, #4]
    5b74:	7818      	ldrb	r0, [r3, #0]
  if (currIsNewline(ls))  /* string starts with a newline? */
    5b76:	280a      	cmp	r0, #10
  save_and_next(ls);  /* skip 2nd '[' */
    5b78:	6020      	str	r0, [r4, #0]
  if (currIsNewline(ls))  /* string starts with a newline? */
    5b7a:	d001      	beq.n	5b80 <read_long_string+0x2c>
    5b7c:	280d      	cmp	r0, #13
    5b7e:	d102      	bne.n	5b86 <read_long_string+0x32>
    inclinenumber(ls);  /* skip it */
    5b80:	4620      	mov	r0, r4
    5b82:	f7ff ff07 	bl	5994 <inclinenumber>
    switch (ls->current) {
    5b86:	6821      	ldr	r1, [r4, #0]
    5b88:	290d      	cmp	r1, #13
    5b8a:	d041      	beq.n	5c10 <read_long_string+0xbc>
    5b8c:	dc16      	bgt.n	5bbc <read_long_string+0x68>
    5b8e:	1c4b      	adds	r3, r1, #1
    5b90:	d02b      	beq.n	5bea <read_long_string+0x96>
    5b92:	290a      	cmp	r1, #10
    5b94:	d03c      	beq.n	5c10 <read_long_string+0xbc>
        if (seminfo) save_and_next(ls);
    5b96:	b115      	cbz	r5, 5b9e <read_long_string+0x4a>
    5b98:	4620      	mov	r0, r4
    5b9a:	f7ff fedb 	bl	5954 <save>
        else next(ls);
    5b9e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5ba0:	6803      	ldr	r3, [r0, #0]
    5ba2:	1e5a      	subs	r2, r3, #1
    5ba4:	6002      	str	r2, [r0, #0]
    5ba6:	2b00      	cmp	r3, #0
    5ba8:	d03e      	beq.n	5c28 <read_long_string+0xd4>
    5baa:	6843      	ldr	r3, [r0, #4]
    5bac:	1c5a      	adds	r2, r3, #1
    5bae:	6042      	str	r2, [r0, #4]
    5bb0:	7818      	ldrb	r0, [r3, #0]
    5bb2:	6020      	str	r0, [r4, #0]
    5bb4:	e7e7      	b.n	5b86 <read_long_string+0x32>
  save_and_next(ls);  /* skip 2nd '[' */
    5bb6:	f010 fe2d 	bl	16814 <luaZ_fill>
    5bba:	e7dc      	b.n	5b76 <read_long_string+0x22>
    switch (ls->current) {
    5bbc:	295d      	cmp	r1, #93	; 0x5d
    5bbe:	d1ea      	bne.n	5b96 <read_long_string+0x42>
        if (skip_sep(ls) == sep) {
    5bc0:	4620      	mov	r0, r4
    5bc2:	f00e fea7 	bl	14914 <skip_sep>
    5bc6:	42b0      	cmp	r0, r6
    5bc8:	d1dd      	bne.n	5b86 <read_long_string+0x32>
          save_and_next(ls);  /* skip 2nd ']' */
    5bca:	4620      	mov	r0, r4
    5bcc:	6821      	ldr	r1, [r4, #0]
    5bce:	f7ff fec1 	bl	5954 <save>
    5bd2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5bd4:	6803      	ldr	r3, [r0, #0]
    5bd6:	1e5a      	subs	r2, r3, #1
    5bd8:	6002      	str	r2, [r0, #0]
    5bda:	b1b3      	cbz	r3, 5c0a <read_long_string+0xb6>
    5bdc:	6843      	ldr	r3, [r0, #4]
    5bde:	1c5a      	adds	r2, r3, #1
    5be0:	6042      	str	r2, [r0, #4]
    5be2:	7818      	ldrb	r0, [r3, #0]
    5be4:	6020      	str	r0, [r4, #0]
  if (seminfo)
    5be6:	bb15      	cbnz	r5, 5c2e <read_long_string+0xda>
}
    5be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        const char *msg = luaO_pushfstring(ls->L,
    5bea:	4916      	ldr	r1, [pc, #88]	; (5c44 <read_long_string+0xf0>)
    5bec:	4a16      	ldr	r2, [pc, #88]	; (5c48 <read_long_string+0xf4>)
    5bee:	463b      	mov	r3, r7
    5bf0:	2d00      	cmp	r5, #0
    5bf2:	bf18      	it	ne
    5bf4:	460a      	movne	r2, r1
    5bf6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5bf8:	4914      	ldr	r1, [pc, #80]	; (5c4c <read_long_string+0xf8>)
    5bfa:	f00f f97c 	bl	14ef6 <luaO_pushfstring>
        lexerror(ls, msg, TK_EOS);
    5bfe:	f44f 7290 	mov.w	r2, #288	; 0x120
        const char *msg = luaO_pushfstring(ls->L,
    5c02:	4601      	mov	r1, r0
        lexerror(ls, msg, TK_EOS);
    5c04:	4620      	mov	r0, r4
    5c06:	f7ff fe77 	bl	58f8 <lexerror>
          save_and_next(ls);  /* skip 2nd ']' */
    5c0a:	f010 fe03 	bl	16814 <luaZ_fill>
    5c0e:	e7e9      	b.n	5be4 <read_long_string+0x90>
        save(ls, '\n');
    5c10:	4620      	mov	r0, r4
    5c12:	210a      	movs	r1, #10
    5c14:	f7ff fe9e 	bl	5954 <save>
        inclinenumber(ls);
    5c18:	4620      	mov	r0, r4
    5c1a:	f7ff febb 	bl	5994 <inclinenumber>
        if (!seminfo) luaZ_resetbuffer(ls->buff);  /* avoid wasting space */
    5c1e:	2d00      	cmp	r5, #0
    5c20:	d1b1      	bne.n	5b86 <read_long_string+0x32>
    5c22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5c24:	605d      	str	r5, [r3, #4]
    5c26:	e7ae      	b.n	5b86 <read_long_string+0x32>
        else next(ls);
    5c28:	f010 fdf4 	bl	16814 <luaZ_fill>
    5c2c:	e7c1      	b.n	5bb2 <read_long_string+0x5e>
    seminfo->ts = luaX_newstring(ls, luaZ_buffer(ls->buff) + sep,
    5c2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5c30:	4620      	mov	r0, r4
    5c32:	e9d3 1200 	ldrd	r1, r2, [r3]
    5c36:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
    5c3a:	4431      	add	r1, r6
    5c3c:	f00e fed9 	bl	149f2 <luaX_newstring>
    5c40:	6028      	str	r0, [r5, #0]
}
    5c42:	e7d1      	b.n	5be8 <read_long_string+0x94>
    5c44:	00017d8c 	.word	0x00017d8c
    5c48:	00018174 	.word	0x00018174
    5c4c:	0001817c 	.word	0x0001817c

00005c50 <llex>:
  seminfo->ts = luaX_newstring(ls, luaZ_buffer(ls->buff) + 1,
                                   luaZ_bufflen(ls->buff) - 2);
}


static int llex (LexState *ls, SemInfo *seminfo) {
    5c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  luaZ_resetbuffer(ls->buff);
    5c54:	2600      	movs	r6, #0
static int llex (LexState *ls, SemInfo *seminfo) {
    5c56:	4604      	mov	r4, r0
    5c58:	460f      	mov	r7, r1
            luaZ_resetbuffer(ls->buff);  /* previous call may dirty the buff. */
            break;
          }
        }
        /* else short comment */
        while (!currIsNewline(ls) && ls->current != EOZ)
    5c5a:	f644 0801 	movw	r8, #18433	; 0x4801
  luaZ_resetbuffer(ls->buff);
    5c5e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
static int llex (LexState *ls, SemInfo *seminfo) {
    5c60:	b085      	sub	sp, #20
  luaZ_resetbuffer(ls->buff);
    5c62:	605e      	str	r6, [r3, #4]
    switch (ls->current) {
    5c64:	6825      	ldr	r5, [r4, #0]
    5c66:	2d3e      	cmp	r5, #62	; 0x3e
    5c68:	f300 809a 	bgt.w	5da0 <llex+0x150>
    5c6c:	2d1f      	cmp	r5, #31
    5c6e:	dc2d      	bgt.n	5ccc <llex+0x7c>
    5c70:	1c6b      	adds	r3, r5, #1
    5c72:	2b0e      	cmp	r3, #14
    5c74:	d970      	bls.n	5d58 <llex+0x108>
      }
      case EOZ: {
        return TK_EOS;
      }
      default: {
        if (lislalpha(ls->current)) {  /* identifier or reserved word? */
    5c76:	4ea6      	ldr	r6, [pc, #664]	; (5f10 <llex+0x2c0>)
    5c78:	1973      	adds	r3, r6, r5
    5c7a:	785b      	ldrb	r3, [r3, #1]
    5c7c:	07da      	lsls	r2, r3, #31
    5c7e:	f140 83a6 	bpl.w	63ce <llex+0x77e>
          TString *ts;
          do {
            save_and_next(ls);
    5c82:	4620      	mov	r0, r4
    5c84:	6821      	ldr	r1, [r4, #0]
    5c86:	f7ff fe65 	bl	5954 <save>
    5c8a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5c8c:	6803      	ldr	r3, [r0, #0]
    5c8e:	1e5a      	subs	r2, r3, #1
    5c90:	6002      	str	r2, [r0, #0]
    5c92:	2b00      	cmp	r3, #0
    5c94:	f000 8398 	beq.w	63c8 <llex+0x778>
    5c98:	6843      	ldr	r3, [r0, #4]
    5c9a:	1c5a      	adds	r2, r3, #1
    5c9c:	6042      	str	r2, [r0, #4]
    5c9e:	7818      	ldrb	r0, [r3, #0]
    5ca0:	6020      	str	r0, [r4, #0]
          } while (lislalnum(ls->current));
    5ca2:	4430      	add	r0, r6
    5ca4:	7843      	ldrb	r3, [r0, #1]
    5ca6:	079b      	lsls	r3, r3, #30
    5ca8:	d1eb      	bne.n	5c82 <llex+0x32>
          ts = luaX_newstring(ls, luaZ_buffer(ls->buff),
    5caa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5cac:	4620      	mov	r0, r4
    5cae:	e9d3 1200 	ldrd	r1, r2, [r3]
    5cb2:	f00e fe9e 	bl	149f2 <luaX_newstring>
                                  luaZ_bufflen(ls->buff));
          seminfo->ts = ts;
    5cb6:	6038      	str	r0, [r7, #0]
          if (isreserved(ts))  /* reserved word? */
    5cb8:	7903      	ldrb	r3, [r0, #4]
    5cba:	2b04      	cmp	r3, #4
    5cbc:	f040 839e 	bne.w	63fc <llex+0x7ac>
    5cc0:	7985      	ldrb	r5, [r0, #6]
    5cc2:	2d00      	cmp	r5, #0
    5cc4:	f000 839a 	beq.w	63fc <llex+0x7ac>
            return ts->extra - 1 + FIRST_RESERVED;
    5cc8:	35ff      	adds	r5, #255	; 0xff
    5cca:	e0ff      	b.n	5ecc <llex+0x27c>
    switch (ls->current) {
    5ccc:	f1a5 0320 	sub.w	r3, r5, #32
    5cd0:	2b1e      	cmp	r3, #30
    5cd2:	d8d0      	bhi.n	5c76 <llex+0x26>
    5cd4:	a201      	add	r2, pc, #4	; (adr r2, 5cdc <llex+0x8c>)
    5cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5cda:	bf00      	nop
    5cdc:	00005ddd 	.word	0x00005ddd
    5ce0:	00005c77 	.word	0x00005c77
    5ce4:	00005fad 	.word	0x00005fad
    5ce8:	00005c77 	.word	0x00005c77
    5cec:	00005c77 	.word	0x00005c77
    5cf0:	00005c77 	.word	0x00005c77
    5cf4:	00005c77 	.word	0x00005c77
    5cf8:	00005fad 	.word	0x00005fad
    5cfc:	00005c77 	.word	0x00005c77
    5d00:	00005c77 	.word	0x00005c77
    5d04:	00005c77 	.word	0x00005c77
    5d08:	00005c77 	.word	0x00005c77
    5d0c:	00005c77 	.word	0x00005c77
    5d10:	00005df9 	.word	0x00005df9
    5d14:	0000636b 	.word	0x0000636b
    5d18:	00005f53 	.word	0x00005f53
    5d1c:	000063bb 	.word	0x000063bb
    5d20:	000063bb 	.word	0x000063bb
    5d24:	000063bb 	.word	0x000063bb
    5d28:	000063bb 	.word	0x000063bb
    5d2c:	000063bb 	.word	0x000063bb
    5d30:	000063bb 	.word	0x000063bb
    5d34:	000063bb 	.word	0x000063bb
    5d38:	000063bb 	.word	0x000063bb
    5d3c:	000063bb 	.word	0x000063bb
    5d40:	000063bb 	.word	0x000063bb
    5d44:	00005f85 	.word	0x00005f85
    5d48:	00005c77 	.word	0x00005c77
    5d4c:	00005edb 	.word	0x00005edb
    5d50:	00005ea7 	.word	0x00005ea7
    5d54:	00005f19 	.word	0x00005f19
    5d58:	2b0e      	cmp	r3, #14
    5d5a:	d88c      	bhi.n	5c76 <llex+0x26>
    5d5c:	a201      	add	r2, pc, #4	; (adr r2, 5d64 <llex+0x114>)
    5d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5d62:	bf00      	nop
    5d64:	000063eb 	.word	0x000063eb
    5d68:	00005c77 	.word	0x00005c77
    5d6c:	00005c77 	.word	0x00005c77
    5d70:	00005c77 	.word	0x00005c77
    5d74:	00005c77 	.word	0x00005c77
    5d78:	00005c77 	.word	0x00005c77
    5d7c:	00005c77 	.word	0x00005c77
    5d80:	00005c77 	.word	0x00005c77
    5d84:	00005c77 	.word	0x00005c77
    5d88:	00005c77 	.word	0x00005c77
    5d8c:	00005ddd 	.word	0x00005ddd
    5d90:	00005dd5 	.word	0x00005dd5
    5d94:	00005ddd 	.word	0x00005ddd
    5d98:	00005ddd 	.word	0x00005ddd
    5d9c:	00005dd5 	.word	0x00005dd5
    5da0:	2d5b      	cmp	r5, #91	; 0x5b
    5da2:	d06c      	beq.n	5e7e <llex+0x22e>
    5da4:	2d7e      	cmp	r5, #126	; 0x7e
    5da6:	f47f af66 	bne.w	5c76 <llex+0x26>
        next(ls);
    5daa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5dac:	6803      	ldr	r3, [r0, #0]
    5dae:	1e5a      	subs	r2, r3, #1
    5db0:	6002      	str	r2, [r0, #0]
    5db2:	2b00      	cmp	r3, #0
    5db4:	f000 80e3 	beq.w	5f7e <llex+0x32e>
    5db8:	6843      	ldr	r3, [r0, #4]
    5dba:	1c5a      	adds	r2, r3, #1
    5dbc:	6042      	str	r2, [r0, #4]
    5dbe:	7818      	ldrb	r0, [r3, #0]
    5dc0:	6020      	str	r0, [r4, #0]
        if (check_next1(ls, '=')) return TK_NE;  /* '~=' */
    5dc2:	213d      	movs	r1, #61	; 0x3d
    5dc4:	4620      	mov	r0, r4
    5dc6:	f00e fd8f 	bl	148e8 <check_next1>
    5dca:	2800      	cmp	r0, #0
    5dcc:	bf18      	it	ne
    5dce:	f44f 758e 	movne.w	r5, #284	; 0x11c
    5dd2:	e07b      	b.n	5ecc <llex+0x27c>
        inclinenumber(ls);
    5dd4:	4620      	mov	r0, r4
    5dd6:	f7ff fddd 	bl	5994 <inclinenumber>
        break;
    5dda:	e743      	b.n	5c64 <llex+0x14>
        next(ls);
    5ddc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5dde:	6803      	ldr	r3, [r0, #0]
    5de0:	1e5a      	subs	r2, r3, #1
    5de2:	6002      	str	r2, [r0, #0]
    5de4:	b12b      	cbz	r3, 5df2 <llex+0x1a2>
    5de6:	6843      	ldr	r3, [r0, #4]
    5de8:	1c5a      	adds	r2, r3, #1
    5dea:	6042      	str	r2, [r0, #4]
    5dec:	7818      	ldrb	r0, [r3, #0]
    5dee:	6020      	str	r0, [r4, #0]
        break;
    5df0:	e738      	b.n	5c64 <llex+0x14>
        next(ls);
    5df2:	f010 fd0f 	bl	16814 <luaZ_fill>
    5df6:	e7fa      	b.n	5dee <llex+0x19e>
        next(ls);
    5df8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5dfa:	6803      	ldr	r3, [r0, #0]
    5dfc:	1e5a      	subs	r2, r3, #1
    5dfe:	6002      	str	r2, [r0, #0]
    5e00:	b30b      	cbz	r3, 5e46 <llex+0x1f6>
    5e02:	6843      	ldr	r3, [r0, #4]
    5e04:	1c5a      	adds	r2, r3, #1
    5e06:	6042      	str	r2, [r0, #4]
    5e08:	7818      	ldrb	r0, [r3, #0]
        if (ls->current != '-') return '-';
    5e0a:	282d      	cmp	r0, #45	; 0x2d
        next(ls);
    5e0c:	6020      	str	r0, [r4, #0]
        if (ls->current != '-') return '-';
    5e0e:	d15d      	bne.n	5ecc <llex+0x27c>
        next(ls);
    5e10:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5e12:	6803      	ldr	r3, [r0, #0]
    5e14:	1e5a      	subs	r2, r3, #1
    5e16:	6002      	str	r2, [r0, #0]
    5e18:	b1c3      	cbz	r3, 5e4c <llex+0x1fc>
    5e1a:	6843      	ldr	r3, [r0, #4]
    5e1c:	1c5a      	adds	r2, r3, #1
    5e1e:	6042      	str	r2, [r0, #4]
    5e20:	7818      	ldrb	r0, [r3, #0]
        if (ls->current == '[') {  /* long comment? */
    5e22:	285b      	cmp	r0, #91	; 0x5b
        next(ls);
    5e24:	6020      	str	r0, [r4, #0]
        if (ls->current == '[') {  /* long comment? */
    5e26:	d11e      	bne.n	5e66 <llex+0x216>
          size_t sep = skip_sep(ls);
    5e28:	4620      	mov	r0, r4
    5e2a:	f00e fd73 	bl	14914 <skip_sep>
          luaZ_resetbuffer(ls->buff);  /* 'skip_sep' may dirty the buffer */
    5e2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          if (sep >= 2) {
    5e30:	2801      	cmp	r0, #1
          size_t sep = skip_sep(ls);
    5e32:	4602      	mov	r2, r0
          luaZ_resetbuffer(ls->buff);  /* 'skip_sep' may dirty the buffer */
    5e34:	605e      	str	r6, [r3, #4]
          if (sep >= 2) {
    5e36:	d916      	bls.n	5e66 <llex+0x216>
            read_long_string(ls, NULL, sep);  /* skip long comment */
    5e38:	2100      	movs	r1, #0
    5e3a:	4620      	mov	r0, r4
    5e3c:	f7ff fe8a 	bl	5b54 <read_long_string>
            luaZ_resetbuffer(ls->buff);  /* previous call may dirty the buff. */
    5e40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5e42:	605e      	str	r6, [r3, #4]
            break;
    5e44:	e70e      	b.n	5c64 <llex+0x14>
        next(ls);
    5e46:	f010 fce5 	bl	16814 <luaZ_fill>
    5e4a:	e7de      	b.n	5e0a <llex+0x1ba>
        next(ls);
    5e4c:	f010 fce2 	bl	16814 <luaZ_fill>
    5e50:	e7e7      	b.n	5e22 <llex+0x1d2>
          next(ls);  /* skip until end of line (or end of file) */
    5e52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5e54:	6803      	ldr	r3, [r0, #0]
    5e56:	1e5a      	subs	r2, r3, #1
    5e58:	6002      	str	r2, [r0, #0]
    5e5a:	b16b      	cbz	r3, 5e78 <llex+0x228>
    5e5c:	6843      	ldr	r3, [r0, #4]
    5e5e:	1c5a      	adds	r2, r3, #1
    5e60:	6042      	str	r2, [r0, #4]
    5e62:	7818      	ldrb	r0, [r3, #0]
    5e64:	6020      	str	r0, [r4, #0]
        while (!currIsNewline(ls) && ls->current != EOZ)
    5e66:	6823      	ldr	r3, [r4, #0]
    5e68:	3301      	adds	r3, #1
    5e6a:	2b0e      	cmp	r3, #14
    5e6c:	d8f1      	bhi.n	5e52 <llex+0x202>
    5e6e:	fa28 f303 	lsr.w	r3, r8, r3
    5e72:	07d9      	lsls	r1, r3, #31
    5e74:	d5ed      	bpl.n	5e52 <llex+0x202>
    5e76:	e6f5      	b.n	5c64 <llex+0x14>
          next(ls);  /* skip until end of line (or end of file) */
    5e78:	f010 fccc 	bl	16814 <luaZ_fill>
    5e7c:	e7f2      	b.n	5e64 <llex+0x214>
        size_t sep = skip_sep(ls);
    5e7e:	4620      	mov	r0, r4
    5e80:	f00e fd48 	bl	14914 <skip_sep>
        if (sep >= 2) {
    5e84:	2801      	cmp	r0, #1
        size_t sep = skip_sep(ls);
    5e86:	4602      	mov	r2, r0
        if (sep >= 2) {
    5e88:	d906      	bls.n	5e98 <llex+0x248>
          read_long_string(ls, seminfo, sep);
    5e8a:	4639      	mov	r1, r7
    5e8c:	4620      	mov	r0, r4
    5e8e:	f7ff fe61 	bl	5b54 <read_long_string>
        return TK_STRING;
    5e92:	f44f 7592 	mov.w	r5, #292	; 0x124
}
    5e96:	e019      	b.n	5ecc <llex+0x27c>
        else if (sep == 0)  /* '[=...' missing second bracket? */
    5e98:	b9c0      	cbnz	r0, 5ecc <llex+0x27c>
          lexerror(ls, "invalid long string delimiter", TK_STRING);
    5e9a:	f44f 7292 	mov.w	r2, #292	; 0x124
    5e9e:	491d      	ldr	r1, [pc, #116]	; (5f14 <llex+0x2c4>)
        lexerror(ls, "unfinished string", TK_STRING);
    5ea0:	4620      	mov	r0, r4
    5ea2:	f7ff fd29 	bl	58f8 <lexerror>
        next(ls);
    5ea6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5ea8:	6803      	ldr	r3, [r0, #0]
    5eaa:	1e5a      	subs	r2, r3, #1
    5eac:	6002      	str	r2, [r0, #0]
    5eae:	b18b      	cbz	r3, 5ed4 <llex+0x284>
    5eb0:	6843      	ldr	r3, [r0, #4]
    5eb2:	1c5a      	adds	r2, r3, #1
    5eb4:	6042      	str	r2, [r0, #4]
    5eb6:	7818      	ldrb	r0, [r3, #0]
    5eb8:	6020      	str	r0, [r4, #0]
        if (check_next1(ls, '=')) return TK_EQ;  /* '==' */
    5eba:	213d      	movs	r1, #61	; 0x3d
    5ebc:	4620      	mov	r0, r4
    5ebe:	f00e fd13 	bl	148e8 <check_next1>
    5ec2:	f240 1319 	movw	r3, #281	; 0x119
        else if (check_next1(ls, '<')) return TK_SHL;  /* '<<' */
    5ec6:	2800      	cmp	r0, #0
    5ec8:	bf18      	it	ne
    5eca:	461d      	movne	r5, r3
          return c;
        }
      }
    }
  }
}
    5ecc:	4628      	mov	r0, r5
    5ece:	b005      	add	sp, #20
    5ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        next(ls);
    5ed4:	f010 fc9e 	bl	16814 <luaZ_fill>
    5ed8:	e7ee      	b.n	5eb8 <llex+0x268>
        next(ls);
    5eda:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5edc:	6803      	ldr	r3, [r0, #0]
    5ede:	1e5a      	subs	r2, r3, #1
    5ee0:	6002      	str	r2, [r0, #0]
    5ee2:	b193      	cbz	r3, 5f0a <llex+0x2ba>
    5ee4:	6843      	ldr	r3, [r0, #4]
    5ee6:	1c5a      	adds	r2, r3, #1
    5ee8:	6042      	str	r2, [r0, #4]
    5eea:	7818      	ldrb	r0, [r3, #0]
    5eec:	6020      	str	r0, [r4, #0]
        if (check_next1(ls, '=')) return TK_LE;  /* '<=' */
    5eee:	213d      	movs	r1, #61	; 0x3d
    5ef0:	4620      	mov	r0, r4
    5ef2:	f00e fcf9 	bl	148e8 <check_next1>
    5ef6:	2800      	cmp	r0, #0
    5ef8:	f040 827a 	bne.w	63f0 <llex+0x7a0>
        else if (check_next1(ls, '<')) return TK_SHL;  /* '<<' */
    5efc:	213c      	movs	r1, #60	; 0x3c
    5efe:	4620      	mov	r0, r4
    5f00:	f00e fcf2 	bl	148e8 <check_next1>
    5f04:	f240 131d 	movw	r3, #285	; 0x11d
    5f08:	e7dd      	b.n	5ec6 <llex+0x276>
        next(ls);
    5f0a:	f010 fc83 	bl	16814 <luaZ_fill>
    5f0e:	e7ed      	b.n	5eec <llex+0x29c>
    5f10:	00017e30 	.word	0x00017e30
    5f14:	000181a5 	.word	0x000181a5
        next(ls);
    5f18:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5f1a:	6803      	ldr	r3, [r0, #0]
    5f1c:	1e5a      	subs	r2, r3, #1
    5f1e:	6002      	str	r2, [r0, #0]
    5f20:	b1a3      	cbz	r3, 5f4c <llex+0x2fc>
    5f22:	6843      	ldr	r3, [r0, #4]
    5f24:	1c5a      	adds	r2, r3, #1
    5f26:	6042      	str	r2, [r0, #4]
    5f28:	7818      	ldrb	r0, [r3, #0]
    5f2a:	6020      	str	r0, [r4, #0]
        if (check_next1(ls, '=')) return TK_GE;  /* '>=' */
    5f2c:	213d      	movs	r1, #61	; 0x3d
    5f2e:	4620      	mov	r0, r4
    5f30:	f00e fcda 	bl	148e8 <check_next1>
    5f34:	2800      	cmp	r0, #0
    5f36:	f040 825e 	bne.w	63f6 <llex+0x7a6>
        else if (check_next1(ls, '>')) return TK_SHR;  /* '>>' */
    5f3a:	213e      	movs	r1, #62	; 0x3e
    5f3c:	4620      	mov	r0, r4
    5f3e:	f00e fcd3 	bl	148e8 <check_next1>
    5f42:	2800      	cmp	r0, #0
    5f44:	bf18      	it	ne
    5f46:	f44f 758f 	movne.w	r5, #286	; 0x11e
    5f4a:	e7bf      	b.n	5ecc <llex+0x27c>
        next(ls);
    5f4c:	f010 fc62 	bl	16814 <luaZ_fill>
    5f50:	e7eb      	b.n	5f2a <llex+0x2da>
        next(ls);
    5f52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5f54:	6803      	ldr	r3, [r0, #0]
    5f56:	1e5a      	subs	r2, r3, #1
    5f58:	6002      	str	r2, [r0, #0]
    5f5a:	b16b      	cbz	r3, 5f78 <llex+0x328>
    5f5c:	6843      	ldr	r3, [r0, #4]
    5f5e:	1c5a      	adds	r2, r3, #1
    5f60:	6042      	str	r2, [r0, #4]
    5f62:	7818      	ldrb	r0, [r3, #0]
    5f64:	6020      	str	r0, [r4, #0]
        if (check_next1(ls, '/')) return TK_IDIV;  /* '//' */
    5f66:	212f      	movs	r1, #47	; 0x2f
    5f68:	4620      	mov	r0, r4
    5f6a:	f00e fcbd 	bl	148e8 <check_next1>
    5f6e:	2800      	cmp	r0, #0
    5f70:	bf18      	it	ne
    5f72:	f44f 758b 	movne.w	r5, #278	; 0x116
    5f76:	e7a9      	b.n	5ecc <llex+0x27c>
        next(ls);
    5f78:	f010 fc4c 	bl	16814 <luaZ_fill>
    5f7c:	e7f2      	b.n	5f64 <llex+0x314>
        next(ls);
    5f7e:	f010 fc49 	bl	16814 <luaZ_fill>
    5f82:	e71d      	b.n	5dc0 <llex+0x170>
        next(ls);
    5f84:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5f86:	6803      	ldr	r3, [r0, #0]
    5f88:	1e5a      	subs	r2, r3, #1
    5f8a:	6002      	str	r2, [r0, #0]
    5f8c:	b15b      	cbz	r3, 5fa6 <llex+0x356>
    5f8e:	6843      	ldr	r3, [r0, #4]
    5f90:	1c5a      	adds	r2, r3, #1
    5f92:	6042      	str	r2, [r0, #4]
    5f94:	7818      	ldrb	r0, [r3, #0]
    5f96:	6020      	str	r0, [r4, #0]
        if (check_next1(ls, ':')) return TK_DBCOLON;  /* '::' */
    5f98:	213a      	movs	r1, #58	; 0x3a
    5f9a:	4620      	mov	r0, r4
    5f9c:	f00e fca4 	bl	148e8 <check_next1>
    5fa0:	f240 131f 	movw	r3, #287	; 0x11f
    5fa4:	e78f      	b.n	5ec6 <llex+0x276>
        next(ls);
    5fa6:	f010 fc35 	bl	16814 <luaZ_fill>
    5faa:	e7f4      	b.n	5f96 <llex+0x346>
  save_and_next(ls);  /* keep delimiter (for error messages) */
    5fac:	4620      	mov	r0, r4
    5fae:	4629      	mov	r1, r5
    5fb0:	f7ff fcd0 	bl	5954 <save>
    5fb4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5fb6:	6803      	ldr	r3, [r0, #0]
    5fb8:	1e5a      	subs	r2, r3, #1
    5fba:	6002      	str	r2, [r0, #0]
    5fbc:	b32b      	cbz	r3, 600a <llex+0x3ba>
    5fbe:	6843      	ldr	r3, [r0, #4]
    5fc0:	1c5a      	adds	r2, r3, #1
    5fc2:	6042      	str	r2, [r0, #4]
    5fc4:	7818      	ldrb	r0, [r3, #0]
            esccheck(ls, lisdigit(ls->current), "invalid escape sequence");
    5fc6:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 629c <llex+0x64c>
    5fca:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 62a0 <llex+0x650>
  save_and_next(ls);  /* keep delimiter (for error messages) */
    5fce:	6020      	str	r0, [r4, #0]
  while (ls->current != del) {
    5fd0:	6821      	ldr	r1, [r4, #0]
    5fd2:	428d      	cmp	r5, r1
    5fd4:	d11c      	bne.n	6010 <llex+0x3c0>
  save_and_next(ls);  /* skip delimiter */
    5fd6:	4620      	mov	r0, r4
    5fd8:	4629      	mov	r1, r5
    5fda:	f7ff fcbb 	bl	5954 <save>
    5fde:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5fe0:	6803      	ldr	r3, [r0, #0]
    5fe2:	1e5a      	subs	r2, r3, #1
    5fe4:	6002      	str	r2, [r0, #0]
    5fe6:	2b00      	cmp	r3, #0
    5fe8:	f000 81bc 	beq.w	6364 <llex+0x714>
    5fec:	6843      	ldr	r3, [r0, #4]
    5fee:	1c5a      	adds	r2, r3, #1
    5ff0:	6042      	str	r2, [r0, #4]
    5ff2:	7818      	ldrb	r0, [r3, #0]
  seminfo->ts = luaX_newstring(ls, luaZ_buffer(ls->buff) + 1,
    5ff4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  save_and_next(ls);  /* skip delimiter */
    5ff6:	6020      	str	r0, [r4, #0]
  seminfo->ts = luaX_newstring(ls, luaZ_buffer(ls->buff) + 1,
    5ff8:	e9d3 1200 	ldrd	r1, r2, [r3]
    5ffc:	4620      	mov	r0, r4
    5ffe:	3a02      	subs	r2, #2
    6000:	3101      	adds	r1, #1
    6002:	f00e fcf6 	bl	149f2 <luaX_newstring>
    6006:	6038      	str	r0, [r7, #0]
    6008:	e743      	b.n	5e92 <llex+0x242>
  save_and_next(ls);  /* keep delimiter (for error messages) */
    600a:	f010 fc03 	bl	16814 <luaZ_fill>
    600e:	e7da      	b.n	5fc6 <llex+0x376>
    switch (ls->current) {
    6010:	295c      	cmp	r1, #92	; 0x5c
    6012:	d00f      	beq.n	6034 <llex+0x3e4>
    6014:	f300 8195 	bgt.w	6342 <llex+0x6f2>
    6018:	290a      	cmp	r1, #10
    601a:	d008      	beq.n	602e <llex+0x3de>
    601c:	290d      	cmp	r1, #13
    601e:	d006      	beq.n	602e <llex+0x3de>
    6020:	1c4a      	adds	r2, r1, #1
    6022:	f040 818e 	bne.w	6342 <llex+0x6f2>
        lexerror(ls, "unfinished string", TK_EOS);
    6026:	f44f 7290 	mov.w	r2, #288	; 0x120
        lexerror(ls, "unfinished string", TK_STRING);
    602a:	499e      	ldr	r1, [pc, #632]	; (62a4 <llex+0x654>)
    602c:	e738      	b.n	5ea0 <llex+0x250>
    602e:	f44f 7292 	mov.w	r2, #292	; 0x124
    6032:	e7fa      	b.n	602a <llex+0x3da>
        save_and_next(ls);  /* keep '\\' for error messages */
    6034:	4620      	mov	r0, r4
    6036:	f7ff fc8d 	bl	5954 <save>
    603a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    603c:	6803      	ldr	r3, [r0, #0]
    603e:	1e5a      	subs	r2, r3, #1
    6040:	6002      	str	r2, [r0, #0]
    6042:	2b00      	cmp	r3, #0
    6044:	d047      	beq.n	60d6 <llex+0x486>
    6046:	6843      	ldr	r3, [r0, #4]
    6048:	1c5a      	adds	r2, r3, #1
    604a:	6042      	str	r2, [r0, #4]
    604c:	781e      	ldrb	r6, [r3, #0]
        switch (ls->current) {
    604e:	2e7a      	cmp	r6, #122	; 0x7a
        save_and_next(ls);  /* keep '\\' for error messages */
    6050:	6026      	str	r6, [r4, #0]
        switch (ls->current) {
    6052:	dc08      	bgt.n	6066 <llex+0x416>
    6054:	2e5b      	cmp	r6, #91	; 0x5b
    6056:	dc42      	bgt.n	60de <llex+0x48e>
    6058:	2e0a      	cmp	r6, #10
    605a:	f000 809a 	beq.w	6192 <llex+0x542>
    605e:	f300 8091 	bgt.w	6184 <llex+0x534>
    6062:	1c73      	adds	r3, r6, #1
    6064:	d0b4      	beq.n	5fd0 <llex+0x380>
            esccheck(ls, lisdigit(ls->current), "invalid escape sequence");
    6066:	4446      	add	r6, r8
    6068:	7871      	ldrb	r1, [r6, #1]
  for (i = 0; i < 3 && lisdigit(ls->current); i++) {  /* read up to 3 digits */
    606a:	2600      	movs	r6, #0
            esccheck(ls, lisdigit(ls->current), "invalid escape sequence");
    606c:	4652      	mov	r2, sl
    606e:	4620      	mov	r0, r4
    6070:	f001 0102 	and.w	r1, r1, #2
    6074:	f00e fc9c 	bl	149b0 <esccheck>
  int r = 0;  /* result accumulator */
    6078:	46b1      	mov	r9, r6
    r = 10*r + ls->current - '0';
    607a:	f04f 0b0a 	mov.w	fp, #10
  for (i = 0; i < 3 && lisdigit(ls->current); i++) {  /* read up to 3 digits */
    607e:	6821      	ldr	r1, [r4, #0]
    6080:	eb08 0301 	add.w	r3, r8, r1
    6084:	785b      	ldrb	r3, [r3, #1]
    6086:	0798      	lsls	r0, r3, #30
    6088:	d517      	bpl.n	60ba <llex+0x46a>
    r = 10*r + ls->current - '0';
    608a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    save_and_next(ls);
    608e:	4620      	mov	r0, r4
    r = 10*r + ls->current - '0';
    6090:	fb0b 3606 	mla	r6, fp, r6, r3
    save_and_next(ls);
    6094:	f7ff fc5e 	bl	5954 <save>
    6098:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    609a:	6803      	ldr	r3, [r0, #0]
    609c:	1e5a      	subs	r2, r3, #1
    609e:	6002      	str	r2, [r0, #0]
    60a0:	2b00      	cmp	r3, #0
    60a2:	f000 8144 	beq.w	632e <llex+0x6de>
    60a6:	6843      	ldr	r3, [r0, #4]
    60a8:	1c5a      	adds	r2, r3, #1
    60aa:	6042      	str	r2, [r0, #4]
    60ac:	7818      	ldrb	r0, [r3, #0]
  for (i = 0; i < 3 && lisdigit(ls->current); i++) {  /* read up to 3 digits */
    60ae:	f109 0901 	add.w	r9, r9, #1
    60b2:	f1b9 0f03 	cmp.w	r9, #3
    save_and_next(ls);
    60b6:	6020      	str	r0, [r4, #0]
  for (i = 0; i < 3 && lisdigit(ls->current); i++) {  /* read up to 3 digits */
    60b8:	d1e1      	bne.n	607e <llex+0x42e>
  esccheck(ls, r <= UCHAR_MAX, "decimal escape too large");
    60ba:	2eff      	cmp	r6, #255	; 0xff
    60bc:	4a7a      	ldr	r2, [pc, #488]	; (62a8 <llex+0x658>)
    60be:	bfcc      	ite	gt
    60c0:	2100      	movgt	r1, #0
    60c2:	2101      	movle	r1, #1
    60c4:	4620      	mov	r0, r4
    60c6:	f00e fc73 	bl	149b0 <esccheck>
  luaZ_buffremove(ls->buff, i);  /* remove read digits from buffer */
    60ca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    60cc:	6853      	ldr	r3, [r2, #4]
    60ce:	eba3 0309 	sub.w	r3, r3, r9
    60d2:	6053      	str	r3, [r2, #4]
            goto only_save;
    60d4:	e061      	b.n	619a <llex+0x54a>
        save_and_next(ls);  /* keep '\\' for error messages */
    60d6:	f010 fb9d 	bl	16814 <luaZ_fill>
    60da:	4606      	mov	r6, r0
    60dc:	e7b7      	b.n	604e <llex+0x3fe>
        switch (ls->current) {
    60de:	f1a6 035c 	sub.w	r3, r6, #92	; 0x5c
    60e2:	2b1e      	cmp	r3, #30
    60e4:	d8bf      	bhi.n	6066 <llex+0x416>
    60e6:	a201      	add	r2, pc, #4	; (adr r2, 60ec <llex+0x49c>)
    60e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    60ec:	0000616b 	.word	0x0000616b
    60f0:	00006067 	.word	0x00006067
    60f4:	00006067 	.word	0x00006067
    60f8:	00006067 	.word	0x00006067
    60fc:	00006067 	.word	0x00006067
    6100:	00006335 	.word	0x00006335
    6104:	00006169 	.word	0x00006169
    6108:	00006067 	.word	0x00006067
    610c:	00006067 	.word	0x00006067
    6110:	00006067 	.word	0x00006067
    6114:	00006339 	.word	0x00006339
    6118:	00006067 	.word	0x00006067
    611c:	00006067 	.word	0x00006067
    6120:	00006067 	.word	0x00006067
    6124:	00006067 	.word	0x00006067
    6128:	00006067 	.word	0x00006067
    612c:	00006067 	.word	0x00006067
    6130:	00006067 	.word	0x00006067
    6134:	000061ad 	.word	0x000061ad
    6138:	00006067 	.word	0x00006067
    613c:	00006067 	.word	0x00006067
    6140:	00006067 	.word	0x00006067
    6144:	000061b1 	.word	0x000061b1
    6148:	00006067 	.word	0x00006067
    614c:	000061b5 	.word	0x000061b5
    6150:	000061d7 	.word	0x000061d7
    6154:	000061b9 	.word	0x000061b9
    6158:	00006067 	.word	0x00006067
    615c:	000061bd 	.word	0x000061bd
    6160:	00006067 	.word	0x00006067
    6164:	000062ef 	.word	0x000062ef
          case 'b': c = '\b'; goto read_save;
    6168:	2608      	movs	r6, #8
         next(ls);
    616a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    616c:	6803      	ldr	r3, [r0, #0]
    616e:	1e5a      	subs	r2, r3, #1
    6170:	6002      	str	r2, [r0, #0]
    6172:	2b00      	cmp	r3, #0
    6174:	f000 80e2 	beq.w	633c <llex+0x6ec>
    6178:	6843      	ldr	r3, [r0, #4]
    617a:	1c5a      	adds	r2, r3, #1
    617c:	6042      	str	r2, [r0, #4]
    617e:	7818      	ldrb	r0, [r3, #0]
    6180:	6020      	str	r0, [r4, #0]
    6182:	e00a      	b.n	619a <llex+0x54a>
        switch (ls->current) {
    6184:	2e22      	cmp	r6, #34	; 0x22
    6186:	d0f0      	beq.n	616a <llex+0x51a>
    6188:	2e27      	cmp	r6, #39	; 0x27
    618a:	d0ee      	beq.n	616a <llex+0x51a>
    618c:	2e0d      	cmp	r6, #13
    618e:	f47f af6a 	bne.w	6066 <llex+0x416>
            inclinenumber(ls); c = '\n'; goto only_save;
    6192:	4620      	mov	r0, r4
    6194:	f7ff fbfe 	bl	5994 <inclinenumber>
    6198:	260a      	movs	r6, #10
         luaZ_buffremove(ls->buff, 1);  /* remove '\\' */
    619a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
         save(ls, c);
    619c:	4631      	mov	r1, r6
         luaZ_buffremove(ls->buff, 1);  /* remove '\\' */
    619e:	6853      	ldr	r3, [r2, #4]
         save(ls, c);
    61a0:	4620      	mov	r0, r4
         luaZ_buffremove(ls->buff, 1);  /* remove '\\' */
    61a2:	3b01      	subs	r3, #1
    61a4:	6053      	str	r3, [r2, #4]
         save(ls, c);
    61a6:	f7ff fbd5 	bl	5954 <save>
    61aa:	e711      	b.n	5fd0 <llex+0x380>
          case 'n': c = '\n'; goto read_save;
    61ac:	260a      	movs	r6, #10
    61ae:	e7dc      	b.n	616a <llex+0x51a>
          case 'r': c = '\r'; goto read_save;
    61b0:	260d      	movs	r6, #13
    61b2:	e7da      	b.n	616a <llex+0x51a>
          case 't': c = '\t'; goto read_save;
    61b4:	2609      	movs	r6, #9
    61b6:	e7d8      	b.n	616a <llex+0x51a>
          case 'v': c = '\v'; goto read_save;
    61b8:	260b      	movs	r6, #11
    61ba:	e7d6      	b.n	616a <llex+0x51a>
  int r = gethexa(ls);
    61bc:	4620      	mov	r0, r4
    61be:	f7ff fc1b 	bl	59f8 <gethexa>
  r = (r << 4) + gethexa(ls);
    61c2:	0106      	lsls	r6, r0, #4
    61c4:	4620      	mov	r0, r4
    61c6:	f7ff fc17 	bl	59f8 <gethexa>
  luaZ_buffremove(ls->buff, 2);  /* remove saved chars from buffer */
    61ca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  r = (r << 4) + gethexa(ls);
    61cc:	4406      	add	r6, r0
  luaZ_buffremove(ls->buff, 2);  /* remove saved chars from buffer */
    61ce:	6853      	ldr	r3, [r2, #4]
    61d0:	3b02      	subs	r3, #2
    61d2:	6053      	str	r3, [r2, #4]
          case 'x': c = readhexaesc(ls); goto read_save;
    61d4:	e7c9      	b.n	616a <llex+0x51a>
  save_and_next(ls);  /* skip 'u' */
    61d6:	4620      	mov	r0, r4
    61d8:	2175      	movs	r1, #117	; 0x75
    61da:	f7ff fbbb 	bl	5954 <save>
    61de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    61e0:	6803      	ldr	r3, [r0, #0]
    61e2:	1e5a      	subs	r2, r3, #1
    61e4:	6002      	str	r2, [r0, #0]
    61e6:	2b00      	cmp	r3, #0
    61e8:	d054      	beq.n	6294 <llex+0x644>
    61ea:	6843      	ldr	r3, [r0, #4]
    61ec:	1c5a      	adds	r2, r3, #1
    61ee:	6042      	str	r2, [r0, #4]
    61f0:	7818      	ldrb	r0, [r3, #0]
    61f2:	6020      	str	r0, [r4, #0]
  esccheck(ls, ls->current == '{', "missing '{'");
    61f4:	387b      	subs	r0, #123	; 0x7b
    61f6:	4241      	negs	r1, r0
    61f8:	4141      	adcs	r1, r0
    61fa:	4a2c      	ldr	r2, [pc, #176]	; (62ac <llex+0x65c>)
    61fc:	4620      	mov	r0, r4
    61fe:	f00e fbd7 	bl	149b0 <esccheck>
  r = gethexa(ls);  /* must have at least one digit */
    6202:	4620      	mov	r0, r4
    6204:	f7ff fbf8 	bl	59f8 <gethexa>
  int i = 4;  /* chars to be removed: '\', 'u', '{', and first digit */
    6208:	f04f 0904 	mov.w	r9, #4
  r = gethexa(ls);  /* must have at least one digit */
    620c:	4606      	mov	r6, r0
    esccheck(ls, r <= (0x7FFFFFFFu >> 4), "UTF-8 value too large");
    620e:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 62b0 <llex+0x660>
  while (cast_void(save_and_next(ls)), lisxdigit(ls->current)) {
    6212:	4620      	mov	r0, r4
    6214:	6821      	ldr	r1, [r4, #0]
    6216:	f7ff fb9d 	bl	5954 <save>
    621a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    621c:	6803      	ldr	r3, [r0, #0]
    621e:	1e5a      	subs	r2, r3, #1
    6220:	6002      	str	r2, [r0, #0]
    6222:	2b00      	cmp	r3, #0
    6224:	d05c      	beq.n	62e0 <llex+0x690>
    6226:	6843      	ldr	r3, [r0, #4]
    6228:	1c5a      	adds	r2, r3, #1
    622a:	6042      	str	r2, [r0, #4]
    622c:	781b      	ldrb	r3, [r3, #0]
    622e:	eb08 0203 	add.w	r2, r8, r3
    6232:	7852      	ldrb	r2, [r2, #1]
    6234:	6023      	str	r3, [r4, #0]
    6236:	06d2      	lsls	r2, r2, #27
    6238:	d43e      	bmi.n	62b8 <llex+0x668>
  esccheck(ls, ls->current == '}', "missing '}'");
    623a:	f1a3 0c7d 	sub.w	ip, r3, #125	; 0x7d
    623e:	f1dc 0100 	rsbs	r1, ip, #0
    6242:	4620      	mov	r0, r4
    6244:	4a1b      	ldr	r2, [pc, #108]	; (62b4 <llex+0x664>)
    6246:	eb41 010c 	adc.w	r1, r1, ip
    624a:	f00e fbb1 	bl	149b0 <esccheck>
  next(ls);  /* skip '}' */
    624e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    6250:	6803      	ldr	r3, [r0, #0]
    6252:	1e5a      	subs	r2, r3, #1
    6254:	6002      	str	r2, [r0, #0]
    6256:	2b00      	cmp	r3, #0
    6258:	d046      	beq.n	62e8 <llex+0x698>
    625a:	6843      	ldr	r3, [r0, #4]
    625c:	1c5a      	adds	r2, r3, #1
    625e:	6042      	str	r2, [r0, #4]
    6260:	7818      	ldrb	r0, [r3, #0]
  luaZ_buffremove(ls->buff, i);  /* remove saved chars from buffer */
    6262:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  next(ls);  /* skip '}' */
    6264:	6020      	str	r0, [r4, #0]
  luaZ_buffremove(ls->buff, i);  /* remove saved chars from buffer */
    6266:	6853      	ldr	r3, [r2, #4]
  int n = luaO_utf8esc(buff, readutf8esc(ls));
    6268:	4631      	mov	r1, r6
  luaZ_buffremove(ls->buff, i);  /* remove saved chars from buffer */
    626a:	eba3 0309 	sub.w	r3, r3, r9
    626e:	6053      	str	r3, [r2, #4]
  int n = luaO_utf8esc(buff, readutf8esc(ls));
    6270:	a802      	add	r0, sp, #8
    6272:	f00e fe0d 	bl	14e90 <luaO_utf8esc>
    6276:	4606      	mov	r6, r0
  for (; n > 0; n--)  /* add 'buff' to string */
    6278:	f1c0 0908 	rsb	r9, r0, #8
    627c:	ab02      	add	r3, sp, #8
    627e:	4499      	add	r9, r3
    6280:	2e00      	cmp	r6, #0
    6282:	f77f aea5 	ble.w	5fd0 <llex+0x380>
    save(ls, buff[UTF8BUFFSZ - n]);
    6286:	4620      	mov	r0, r4
    6288:	f819 1b01 	ldrb.w	r1, [r9], #1
    628c:	f7ff fb62 	bl	5954 <save>
  for (; n > 0; n--)  /* add 'buff' to string */
    6290:	3e01      	subs	r6, #1
    6292:	e7f5      	b.n	6280 <llex+0x630>
  save_and_next(ls);  /* skip 'u' */
    6294:	f010 fabe 	bl	16814 <luaZ_fill>
    6298:	e7ab      	b.n	61f2 <llex+0x5a2>
    629a:	bf00      	nop
    629c:	00017e30 	.word	0x00017e30
    62a0:	00018203 	.word	0x00018203
    62a4:	000181c3 	.word	0x000181c3
    62a8:	0001821b 	.word	0x0001821b
    62ac:	000181d5 	.word	0x000181d5
    62b0:	000181e1 	.word	0x000181e1
    62b4:	000181f7 	.word	0x000181f7
    62b8:	9301      	str	r3, [sp, #4]
    esccheck(ls, r <= (0x7FFFFFFFu >> 4), "UTF-8 value too large");
    62ba:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
    62be:	429e      	cmp	r6, r3
    62c0:	465a      	mov	r2, fp
    62c2:	bf8c      	ite	hi
    62c4:	2100      	movhi	r1, #0
    62c6:	2101      	movls	r1, #1
    62c8:	4620      	mov	r0, r4
    62ca:	f00e fb71 	bl	149b0 <esccheck>
    r = (r << 4) + luaO_hexavalue(ls->current);
    62ce:	9b01      	ldr	r3, [sp, #4]
    62d0:	0136      	lsls	r6, r6, #4
    62d2:	4618      	mov	r0, r3
    62d4:	f000 f946 	bl	6564 <luaO_hexavalue>
    i++;
    62d8:	f109 0901 	add.w	r9, r9, #1
    r = (r << 4) + luaO_hexavalue(ls->current);
    62dc:	4406      	add	r6, r0
    62de:	e798      	b.n	6212 <llex+0x5c2>
  while (cast_void(save_and_next(ls)), lisxdigit(ls->current)) {
    62e0:	f010 fa98 	bl	16814 <luaZ_fill>
    62e4:	4603      	mov	r3, r0
    62e6:	e7a2      	b.n	622e <llex+0x5de>
  next(ls);  /* skip '}' */
    62e8:	f010 fa94 	bl	16814 <luaZ_fill>
    62ec:	e7b9      	b.n	6262 <llex+0x612>
            luaZ_buffremove(ls->buff, 1);  /* remove '\\' */
    62ee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    62f0:	6853      	ldr	r3, [r2, #4]
    62f2:	3b01      	subs	r3, #1
    62f4:	6053      	str	r3, [r2, #4]
              else next(ls);
    62f6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    62f8:	6803      	ldr	r3, [r0, #0]
    62fa:	1e5a      	subs	r2, r3, #1
    62fc:	6002      	str	r2, [r0, #0]
    62fe:	b19b      	cbz	r3, 6328 <llex+0x6d8>
    6300:	6843      	ldr	r3, [r0, #4]
    6302:	1c5a      	adds	r2, r3, #1
    6304:	6042      	str	r2, [r0, #4]
    6306:	7818      	ldrb	r0, [r3, #0]
    6308:	6020      	str	r0, [r4, #0]
    630a:	e006      	b.n	631a <llex+0x6ca>
              if (currIsNewline(ls)) inclinenumber(ls);
    630c:	2b0a      	cmp	r3, #10
    630e:	d001      	beq.n	6314 <llex+0x6c4>
    6310:	2b0d      	cmp	r3, #13
    6312:	d1f0      	bne.n	62f6 <llex+0x6a6>
    6314:	4620      	mov	r0, r4
    6316:	f7ff fb3d 	bl	5994 <inclinenumber>
            while (lisspace(ls->current)) {
    631a:	6823      	ldr	r3, [r4, #0]
    631c:	eb08 0203 	add.w	r2, r8, r3
    6320:	7852      	ldrb	r2, [r2, #1]
    6322:	0716      	lsls	r6, r2, #28
    6324:	d4f2      	bmi.n	630c <llex+0x6bc>
    6326:	e653      	b.n	5fd0 <llex+0x380>
              else next(ls);
    6328:	f010 fa74 	bl	16814 <luaZ_fill>
    632c:	e7ec      	b.n	6308 <llex+0x6b8>
    save_and_next(ls);
    632e:	f010 fa71 	bl	16814 <luaZ_fill>
    6332:	e6bc      	b.n	60ae <llex+0x45e>
          case 'a': c = '\a'; goto read_save;
    6334:	2607      	movs	r6, #7
    6336:	e718      	b.n	616a <llex+0x51a>
        switch (ls->current) {
    6338:	260c      	movs	r6, #12
    633a:	e716      	b.n	616a <llex+0x51a>
         next(ls);
    633c:	f010 fa6a 	bl	16814 <luaZ_fill>
    6340:	e71e      	b.n	6180 <llex+0x530>
        save_and_next(ls);
    6342:	4620      	mov	r0, r4
    6344:	f7ff fb06 	bl	5954 <save>
    6348:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    634a:	6803      	ldr	r3, [r0, #0]
    634c:	1e5a      	subs	r2, r3, #1
    634e:	6002      	str	r2, [r0, #0]
    6350:	b12b      	cbz	r3, 635e <llex+0x70e>
    6352:	6843      	ldr	r3, [r0, #4]
    6354:	1c5a      	adds	r2, r3, #1
    6356:	6042      	str	r2, [r0, #4]
    6358:	7818      	ldrb	r0, [r3, #0]
    635a:	6020      	str	r0, [r4, #0]
    635c:	e638      	b.n	5fd0 <llex+0x380>
    635e:	f010 fa59 	bl	16814 <luaZ_fill>
    6362:	e7fa      	b.n	635a <llex+0x70a>
  save_and_next(ls);  /* skip delimiter */
    6364:	f010 fa56 	bl	16814 <luaZ_fill>
    6368:	e644      	b.n	5ff4 <llex+0x3a4>
        save_and_next(ls);
    636a:	4620      	mov	r0, r4
    636c:	212e      	movs	r1, #46	; 0x2e
    636e:	f7ff faf1 	bl	5954 <save>
    6372:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    6374:	6803      	ldr	r3, [r0, #0]
    6376:	1e5a      	subs	r2, r3, #1
    6378:	6002      	str	r2, [r0, #0]
    637a:	b1a3      	cbz	r3, 63a6 <llex+0x756>
    637c:	6843      	ldr	r3, [r0, #4]
    637e:	1c5a      	adds	r2, r3, #1
    6380:	6042      	str	r2, [r0, #4]
    6382:	7818      	ldrb	r0, [r3, #0]
    6384:	6020      	str	r0, [r4, #0]
        if (check_next1(ls, '.')) {
    6386:	212e      	movs	r1, #46	; 0x2e
    6388:	4620      	mov	r0, r4
    638a:	f00e faad 	bl	148e8 <check_next1>
    638e:	b168      	cbz	r0, 63ac <llex+0x75c>
          if (check_next1(ls, '.'))
    6390:	212e      	movs	r1, #46	; 0x2e
    6392:	4620      	mov	r0, r4
    6394:	f00e faa8 	bl	148e8 <check_next1>
          else return TK_CONCAT;   /* '..' */
    6398:	2800      	cmp	r0, #0
    639a:	f240 1517 	movw	r5, #279	; 0x117
    639e:	bf18      	it	ne
    63a0:	f44f 758c 	movne.w	r5, #280	; 0x118
    63a4:	e592      	b.n	5ecc <llex+0x27c>
        save_and_next(ls);
    63a6:	f010 fa35 	bl	16814 <luaZ_fill>
    63aa:	e7eb      	b.n	6384 <llex+0x734>
        else if (!lisdigit(ls->current)) return '.';
    63ac:	6822      	ldr	r2, [r4, #0]
    63ae:	4b15      	ldr	r3, [pc, #84]	; (6404 <llex+0x7b4>)
    63b0:	4413      	add	r3, r2
    63b2:	785b      	ldrb	r3, [r3, #1]
    63b4:	0799      	lsls	r1, r3, #30
    63b6:	f57f ad89 	bpl.w	5ecc <llex+0x27c>
        return read_numeral(ls, seminfo);
    63ba:	4639      	mov	r1, r7
    63bc:	4620      	mov	r0, r4
}
    63be:	b005      	add	sp, #20
    63c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return read_numeral(ls, seminfo);
    63c4:	f7ff bb3e 	b.w	5a44 <read_numeral>
            save_and_next(ls);
    63c8:	f010 fa24 	bl	16814 <luaZ_fill>
    63cc:	e468      	b.n	5ca0 <llex+0x50>
          next(ls);
    63ce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    63d0:	6803      	ldr	r3, [r0, #0]
    63d2:	1e5a      	subs	r2, r3, #1
    63d4:	6002      	str	r2, [r0, #0]
    63d6:	b12b      	cbz	r3, 63e4 <llex+0x794>
    63d8:	6843      	ldr	r3, [r0, #4]
    63da:	1c5a      	adds	r2, r3, #1
    63dc:	6042      	str	r2, [r0, #4]
    63de:	7818      	ldrb	r0, [r3, #0]
    63e0:	6020      	str	r0, [r4, #0]
          return c;
    63e2:	e573      	b.n	5ecc <llex+0x27c>
          next(ls);
    63e4:	f010 fa16 	bl	16814 <luaZ_fill>
    63e8:	e7fa      	b.n	63e0 <llex+0x790>
    switch (ls->current) {
    63ea:	f44f 7590 	mov.w	r5, #288	; 0x120
    63ee:	e56d      	b.n	5ecc <llex+0x27c>
        if (check_next1(ls, '=')) return TK_LE;  /* '<=' */
    63f0:	f240 151b 	movw	r5, #283	; 0x11b
    63f4:	e56a      	b.n	5ecc <llex+0x27c>
        if (check_next1(ls, '=')) return TK_GE;  /* '>=' */
    63f6:	f44f 758d 	mov.w	r5, #282	; 0x11a
    63fa:	e567      	b.n	5ecc <llex+0x27c>
            return TK_NAME;
    63fc:	f240 1523 	movw	r5, #291	; 0x123
    6400:	e564      	b.n	5ecc <llex+0x27c>
    6402:	bf00      	nop
    6404:	00017e30 	.word	0x00017e30

00006408 <luaX_setinput>:
                    int firstchar) {
    6408:	b538      	push	{r3, r4, r5, lr}
    640a:	460c      	mov	r4, r1
  ls->current = firstchar;
    640c:	9d04      	ldr	r5, [sp, #16]
  ls->t.token = 0;
    640e:	2100      	movs	r1, #0
  ls->current = firstchar;
    6410:	6025      	str	r5, [r4, #0]
  ls->z = z;
    6412:	63a2      	str	r2, [r4, #56]	; 0x38
  ls->lookahead.token = TK_EOS;  /* no look-ahead token */
    6414:	f44f 7590 	mov.w	r5, #288	; 0x120
  ls->linenumber = 1;
    6418:	2201      	movs	r2, #1
  ls->t.token = 0;
    641a:	6121      	str	r1, [r4, #16]
  ls->lastline = 1;
    641c:	e9c4 2201 	strd	r2, r2, [r4, #4]
  ls->lookahead.token = TK_EOS;  /* no look-ahead token */
    6420:	6225      	str	r5, [r4, #32]
  ls->envn = luaS_newliteral(L, LUA_ENV);  /* get env name */
    6422:	2204      	movs	r2, #4
  ls->fs = NULL;
    6424:	6321      	str	r1, [r4, #48]	; 0x30
  ls->source = source;
    6426:	64a3      	str	r3, [r4, #72]	; 0x48
  ls->envn = luaS_newliteral(L, LUA_ENV);  /* get env name */
    6428:	4908      	ldr	r1, [pc, #32]	; (644c <luaX_setinput+0x44>)
  ls->L = L;
    642a:	6360      	str	r0, [r4, #52]	; 0x34
  ls->envn = luaS_newliteral(L, LUA_ENV);  /* get env name */
    642c:	f00f fb76 	bl	15b1c <luaS_newlstr>
  luaZ_resizebuffer(ls->L, ls->buff, LUA_MINBUFFER);  /* initialize buffer */
    6430:	6be5      	ldr	r5, [r4, #60]	; 0x3c
    6432:	2320      	movs	r3, #32
    6434:	68aa      	ldr	r2, [r5, #8]
  ls->envn = luaS_newliteral(L, LUA_ENV);  /* get env name */
    6436:	64e0      	str	r0, [r4, #76]	; 0x4c
  luaZ_resizebuffer(ls->L, ls->buff, LUA_MINBUFFER);  /* initialize buffer */
    6438:	6829      	ldr	r1, [r5, #0]
    643a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    643c:	f00e fb67 	bl	14b0e <luaM_saferealloc_>
    6440:	2220      	movs	r2, #32
    6442:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6444:	6028      	str	r0, [r5, #0]
    6446:	609a      	str	r2, [r3, #8]
}
    6448:	bd38      	pop	{r3, r4, r5, pc}
    644a:	bf00      	nop
    644c:	00017f63 	.word	0x00017f63

00006450 <luaM_toobig>:
}

/* }================================================================== */


l_noret luaM_toobig (lua_State *L) {
    6450:	b508      	push	{r3, lr}
  luaG_runerror(L, "memory allocation error: block too big");
    6452:	4901      	ldr	r1, [pc, #4]	; (6458 <luaM_toobig+0x8>)
    6454:	f00c fc6c 	bl	12d30 <luaG_runerror>
    6458:	000182c5 	.word	0x000182c5

0000645c <luaM_growaux_>:
                     int size_elems, int limit, const char *what) {
    645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int size = *psize;
    645e:	681d      	ldr	r5, [r3, #0]
  if (nelems + 1 <= size)  /* does one extra element still fit? */
    6460:	3201      	adds	r2, #1
    6462:	42aa      	cmp	r2, r5
                     int size_elems, int limit, const char *what) {
    6464:	4607      	mov	r7, r0
    6466:	e9dd c406 	ldrd	ip, r4, [sp, #24]
    646a:	461e      	mov	r6, r3
  if (nelems + 1 <= size)  /* does one extra element still fit? */
    646c:	dd18      	ble.n	64a0 <luaM_growaux_+0x44>
  if (size >= limit / 2) {  /* cannot double it? */
    646e:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
    6472:	ebb5 0f63 	cmp.w	r5, r3, asr #1
    6476:	db06      	blt.n	6486 <luaM_growaux_+0x2a>
    if (l_unlikely(size >= limit))  /* cannot grow even a little? */
    6478:	42a5      	cmp	r5, r4
    647a:	db08      	blt.n	648e <luaM_growaux_+0x32>
      luaG_runerror(L, "too many %s (limit is %d)", what, limit);
    647c:	4623      	mov	r3, r4
    647e:	9a08      	ldr	r2, [sp, #32]
    6480:	4908      	ldr	r1, [pc, #32]	; (64a4 <luaM_growaux_+0x48>)
    6482:	f00c fc55 	bl	12d30 <luaG_runerror>
    size *= 2;
    6486:	006c      	lsls	r4, r5, #1
    6488:	2c04      	cmp	r4, #4
    648a:	bfb8      	it	lt
    648c:	2404      	movlt	r4, #4
  newblock = luaM_saferealloc_(L, block, cast_sizet(*psize) * size_elems,
    648e:	4638      	mov	r0, r7
    6490:	fb0c f304 	mul.w	r3, ip, r4
    6494:	fb0c f205 	mul.w	r2, ip, r5
    6498:	f00e fb39 	bl	14b0e <luaM_saferealloc_>
    649c:	4601      	mov	r1, r0
  *psize = size;  /* update only when everything else is OK */
    649e:	6034      	str	r4, [r6, #0]
}
    64a0:	4608      	mov	r0, r1
    64a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64a4:	000182ec 	.word	0x000182ec

000064a8 <l_str2dloc>:
/*
** Convert string 's' to a Lua number (put in 'result'). Return NULL on
** fail or the address of the ending '\0' on success. ('mode' == 'x')
** means a hexadecimal numeral.
*/
static const char *l_str2dloc (const char *s, lua_Number *result, int mode) {
    64a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    64aa:	4604      	mov	r4, r0
    64ac:	460d      	mov	r5, r1
  char *endptr;
  *result = (mode == 'x') ? lua_strx2number(s, &endptr)  /* try to convert */
    64ae:	a901      	add	r1, sp, #4
    64b0:	f007 fa8a 	bl	d9c8 <strtod>
                          : lua_str2number(s, &endptr);
  if (endptr == s) return NULL;  /* nothing recognized? */
    64b4:	9b01      	ldr	r3, [sp, #4]
  *result = (mode == 'x') ? lua_strx2number(s, &endptr)  /* try to convert */
    64b6:	e9c5 0100 	strd	r0, r1, [r5]
  if (endptr == s) return NULL;  /* nothing recognized? */
    64ba:	42a3      	cmp	r3, r4
    64bc:	d007      	beq.n	64ce <l_str2dloc+0x26>
  while (lisspace(cast_uchar(*endptr))) endptr++;  /* skip trailing spaces */
    64be:	4907      	ldr	r1, [pc, #28]	; (64dc <l_str2dloc+0x34>)
    64c0:	9801      	ldr	r0, [sp, #4]
    64c2:	7803      	ldrb	r3, [r0, #0]
    64c4:	18ca      	adds	r2, r1, r3
    64c6:	7852      	ldrb	r2, [r2, #1]
    64c8:	0712      	lsls	r2, r2, #28
    64ca:	d403      	bmi.n	64d4 <l_str2dloc+0x2c>
  return (*endptr == '\0') ? endptr : NULL;  /* OK iff no trailing chars */
    64cc:	b103      	cbz	r3, 64d0 <l_str2dloc+0x28>
  if (endptr == s) return NULL;  /* nothing recognized? */
    64ce:	2000      	movs	r0, #0
}
    64d0:	b003      	add	sp, #12
    64d2:	bd30      	pop	{r4, r5, pc}
  while (lisspace(cast_uchar(*endptr))) endptr++;  /* skip trailing spaces */
    64d4:	3001      	adds	r0, #1
    64d6:	9001      	str	r0, [sp, #4]
    64d8:	e7f2      	b.n	64c0 <l_str2dloc+0x18>
    64da:	bf00      	nop
    64dc:	00017e30 	.word	0x00017e30

000064e0 <tostringbuff>:


/*
** Convert a number object to a string, adding it to a buffer
*/
static int tostringbuff (TValue *obj, char *buff) {
    64e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  int len;
  lua_assert(ttisnumber(obj));
  if (ttisinteger(obj))
    64e2:	7a03      	ldrb	r3, [r0, #8]
static int tostringbuff (TValue *obj, char *buff) {
    64e4:	460d      	mov	r5, r1
  if (ttisinteger(obj))
    64e6:	2b03      	cmp	r3, #3
    64e8:	d10c      	bne.n	6504 <tostringbuff+0x24>
    len = lua_integer2str(buff, MAXNUMBER2STR, ivalue(obj));
    64ea:	e9d0 2300 	ldrd	r2, r3, [r0]
    64ee:	212c      	movs	r1, #44	; 0x2c
    64f0:	e9cd 2300 	strd	r2, r3, [sp]
    64f4:	4628      	mov	r0, r5
    64f6:	4a11      	ldr	r2, [pc, #68]	; (653c <tostringbuff+0x5c>)
    64f8:	f007 fa32 	bl	d960 <snprintf>
    64fc:	4604      	mov	r4, r0
      buff[len++] = lua_getlocaledecpoint();
      buff[len++] = '0';  /* adds '.0' to result */
    }
  }
  return len;
}
    64fe:	4620      	mov	r0, r4
    6500:	b003      	add	sp, #12
    6502:	bd30      	pop	{r4, r5, pc}
    len = lua_number2str(buff, MAXNUMBER2STR, fltvalue(obj));
    6504:	e9d0 2300 	ldrd	r2, r3, [r0]
    6508:	212c      	movs	r1, #44	; 0x2c
    650a:	e9cd 2300 	strd	r2, r3, [sp]
    650e:	4628      	mov	r0, r5
    6510:	4a0b      	ldr	r2, [pc, #44]	; (6540 <tostringbuff+0x60>)
    6512:	f007 fa25 	bl	d960 <snprintf>
    if (buff[strspn(buff, "-0123456789")] == '\0') {  /* looks like an int? */
    6516:	490b      	ldr	r1, [pc, #44]	; (6544 <tostringbuff+0x64>)
    len = lua_number2str(buff, MAXNUMBER2STR, fltvalue(obj));
    6518:	4604      	mov	r4, r0
    if (buff[strspn(buff, "-0123456789")] == '\0') {  /* looks like an int? */
    651a:	4628      	mov	r0, r5
    651c:	f010 fc94 	bl	16e48 <strspn>
    6520:	5c2b      	ldrb	r3, [r5, r0]
    6522:	2b00      	cmp	r3, #0
    6524:	d1eb      	bne.n	64fe <tostringbuff+0x1e>
      buff[len++] = lua_getlocaledecpoint();
    6526:	f007 f8f3 	bl	d710 <localeconv>
    652a:	6802      	ldr	r2, [r0, #0]
    652c:	1c63      	adds	r3, r4, #1
    652e:	7812      	ldrb	r2, [r2, #0]
    6530:	552a      	strb	r2, [r5, r4]
      buff[len++] = '0';  /* adds '.0' to result */
    6532:	2230      	movs	r2, #48	; 0x30
    6534:	3402      	adds	r4, #2
    6536:	54ea      	strb	r2, [r5, r3]
  return len;
    6538:	e7e1      	b.n	64fe <tostringbuff+0x1e>
    653a:	bf00      	nop
    653c:	00018306 	.word	0x00018306
    6540:	0001830b 	.word	0x0001830b
    6544:	00018311 	.word	0x00018311

00006548 <luaO_ceillog2>:
  int l = 0;
    6548:	2200      	movs	r2, #0
  x--;
    654a:	1e43      	subs	r3, r0, #1
  while (x >= 256) { l += 8; x >>= 8; }
    654c:	2bff      	cmp	r3, #255	; 0xff
    654e:	d803      	bhi.n	6558 <luaO_ceillog2+0x10>
  return l + log_2[x];
    6550:	4903      	ldr	r1, [pc, #12]	; (6560 <luaO_ceillog2+0x18>)
    6552:	5cc8      	ldrb	r0, [r1, r3]
}
    6554:	4410      	add	r0, r2
    6556:	4770      	bx	lr
  while (x >= 256) { l += 8; x >>= 8; }
    6558:	3208      	adds	r2, #8
    655a:	0a1b      	lsrs	r3, r3, #8
    655c:	e7f6      	b.n	654c <luaO_ceillog2+0x4>
    655e:	bf00      	nop
    6560:	00018367 	.word	0x00018367

00006564 <luaO_hexavalue>:
  if (lisdigit(c)) return c - '0';
    6564:	4b04      	ldr	r3, [pc, #16]	; (6578 <luaO_hexavalue+0x14>)
    6566:	4403      	add	r3, r0
    6568:	785b      	ldrb	r3, [r3, #1]
    656a:	079b      	lsls	r3, r3, #30
    656c:	bf4e      	itee	mi
    656e:	3830      	submi	r0, #48	; 0x30
  else return (ltolower(c) - 'a') + 10;
    6570:	f040 0020 	orrpl.w	r0, r0, #32
    6574:	3857      	subpl	r0, #87	; 0x57
}
    6576:	4770      	bx	lr
    6578:	00017e30 	.word	0x00017e30

0000657c <luaO_str2num>:
size_t luaO_str2num (const char *s, TValue *o) {
    657c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6580:	4603      	mov	r3, r0
    6582:	4605      	mov	r5, r0
    6584:	460f      	mov	r7, r1
  while (lisspace(cast_uchar(*s))) s++;  /* skip initial spaces */
    6586:	f8df 8180 	ldr.w	r8, [pc, #384]	; 6708 <luaO_str2num+0x18c>
size_t luaO_str2num (const char *s, TValue *o) {
    658a:	b0b7      	sub	sp, #220	; 0xdc
  while (lisspace(cast_uchar(*s))) s++;  /* skip initial spaces */
    658c:	7819      	ldrb	r1, [r3, #0]
    658e:	461a      	mov	r2, r3
    6590:	eb08 0001 	add.w	r0, r8, r1
    6594:	7846      	ldrb	r6, [r0, #1]
    6596:	3301      	adds	r3, #1
    6598:	f016 0608 	ands.w	r6, r6, #8
    659c:	d1f6      	bne.n	658c <luaO_str2num+0x10>
  if (**s == '-') { (*s)++; return 1; }
    659e:	292d      	cmp	r1, #45	; 0x2d
    65a0:	d132      	bne.n	6608 <luaO_str2num+0x8c>
    65a2:	461a      	mov	r2, r3
    65a4:	2601      	movs	r6, #1
  if (s[0] == '0' &&
    65a6:	7813      	ldrb	r3, [r2, #0]
    65a8:	2b30      	cmp	r3, #48	; 0x30
    65aa:	d15f      	bne.n	666c <luaO_str2num+0xf0>
      (s[1] == 'x' || s[1] == 'X')) {  /* hex? */
    65ac:	7853      	ldrb	r3, [r2, #1]
    65ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    65b2:	2b58      	cmp	r3, #88	; 0x58
    65b4:	d15a      	bne.n	666c <luaO_str2num+0xf0>
  lua_Unsigned a = 0;
    65b6:	2300      	movs	r3, #0
  int empty = 1;
    65b8:	f04f 0c01 	mov.w	ip, #1
  lua_Unsigned a = 0;
    65bc:	461c      	mov	r4, r3
    s += 2;  /* skip '0x' */
    65be:	3202      	adds	r2, #2
    65c0:	4611      	mov	r1, r2
    for (; lisxdigit(cast_uchar(*s)); s++) {
    65c2:	7808      	ldrb	r0, [r1, #0]
    65c4:	3201      	adds	r2, #1
    65c6:	eb08 0e00 	add.w	lr, r8, r0
    65ca:	f89e e001 	ldrb.w	lr, [lr, #1]
    65ce:	f01e 0f10 	tst.w	lr, #16
    65d2:	d11d      	bne.n	6610 <luaO_str2num+0x94>
  while (lisspace(cast_uchar(*s))) s++;  /* skip trailing spaces */
    65d4:	780a      	ldrb	r2, [r1, #0]
    65d6:	4608      	mov	r0, r1
    65d8:	eb08 0e02 	add.w	lr, r8, r2
    65dc:	f89e e001 	ldrb.w	lr, [lr, #1]
    65e0:	3101      	adds	r1, #1
    65e2:	f01e 0f08 	tst.w	lr, #8
    65e6:	d1f5      	bne.n	65d4 <luaO_str2num+0x58>
  if (empty || *s != '\0') return NULL;  /* something wrong in the numeral */
    65e8:	f1bc 0f00 	cmp.w	ip, #0
    65ec:	d149      	bne.n	6682 <luaO_str2num+0x106>
    65ee:	2a00      	cmp	r2, #0
    65f0:	d147      	bne.n	6682 <luaO_str2num+0x106>
    *result = l_castU2S((neg) ? 0u - a : a);
    65f2:	b116      	cbz	r6, 65fa <luaO_str2num+0x7e>
    65f4:	425b      	negs	r3, r3
    65f6:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    setivalue(o, i);
    65fa:	e9c7 3400 	strd	r3, r4, [r7]
    65fe:	2303      	movs	r3, #3
  return (e - s) + 1;  /* success; return string size */
    6600:	1b40      	subs	r0, r0, r5
    setfltvalue(o, n);
    6602:	723b      	strb	r3, [r7, #8]
  return (e - s) + 1;  /* success; return string size */
    6604:	3001      	adds	r0, #1
    6606:	e048      	b.n	669a <luaO_str2num+0x11e>
  else if (**s == '+') (*s)++;
    6608:	292b      	cmp	r1, #43	; 0x2b
    660a:	bf08      	it	eq
    660c:	461a      	moveq	r2, r3
    660e:	e7ca      	b.n	65a6 <luaO_str2num+0x2a>
      a = a * 16 + luaO_hexavalue(*s);
    6610:	0124      	lsls	r4, r4, #4
    6612:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
    6616:	0119      	lsls	r1, r3, #4
    6618:	f7ff ffa4 	bl	6564 <luaO_hexavalue>
    661c:	1843      	adds	r3, r0, r1
      empty = 0;
    661e:	f04f 0c00 	mov.w	ip, #0
      a = a * 16 + luaO_hexavalue(*s);
    6622:	eb44 74e0 	adc.w	r4, r4, r0, asr #31
    for (; lisxdigit(cast_uchar(*s)); s++) {
    6626:	e7cb      	b.n	65c0 <luaO_str2num+0x44>
      if (a >= MAXBY10 && (a > MAXBY10 || d > MAXLASTD + neg))  /* overflow? */
    6628:	f1b3 3fcc 	cmp.w	r3, #3435973836	; 0xcccccccc
    662c:	eb74 0109 	sbcs.w	r1, r4, r9
      int d = *s - '0';
    6630:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
      if (a >= MAXBY10 && (a > MAXBY10 || d > MAXLASTD + neg))  /* overflow? */
    6634:	d306      	bcc.n	6644 <luaO_str2num+0xc8>
    6636:	454c      	cmp	r4, r9
    6638:	bf08      	it	eq
    663a:	f1b3 3fcc 	cmpeq.w	r3, #3435973836	; 0xcccccccc
    663e:	d120      	bne.n	6682 <luaO_str2num+0x106>
    6640:	4558      	cmp	r0, fp
    6642:	dc1e      	bgt.n	6682 <luaO_str2num+0x106>
      empty = 0;
    6644:	f04f 0c00 	mov.w	ip, #0
      a = a * 10 + d;
    6648:	fba3 310e 	umull	r3, r1, r3, lr
    664c:	fb0e 1404 	mla	r4, lr, r4, r1
    6650:	18c3      	adds	r3, r0, r3
    6652:	eb44 74e0 	adc.w	r4, r4, r0, asr #31
    for (; lisdigit(cast_uchar(*s)); s++) {
    6656:	4611      	mov	r1, r2
    6658:	7808      	ldrb	r0, [r1, #0]
    665a:	3201      	adds	r2, #1
    665c:	eb08 0a00 	add.w	sl, r8, r0
    6660:	f89a a001 	ldrb.w	sl, [sl, #1]
    6664:	f01a 0f02 	tst.w	sl, #2
    6668:	d1de      	bne.n	6628 <luaO_str2num+0xac>
    666a:	e7b3      	b.n	65d4 <luaO_str2num+0x58>
      empty = 0;
    666c:	2300      	movs	r3, #0
    666e:	f04f 0c01 	mov.w	ip, #1
    6672:	461c      	mov	r4, r3
      a = a * 10 + d;
    6674:	f04f 0e0a 	mov.w	lr, #10
      if (a >= MAXBY10 && (a > MAXBY10 || d > MAXLASTD + neg))  /* overflow? */
    6678:	f8df 9090 	ldr.w	r9, [pc, #144]	; 670c <luaO_str2num+0x190>
    667c:	f106 0b07 	add.w	fp, r6, #7
    6680:	e7e9      	b.n	6656 <luaO_str2num+0xda>
  const char *pmode = strpbrk(s, ".xXnN");  /* look for special chars */
    6682:	4628      	mov	r0, r5
    6684:	4922      	ldr	r1, [pc, #136]	; (6710 <luaO_str2num+0x194>)
    6686:	f010 fbc7 	bl	16e18 <strpbrk>
  int mode = pmode ? ltolower(cast_uchar(*pmode)) : 0;
    668a:	4604      	mov	r4, r0
    668c:	b140      	cbz	r0, 66a0 <luaO_str2num+0x124>
    668e:	7804      	ldrb	r4, [r0, #0]
    6690:	f044 0420 	orr.w	r4, r4, #32
  if (mode == 'n')  /* reject 'inf' and 'nan' */
    6694:	2c6e      	cmp	r4, #110	; 0x6e
    6696:	d103      	bne.n	66a0 <luaO_str2num+0x124>
    return 0;  /* conversion failed */
    6698:	2000      	movs	r0, #0
}
    669a:	b037      	add	sp, #220	; 0xdc
    669c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  endptr = l_str2dloc(s, result, mode);  /* try to convert */
    66a0:	4622      	mov	r2, r4
    66a2:	4669      	mov	r1, sp
    66a4:	4628      	mov	r0, r5
    66a6:	f7ff feff 	bl	64a8 <l_str2dloc>
  if (endptr == NULL) {  /* failed? may be a different locale */
    66aa:	bb30      	cbnz	r0, 66fa <luaO_str2num+0x17e>
    const char *pdot = strchr(s, '.');
    66ac:	212e      	movs	r1, #46	; 0x2e
    66ae:	4628      	mov	r0, r5
    66b0:	f010 fb67 	bl	16d82 <strchr>
    if (pdot == NULL || strlen(s) > L_MAXLENNUM)
    66b4:	4606      	mov	r6, r0
    66b6:	2800      	cmp	r0, #0
    66b8:	d0ee      	beq.n	6698 <luaO_str2num+0x11c>
    66ba:	4628      	mov	r0, r5
    66bc:	f7fa fbd8 	bl	e70 <strlen>
    66c0:	28c8      	cmp	r0, #200	; 0xc8
    66c2:	d8e9      	bhi.n	6698 <luaO_str2num+0x11c>
    strcpy(buff, s);  /* copy string to buffer */
    66c4:	f10d 080c 	add.w	r8, sp, #12
    66c8:	22c9      	movs	r2, #201	; 0xc9
    66ca:	4629      	mov	r1, r5
    66cc:	4640      	mov	r0, r8
    66ce:	f010 fb67 	bl	16da0 <__strcpy_chk>
    buff[pdot - s] = lua_getlocaledecpoint();  /* correct decimal point */
    66d2:	f007 f81d 	bl	d710 <localeconv>
    66d6:	6803      	ldr	r3, [r0, #0]
    66d8:	aa36      	add	r2, sp, #216	; 0xd8
    66da:	781b      	ldrb	r3, [r3, #0]
    66dc:	1b76      	subs	r6, r6, r5
    66de:	4416      	add	r6, r2
    endptr = l_str2dloc(buff, result, mode);  /* try again */
    66e0:	4669      	mov	r1, sp
    66e2:	4622      	mov	r2, r4
    66e4:	4640      	mov	r0, r8
    buff[pdot - s] = lua_getlocaledecpoint();  /* correct decimal point */
    66e6:	f806 3ccc 	strb.w	r3, [r6, #-204]
    endptr = l_str2dloc(buff, result, mode);  /* try again */
    66ea:	f7ff fedd 	bl	64a8 <l_str2dloc>
    if (endptr != NULL)
    66ee:	2800      	cmp	r0, #0
    66f0:	d0d2      	beq.n	6698 <luaO_str2num+0x11c>
      endptr = s + (endptr - buff);  /* make relative to 's' */
    66f2:	eba0 0008 	sub.w	r0, r0, r8
  else if ((e = l_str2d(s, &n)) != NULL) {  /* else try as a float */
    66f6:	1828      	adds	r0, r5, r0
    66f8:	d0ce      	beq.n	6698 <luaO_str2num+0x11c>
    setfltvalue(o, n);
    66fa:	e9dd 2300 	ldrd	r2, r3, [sp]
    66fe:	e9c7 2300 	strd	r2, r3, [r7]
    6702:	2313      	movs	r3, #19
    6704:	e77c      	b.n	6600 <luaO_str2num+0x84>
    6706:	bf00      	nop
    6708:	00017e30 	.word	0x00017e30
    670c:	0ccccccc 	.word	0x0ccccccc
    6710:	0001831d 	.word	0x0001831d

00006714 <luaO_pushvfstring>:
   conventional formats, plus Lua-specific '%I' and '%U'
*/
const char *luaO_pushvfstring (lua_State *L, const char *fmt, va_list argp) {
  BuffFS buff;  /* holds last part of the result */
  const char *e;  /* points to next '%' */
  buff.pushed = buff.blen = 0;
    6714:	2300      	movs	r3, #0
const char *luaO_pushvfstring (lua_State *L, const char *fmt, va_list argp) {
    6716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    671a:	4607      	mov	r7, r0
    671c:	460d      	mov	r5, r1
    671e:	4614      	mov	r4, r2
    6720:	b0ba      	sub	sp, #232	; 0xe8
  buff.pushed = buff.blen = 0;
    6722:	e9cd 3306 	strd	r3, r3, [sp, #24]
      }
      case 'p': {  /* a pointer */
        const int sz = 3 * sizeof(void*) + 8; /* enough space for '%p' */
        char *bf = getbuff(&buff, sz);
        void *p = va_arg(argp, void *);
        int len = lua_pointer2str(bf, sz, p);
    6726:	f8df 8128 	ldr.w	r8, [pc, #296]	; 6850 <luaO_pushvfstring+0x13c>
        if (s == NULL) s = "(null)";
    672a:	f8df 9128 	ldr.w	r9, [pc, #296]	; 6854 <luaO_pushvfstring+0x140>
    672e:	f8df a128 	ldr.w	sl, [pc, #296]	; 6858 <luaO_pushvfstring+0x144>
  buff.L = L;
    6732:	9005      	str	r0, [sp, #20]
  while ((e = strchr(fmt, '%')) != NULL) {
    6734:	2125      	movs	r1, #37	; 0x25
    6736:	4628      	mov	r0, r5
    6738:	f010 fb23 	bl	16d82 <strchr>
    673c:	4606      	mov	r6, r0
    673e:	b988      	cbnz	r0, 6764 <luaO_pushvfstring+0x50>
                         *(e + 1));
      }
    }
    fmt = e + 2;  /* skip '%' and the specifier */
  }
  addstr2buff(&buff, fmt, strlen(fmt));  /* rest of 'fmt' */
    6740:	4628      	mov	r0, r5
    6742:	f7fa fb95 	bl	e70 <strlen>
    6746:	4629      	mov	r1, r5
    6748:	4602      	mov	r2, r0
    674a:	a805      	add	r0, sp, #20
    674c:	f00e fb0b 	bl	14d66 <addstr2buff>
  clearbuff(&buff);  /* empty buffer into the stack */
    6750:	a805      	add	r0, sp, #20
    6752:	f00e fad2 	bl	14cfa <clearbuff>
  lua_assert(buff.pushed == 1);
  return svalue(s2v(L->top - 1));
    6756:	68fb      	ldr	r3, [r7, #12]
    6758:	f853 0c10 	ldr.w	r0, [r3, #-16]
}
    675c:	3010      	adds	r0, #16
    675e:	b03a      	add	sp, #232	; 0xe8
    6760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    addstr2buff(&buff, fmt, e - fmt);  /* add 'fmt' up to '%' */
    6764:	1b72      	subs	r2, r6, r5
    6766:	4629      	mov	r1, r5
    6768:	a805      	add	r0, sp, #20
    676a:	f00e fafc 	bl	14d66 <addstr2buff>
    switch (*(e + 1)) {  /* conversion specifier */
    676e:	7872      	ldrb	r2, [r6, #1]
    6770:	2a64      	cmp	r2, #100	; 0x64
    6772:	d034      	beq.n	67de <luaO_pushvfstring+0xca>
    6774:	d816      	bhi.n	67a4 <luaO_pushvfstring+0x90>
    6776:	2a55      	cmp	r2, #85	; 0x55
    6778:	d05c      	beq.n	6834 <luaO_pushvfstring+0x120>
    677a:	d807      	bhi.n	678c <luaO_pushvfstring+0x78>
    677c:	2a25      	cmp	r2, #37	; 0x25
    677e:	d063      	beq.n	6848 <luaO_pushvfstring+0x134>
    6780:	2a49      	cmp	r2, #73	; 0x49
    6782:	d03a      	beq.n	67fa <luaO_pushvfstring+0xe6>
        luaG_runerror(L, "invalid option '%%%c' to 'lua_pushfstring'",
    6784:	4638      	mov	r0, r7
    6786:	4935      	ldr	r1, [pc, #212]	; (685c <luaO_pushvfstring+0x148>)
    6788:	f00c fad2 	bl	12d30 <luaG_runerror>
    switch (*(e + 1)) {  /* conversion specifier */
    678c:	2a63      	cmp	r2, #99	; 0x63
    678e:	d1f9      	bne.n	6784 <luaO_pushvfstring+0x70>
        char c = cast_uchar(va_arg(argp, int));
    6790:	2201      	movs	r2, #1
    6792:	4669      	mov	r1, sp
    6794:	f854 3b04 	ldr.w	r3, [r4], #4
    6798:	f88d 3000 	strb.w	r3, [sp]
  if (slen <= BUFVFS) {  /* does string fit into buffer? */
    679c:	a805      	add	r0, sp, #20
    679e:	f00e facb 	bl	14d38 <addstr2buff.part.0>
}
    67a2:	e028      	b.n	67f6 <luaO_pushvfstring+0xe2>
    switch (*(e + 1)) {  /* conversion specifier */
    67a4:	2a70      	cmp	r2, #112	; 0x70
    67a6:	d030      	beq.n	680a <luaO_pushvfstring+0xf6>
    67a8:	2a73      	cmp	r2, #115	; 0x73
    67aa:	d00a      	beq.n	67c2 <luaO_pushvfstring+0xae>
    67ac:	2a66      	cmp	r2, #102	; 0x66
    67ae:	d1e9      	bne.n	6784 <luaO_pushvfstring+0x70>
        setfltvalue(&num, cast_num(va_arg(argp, l_uacNumber)));
    67b0:	3407      	adds	r4, #7
    67b2:	f024 0407 	bic.w	r4, r4, #7
    67b6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    67ba:	e9cd 2300 	strd	r2, r3, [sp]
    67be:	2313      	movs	r3, #19
    67c0:	e013      	b.n	67ea <luaO_pushvfstring+0xd6>
        const char *s = va_arg(argp, char *);
    67c2:	f854 5b04 	ldr.w	r5, [r4], #4
        if (s == NULL) s = "(null)";
    67c6:	2d00      	cmp	r5, #0
    67c8:	bf08      	it	eq
    67ca:	464d      	moveq	r5, r9
        addstr2buff(&buff, s, strlen(s));
    67cc:	4628      	mov	r0, r5
    67ce:	f7fa fb4f 	bl	e70 <strlen>
    67d2:	4629      	mov	r1, r5
    67d4:	4602      	mov	r2, r0
        addstr2buff(&buff, bf + UTF8BUFFSZ - len, len);
    67d6:	a805      	add	r0, sp, #20
    67d8:	f00e fac5 	bl	14d66 <addstr2buff>
        break;
    67dc:	e00b      	b.n	67f6 <luaO_pushvfstring+0xe2>
        setivalue(&num, va_arg(argp, int));
    67de:	f854 3b04 	ldr.w	r3, [r4], #4
    67e2:	17da      	asrs	r2, r3, #31
    67e4:	e9cd 3200 	strd	r3, r2, [sp]
        setivalue(&num, cast(lua_Integer, va_arg(argp, l_uacInt)));
    67e8:	2303      	movs	r3, #3
        addnum2buff(&buff, &num);
    67ea:	4669      	mov	r1, sp
    67ec:	a805      	add	r0, sp, #20
        setivalue(&num, cast(lua_Integer, va_arg(argp, l_uacInt)));
    67ee:	f88d 3008 	strb.w	r3, [sp, #8]
        addnum2buff(&buff, &num);
    67f2:	f00e fa8c 	bl	14d0e <addnum2buff>
    fmt = e + 2;  /* skip '%' and the specifier */
    67f6:	1cb5      	adds	r5, r6, #2
    67f8:	e79c      	b.n	6734 <luaO_pushvfstring+0x20>
        setivalue(&num, cast(lua_Integer, va_arg(argp, l_uacInt)));
    67fa:	3407      	adds	r4, #7
    67fc:	f024 0407 	bic.w	r4, r4, #7
    6800:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    6804:	e9cd 2300 	strd	r2, r3, [sp]
    6808:	e7ee      	b.n	67e8 <luaO_pushvfstring+0xd4>
  if (sz > BUFVFS - buff->blen)  /* not enough space? */
    680a:	9b07      	ldr	r3, [sp, #28]
    680c:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
    6810:	2b13      	cmp	r3, #19
    6812:	dc02      	bgt.n	681a <luaO_pushvfstring+0x106>
    clearbuff(buff);
    6814:	a805      	add	r0, sp, #20
    6816:	f00e fa70 	bl	14cfa <clearbuff>
        int len = lua_pointer2str(bf, sz, p);
    681a:	9807      	ldr	r0, [sp, #28]
    681c:	ad08      	add	r5, sp, #32
    681e:	f854 3b04 	ldr.w	r3, [r4], #4
    6822:	4642      	mov	r2, r8
    6824:	2114      	movs	r1, #20
    6826:	4428      	add	r0, r5
    6828:	f007 f89a 	bl	d960 <snprintf>
        addsize(&buff, len);
    682c:	9b07      	ldr	r3, [sp, #28]
    682e:	4403      	add	r3, r0
    6830:	9307      	str	r3, [sp, #28]
        break;
    6832:	e7e0      	b.n	67f6 <luaO_pushvfstring+0xe2>
        int len = luaO_utf8esc(bf, va_arg(argp, long));
    6834:	f854 1b04 	ldr.w	r1, [r4], #4
    6838:	4668      	mov	r0, sp
    683a:	f00e fb29 	bl	14e90 <luaO_utf8esc>
        addstr2buff(&buff, bf + UTF8BUFFSZ - len, len);
    683e:	f1c0 0108 	rsb	r1, r0, #8
        int len = luaO_utf8esc(bf, va_arg(argp, long));
    6842:	4602      	mov	r2, r0
        addstr2buff(&buff, bf + UTF8BUFFSZ - len, len);
    6844:	4469      	add	r1, sp
    6846:	e7c6      	b.n	67d6 <luaO_pushvfstring+0xc2>
  if (slen <= BUFVFS) {  /* does string fit into buffer? */
    6848:	2201      	movs	r2, #1
    684a:	4651      	mov	r1, sl
    684c:	e7a6      	b.n	679c <luaO_pushvfstring+0x88>
    684e:	bf00      	nop
    6850:	0001832a 	.word	0x0001832a
    6854:	00018323 	.word	0x00018323
    6858:	0001832d 	.word	0x0001832d
    685c:	0001832f 	.word	0x0001832f

00006860 <luaO_chunkid>:
#define PRE	"[string \""
#define POS	"\"]"

#define addstr(a,b,l)	( memcpy(a,b,(l) * sizeof(char)), a += (l) )

void luaO_chunkid (char *out, const char *source, size_t srclen) {
    6860:	b570      	push	{r4, r5, r6, lr}
  size_t bufflen = LUA_IDSIZE;  /* free space in buffer */
  if (*source == '=') {  /* 'literal' source */
    6862:	780b      	ldrb	r3, [r1, #0]
void luaO_chunkid (char *out, const char *source, size_t srclen) {
    6864:	4605      	mov	r5, r0
  if (*source == '=') {  /* 'literal' source */
    6866:	2b3d      	cmp	r3, #61	; 0x3d
void luaO_chunkid (char *out, const char *source, size_t srclen) {
    6868:	460e      	mov	r6, r1
    686a:	4614      	mov	r4, r2
  if (*source == '=') {  /* 'literal' source */
    686c:	d117      	bne.n	689e <luaO_chunkid+0x3e>
    if (srclen <= bufflen)  /* small enough? */
    686e:	2a3c      	cmp	r2, #60	; 0x3c
      memcpy(out, source + 1, srclen * sizeof(char));
    6870:	f101 0101 	add.w	r1, r1, #1
    if (srclen <= bufflen)  /* small enough? */
    6874:	d803      	bhi.n	687e <luaO_chunkid+0x1e>
      addstr(out, source, srclen);
      addstr(out, RETS, LL(RETS));
    }
    memcpy(out, POS, (LL(POS) + 1) * sizeof(char));
  }
}
    6876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    687a:	f010 b9ff 	b.w	16c7c <memcpy>
    687e:	4603      	mov	r3, r0
    6880:	3639      	adds	r6, #57	; 0x39
    6882:	f851 2b04 	ldr.w	r2, [r1], #4
    6886:	42b1      	cmp	r1, r6
    6888:	f843 2b04 	str.w	r2, [r3], #4
    688c:	d1f9      	bne.n	6882 <luaO_chunkid+0x22>
    688e:	880a      	ldrh	r2, [r1, #0]
    6890:	801a      	strh	r2, [r3, #0]
    6892:	788a      	ldrb	r2, [r1, #2]
    6894:	709a      	strb	r2, [r3, #2]
      *out = '\0';
    6896:	2300      	movs	r3, #0
    6898:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
}
    689c:	bd70      	pop	{r4, r5, r6, pc}
  else if (*source == '@') {  /* file name */
    689e:	2b40      	cmp	r3, #64	; 0x40
    68a0:	d116      	bne.n	68d0 <luaO_chunkid+0x70>
    if (srclen <= bufflen)  /* small enough? */
    68a2:	2a3c      	cmp	r2, #60	; 0x3c
    68a4:	d801      	bhi.n	68aa <luaO_chunkid+0x4a>
    68a6:	3101      	adds	r1, #1
    68a8:	e7e5      	b.n	6876 <luaO_chunkid+0x16>
    68aa:	4b21      	ldr	r3, [pc, #132]	; (6930 <luaO_chunkid+0xd0>)
      memcpy(out, source + 1 + srclen - bufflen, bufflen * sizeof(char));
    68ac:	3c38      	subs	r4, #56	; 0x38
    68ae:	881a      	ldrh	r2, [r3, #0]
    68b0:	789b      	ldrb	r3, [r3, #2]
    68b2:	4421      	add	r1, r4
    68b4:	8002      	strh	r2, [r0, #0]
    68b6:	7083      	strb	r3, [r0, #2]
    68b8:	f101 0238 	add.w	r2, r1, #56	; 0x38
    68bc:	1cc3      	adds	r3, r0, #3
    68be:	f851 0b04 	ldr.w	r0, [r1], #4
    68c2:	4291      	cmp	r1, r2
    68c4:	f843 0b04 	str.w	r0, [r3], #4
    68c8:	d1f9      	bne.n	68be <luaO_chunkid+0x5e>
    68ca:	780a      	ldrb	r2, [r1, #0]
    68cc:	701a      	strb	r2, [r3, #0]
    68ce:	e7e5      	b.n	689c <luaO_chunkid+0x3c>
    const char *nl = strchr(source, '\n');  /* find first new line (if any) */
    68d0:	210a      	movs	r1, #10
    68d2:	4630      	mov	r0, r6
    68d4:	f010 fa55 	bl	16d82 <strchr>
    68d8:	4b16      	ldr	r3, [pc, #88]	; (6934 <luaO_chunkid+0xd4>)
    if (srclen < bufflen && nl == NULL) {  /* small one-line source? */
    68da:	2c2c      	cmp	r4, #44	; 0x2c
    68dc:	681a      	ldr	r2, [r3, #0]
    68de:	602a      	str	r2, [r5, #0]
    68e0:	685a      	ldr	r2, [r3, #4]
    68e2:	7a1b      	ldrb	r3, [r3, #8]
    68e4:	606a      	str	r2, [r5, #4]
    68e6:	722b      	strb	r3, [r5, #8]
    addstr(out, PRE, LL(PRE));  /* add prefix */
    68e8:	f105 0309 	add.w	r3, r5, #9
    if (srclen < bufflen && nl == NULL) {  /* small one-line source? */
    68ec:	d80d      	bhi.n	690a <luaO_chunkid+0xaa>
    68ee:	b968      	cbnz	r0, 690c <luaO_chunkid+0xac>
    68f0:	4618      	mov	r0, r3
    68f2:	4622      	mov	r2, r4
    68f4:	4631      	mov	r1, r6
    68f6:	f010 f9c1 	bl	16c7c <memcpy>
    68fa:	4603      	mov	r3, r0
      addstr(out, source, srclen);  /* keep it */
    68fc:	4423      	add	r3, r4
    68fe:	4a0e      	ldr	r2, [pc, #56]	; (6938 <luaO_chunkid+0xd8>)
    6900:	8811      	ldrh	r1, [r2, #0]
    6902:	7892      	ldrb	r2, [r2, #2]
    6904:	8019      	strh	r1, [r3, #0]
    6906:	709a      	strb	r2, [r3, #2]
}
    6908:	e7c8      	b.n	689c <luaO_chunkid+0x3c>
      if (nl != NULL) srclen = nl - source;  /* stop at first newline */
    690a:	b100      	cbz	r0, 690e <luaO_chunkid+0xae>
    690c:	1b84      	subs	r4, r0, r6
      if (srclen > bufflen) srclen = bufflen;
    690e:	2c2d      	cmp	r4, #45	; 0x2d
    6910:	bf28      	it	cs
    6912:	242d      	movcs	r4, #45	; 0x2d
    6914:	4631      	mov	r1, r6
    6916:	4622      	mov	r2, r4
    6918:	4618      	mov	r0, r3
    691a:	f010 f9af 	bl	16c7c <memcpy>
    691e:	4603      	mov	r3, r0
    6920:	4903      	ldr	r1, [pc, #12]	; (6930 <luaO_chunkid+0xd0>)
      addstr(out, source, srclen);
    6922:	1902      	adds	r2, r0, r4
    6924:	8808      	ldrh	r0, [r1, #0]
    6926:	5318      	strh	r0, [r3, r4]
    6928:	788b      	ldrb	r3, [r1, #2]
    692a:	7093      	strb	r3, [r2, #2]
      addstr(out, RETS, LL(RETS));
    692c:	1cd3      	adds	r3, r2, #3
    692e:	e7e6      	b.n	68fe <luaO_chunkid+0x9e>
    6930:	00018283 	.word	0x00018283
    6934:	0001835a 	.word	0x0001835a
    6938:	00018364 	.word	0x00018364

0000693c <newlabelentry>:

/*
** Adds a new label/goto in the corresponding list.
*/
static int newlabelentry (LexState *ls, Labellist *l, TString *name,
                          int line, int pc) {
    693c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    6940:	461f      	mov	r7, r3
  int n = l->n;
  luaM_growvector(ls->L, l->arr, n, l->size,
    6942:	4b13      	ldr	r3, [pc, #76]	; (6990 <newlabelentry+0x54>)
  int n = l->n;
    6944:	684d      	ldr	r5, [r1, #4]
                          int line, int pc) {
    6946:	4690      	mov	r8, r2
  luaM_growvector(ls->L, l->arr, n, l->size,
    6948:	9302      	str	r3, [sp, #8]
    694a:	f647 72ff 	movw	r2, #32767	; 0x7fff
    694e:	2310      	movs	r3, #16
    6950:	e9cd 3200 	strd	r3, r2, [sp]
                          int line, int pc) {
    6954:	460c      	mov	r4, r1
    6956:	4606      	mov	r6, r0
  luaM_growvector(ls->L, l->arr, n, l->size,
    6958:	f101 0308 	add.w	r3, r1, #8
    695c:	462a      	mov	r2, r5
    695e:	6809      	ldr	r1, [r1, #0]
    6960:	6b40      	ldr	r0, [r0, #52]	; 0x34
    6962:	f7ff fd7b 	bl	645c <luaM_growaux_>
                  Labeldesc, SHRT_MAX, "labels/gotos");
  l->arr[n].name = name;
    6966:	012b      	lsls	r3, r5, #4
  luaM_growvector(ls->L, l->arr, n, l->size,
    6968:	6020      	str	r0, [r4, #0]
  l->arr[n].name = name;
    696a:	eb00 1105 	add.w	r1, r0, r5, lsl #4
    696e:	f840 8003 	str.w	r8, [r0, r3]
  l->arr[n].line = line;
  l->arr[n].nactvar = ls->fs->nactvar;
    6972:	6b33      	ldr	r3, [r6, #48]	; 0x30
  l->arr[n].line = line;
    6974:	608f      	str	r7, [r1, #8]
  l->arr[n].nactvar = ls->fs->nactvar;
    6976:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
  l->arr[n].close = 0;
  l->arr[n].pc = pc;
  l->n = n + 1;
  return n;
}
    697a:	4628      	mov	r0, r5
  l->arr[n].nactvar = ls->fs->nactvar;
    697c:	730b      	strb	r3, [r1, #12]
  l->arr[n].close = 0;
    697e:	2300      	movs	r3, #0
    6980:	734b      	strb	r3, [r1, #13]
  l->arr[n].pc = pc;
    6982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6984:	604b      	str	r3, [r1, #4]
  l->n = n + 1;
    6986:	1c6b      	adds	r3, r5, #1
    6988:	6063      	str	r3, [r4, #4]
}
    698a:	b004      	add	sp, #16
    698c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6990:	000184ba 	.word	0x000184ba

00006994 <checklimit>:
  if (v > l) errorlimit(fs, l, what);
    6994:	4291      	cmp	r1, r2
static void checklimit (FuncState *fs, int v, int l, const char *what) {
    6996:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6998:	4604      	mov	r4, r0
    699a:	4615      	mov	r5, r2
    699c:	461e      	mov	r6, r3
  if (v > l) errorlimit(fs, l, what);
    699e:	dd15      	ble.n	69cc <checklimit+0x38>
  lua_State *L = fs->ls->L;
    69a0:	6883      	ldr	r3, [r0, #8]
    69a2:	6b5f      	ldr	r7, [r3, #52]	; 0x34
  int line = fs->f->linedefined;
    69a4:	6803      	ldr	r3, [r0, #0]
    69a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                      : luaO_pushfstring(L, "function at line %d", line);
    69a8:	b172      	cbz	r2, 69c8 <checklimit+0x34>
    69aa:	4638      	mov	r0, r7
    69ac:	4908      	ldr	r1, [pc, #32]	; (69d0 <checklimit+0x3c>)
    69ae:	f00e faa2 	bl	14ef6 <luaO_pushfstring>
  msg = luaO_pushfstring(L, "too many %s (limit is %d) in %s",
    69b2:	4908      	ldr	r1, [pc, #32]	; (69d4 <checklimit+0x40>)
    69b4:	9000      	str	r0, [sp, #0]
    69b6:	462b      	mov	r3, r5
    69b8:	4632      	mov	r2, r6
    69ba:	4638      	mov	r0, r7
    69bc:	f00e fa9b 	bl	14ef6 <luaO_pushfstring>
    69c0:	4601      	mov	r1, r0
  luaX_syntaxerror(fs->ls, msg);
    69c2:	68a0      	ldr	r0, [r4, #8]
    69c4:	f00e f811 	bl	149ea <luaX_syntaxerror>
                      : luaO_pushfstring(L, "function at line %d", line);
    69c8:	4803      	ldr	r0, [pc, #12]	; (69d8 <checklimit+0x44>)
    69ca:	e7f2      	b.n	69b2 <checklimit+0x1e>
}
    69cc:	b003      	add	sp, #12
    69ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69d0:	000184d5 	.word	0x000184d5
    69d4:	000184e9 	.word	0x000184e9
    69d8:	000184c7 	.word	0x000184c7

000069dc <allocupvalue>:
static Upvaldesc *allocupvalue (FuncState *fs) {
    69dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  checklimit(fs, fs->nups + 1, MAXUPVAL, "upvalues");
    69e0:	f8df 9060 	ldr.w	r9, [pc, #96]	; 6a44 <allocupvalue+0x68>
    69e4:	f890 8033 	ldrb.w	r8, [r0, #51]	; 0x33
  Proto *f = fs->f;
    69e8:	6806      	ldr	r6, [r0, #0]
static Upvaldesc *allocupvalue (FuncState *fs) {
    69ea:	b085      	sub	sp, #20
  checklimit(fs, fs->nups + 1, MAXUPVAL, "upvalues");
    69ec:	464b      	mov	r3, r9
    69ee:	22ff      	movs	r2, #255	; 0xff
    69f0:	f108 0101 	add.w	r1, r8, #1
static Upvaldesc *allocupvalue (FuncState *fs) {
    69f4:	4604      	mov	r4, r0
  int oldsize = f->sizeupvalues;
    69f6:	4637      	mov	r7, r6
  checklimit(fs, fs->nups + 1, MAXUPVAL, "upvalues");
    69f8:	f7ff ffcc 	bl	6994 <checklimit>
  luaM_growvector(fs->ls->L, f->upvalues, fs->nups, f->sizeupvalues,
    69fc:	2308      	movs	r3, #8
    69fe:	22ff      	movs	r2, #255	; 0xff
  int oldsize = f->sizeupvalues;
    6a00:	f857 5f0c 	ldr.w	r5, [r7, #12]!
  luaM_growvector(fs->ls->L, f->upvalues, fs->nups, f->sizeupvalues,
    6a04:	e9cd 3200 	strd	r3, r2, [sp]
    6a08:	68a0      	ldr	r0, [r4, #8]
    6a0a:	f8cd 9008 	str.w	r9, [sp, #8]
    6a0e:	463b      	mov	r3, r7
    6a10:	4642      	mov	r2, r8
    6a12:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    6a14:	6b40      	ldr	r0, [r0, #52]	; 0x34
    6a16:	f7ff fd21 	bl	645c <luaM_growaux_>
    6a1a:	462b      	mov	r3, r5
    f->upvalues[oldsize++].name = NULL;
    6a1c:	2100      	movs	r1, #0
  while (oldsize < f->sizeupvalues)
    6a1e:	68f2      	ldr	r2, [r6, #12]
  luaM_growvector(fs->ls->L, f->upvalues, fs->nups, f->sizeupvalues,
    6a20:	63f0      	str	r0, [r6, #60]	; 0x3c
  while (oldsize < f->sizeupvalues)
    6a22:	429a      	cmp	r2, r3
    6a24:	dc09      	bgt.n	6a3a <allocupvalue+0x5e>
  return &f->upvalues[fs->nups++];
    6a26:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6a2a:	1c5a      	adds	r2, r3, #1
}
    6a2c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
  return &f->upvalues[fs->nups++];
    6a30:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
}
    6a34:	b005      	add	sp, #20
    6a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f->upvalues[oldsize++].name = NULL;
    6a3a:	f840 1033 	str.w	r1, [r0, r3, lsl #3]
    6a3e:	3301      	adds	r3, #1
    6a40:	e7ef      	b.n	6a22 <allocupvalue+0x46>
    6a42:	bf00      	nop
    6a44:	00018509 	.word	0x00018509

00006a48 <new_localvar>:
static int new_localvar (LexState *ls, TString *name) {
    6a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Dyndata *dyd = ls->dyd;
    6a4c:	6c44      	ldr	r4, [r0, #68]	; 0x44
  FuncState *fs = ls->fs;
    6a4e:	6b06      	ldr	r6, [r0, #48]	; 0x30
  checklimit(fs, dyd->actvar.n + 1 - fs->firstlocal,
    6a50:	6863      	ldr	r3, [r4, #4]
static int new_localvar (LexState *ls, TString *name) {
    6a52:	460f      	mov	r7, r1
  checklimit(fs, dyd->actvar.n + 1 - fs->firstlocal,
    6a54:	f8df 8054 	ldr.w	r8, [pc, #84]	; 6aac <new_localvar+0x64>
    6a58:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    6a5a:	f103 0901 	add.w	r9, r3, #1
static int new_localvar (LexState *ls, TString *name) {
    6a5e:	b085      	sub	sp, #20
    6a60:	4605      	mov	r5, r0
  checklimit(fs, dyd->actvar.n + 1 - fs->firstlocal,
    6a62:	4643      	mov	r3, r8
    6a64:	4630      	mov	r0, r6
    6a66:	eba9 0101 	sub.w	r1, r9, r1
    6a6a:	22c8      	movs	r2, #200	; 0xc8
    6a6c:	f7ff ff92 	bl	6994 <checklimit>
  luaM_growvector(L, dyd->actvar.arr, dyd->actvar.n + 1,
    6a70:	f8cd 8008 	str.w	r8, [sp, #8]
    6a74:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6a78:	f04f 0818 	mov.w	r8, #24
    6a7c:	e9cd 8300 	strd	r8, r3, [sp]
    6a80:	464a      	mov	r2, r9
    6a82:	f104 0308 	add.w	r3, r4, #8
    6a86:	6821      	ldr	r1, [r4, #0]
    6a88:	6b68      	ldr	r0, [r5, #52]	; 0x34
    6a8a:	f7ff fce7 	bl	645c <luaM_growaux_>
  var = &dyd->actvar.arr[dyd->actvar.n++];
    6a8e:	6862      	ldr	r2, [r4, #4]
  luaM_growvector(L, dyd->actvar.arr, dyd->actvar.n + 1,
    6a90:	6020      	str	r0, [r4, #0]
  var = &dyd->actvar.arr[dyd->actvar.n++];
    6a92:	1c53      	adds	r3, r2, #1
    6a94:	fb08 0002 	mla	r0, r8, r2, r0
  var->vd.kind = VDKREG;  /* default */
    6a98:	2200      	movs	r2, #0
  var = &dyd->actvar.arr[dyd->actvar.n++];
    6a9a:	6063      	str	r3, [r4, #4]
  var->vd.kind = VDKREG;  /* default */
    6a9c:	7242      	strb	r2, [r0, #9]
  var->vd.name = name;
    6a9e:	6107      	str	r7, [r0, #16]
  return dyd->actvar.n - 1 - fs->firstlocal;
    6aa0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    6aa2:	1a18      	subs	r0, r3, r0
}
    6aa4:	3801      	subs	r0, #1
    6aa6:	b005      	add	sp, #20
    6aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6aac:	00018512 	.word	0x00018512

00006ab0 <check_readonly>:
static void check_readonly (LexState *ls, expdesc *e) {
    6ab0:	b510      	push	{r4, lr}
  switch (e->k) {
    6ab2:	780b      	ldrb	r3, [r1, #0]
static void check_readonly (LexState *ls, expdesc *e) {
    6ab4:	4604      	mov	r4, r0
  switch (e->k) {
    6ab6:	2b0a      	cmp	r3, #10
  FuncState *fs = ls->fs;
    6ab8:	6b00      	ldr	r0, [r0, #48]	; 0x30
  switch (e->k) {
    6aba:	d01b      	beq.n	6af4 <check_readonly+0x44>
    6abc:	2b0b      	cmp	r3, #11
    6abe:	d008      	beq.n	6ad2 <check_readonly+0x22>
    6ac0:	2b09      	cmp	r3, #9
    6ac2:	d121      	bne.n	6b08 <check_readonly+0x58>
      Vardesc *vardesc = getlocalvardesc(fs, e->u.var.vidx);
    6ac4:	8949      	ldrh	r1, [r1, #10]
    6ac6:	f00e fa23 	bl	14f10 <getlocalvardesc>
      if (vardesc->vd.kind != VDKREG)  /* not a regular variable? */
    6aca:	7a43      	ldrb	r3, [r0, #9]
    6acc:	b1e3      	cbz	r3, 6b08 <check_readonly+0x58>
        varname = vardesc->vd.name;
    6ace:	6902      	ldr	r2, [r0, #16]
    6ad0:	e006      	b.n	6ae0 <check_readonly+0x30>
      varname = ls->dyd->actvar.arr[e->u.info].vd.name;
    6ad2:	688a      	ldr	r2, [r1, #8]
    6ad4:	2118      	movs	r1, #24
    6ad6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6ad8:	681b      	ldr	r3, [r3, #0]
    6ada:	fb01 3302 	mla	r3, r1, r2, r3
    6ade:	691a      	ldr	r2, [r3, #16]
  if (varname) {
    6ae0:	b192      	cbz	r2, 6b08 <check_readonly+0x58>
    const char *msg = luaO_pushfstring(ls->L,
    6ae2:	490a      	ldr	r1, [pc, #40]	; (6b0c <check_readonly+0x5c>)
    6ae4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6ae6:	3210      	adds	r2, #16
    6ae8:	f00e fa05 	bl	14ef6 <luaO_pushfstring>
    6aec:	4601      	mov	r1, r0
    luaK_semerror(ls, msg);  /* error */
    6aee:	4620      	mov	r0, r4
    6af0:	f00b fa6d 	bl	11fce <luaK_semerror>
      Upvaldesc *up = &fs->f->upvalues[e->u.info];
    6af4:	6803      	ldr	r3, [r0, #0]
    6af6:	688a      	ldr	r2, [r1, #8]
    6af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6afa:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
      if (up->kind != VDKREG)
    6afe:	7989      	ldrb	r1, [r1, #6]
    6b00:	b111      	cbz	r1, 6b08 <check_readonly+0x58>
        varname = up->name;
    6b02:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    6b06:	e7eb      	b.n	6ae0 <check_readonly+0x30>
}
    6b08:	bd10      	pop	{r4, pc}
    6b0a:	bf00      	nop
    6b0c:	00018522 	.word	0x00018522

00006b10 <error_expected>:
static l_noret error_expected (LexState *ls, int token) {
    6b10:	b508      	push	{r3, lr}
    6b12:	4604      	mov	r4, r0
      luaO_pushfstring(ls->L, "%s expected", luaX_token2str(ls, token)));
    6b14:	6b45      	ldr	r5, [r0, #52]	; 0x34
  luaX_syntaxerror(ls,
    6b16:	f7fe fec9 	bl	58ac <luaX_token2str>
    6b1a:	4904      	ldr	r1, [pc, #16]	; (6b2c <error_expected+0x1c>)
    6b1c:	4602      	mov	r2, r0
    6b1e:	4628      	mov	r0, r5
    6b20:	f00e f9e9 	bl	14ef6 <luaO_pushfstring>
    6b24:	4601      	mov	r1, r0
    6b26:	4620      	mov	r0, r4
    6b28:	f00d ff5f 	bl	149ea <luaX_syntaxerror>
    6b2c:	0001854b 	.word	0x0001854b

00006b30 <check_match>:
static void check_match (LexState *ls, int what, int who, int where) {
    6b30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6b34:	4604      	mov	r4, r0
    6b36:	460e      	mov	r6, r1
    6b38:	4617      	mov	r7, r2
    6b3a:	461d      	mov	r5, r3
  if (l_unlikely(!testnext(ls, what))) {
    6b3c:	f00e fa5d 	bl	14ffa <testnext>
    6b40:	b9e0      	cbnz	r0, 6b7c <check_match+0x4c>
    if (where == ls->linenumber)  /* all in the same line? */
    6b42:	6863      	ldr	r3, [r4, #4]
    6b44:	42ab      	cmp	r3, r5
    6b46:	d103      	bne.n	6b50 <check_match+0x20>
      error_expected(ls, what);  /* do not need a complex message */
    6b48:	4631      	mov	r1, r6
    6b4a:	4620      	mov	r0, r4
    6b4c:	f7ff ffe0 	bl	6b10 <error_expected>
      luaX_syntaxerror(ls, luaO_pushfstring(ls->L,
    6b50:	4631      	mov	r1, r6
    6b52:	4620      	mov	r0, r4
    6b54:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
    6b58:	f7fe fea8 	bl	58ac <luaX_token2str>
    6b5c:	4639      	mov	r1, r7
    6b5e:	4606      	mov	r6, r0
    6b60:	4620      	mov	r0, r4
    6b62:	f7fe fea3 	bl	58ac <luaX_token2str>
    6b66:	4907      	ldr	r1, [pc, #28]	; (6b84 <check_match+0x54>)
    6b68:	4603      	mov	r3, r0
    6b6a:	4632      	mov	r2, r6
    6b6c:	4640      	mov	r0, r8
    6b6e:	9500      	str	r5, [sp, #0]
    6b70:	f00e f9c1 	bl	14ef6 <luaO_pushfstring>
    6b74:	4601      	mov	r1, r0
    6b76:	4620      	mov	r0, r4
    6b78:	f00d ff37 	bl	149ea <luaX_syntaxerror>
}
    6b7c:	b002      	add	sp, #8
    6b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b82:	bf00      	nop
    6b84:	00018557 	.word	0x00018557

00006b88 <adjustlocalvars>:
static void adjustlocalvars (LexState *ls, int nvars) {
    6b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FuncState *fs = ls->fs;
    6b8c:	6b04      	ldr	r4, [r0, #48]	; 0x30
static void adjustlocalvars (LexState *ls, int nvars) {
    6b8e:	b087      	sub	sp, #28
    6b90:	4680      	mov	r8, r0
  int reglevel = luaY_nvarstack(fs);
    6b92:	4620      	mov	r0, r4
static void adjustlocalvars (LexState *ls, int nvars) {
    6b94:	9105      	str	r1, [sp, #20]
  int reglevel = luaY_nvarstack(fs);
    6b96:	f00e fb59 	bl	1524c <luaY_nvarstack>
  for (i = 0; i < nvars; i++) {
    6b9a:	2700      	movs	r7, #0
  int reglevel = luaY_nvarstack(fs);
    6b9c:	9004      	str	r0, [sp, #16]
  for (i = 0; i < nvars; i++) {
    6b9e:	9b05      	ldr	r3, [sp, #20]
    6ba0:	429f      	cmp	r7, r3
    6ba2:	db02      	blt.n	6baa <adjustlocalvars+0x22>
}
    6ba4:	b007      	add	sp, #28
    6ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int vidx = fs->nactvar++;
    6baa:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    Vardesc *var = getlocalvardesc(fs, vidx);
    6bae:	4620      	mov	r0, r4
    int vidx = fs->nactvar++;
    6bb0:	1c4b      	adds	r3, r1, #1
    6bb2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    Vardesc *var = getlocalvardesc(fs, vidx);
    6bb6:	f00e f9ab 	bl	14f10 <getlocalvardesc>
    var->vd.ridx = reglevel++;
    6bba:	9b04      	ldr	r3, [sp, #16]
  Proto *f = fs->f;
    6bbc:	6825      	ldr	r5, [r4, #0]
    var->vd.ridx = reglevel++;
    6bbe:	18fb      	adds	r3, r7, r3
    6bc0:	7283      	strb	r3, [r0, #10]
  int oldsize = f->sizelocvars;
    6bc2:	462b      	mov	r3, r5
  luaM_growvector(ls->L, f->locvars, fs->ndebugvars, f->sizelocvars,
    6bc4:	491e      	ldr	r1, [pc, #120]	; (6c40 <adjustlocalvars+0xb8>)
    var->vd.pidx = registerlocalvar(ls, fs, var->vd.name);
    6bc6:	f8d0 a010 	ldr.w	sl, [r0, #16]
  int oldsize = f->sizelocvars;
    6bca:	f853 6f20 	ldr.w	r6, [r3, #32]!
  luaM_growvector(ls->L, f->locvars, fs->ndebugvars, f->sizelocvars,
    6bce:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
    6bd2:	f04f 0b0c 	mov.w	fp, #12
    6bd6:	9102      	str	r1, [sp, #8]
    6bd8:	f647 71ff 	movw	r1, #32767	; 0x7fff
    6bdc:	e9cd b100 	strd	fp, r1, [sp]
    Vardesc *var = getlocalvardesc(fs, vidx);
    6be0:	4681      	mov	r9, r0
  luaM_growvector(ls->L, f->locvars, fs->ndebugvars, f->sizelocvars,
    6be2:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    6be4:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
    6be8:	f7ff fc38 	bl	645c <luaM_growaux_>
  while (oldsize < f->sizelocvars)
    6bec:	6a2b      	ldr	r3, [r5, #32]
  luaM_growvector(ls->L, f->locvars, fs->ndebugvars, f->sizelocvars,
    6bee:	64a8      	str	r0, [r5, #72]	; 0x48
  while (oldsize < f->sizelocvars)
    6bf0:	42b3      	cmp	r3, r6
    6bf2:	dc1f      	bgt.n	6c34 <adjustlocalvars+0xac>
  f->locvars[fs->ndebugvars].varname = varname;
    6bf4:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
  f->locvars[fs->ndebugvars].startpc = fs->pc;
    6bf8:	6922      	ldr	r2, [r4, #16]
  f->locvars[fs->ndebugvars].varname = varname;
    6bfa:	fb0b fb03 	mul.w	fp, fp, r3
    6bfe:	eb00 030b 	add.w	r3, r0, fp
    6c02:	f840 a00b 	str.w	sl, [r0, fp]
  f->locvars[fs->ndebugvars].startpc = fs->pc;
    6c06:	605a      	str	r2, [r3, #4]
  luaC_objbarrier(ls->L, f, varname);
    6c08:	796b      	ldrb	r3, [r5, #5]
    6c0a:	069b      	lsls	r3, r3, #26
    6c0c:	d50a      	bpl.n	6c24 <adjustlocalvars+0x9c>
    6c0e:	f89a 3005 	ldrb.w	r3, [sl, #5]
    6c12:	f013 0f18 	tst.w	r3, #24
    6c16:	d005      	beq.n	6c24 <adjustlocalvars+0x9c>
    6c18:	4652      	mov	r2, sl
    6c1a:	4629      	mov	r1, r5
    6c1c:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
    6c20:	f00d fc6d 	bl	144fe <luaC_barrier_>
  return fs->ndebugvars++;
    6c24:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
  for (i = 0; i < nvars; i++) {
    6c28:	3701      	adds	r7, #1
  return fs->ndebugvars++;
    6c2a:	1c5a      	adds	r2, r3, #1
    6c2c:	8622      	strh	r2, [r4, #48]	; 0x30
    var->vd.pidx = registerlocalvar(ls, fs, var->vd.name);
    6c2e:	f8a9 300c 	strh.w	r3, [r9, #12]
  for (i = 0; i < nvars; i++) {
    6c32:	e7b4      	b.n	6b9e <adjustlocalvars+0x16>
    f->locvars[oldsize++].varname = NULL;
    6c34:	2100      	movs	r1, #0
    6c36:	fb0b f206 	mul.w	r2, fp, r6
    6c3a:	3601      	adds	r6, #1
    6c3c:	5081      	str	r1, [r0, r2]
    6c3e:	e7d7      	b.n	6bf0 <adjustlocalvars+0x68>
    6c40:	00018512 	.word	0x00018512

00006c44 <createlabel>:
** block. Solves all pending goto's to this new label and adds
** a close instruction if necessary.
** Returns true iff it added a close instruction.
*/
static int createlabel (LexState *ls, TString *name, int line,
                        int last) {
    6c44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FuncState *fs = ls->fs;
    6c48:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
  Labellist *ll = &ls->dyd->label;
    6c4c:	6c45      	ldr	r5, [r0, #68]	; 0x44
                        int last) {
    6c4e:	4604      	mov	r4, r0
  int l = newlabelentry(ls, ll, name, line, luaK_getlabel(fs));
    6c50:	4648      	mov	r0, r9
                        int last) {
    6c52:	460f      	mov	r7, r1
    6c54:	4690      	mov	r8, r2
    6c56:	461e      	mov	r6, r3
  int l = newlabelentry(ls, ll, name, line, luaK_getlabel(fs));
    6c58:	f00b fa0b 	bl	12072 <luaK_getlabel>
    6c5c:	4643      	mov	r3, r8
    6c5e:	9000      	str	r0, [sp, #0]
    6c60:	463a      	mov	r2, r7
    6c62:	4620      	mov	r0, r4
    6c64:	f105 0118 	add.w	r1, r5, #24
    6c68:	f7ff fe68 	bl	693c <newlabelentry>
  if (last) {  /* label is last no-op statement in the block? */
    6c6c:	0100      	lsls	r0, r0, #4
    6c6e:	b12e      	cbz	r6, 6c7c <createlabel+0x38>
    /* assume that locals are already out of scope */
    ll->arr[l].nactvar = fs->bl->nactvar;
    6c70:	f8d9 200c 	ldr.w	r2, [r9, #12]
    6c74:	69ab      	ldr	r3, [r5, #24]
    6c76:	7b12      	ldrb	r2, [r2, #12]
    6c78:	4403      	add	r3, r0
    6c7a:	731a      	strb	r2, [r3, #12]
  int needsclose = 0;
    6c7c:	2700      	movs	r7, #0
  }
  if (solvegotos(ls, &ll->arr[l])) {  /* need close? */
    6c7e:	69ab      	ldr	r3, [r5, #24]
  Labellist *gl = &ls->dyd->gt;
    6c80:	f8d4 b044 	ldr.w	fp, [r4, #68]	; 0x44
  if (solvegotos(ls, &ll->arr[l])) {  /* need close? */
    6c84:	eb03 0800 	add.w	r8, r3, r0
  int i = ls->fs->bl->firstgoto;
    6c88:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6c8a:	68db      	ldr	r3, [r3, #12]
    6c8c:	689e      	ldr	r6, [r3, #8]
  while (i < gl->n) {
    6c8e:	f8db 3010 	ldr.w	r3, [fp, #16]
    6c92:	429e      	cmp	r6, r3
    6c94:	db10      	blt.n	6cb8 <createlabel+0x74>
  if (solvegotos(ls, &ll->arr[l])) {  /* need close? */
    6c96:	b15f      	cbz	r7, 6cb0 <createlabel+0x6c>
    luaK_codeABC(fs, OP_CLOSE, luaY_nvarstack(fs), 0, 0);
    6c98:	4648      	mov	r0, r9
    6c9a:	f00e fad7 	bl	1524c <luaY_nvarstack>
    6c9e:	2300      	movs	r3, #0
    6ca0:	4602      	mov	r2, r0
    6ca2:	2136      	movs	r1, #54	; 0x36
    6ca4:	4648      	mov	r0, r9
    6ca6:	e9cd 3300 	strd	r3, r3, [sp]
    6caa:	f00b f9f2 	bl	12092 <luaK_codeABCk>
    return 1;
    6cae:	2701      	movs	r7, #1
  }
  return 0;
}
    6cb0:	4638      	mov	r0, r7
    6cb2:	b003      	add	sp, #12
    6cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (eqstr(gl->arr[i].name, lb->name)) {
    6cb8:	f8db 200c 	ldr.w	r2, [fp, #12]
    6cbc:	0133      	lsls	r3, r6, #4
    6cbe:	58d0      	ldr	r0, [r2, r3]
    6cc0:	eb02 1106 	add.w	r1, r2, r6, lsl #4
    6cc4:	f8d8 2000 	ldr.w	r2, [r8]
    6cc8:	4290      	cmp	r0, r2
    6cca:	d136      	bne.n	6d3a <createlabel+0xf6>
  Labellist *gl = &ls->dyd->gt;  /* list of goto's */
    6ccc:	f8d4 a044 	ldr.w	sl, [r4, #68]	; 0x44
      needsclose |= gl->arr[i].close;
    6cd0:	7b4a      	ldrb	r2, [r1, #13]
  Labeldesc *gt = &gl->arr[g];  /* goto to be resolved */
    6cd2:	f8da 500c 	ldr.w	r5, [sl, #12]
  const char *varname = getstr(getlocalvardesc(ls->fs, gt->nactvar)->vd.name);
    6cd6:	6b20      	ldr	r0, [r4, #48]	; 0x30
  Labeldesc *gt = &gl->arr[g];  /* goto to be resolved */
    6cd8:	441d      	add	r5, r3
  if (l_unlikely(gt->nactvar < label->nactvar))  /* enter some scope? */
    6cda:	7b29      	ldrb	r1, [r5, #12]
    6cdc:	f898 300c 	ldrb.w	r3, [r8, #12]
      needsclose |= gl->arr[i].close;
    6ce0:	4317      	orrs	r7, r2
  if (l_unlikely(gt->nactvar < label->nactvar))  /* enter some scope? */
    6ce2:	428b      	cmp	r3, r1
    6ce4:	d90f      	bls.n	6d06 <createlabel+0xc2>
  const char *varname = getstr(getlocalvardesc(ls->fs, gt->nactvar)->vd.name);
    6ce6:	f00e f913 	bl	14f10 <getlocalvardesc>
    6cea:	6903      	ldr	r3, [r0, #16]
  msg = luaO_pushfstring(ls->L, msg, getstr(gt->name), gt->line, varname);
    6cec:	682a      	ldr	r2, [r5, #0]
  const char *varname = getstr(getlocalvardesc(ls->fs, gt->nactvar)->vd.name);
    6cee:	3310      	adds	r3, #16
  msg = luaO_pushfstring(ls->L, msg, getstr(gt->name), gt->line, varname);
    6cf0:	9300      	str	r3, [sp, #0]
    6cf2:	4913      	ldr	r1, [pc, #76]	; (6d40 <createlabel+0xfc>)
    6cf4:	68ab      	ldr	r3, [r5, #8]
    6cf6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6cf8:	3210      	adds	r2, #16
    6cfa:	f00e f8fc 	bl	14ef6 <luaO_pushfstring>
    6cfe:	4601      	mov	r1, r0
  luaK_semerror(ls, msg);  /* raise the error */
    6d00:	4620      	mov	r0, r4
    6d02:	f00b f964 	bl	11fce <luaK_semerror>
  luaK_patchlist(ls->fs, gt->pc, label->pc);
    6d06:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6d0a:	6869      	ldr	r1, [r5, #4]
    6d0c:	f00b f9b5 	bl	1207a <luaK_patchlist>
  for (i = g; i < gl->n - 1; i++)  /* remove goto from pending list */
    6d10:	46b4      	mov	ip, r6
    6d12:	f8da 3010 	ldr.w	r3, [sl, #16]
    6d16:	3b01      	subs	r3, #1
    6d18:	459c      	cmp	ip, r3
    6d1a:	db02      	blt.n	6d22 <createlabel+0xde>
  gl->n--;
    6d1c:	f8ca 3010 	str.w	r3, [sl, #16]
}
    6d20:	e7b5      	b.n	6c8e <createlabel+0x4a>
    gl->arr[i] = gl->arr[i + 1];
    6d22:	f8da 500c 	ldr.w	r5, [sl, #12]
    6d26:	eb05 150c 	add.w	r5, r5, ip, lsl #4
    6d2a:	f105 0310 	add.w	r3, r5, #16
    6d2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  for (i = g; i < gl->n - 1; i++)  /* remove goto from pending list */
    6d30:	f10c 0c01 	add.w	ip, ip, #1
    gl->arr[i] = gl->arr[i + 1];
    6d34:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  for (i = g; i < gl->n - 1; i++)  /* remove goto from pending list */
    6d38:	e7eb      	b.n	6d12 <createlabel+0xce>
      i++;
    6d3a:	3601      	adds	r6, #1
    6d3c:	e7a7      	b.n	6c8e <createlabel+0x4a>
    6d3e:	bf00      	nop
    6d40:	0001857c 	.word	0x0001857c

00006d44 <leaveblock>:
  }
  luaK_semerror(ls, msg);
}


static void leaveblock (FuncState *fs) {
    6d44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BlockCnt *bl = fs->bl;
  LexState *ls = fs->ls;
    6d48:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
  int hasclose = 0;
  int stklevel = reglevel(fs, bl->nactvar);  /* level outside the block */
    6d4c:	7b31      	ldrb	r1, [r6, #12]
static void leaveblock (FuncState *fs) {
    6d4e:	4604      	mov	r4, r0
  int stklevel = reglevel(fs, bl->nactvar);  /* level outside the block */
    6d50:	f00e f8e7 	bl	14f22 <reglevel>
  if (bl->isloop)  /* fix pending breaks? */
    6d54:	7bb3      	ldrb	r3, [r6, #14]
  int stklevel = reglevel(fs, bl->nactvar);  /* level outside the block */
    6d56:	4605      	mov	r5, r0
  if (bl->isloop)  /* fix pending breaks? */
    6d58:	bb33      	cbnz	r3, 6da8 <leaveblock+0x64>
    hasclose = createlabel(ls, luaS_newliteral(ls->L, "break"), 0, 0);
  if (!hasclose && bl->previous && bl->upval)
    6d5a:	6833      	ldr	r3, [r6, #0]
    6d5c:	bb93      	cbnz	r3, 6dc4 <leaveblock+0x80>
  fs->ls->dyd->actvar.n -= (fs->nactvar - tolevel);
    6d5e:	68a3      	ldr	r3, [r4, #8]
    luaK_codeABC(fs, OP_CLOSE, stklevel, 0, 0);
  fs->bl = bl->previous;
    6d60:	f8d6 a000 	ldr.w	sl, [r6]
  fs->ls->dyd->actvar.n -= (fs->nactvar - tolevel);
    6d64:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
  fs->bl = bl->previous;
    6d68:	f8c4 a00c 	str.w	sl, [r4, #12]
  removevars(fs, bl->nactvar);
    6d6c:	f896 800c 	ldrb.w	r8, [r6, #12]
  fs->ls->dyd->actvar.n -= (fs->nactvar - tolevel);
    6d70:	f8d9 3004 	ldr.w	r3, [r9, #4]
    6d74:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    6d78:	4443      	add	r3, r8
    6d7a:	1a9b      	subs	r3, r3, r2
    6d7c:	f8c9 3004 	str.w	r3, [r9, #4]
  while (fs->nactvar > tolevel) {
    6d80:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    6d84:	4588      	cmp	r8, r1
    6d86:	db29      	blt.n	6ddc <leaveblock+0x98>
  lua_assert(bl->nactvar == fs->nactvar);
  fs->freereg = stklevel;  /* free registers */
    6d88:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  ls->dyd->label.n = bl->firstlabel;  /* remove local labels */
    6d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6d8e:	6872      	ldr	r2, [r6, #4]
  for (i = bl->firstgoto; i < gl->n; i++) {  /* for each pending goto */
    6d90:	68b5      	ldr	r5, [r6, #8]
  ls->dyd->label.n = bl->firstlabel;  /* remove local labels */
    6d92:	61da      	str	r2, [r3, #28]
  if (bl->previous)  /* inner block? */
    6d94:	f1ba 0f00 	cmp.w	sl, #0
    6d98:	d044      	beq.n	6e24 <leaveblock+0xe0>
  for (i = bl->firstgoto; i < gl->n; i++) {  /* for each pending goto */
    6d9a:	f8d9 b010 	ldr.w	fp, [r9, #16]
    6d9e:	455d      	cmp	r5, fp
    6da0:	db28      	blt.n	6df4 <leaveblock+0xb0>
    movegotosout(fs, bl);  /* update pending gotos to outer block */
  else {
    if (bl->firstgoto < ls->dyd->gt.n)  /* pending gotos in outer block? */
      undefgoto(ls, &ls->dyd->gt.arr[bl->firstgoto]);  /* error */
  }
}
    6da2:	b003      	add	sp, #12
    6da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hasclose = createlabel(ls, luaS_newliteral(ls->L, "break"), 0, 0);
    6da8:	2205      	movs	r2, #5
    6daa:	492f      	ldr	r1, [pc, #188]	; (6e68 <leaveblock+0x124>)
    6dac:	6b78      	ldr	r0, [r7, #52]	; 0x34
    6dae:	f00e feb5 	bl	15b1c <luaS_newlstr>
    6db2:	2300      	movs	r3, #0
    6db4:	4601      	mov	r1, r0
    6db6:	461a      	mov	r2, r3
    6db8:	4638      	mov	r0, r7
    6dba:	f7ff ff43 	bl	6c44 <createlabel>
  if (!hasclose && bl->previous && bl->upval)
    6dbe:	2800      	cmp	r0, #0
    6dc0:	d0cb      	beq.n	6d5a <leaveblock+0x16>
    6dc2:	e7cc      	b.n	6d5e <leaveblock+0x1a>
    6dc4:	7b73      	ldrb	r3, [r6, #13]
    6dc6:	2b00      	cmp	r3, #0
    6dc8:	d0c9      	beq.n	6d5e <leaveblock+0x1a>
    luaK_codeABC(fs, OP_CLOSE, stklevel, 0, 0);
    6dca:	2300      	movs	r3, #0
    6dcc:	462a      	mov	r2, r5
    6dce:	2136      	movs	r1, #54	; 0x36
    6dd0:	4620      	mov	r0, r4
    6dd2:	e9cd 3300 	strd	r3, r3, [sp]
    6dd6:	f00b f95c 	bl	12092 <luaK_codeABCk>
    6dda:	e7c0      	b.n	6d5e <leaveblock+0x1a>
    LocVar *var = localdebuginfo(fs, --fs->nactvar);
    6ddc:	3901      	subs	r1, #1
    6dde:	b2c9      	uxtb	r1, r1
    6de0:	4620      	mov	r0, r4
    6de2:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    6de6:	f00e f8af 	bl	14f48 <localdebuginfo>
    if (var)  /* does it have debug information? */
    6dea:	2800      	cmp	r0, #0
    6dec:	d0c8      	beq.n	6d80 <leaveblock+0x3c>
      var->endpc = fs->pc;
    6dee:	6923      	ldr	r3, [r4, #16]
    6df0:	6083      	str	r3, [r0, #8]
    6df2:	e7c5      	b.n	6d80 <leaveblock+0x3c>
    Labeldesc *gt = &gl->arr[i];
    6df4:	f8d9 700c 	ldr.w	r7, [r9, #12]
    if (reglevel(fs, gt->nactvar) > reglevel(fs, bl->nactvar))
    6df8:	4620      	mov	r0, r4
    Labeldesc *gt = &gl->arr[i];
    6dfa:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    if (reglevel(fs, gt->nactvar) > reglevel(fs, bl->nactvar))
    6dfe:	7b39      	ldrb	r1, [r7, #12]
    6e00:	f00e f88f 	bl	14f22 <reglevel>
    6e04:	4641      	mov	r1, r8
    6e06:	4682      	mov	sl, r0
    6e08:	4620      	mov	r0, r4
    6e0a:	f00e f88a 	bl	14f22 <reglevel>
    6e0e:	4582      	cmp	sl, r0
      gt->close |= bl->upval;  /* jump may need a close */
    6e10:	bfc4      	itt	gt
    6e12:	7b72      	ldrbgt	r2, [r6, #13]
    6e14:	7b7b      	ldrbgt	r3, [r7, #13]
    gt->nactvar = bl->nactvar;  /* update goto level */
    6e16:	f887 800c 	strb.w	r8, [r7, #12]
      gt->close |= bl->upval;  /* jump may need a close */
    6e1a:	bfc4      	itt	gt
    6e1c:	4313      	orrgt	r3, r2
    6e1e:	737b      	strbgt	r3, [r7, #13]
  for (i = bl->firstgoto; i < gl->n; i++) {  /* for each pending goto */
    6e20:	3501      	adds	r5, #1
    6e22:	e7bc      	b.n	6d9e <leaveblock+0x5a>
    if (bl->firstgoto < ls->dyd->gt.n)  /* pending gotos in outer block? */
    6e24:	691a      	ldr	r2, [r3, #16]
    6e26:	42aa      	cmp	r2, r5
    6e28:	ddbb      	ble.n	6da2 <leaveblock+0x5e>
      undefgoto(ls, &ls->dyd->gt.arr[bl->firstgoto]);  /* error */
    6e2a:	68dc      	ldr	r4, [r3, #12]
    6e2c:	012e      	lsls	r6, r5, #4
  if (eqstr(gt->name, luaS_newliteral(ls->L, "break"))) {
    6e2e:	2205      	movs	r2, #5
    6e30:	490d      	ldr	r1, [pc, #52]	; (6e68 <leaveblock+0x124>)
    6e32:	6b78      	ldr	r0, [r7, #52]	; 0x34
    6e34:	f854 8006 	ldr.w	r8, [r4, r6]
    6e38:	f00e fe70 	bl	15b1c <luaS_newlstr>
    6e3c:	4580      	cmp	r8, r0
      undefgoto(ls, &ls->dyd->gt.arr[bl->firstgoto]);  /* error */
    6e3e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
  if (eqstr(gt->name, luaS_newliteral(ls->L, "break"))) {
    6e42:	d108      	bne.n	6e56 <leaveblock+0x112>
    msg = luaO_pushfstring(ls->L, msg, gt->line);
    6e44:	68aa      	ldr	r2, [r5, #8]
    6e46:	4909      	ldr	r1, [pc, #36]	; (6e6c <leaveblock+0x128>)
    6e48:	6b78      	ldr	r0, [r7, #52]	; 0x34
    6e4a:	f00e f854 	bl	14ef6 <luaO_pushfstring>
    msg = luaO_pushfstring(ls->L, msg, getstr(gt->name), gt->line);
    6e4e:	4601      	mov	r1, r0
  luaK_semerror(ls, msg);
    6e50:	4638      	mov	r0, r7
    6e52:	f00b f8bc 	bl	11fce <luaK_semerror>
    msg = luaO_pushfstring(ls->L, msg, getstr(gt->name), gt->line);
    6e56:	59a2      	ldr	r2, [r4, r6]
    6e58:	68ab      	ldr	r3, [r5, #8]
    6e5a:	4905      	ldr	r1, [pc, #20]	; (6e70 <leaveblock+0x12c>)
    6e5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
    6e5e:	3210      	adds	r2, #16
    6e60:	f00e f849 	bl	14ef6 <luaO_pushfstring>
    6e64:	e7f3      	b.n	6e4e <leaveblock+0x10a>
    6e66:	bf00      	nop
    6e68:	00018234 	.word	0x00018234
    6e6c:	000185b4 	.word	0x000185b4
    6e70:	000185d2 	.word	0x000185d2

00006e74 <statement>:
  luaK_ret(fs, first, nret);
  testnext(ls, ';');  /* skip optional semicolon */
}


static void statement (LexState *ls) {
    6e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e78:	4604      	mov	r4, r0
  int line = ls->linenumber;  /* may be needed for error messages */
    6e7a:	6846      	ldr	r6, [r0, #4]
static void statement (LexState *ls) {
    6e7c:	b091      	sub	sp, #68	; 0x44
  enterlevel(ls);
    6e7e:	6b40      	ldr	r0, [r0, #52]	; 0x34
    6e80:	f00e fcd4 	bl	1582c <luaE_incCstack>
  switch (ls->t.token) {
    6e84:	6923      	ldr	r3, [r4, #16]
    6e86:	2b3b      	cmp	r3, #59	; 0x3b
    6e88:	d029      	beq.n	6ede <statement+0x6a>
    6e8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
    6e8e:	4413      	add	r3, r2
    6e90:	2b1e      	cmp	r3, #30
    6e92:	f200 8367 	bhi.w	7564 <statement+0x6f0>
    6e96:	2b1e      	cmp	r3, #30
    6e98:	f200 8364 	bhi.w	7564 <statement+0x6f0>
    6e9c:	e8df f013 	tbh	[pc, r3, lsl #1]
    6ea0:	007f032a 	.word	0x007f032a
    6ea4:	03620362 	.word	0x03620362
    6ea8:	03620362 	.word	0x03620362
    6eac:	01b4008e 	.word	0x01b4008e
    6eb0:	002f0340 	.word	0x002f0340
    6eb4:	01df0362 	.word	0x01df0362
    6eb8:	03620362 	.word	0x03620362
    6ebc:	016a0362 	.word	0x016a0362
    6ec0:	036202d9 	.word	0x036202d9
    6ec4:	03620362 	.word	0x03620362
    6ec8:	03620051 	.word	0x03620051
    6ecc:	03620362 	.word	0x03620362
    6ed0:	03620362 	.word	0x03620362
    6ed4:	03620362 	.word	0x03620362
    6ed8:	03620362 	.word	0x03620362
    6edc:	02a7      	.short	0x02a7
    case ';': {  /* stat -> ';' (empty statement) */
      luaX_next(ls);  /* skip ';' */
    6ede:	4620      	mov	r0, r4
    6ee0:	f00d fdb3 	bl	14a4a <luaX_next>
      break;
    }
  }
  lua_assert(ls->fs->f->maxstacksize >= ls->fs->freereg &&
             ls->fs->freereg >= luaY_nvarstack(ls->fs));
  ls->fs->freereg = luaY_nvarstack(ls->fs);  /* free registers */
    6ee4:	6b25      	ldr	r5, [r4, #48]	; 0x30
    6ee6:	4628      	mov	r0, r5
    6ee8:	f00e f9b0 	bl	1524c <luaY_nvarstack>
    6eec:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  leavelevel(ls);
    6ef0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    6ef2:	6e13      	ldr	r3, [r2, #96]	; 0x60
    6ef4:	3b01      	subs	r3, #1
    6ef6:	6613      	str	r3, [r2, #96]	; 0x60
}
    6ef8:	b011      	add	sp, #68	; 0x44
    6efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int escapelist = NO_JUMP;  /* exit list for finished parts */
    6efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  FuncState *fs = ls->fs;
    6f02:	6b25      	ldr	r5, [r4, #48]	; 0x30
  int escapelist = NO_JUMP;  /* exit list for finished parts */
    6f04:	9308      	str	r3, [sp, #32]
    test_then_block(ls, &escapelist);  /* ELSEIF cond THEN block */
    6f06:	4620      	mov	r0, r4
    6f08:	a908      	add	r1, sp, #32
    6f0a:	f000 ff81 	bl	7e10 <test_then_block>
  while (ls->t.token == TK_ELSEIF)
    6f0e:	6923      	ldr	r3, [r4, #16]
    6f10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    6f14:	d0f7      	beq.n	6f06 <statement+0x92>
  if (testnext(ls, TK_ELSE))
    6f16:	f240 1103 	movw	r1, #259	; 0x103
    6f1a:	4620      	mov	r0, r4
    6f1c:	f00e f86d 	bl	14ffa <testnext>
    6f20:	b110      	cbz	r0, 6f28 <statement+0xb4>
    block(ls);  /* 'else' part */
    6f22:	4620      	mov	r0, r4
    6f24:	f00e fb14 	bl	15550 <block>
  check_match(ls, TK_END, TK_IF, line);
    6f28:	f240 1105 	movw	r1, #261	; 0x105
    6f2c:	4633      	mov	r3, r6
    6f2e:	f44f 7285 	mov.w	r2, #266	; 0x10a
    6f32:	4620      	mov	r0, r4
    6f34:	f7ff fdfc 	bl	6b30 <check_match>
  luaK_patchtohere(fs, escapelist);  /* patch escape list to 'if' end */
    6f38:	9908      	ldr	r1, [sp, #32]
  luaK_patchtohere(fs, condexit);  /* false conditions finish the loop */
    6f3a:	4628      	mov	r0, r5
    6f3c:	f00b f8a5 	bl	1208a <luaK_patchtohere>
}
    6f40:	e7d0      	b.n	6ee4 <statement+0x70>
  FuncState *fs = ls->fs;
    6f42:	6b25      	ldr	r5, [r4, #48]	; 0x30
  luaX_next(ls);  /* skip WHILE */
    6f44:	4620      	mov	r0, r4
    6f46:	f00d fd80 	bl	14a4a <luaX_next>
  whileinit = luaK_getlabel(fs);
    6f4a:	4628      	mov	r0, r5
    6f4c:	f00b f891 	bl	12072 <luaK_getlabel>
    6f50:	4680      	mov	r8, r0
  condexit = cond(ls);
    6f52:	4620      	mov	r0, r4
    6f54:	f00e fa2f 	bl	153b6 <cond>
  enterblock(fs, &bl, 1);
    6f58:	2201      	movs	r2, #1
  condexit = cond(ls);
    6f5a:	4607      	mov	r7, r0
  enterblock(fs, &bl, 1);
    6f5c:	a908      	add	r1, sp, #32
    6f5e:	4628      	mov	r0, r5
    6f60:	f00e f803 	bl	14f6a <enterblock>
  checknext(ls, TK_DO);
    6f64:	f44f 7181 	mov.w	r1, #258	; 0x102
    6f68:	4620      	mov	r0, r4
    6f6a:	f00e f850 	bl	1500e <checknext>
  block(ls);
    6f6e:	4620      	mov	r0, r4
    6f70:	f00e faee 	bl	15550 <block>
  luaK_jumpto(fs, whileinit);
    6f74:	4628      	mov	r0, r5
    6f76:	f7fd fc73 	bl	4860 <luaK_jump>
    6f7a:	4642      	mov	r2, r8
    6f7c:	4601      	mov	r1, r0
    6f7e:	4628      	mov	r0, r5
    6f80:	f00b f87b 	bl	1207a <luaK_patchlist>
  check_match(ls, TK_END, TK_WHILE, line);
    6f84:	f240 1105 	movw	r1, #261	; 0x105
    6f88:	4633      	mov	r3, r6
    6f8a:	f240 1215 	movw	r2, #277	; 0x115
    6f8e:	4620      	mov	r0, r4
    6f90:	f7ff fdce 	bl	6b30 <check_match>
  leaveblock(fs);
    6f94:	4628      	mov	r0, r5
    6f96:	f7ff fed5 	bl	6d44 <leaveblock>
  luaK_patchtohere(fs, condexit);  /* false conditions finish the loop */
    6f9a:	4639      	mov	r1, r7
    6f9c:	e7cd      	b.n	6f3a <statement+0xc6>
      luaX_next(ls);  /* skip DO */
    6f9e:	4620      	mov	r0, r4
    6fa0:	f00d fd53 	bl	14a4a <luaX_next>
      block(ls);
    6fa4:	4620      	mov	r0, r4
    6fa6:	f00e fad3 	bl	15550 <block>
      check_match(ls, TK_END, TK_DO, line);
    6faa:	4633      	mov	r3, r6
    6fac:	f44f 7281 	mov.w	r2, #258	; 0x102
    6fb0:	f240 1105 	movw	r1, #261	; 0x105
    6fb4:	4620      	mov	r0, r4
    6fb6:	f7ff fdbb 	bl	6b30 <check_match>
      break;
    6fba:	e793      	b.n	6ee4 <statement+0x70>
  FuncState *fs = ls->fs;
    6fbc:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
  enterblock(fs, &bl, 1);  /* scope for loop and control variables */
    6fc0:	2201      	movs	r2, #1
    6fc2:	a902      	add	r1, sp, #8
    6fc4:	4648      	mov	r0, r9
    6fc6:	f00d ffd0 	bl	14f6a <enterblock>
  luaX_next(ls);  /* skip 'for' */
    6fca:	4620      	mov	r0, r4
    6fcc:	f00d fd3d 	bl	14a4a <luaX_next>
  varname = str_checkname(ls);  /* first variable name */
    6fd0:	4620      	mov	r0, r4
    6fd2:	f00e f8ec 	bl	151ae <str_checkname>
  switch (ls->t.token) {
    6fd6:	f8d4 8010 	ldr.w	r8, [r4, #16]
  varname = str_checkname(ls);  /* first variable name */
    6fda:	4605      	mov	r5, r0
  switch (ls->t.token) {
    6fdc:	f1b8 0f3d 	cmp.w	r8, #61	; 0x3d
    6fe0:	d05e      	beq.n	70a0 <statement+0x22c>
    6fe2:	f240 130b 	movw	r3, #267	; 0x10b
    6fe6:	4598      	cmp	r8, r3
    6fe8:	d003      	beq.n	6ff2 <statement+0x17e>
    6fea:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    6fee:	f040 80bd 	bne.w	716c <statement+0x2f8>
  FuncState *fs = ls->fs;
    6ff2:	6b27      	ldr	r7, [r4, #48]	; 0x30
  new_localvarliteral(ls, "(for state)");
    6ff4:	220b      	movs	r2, #11
    6ff6:	49cc      	ldr	r1, [pc, #816]	; (7328 <statement+0x4b4>)
    6ff8:	4620      	mov	r0, r4
  int base = fs->freereg;
    6ffa:	f897 a034 	ldrb.w	sl, [r7, #52]	; 0x34
  new_localvarliteral(ls, "(for state)");
    6ffe:	f00d fcf8 	bl	149f2 <luaX_newstring>
    7002:	4601      	mov	r1, r0
    7004:	4620      	mov	r0, r4
    7006:	f7ff fd1f 	bl	6a48 <new_localvar>
  new_localvarliteral(ls, "(for state)");
    700a:	220b      	movs	r2, #11
    700c:	49c6      	ldr	r1, [pc, #792]	; (7328 <statement+0x4b4>)
    700e:	4620      	mov	r0, r4
    7010:	f00d fcef 	bl	149f2 <luaX_newstring>
    7014:	4601      	mov	r1, r0
    7016:	4620      	mov	r0, r4
    7018:	f7ff fd16 	bl	6a48 <new_localvar>
  new_localvarliteral(ls, "(for state)");
    701c:	220b      	movs	r2, #11
    701e:	49c2      	ldr	r1, [pc, #776]	; (7328 <statement+0x4b4>)
    7020:	4620      	mov	r0, r4
    7022:	f00d fce6 	bl	149f2 <luaX_newstring>
    7026:	4601      	mov	r1, r0
    7028:	4620      	mov	r0, r4
    702a:	f7ff fd0d 	bl	6a48 <new_localvar>
  new_localvarliteral(ls, "(for state)");
    702e:	220b      	movs	r2, #11
    7030:	49bd      	ldr	r1, [pc, #756]	; (7328 <statement+0x4b4>)
    7032:	4620      	mov	r0, r4
    7034:	f00d fcdd 	bl	149f2 <luaX_newstring>
    7038:	4601      	mov	r1, r0
    703a:	4620      	mov	r0, r4
    703c:	f7ff fd04 	bl	6a48 <new_localvar>
  new_localvar(ls, indexname);
    7040:	4629      	mov	r1, r5
    7042:	4620      	mov	r0, r4
    7044:	f7ff fd00 	bl	6a48 <new_localvar>
  int nvars = 5;  /* gen, state, control, toclose, 'indexname' */
    7048:	f04f 0805 	mov.w	r8, #5
  while (testnext(ls, ',')) {
    704c:	212c      	movs	r1, #44	; 0x2c
    704e:	4620      	mov	r0, r4
    7050:	f00d ffd3 	bl	14ffa <testnext>
    7054:	2800      	cmp	r0, #0
    7056:	d17f      	bne.n	7158 <statement+0x2e4>
  checknext(ls, TK_IN);
    7058:	f240 110b 	movw	r1, #267	; 0x10b
    705c:	4620      	mov	r0, r4
    705e:	f00d ffd6 	bl	1500e <checknext>
  adjust_assign(ls, 4, explist(ls, &e), &e);
    7062:	a908      	add	r1, sp, #32
    7064:	4620      	mov	r0, r4
  line = ls->linenumber;
    7066:	f8d4 b004 	ldr.w	fp, [r4, #4]
  adjust_assign(ls, 4, explist(ls, &e), &e);
    706a:	f00e f98d 	bl	15388 <explist>
  bl->upval = 1;
    706e:	2501      	movs	r5, #1
  adjust_assign(ls, 4, explist(ls, &e), &e);
    7070:	4602      	mov	r2, r0
    7072:	ab08      	add	r3, sp, #32
    7074:	2104      	movs	r1, #4
    7076:	6b20      	ldr	r0, [r4, #48]	; 0x30
    7078:	f00e f870 	bl	1515c <adjust_assign.isra.0>
  adjustlocalvars(ls, 4);  /* control variables */
    707c:	2104      	movs	r1, #4
    707e:	4620      	mov	r0, r4
    7080:	f7ff fd82 	bl	6b88 <adjustlocalvars>
  BlockCnt *bl = fs->bl;
    7084:	68fb      	ldr	r3, [r7, #12]
  luaK_checkstack(fs, 3);  /* extra space to call generator */
    7086:	2103      	movs	r1, #3
  bl->upval = 1;
    7088:	735d      	strb	r5, [r3, #13]
  bl->insidetbc = 1;
    708a:	73dd      	strb	r5, [r3, #15]
  luaK_checkstack(fs, 3);  /* extra space to call generator */
    708c:	4638      	mov	r0, r7
  fs->needclose = 1;
    708e:	f887 5036 	strb.w	r5, [r7, #54]	; 0x36
  luaK_checkstack(fs, 3);  /* extra space to call generator */
    7092:	f7fd fc35 	bl	4900 <luaK_checkstack>
  forbody(ls, base, line, nvars - 4, 1);
    7096:	465a      	mov	r2, fp
    7098:	9500      	str	r5, [sp, #0]
    709a:	f1a8 0304 	sub.w	r3, r8, #4
    709e:	e03f      	b.n	7120 <statement+0x2ac>
  FuncState *fs = ls->fs;
    70a0:	6b27      	ldr	r7, [r4, #48]	; 0x30
  new_localvarliteral(ls, "(for state)");
    70a2:	220b      	movs	r2, #11
    70a4:	49a0      	ldr	r1, [pc, #640]	; (7328 <statement+0x4b4>)
    70a6:	4620      	mov	r0, r4
  int base = fs->freereg;
    70a8:	f897 a034 	ldrb.w	sl, [r7, #52]	; 0x34
  new_localvarliteral(ls, "(for state)");
    70ac:	f00d fca1 	bl	149f2 <luaX_newstring>
    70b0:	4601      	mov	r1, r0
    70b2:	4620      	mov	r0, r4
    70b4:	f7ff fcc8 	bl	6a48 <new_localvar>
  new_localvarliteral(ls, "(for state)");
    70b8:	220b      	movs	r2, #11
    70ba:	499b      	ldr	r1, [pc, #620]	; (7328 <statement+0x4b4>)
    70bc:	4620      	mov	r0, r4
    70be:	f00d fc98 	bl	149f2 <luaX_newstring>
    70c2:	4601      	mov	r1, r0
    70c4:	4620      	mov	r0, r4
    70c6:	f7ff fcbf 	bl	6a48 <new_localvar>
  new_localvarliteral(ls, "(for state)");
    70ca:	220b      	movs	r2, #11
    70cc:	4996      	ldr	r1, [pc, #600]	; (7328 <statement+0x4b4>)
    70ce:	4620      	mov	r0, r4
    70d0:	f00d fc8f 	bl	149f2 <luaX_newstring>
    70d4:	4601      	mov	r1, r0
    70d6:	4620      	mov	r0, r4
    70d8:	f7ff fcb6 	bl	6a48 <new_localvar>
  new_localvar(ls, varname);
    70dc:	4629      	mov	r1, r5
    70de:	4620      	mov	r0, r4
    70e0:	f7ff fcb2 	bl	6a48 <new_localvar>
  checknext(ls, '=');
    70e4:	4641      	mov	r1, r8
    70e6:	4620      	mov	r0, r4
    70e8:	f00d ff91 	bl	1500e <checknext>
  exp1(ls);  /* initial value */
    70ec:	4620      	mov	r0, r4
    70ee:	f00e f977 	bl	153e0 <exp1>
  checknext(ls, ',');
    70f2:	212c      	movs	r1, #44	; 0x2c
    70f4:	4620      	mov	r0, r4
    70f6:	f00d ff8a 	bl	1500e <checknext>
  exp1(ls);  /* limit */
    70fa:	4620      	mov	r0, r4
    70fc:	f00e f970 	bl	153e0 <exp1>
  if (testnext(ls, ','))
    7100:	212c      	movs	r1, #44	; 0x2c
    7102:	4620      	mov	r0, r4
    7104:	f00d ff79 	bl	14ffa <testnext>
    7108:	b1d0      	cbz	r0, 7140 <statement+0x2cc>
    exp1(ls);  /* optional step */
    710a:	4620      	mov	r0, r4
    710c:	f00e f968 	bl	153e0 <exp1>
  adjustlocalvars(ls, 3);  /* control variables */
    7110:	2103      	movs	r1, #3
    7112:	4620      	mov	r0, r4
    7114:	f7ff fd38 	bl	6b88 <adjustlocalvars>
  forbody(ls, base, line, 1, 0);
    7118:	2300      	movs	r3, #0
    711a:	4632      	mov	r2, r6
    711c:	9300      	str	r3, [sp, #0]
    711e:	2301      	movs	r3, #1
  forbody(ls, base, line, nvars - 4, 1);
    7120:	4651      	mov	r1, sl
    7122:	4620      	mov	r0, r4
    7124:	f000 fede 	bl	7ee4 <forbody>
  check_match(ls, TK_END, TK_FOR, line);
    7128:	4620      	mov	r0, r4
    712a:	4633      	mov	r3, r6
    712c:	f240 1207 	movw	r2, #263	; 0x107
    7130:	f240 1105 	movw	r1, #261	; 0x105
    7134:	f7ff fcfc 	bl	6b30 <check_match>
  leaveblock(fs);  /* loop scope ('break' jumps to this point) */
    7138:	4648      	mov	r0, r9
  leaveblock(fs);  /* finish loop */
    713a:	f7ff fe03 	bl	6d44 <leaveblock>
}
    713e:	e6d1      	b.n	6ee4 <statement+0x70>
    luaK_int(fs, fs->freereg, 1);
    7140:	4638      	mov	r0, r7
    7142:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
    7146:	2201      	movs	r2, #1
    7148:	2300      	movs	r3, #0
    714a:	f00a fff6 	bl	1213a <luaK_int>
    luaK_reserveregs(fs, 1);
    714e:	2101      	movs	r1, #1
    7150:	4638      	mov	r0, r7
    7152:	f00a ffe7 	bl	12124 <luaK_reserveregs>
    7156:	e7db      	b.n	7110 <statement+0x29c>
    new_localvar(ls, str_checkname(ls));
    7158:	4620      	mov	r0, r4
    715a:	f00e f828 	bl	151ae <str_checkname>
    715e:	4601      	mov	r1, r0
    7160:	4620      	mov	r0, r4
    7162:	f7ff fc71 	bl	6a48 <new_localvar>
    nvars++;
    7166:	f108 0801 	add.w	r8, r8, #1
    716a:	e76f      	b.n	704c <statement+0x1d8>
    default: luaX_syntaxerror(ls, "'=' or 'in' expected");
    716c:	496f      	ldr	r1, [pc, #444]	; (732c <statement+0x4b8>)
    check_condition(ls, v.v.k == VCALL, "syntax error");
    716e:	4620      	mov	r0, r4
    7170:	f00d fc3b 	bl	149ea <luaX_syntaxerror>
  FuncState *fs = ls->fs;
    7174:	6b25      	ldr	r5, [r4, #48]	; 0x30
  int repeat_init = luaK_getlabel(fs);
    7176:	4628      	mov	r0, r5
    7178:	f00a ff7b 	bl	12072 <luaK_getlabel>
  enterblock(fs, &bl1, 1);  /* loop block */
    717c:	2201      	movs	r2, #1
    717e:	a902      	add	r1, sp, #8
  int repeat_init = luaK_getlabel(fs);
    7180:	4607      	mov	r7, r0
  enterblock(fs, &bl1, 1);  /* loop block */
    7182:	4628      	mov	r0, r5
    7184:	f00d fef1 	bl	14f6a <enterblock>
  enterblock(fs, &bl2, 0);  /* scope block */
    7188:	2200      	movs	r2, #0
    718a:	a908      	add	r1, sp, #32
    718c:	f00d feed 	bl	14f6a <enterblock>
  luaX_next(ls);  /* skip REPEAT */
    7190:	4620      	mov	r0, r4
    7192:	f00d fc5a 	bl	14a4a <luaX_next>
  statlist(ls);
    7196:	4620      	mov	r0, r4
    7198:	f00e f8cb 	bl	15332 <statlist>
  check_match(ls, TK_UNTIL, TK_REPEAT, line);
    719c:	4633      	mov	r3, r6
    719e:	f44f 7288 	mov.w	r2, #272	; 0x110
    71a2:	f44f 718a 	mov.w	r1, #276	; 0x114
    71a6:	4620      	mov	r0, r4
    71a8:	f7ff fcc2 	bl	6b30 <check_match>
  condexit = cond(ls);  /* read condition (inside scope block) */
    71ac:	4620      	mov	r0, r4
    71ae:	f00e f902 	bl	153b6 <cond>
    71b2:	4606      	mov	r6, r0
  leaveblock(fs);  /* finish scope */
    71b4:	4628      	mov	r0, r5
    71b6:	f7ff fdc5 	bl	6d44 <leaveblock>
  if (bl2.upval) {  /* upvalues? */
    71ba:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    71be:	b1e3      	cbz	r3, 71fa <statement+0x386>
    int exit = luaK_jump(fs);  /* normal exit must jump over fix */
    71c0:	4628      	mov	r0, r5
    71c2:	f7fd fb4d 	bl	4860 <luaK_jump>
    luaK_patchtohere(fs, condexit);  /* repetition must close upvalues */
    71c6:	4631      	mov	r1, r6
    int exit = luaK_jump(fs);  /* normal exit must jump over fix */
    71c8:	4680      	mov	r8, r0
    luaK_patchtohere(fs, condexit);  /* repetition must close upvalues */
    71ca:	4628      	mov	r0, r5
    71cc:	f00a ff5d 	bl	1208a <luaK_patchtohere>
    luaK_codeABC(fs, OP_CLOSE, reglevel(fs, bl2.nactvar), 0, 0);
    71d0:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
    71d4:	4628      	mov	r0, r5
    71d6:	f00d fea4 	bl	14f22 <reglevel>
    71da:	2300      	movs	r3, #0
    71dc:	4602      	mov	r2, r0
    71de:	2136      	movs	r1, #54	; 0x36
    71e0:	e9cd 3300 	strd	r3, r3, [sp]
    71e4:	4628      	mov	r0, r5
    71e6:	f00a ff54 	bl	12092 <luaK_codeABCk>
    condexit = luaK_jump(fs);  /* repeat after closing upvalues */
    71ea:	4628      	mov	r0, r5
    71ec:	f7fd fb38 	bl	4860 <luaK_jump>
    luaK_patchtohere(fs, exit);  /* normal exit comes to here */
    71f0:	4641      	mov	r1, r8
    condexit = luaK_jump(fs);  /* repeat after closing upvalues */
    71f2:	4606      	mov	r6, r0
    luaK_patchtohere(fs, exit);  /* normal exit comes to here */
    71f4:	4628      	mov	r0, r5
    71f6:	f00a ff48 	bl	1208a <luaK_patchtohere>
  luaK_patchlist(fs, condexit, repeat_init);  /* close the loop */
    71fa:	4628      	mov	r0, r5
    71fc:	463a      	mov	r2, r7
    71fe:	4631      	mov	r1, r6
    7200:	f00a ff3b 	bl	1207a <luaK_patchlist>
  leaveblock(fs);  /* finish loop */
    7204:	4628      	mov	r0, r5
    7206:	e798      	b.n	713a <statement+0x2c6>
  luaX_next(ls);  /* skip FUNCTION */
    7208:	4620      	mov	r0, r4
    720a:	f00d fc1e 	bl	14a4a <luaX_next>
  singlevar(ls, v);
    720e:	4620      	mov	r0, r4
    7210:	a902      	add	r1, sp, #8
    7212:	f00d fff6 	bl	15202 <singlevar>
  while (ls->t.token == '.')
    7216:	6923      	ldr	r3, [r4, #16]
    7218:	2b2e      	cmp	r3, #46	; 0x2e
    721a:	d019      	beq.n	7250 <statement+0x3dc>
  if (ls->t.token == ':') {
    721c:	2b3a      	cmp	r3, #58	; 0x3a
    721e:	d11c      	bne.n	725a <statement+0x3e6>
    fieldsel(ls, v);
    7220:	4620      	mov	r0, r4
    7222:	a902      	add	r1, sp, #8
    7224:	f00d ffd0 	bl	151c8 <fieldsel>
    ismethod = 1;
    7228:	2201      	movs	r2, #1
  body(ls, &b, ismethod, line);
    722a:	4633      	mov	r3, r6
    722c:	4620      	mov	r0, r4
    722e:	a908      	add	r1, sp, #32
    7230:	f000 f9e6 	bl	7600 <body>
  check_readonly(ls, &v);
    7234:	4620      	mov	r0, r4
    7236:	a902      	add	r1, sp, #8
    7238:	f7ff fc3a 	bl	6ab0 <check_readonly>
  luaK_storevar(ls->fs, &v, &b);
    723c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    723e:	a902      	add	r1, sp, #8
    7240:	aa08      	add	r2, sp, #32
    7242:	f00b fa3c 	bl	126be <luaK_storevar>
  luaK_fixline(ls->fs, line);  /* definition "happens" in the first line */
    7246:	4631      	mov	r1, r6
    7248:	6b20      	ldr	r0, [r4, #48]	; 0x30
    724a:	f00b fb9e 	bl	1298a <luaK_fixline>
}
    724e:	e649      	b.n	6ee4 <statement+0x70>
    fieldsel(ls, v);
    7250:	4620      	mov	r0, r4
    7252:	a902      	add	r1, sp, #8
    7254:	f00d ffb8 	bl	151c8 <fieldsel>
    7258:	e7dd      	b.n	7216 <statement+0x3a2>
  int ismethod = 0;
    725a:	2200      	movs	r2, #0
    725c:	e7e5      	b.n	722a <statement+0x3b6>
      luaX_next(ls);  /* skip LOCAL */
    725e:	4620      	mov	r0, r4
    7260:	f00d fbf3 	bl	14a4a <luaX_next>
      if (testnext(ls, TK_FUNCTION))  /* local function? */
    7264:	f44f 7184 	mov.w	r1, #264	; 0x108
    7268:	4620      	mov	r0, r4
    726a:	f00d fec6 	bl	14ffa <testnext>
    726e:	6b25      	ldr	r5, [r4, #48]	; 0x30
    7270:	4607      	mov	r7, r0
    7272:	b1c8      	cbz	r0, 72a8 <statement+0x434>
  new_localvar(ls, str_checkname(ls));  /* new local variable */
    7274:	4620      	mov	r0, r4
  int fvar = fs->nactvar;  /* function's variable index */
    7276:	f895 6032 	ldrb.w	r6, [r5, #50]	; 0x32
  new_localvar(ls, str_checkname(ls));  /* new local variable */
    727a:	f00d ff98 	bl	151ae <str_checkname>
    727e:	4601      	mov	r1, r0
    7280:	4620      	mov	r0, r4
    7282:	f7ff fbe1 	bl	6a48 <new_localvar>
  adjustlocalvars(ls, 1);  /* enter its scope */
    7286:	2101      	movs	r1, #1
    7288:	4620      	mov	r0, r4
    728a:	f7ff fc7d 	bl	6b88 <adjustlocalvars>
  body(ls, &b, 0, ls->linenumber);  /* function created in next register */
    728e:	6863      	ldr	r3, [r4, #4]
    7290:	2200      	movs	r2, #0
    7292:	4620      	mov	r0, r4
    7294:	a908      	add	r1, sp, #32
    7296:	f000 f9b3 	bl	7600 <body>
  localdebuginfo(fs, fvar)->startpc = fs->pc;
    729a:	4631      	mov	r1, r6
    729c:	4628      	mov	r0, r5
    729e:	f00d fe53 	bl	14f48 <localdebuginfo>
    72a2:	692b      	ldr	r3, [r5, #16]
    72a4:	6043      	str	r3, [r0, #4]
}
    72a6:	e61d      	b.n	6ee4 <statement+0x70>
  int toclose = -1;  /* index of to-be-closed variable (if any) */
    72a8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    if (strcmp(attr, "const") == 0)
    72ac:	4e20      	ldr	r6, [pc, #128]	; (7330 <statement+0x4bc>)
    else if (strcmp(attr, "close") == 0)
    72ae:	f8df b084 	ldr.w	fp, [pc, #132]	; 7334 <statement+0x4c0>
    vidx = new_localvar(ls, str_checkname(ls));
    72b2:	4620      	mov	r0, r4
    72b4:	f00d ff7b 	bl	151ae <str_checkname>
    72b8:	4601      	mov	r1, r0
    72ba:	4620      	mov	r0, r4
    72bc:	f7ff fbc4 	bl	6a48 <new_localvar>
  if (testnext(ls, '<')) {
    72c0:	213c      	movs	r1, #60	; 0x3c
    vidx = new_localvar(ls, str_checkname(ls));
    72c2:	4682      	mov	sl, r0
  if (testnext(ls, '<')) {
    72c4:	4620      	mov	r0, r4
    72c6:	f00d fe98 	bl	14ffa <testnext>
    72ca:	4602      	mov	r2, r0
    72cc:	b1e0      	cbz	r0, 7308 <statement+0x494>
    const char *attr = getstr(str_checkname(ls));
    72ce:	4620      	mov	r0, r4
    72d0:	f00d ff6d 	bl	151ae <str_checkname>
    checknext(ls, '>');
    72d4:	213e      	movs	r1, #62	; 0x3e
    const char *attr = getstr(str_checkname(ls));
    72d6:	f100 0910 	add.w	r9, r0, #16
    checknext(ls, '>');
    72da:	4620      	mov	r0, r4
    72dc:	f00d fe97 	bl	1500e <checknext>
    if (strcmp(attr, "const") == 0)
    72e0:	4631      	mov	r1, r6
    72e2:	4648      	mov	r0, r9
    72e4:	f7f9 fdba 	bl	e5c <strcmp>
    72e8:	b168      	cbz	r0, 7306 <statement+0x492>
    else if (strcmp(attr, "close") == 0)
    72ea:	4659      	mov	r1, fp
    72ec:	4648      	mov	r0, r9
    72ee:	f7f9 fdb5 	bl	e5c <strcmp>
    72f2:	b1b8      	cbz	r0, 7324 <statement+0x4b0>
      luaK_semerror(ls,
    72f4:	464a      	mov	r2, r9
    72f6:	4910      	ldr	r1, [pc, #64]	; (7338 <statement+0x4c4>)
    72f8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    72fa:	f00d fdfc 	bl	14ef6 <luaO_pushfstring>
    msg = luaO_pushfstring(ls->L, msg, getstr(name), lb->line);
    72fe:	4601      	mov	r1, r0
    7300:	e00d      	b.n	731e <statement+0x4aa>
    nvars++;
    7302:	464f      	mov	r7, r9
    7304:	e7d5      	b.n	72b2 <statement+0x43e>
      return RDKCONST;  /* read-only variable */
    7306:	2201      	movs	r2, #1
    getlocalvardesc(fs, vidx)->vd.kind = kind;
    7308:	4651      	mov	r1, sl
    730a:	4628      	mov	r0, r5
    730c:	f00d fe00 	bl	14f10 <getlocalvardesc>
    if (kind == RDKTOCLOSE) {  /* to-be-closed? */
    7310:	2a02      	cmp	r2, #2
    getlocalvardesc(fs, vidx)->vd.kind = kind;
    7312:	7242      	strb	r2, [r0, #9]
    if (kind == RDKTOCLOSE) {  /* to-be-closed? */
    7314:	d117      	bne.n	7346 <statement+0x4d2>
      if (toclose != -1)  /* one already present? */
    7316:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    731a:	d011      	beq.n	7340 <statement+0x4cc>
        luaK_semerror(ls, "multiple to-be-closed variables in local list");
    731c:	4907      	ldr	r1, [pc, #28]	; (733c <statement+0x4c8>)
    luaK_semerror(ls, msg);  /* error */
    731e:	4620      	mov	r0, r4
    7320:	f00a fe55 	bl	11fce <luaK_semerror>
      return RDKTOCLOSE;  /* to-be-closed variable */
    7324:	2202      	movs	r2, #2
    7326:	e7ef      	b.n	7308 <statement+0x494>
    7328:	000185fe 	.word	0x000185fe
    732c:	0001860a 	.word	0x0001860a
    7330:	0001861f 	.word	0x0001861f
    7334:	0001889b 	.word	0x0001889b
    7338:	00018625 	.word	0x00018625
    733c:	0001863c 	.word	0x0001863c
      toclose = fs->nactvar + nvars;
    7340:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
    7344:	44b8      	add	r8, r7
  } while (testnext(ls, ','));
    7346:	212c      	movs	r1, #44	; 0x2c
    7348:	4620      	mov	r0, r4
    nvars++;
    734a:	f107 0901 	add.w	r9, r7, #1
  } while (testnext(ls, ','));
    734e:	f00d fe54 	bl	14ffa <testnext>
    7352:	2800      	cmp	r0, #0
    7354:	d1d5      	bne.n	7302 <statement+0x48e>
  if (testnext(ls, '='))
    7356:	213d      	movs	r1, #61	; 0x3d
    7358:	4620      	mov	r0, r4
    735a:	f00d fe4e 	bl	14ffa <testnext>
    735e:	4606      	mov	r6, r0
    7360:	b3b8      	cbz	r0, 73d2 <statement+0x55e>
    nexps = explist(ls, &e);
    7362:	4620      	mov	r0, r4
    7364:	a908      	add	r1, sp, #32
    7366:	f00e f80f 	bl	15388 <explist>
    736a:	4606      	mov	r6, r0
  if (nvars == nexps &&  /* no adjustments? */
    736c:	45b1      	cmp	r9, r6
    736e:	d133      	bne.n	73d8 <statement+0x564>
  var = getlocalvardesc(fs, vidx);  /* get last variable */
    7370:	4651      	mov	r1, sl
    7372:	4628      	mov	r0, r5
    7374:	f00d fdcc 	bl	14f10 <getlocalvardesc>
  if (nvars == nexps &&  /* no adjustments? */
    7378:	7a43      	ldrb	r3, [r0, #9]
  var = getlocalvardesc(fs, vidx);  /* get last variable */
    737a:	4682      	mov	sl, r0
  if (nvars == nexps &&  /* no adjustments? */
    737c:	2b01      	cmp	r3, #1
    737e:	d12b      	bne.n	73d8 <statement+0x564>
      luaK_exp2const(fs, &e, &var->k)) {  /* compile-time constant? */
    7380:	4602      	mov	r2, r0
    7382:	a908      	add	r1, sp, #32
    7384:	4628      	mov	r0, r5
    7386:	f00a fe27 	bl	11fd8 <luaK_exp2const>
      var->vd.kind == RDKCONST &&  /* last variable is const? */
    738a:	b328      	cbz	r0, 73d8 <statement+0x564>
    var->vd.kind = RDKCTC;  /* variable is a compile-time constant */
    738c:	2303      	movs	r3, #3
    adjustlocalvars(ls, nvars - 1);  /* exclude last variable */
    738e:	4639      	mov	r1, r7
    var->vd.kind = RDKCTC;  /* variable is a compile-time constant */
    7390:	f88a 3009 	strb.w	r3, [sl, #9]
    adjustlocalvars(ls, nvars - 1);  /* exclude last variable */
    7394:	4620      	mov	r0, r4
    7396:	f7ff fbf7 	bl	6b88 <adjustlocalvars>
    fs->nactvar++;  /* but count it */
    739a:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    739e:	3301      	adds	r3, #1
    73a0:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
  if (level != -1) {  /* is there a to-be-closed variable? */
    73a4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    73a8:	f43f ad9c 	beq.w	6ee4 <statement+0x70>
  bl->upval = 1;
    73ac:	2301      	movs	r3, #1
  BlockCnt *bl = fs->bl;
    73ae:	68ea      	ldr	r2, [r5, #12]
    luaK_codeABC(fs, OP_TBC, reglevel(fs, level), 0, 0);
    73b0:	4641      	mov	r1, r8
  bl->upval = 1;
    73b2:	7353      	strb	r3, [r2, #13]
  bl->insidetbc = 1;
    73b4:	73d3      	strb	r3, [r2, #15]
    luaK_codeABC(fs, OP_TBC, reglevel(fs, level), 0, 0);
    73b6:	4628      	mov	r0, r5
  fs->needclose = 1;
    73b8:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
    luaK_codeABC(fs, OP_TBC, reglevel(fs, level), 0, 0);
    73bc:	f00d fdb1 	bl	14f22 <reglevel>
    73c0:	2300      	movs	r3, #0
    73c2:	4602      	mov	r2, r0
    73c4:	2137      	movs	r1, #55	; 0x37
    73c6:	4628      	mov	r0, r5
    73c8:	e9cd 3300 	strd	r3, r3, [sp]
    73cc:	f00a fe61 	bl	12092 <luaK_codeABCk>
}
    73d0:	e588      	b.n	6ee4 <statement+0x70>
    e.k = VVOID;
    73d2:	f88d 0020 	strb.w	r0, [sp, #32]
    nexps = 0;
    73d6:	e7c9      	b.n	736c <statement+0x4f8>
    adjust_assign(ls, nvars, nexps, &e);
    73d8:	4649      	mov	r1, r9
    73da:	6b20      	ldr	r0, [r4, #48]	; 0x30
    73dc:	4632      	mov	r2, r6
    73de:	ab08      	add	r3, sp, #32
    73e0:	f00d febc 	bl	1515c <adjust_assign.isra.0>
    adjustlocalvars(ls, nvars);
    73e4:	4649      	mov	r1, r9
    73e6:	4620      	mov	r0, r4
    73e8:	f7ff fbce 	bl	6b88 <adjustlocalvars>
    73ec:	e7da      	b.n	73a4 <statement+0x530>
      luaX_next(ls);  /* skip double colon */
    73ee:	4620      	mov	r0, r4
    73f0:	f00d fb2b 	bl	14a4a <luaX_next>
      labelstat(ls, str_checkname(ls), line);
    73f4:	4620      	mov	r0, r4
    73f6:	f00d feda 	bl	151ae <str_checkname>
  checknext(ls, TK_DBCOLON);  /* skip double colon */
    73fa:	f240 111f 	movw	r1, #287	; 0x11f
      labelstat(ls, str_checkname(ls), line);
    73fe:	4605      	mov	r5, r0
  checknext(ls, TK_DBCOLON);  /* skip double colon */
    7400:	4620      	mov	r0, r4
    7402:	f00d fe04 	bl	1500e <checknext>
  while (ls->t.token == ';' || ls->t.token == TK_DBCOLON)
    7406:	f240 171f 	movw	r7, #287	; 0x11f
    740a:	6920      	ldr	r0, [r4, #16]
    740c:	283b      	cmp	r0, #59	; 0x3b
    740e:	d012      	beq.n	7436 <statement+0x5c2>
    7410:	42b8      	cmp	r0, r7
    7412:	d010      	beq.n	7436 <statement+0x5c2>
  Dyndata *dyd = ls->dyd;
    7414:	6c61      	ldr	r1, [r4, #68]	; 0x44
  for (i = ls->fs->firstlabel; i < dyd->label.n; i++) {
    7416:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7418:	f8d1 e01c 	ldr.w	lr, [r1, #28]
    741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    741e:	4573      	cmp	r3, lr
    7420:	db0d      	blt.n	743e <statement+0x5ca>
  createlabel(ls, name, line, block_follow(ls, 0));
    7422:	2100      	movs	r1, #0
    7424:	f00d fe87 	bl	15136 <block_follow.isra.0>
    7428:	4632      	mov	r2, r6
    742a:	4603      	mov	r3, r0
    742c:	4629      	mov	r1, r5
    742e:	4620      	mov	r0, r4
    7430:	f7ff fc08 	bl	6c44 <createlabel>
}
    7434:	e556      	b.n	6ee4 <statement+0x70>
    statement(ls);  /* skip other no-op statements */
    7436:	4620      	mov	r0, r4
    7438:	f7ff fd1c 	bl	6e74 <statement>
    743c:	e7e5      	b.n	740a <statement+0x596>
    Labeldesc *lb = &dyd->label.arr[i];
    743e:	698f      	ldr	r7, [r1, #24]
    7440:	011a      	lsls	r2, r3, #4
    if (eqstr(lb->name, name))  /* correct label? */
    7442:	58ba      	ldr	r2, [r7, r2]
    Labeldesc *lb = &dyd->label.arr[i];
    7444:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
    if (eqstr(lb->name, name))  /* correct label? */
    7448:	4295      	cmp	r5, r2
    744a:	f000 80ca 	beq.w	75e2 <statement+0x76e>
  for (i = ls->fs->firstlabel; i < dyd->label.n; i++) {
    744e:	3301      	adds	r3, #1
    7450:	e7e5      	b.n	741e <statement+0x5aa>
      luaX_next(ls);  /* skip RETURN */
    7452:	4620      	mov	r0, r4
    7454:	f00d faf9 	bl	14a4a <luaX_next>
  FuncState *fs = ls->fs;
    7458:	6b26      	ldr	r6, [r4, #48]	; 0x30
  int first = luaY_nvarstack(fs);  /* first slot to be returned */
    745a:	4630      	mov	r0, r6
    745c:	f00d fef6 	bl	1524c <luaY_nvarstack>
    7460:	f8d4 8010 	ldr.w	r8, [r4, #16]
    7464:	4607      	mov	r7, r0
  if (block_follow(ls, 1) || ls->t.token == ';')
    7466:	2101      	movs	r1, #1
    7468:	4640      	mov	r0, r8
    746a:	f00d fe64 	bl	15136 <block_follow.isra.0>
    746e:	4605      	mov	r5, r0
    7470:	2800      	cmp	r0, #0
    7472:	d13d      	bne.n	74f0 <statement+0x67c>
    7474:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    7478:	d02d      	beq.n	74d6 <statement+0x662>
    nret = explist(ls, &e);  /* optional return values */
    747a:	4620      	mov	r0, r4
    747c:	a908      	add	r1, sp, #32
    747e:	f00d ff83 	bl	15388 <explist>
    if (hasmultret(e.k)) {
    7482:	f89d 3020 	ldrb.w	r3, [sp, #32]
    nret = explist(ls, &e);  /* optional return values */
    7486:	4605      	mov	r5, r0
    if (hasmultret(e.k)) {
    7488:	3b12      	subs	r3, #18
    748a:	2b01      	cmp	r3, #1
    748c:	d81c      	bhi.n	74c8 <statement+0x654>
      luaK_setmultret(fs, &e);
    748e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7492:	4630      	mov	r0, r6
    7494:	a908      	add	r1, sp, #32
    7496:	f00a fe76 	bl	12186 <luaK_setreturns>
      if (e.k == VCALL && nret == 1 && !fs->bl->insidetbc) {  /* tail call? */
    749a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    749e:	2b12      	cmp	r3, #18
    74a0:	d10f      	bne.n	74c2 <statement+0x64e>
    74a2:	2d01      	cmp	r5, #1
    74a4:	d10d      	bne.n	74c2 <statement+0x64e>
    74a6:	68f3      	ldr	r3, [r6, #12]
    74a8:	7bdb      	ldrb	r3, [r3, #15]
    74aa:	b953      	cbnz	r3, 74c2 <statement+0x64e>
        SET_OPCODE(getinstruction(fs,&e), OP_TAILCALL);
    74ac:	6833      	ldr	r3, [r6, #0]
    74ae:	990a      	ldr	r1, [sp, #40]	; 0x28
    74b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    74b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    74b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    74ba:	f043 0345 	orr.w	r3, r3, #69	; 0x45
    74be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      nret = LUA_MULTRET;  /* return all values */
    74c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    74c6:	e006      	b.n	74d6 <statement+0x662>
      if (nret == 1)  /* only one single value? */
    74c8:	2d01      	cmp	r5, #1
        first = luaK_exp2anyreg(fs, &e);  /* can use original slot */
    74ca:	4630      	mov	r0, r6
    74cc:	a908      	add	r1, sp, #32
      if (nret == 1)  /* only one single value? */
    74ce:	d10c      	bne.n	74ea <statement+0x676>
        first = luaK_exp2anyreg(fs, &e);  /* can use original slot */
    74d0:	f00b f84c 	bl	1256c <luaK_exp2anyreg>
    74d4:	4607      	mov	r7, r0
  luaK_ret(fs, first, nret);
    74d6:	4639      	mov	r1, r7
    74d8:	4630      	mov	r0, r6
    74da:	462a      	mov	r2, r5
    74dc:	f00a fde7 	bl	120ae <luaK_ret>
  testnext(ls, ';');  /* skip optional semicolon */
    74e0:	213b      	movs	r1, #59	; 0x3b
    74e2:	4620      	mov	r0, r4
    74e4:	f00d fd89 	bl	14ffa <testnext>
}
    74e8:	e4fc      	b.n	6ee4 <statement+0x70>
        luaK_exp2nextreg(fs, &e);
    74ea:	f00b f829 	bl	12540 <luaK_exp2nextreg>
    74ee:	e7f2      	b.n	74d6 <statement+0x662>
    nret = 0;  /* return no values */
    74f0:	2500      	movs	r5, #0
    74f2:	e7f0      	b.n	74d6 <statement+0x662>
  luaX_next(ls);  /* skip break */
    74f4:	4620      	mov	r0, r4
  int line = ls->linenumber;
    74f6:	6866      	ldr	r6, [r4, #4]
  luaX_next(ls);  /* skip break */
    74f8:	f00d faa7 	bl	14a4a <luaX_next>
  newgotoentry(ls, luaS_newliteral(ls->L, "break"), line, luaK_jump(ls->fs));
    74fc:	2205      	movs	r2, #5
    74fe:	493d      	ldr	r1, [pc, #244]	; (75f4 <statement+0x780>)
    7500:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7502:	f00e fb0b 	bl	15b1c <luaS_newlstr>
    7506:	4605      	mov	r5, r0
    7508:	6b20      	ldr	r0, [r4, #48]	; 0x30
    750a:	f7fd f9a9 	bl	4860 <luaK_jump>
  return newlabelentry(ls, &ls->dyd->gt, name, line, pc);
    750e:	4633      	mov	r3, r6
    7510:	462a      	mov	r2, r5
    7512:	6c61      	ldr	r1, [r4, #68]	; 0x44
    7514:	9000      	str	r0, [sp, #0]
    7516:	4620      	mov	r0, r4
    7518:	310c      	adds	r1, #12
    751a:	f7ff fa0f 	bl	693c <newlabelentry>
    751e:	e4e1      	b.n	6ee4 <statement+0x70>
      luaX_next(ls);  /* skip 'goto' */
    7520:	4620      	mov	r0, r4
    7522:	f00d fa92 	bl	14a4a <luaX_next>
  TString *name = str_checkname(ls);  /* label's name */
    7526:	4620      	mov	r0, r4
  FuncState *fs = ls->fs;
    7528:	6b25      	ldr	r5, [r4, #48]	; 0x30
  int line = ls->linenumber;
    752a:	f8d4 8004 	ldr.w	r8, [r4, #4]
  TString *name = str_checkname(ls);  /* label's name */
    752e:	f00d fe3e 	bl	151ae <str_checkname>
    7532:	4606      	mov	r6, r0
  Dyndata *dyd = ls->dyd;
    7534:	6c61      	ldr	r1, [r4, #68]	; 0x44
  for (i = ls->fs->firstlabel; i < dyd->label.n; i++) {
    7536:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7538:	f8d1 c01c 	ldr.w	ip, [r1, #28]
    753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    753e:	4563      	cmp	r3, ip
    7540:	db07      	blt.n	7552 <statement+0x6de>
    newgotoentry(ls, name, line, luaK_jump(fs));
    7542:	4628      	mov	r0, r5
    7544:	f7fd f98c 	bl	4860 <luaK_jump>
  return newlabelentry(ls, &ls->dyd->gt, name, line, pc);
    7548:	4643      	mov	r3, r8
    754a:	4632      	mov	r2, r6
    754c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    754e:	9000      	str	r0, [sp, #0]
    7550:	e7e1      	b.n	7516 <statement+0x6a2>
    Labeldesc *lb = &dyd->label.arr[i];
    7552:	6988      	ldr	r0, [r1, #24]
    7554:	011a      	lsls	r2, r3, #4
    if (eqstr(lb->name, name))  /* correct label? */
    7556:	5882      	ldr	r2, [r0, r2]
    Labeldesc *lb = &dyd->label.arr[i];
    7558:	eb00 1703 	add.w	r7, r0, r3, lsl #4
    if (eqstr(lb->name, name))  /* correct label? */
    755c:	4296      	cmp	r6, r2
    755e:	d025      	beq.n	75ac <statement+0x738>
  for (i = ls->fs->firstlabel; i < dyd->label.n; i++) {
    7560:	3301      	adds	r3, #1
    7562:	e7ec      	b.n	753e <statement+0x6ca>
  suffixedexp(ls, &v.v);
    7564:	4620      	mov	r0, r4
    7566:	a90a      	add	r1, sp, #40	; 0x28
  FuncState *fs = ls->fs;
    7568:	6b25      	ldr	r5, [r4, #48]	; 0x30
  suffixedexp(ls, &v.v);
    756a:	f000 fb45 	bl	7bf8 <suffixedexp>
  if (ls->t.token == '=' || ls->t.token == ',') { /* stat -> assignment ? */
    756e:	6923      	ldr	r3, [r4, #16]
    7570:	2b3d      	cmp	r3, #61	; 0x3d
    7572:	d001      	beq.n	7578 <statement+0x704>
    7574:	2b2c      	cmp	r3, #44	; 0x2c
    7576:	d107      	bne.n	7588 <statement+0x714>
    v.prev = NULL;
    7578:	2300      	movs	r3, #0
    restassign(ls, &v, 1);
    757a:	2201      	movs	r2, #1
    757c:	4620      	mov	r0, r4
    757e:	a908      	add	r1, sp, #32
    v.prev = NULL;
    7580:	9308      	str	r3, [sp, #32]
    restassign(ls, &v, 1);
    7582:	f000 fba7 	bl	7cd4 <restassign>
    7586:	e4ad      	b.n	6ee4 <statement+0x70>
    check_condition(ls, v.v.k == VCALL, "syntax error");
    7588:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    758c:	2b12      	cmp	r3, #18
    758e:	d001      	beq.n	7594 <statement+0x720>
    7590:	4919      	ldr	r1, [pc, #100]	; (75f8 <statement+0x784>)
    7592:	e5ec      	b.n	716e <statement+0x2fa>
    inst = &getinstruction(fs, &v.v);
    7594:	682b      	ldr	r3, [r5, #0]
    7596:	990c      	ldr	r1, [sp, #48]	; 0x30
    7598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    SETARG_C(*inst, 1);  /* call statement uses no results */
    759a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    759e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    75a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    75a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    75aa:	e49b      	b.n	6ee4 <statement+0x70>
    int lblevel = reglevel(fs, lb->nactvar);  /* label level */
    75ac:	7b39      	ldrb	r1, [r7, #12]
    75ae:	4628      	mov	r0, r5
    75b0:	f00d fcb7 	bl	14f22 <reglevel>
    75b4:	4606      	mov	r6, r0
    if (luaY_nvarstack(fs) > lblevel)  /* leaving the scope of a variable? */
    75b6:	4628      	mov	r0, r5
    75b8:	f00d fe48 	bl	1524c <luaY_nvarstack>
    75bc:	4286      	cmp	r6, r0
    75be:	da07      	bge.n	75d0 <statement+0x75c>
      luaK_codeABC(fs, OP_CLOSE, lblevel, 0, 0);
    75c0:	2300      	movs	r3, #0
    75c2:	4632      	mov	r2, r6
    75c4:	2136      	movs	r1, #54	; 0x36
    75c6:	4628      	mov	r0, r5
    75c8:	e9cd 3300 	strd	r3, r3, [sp]
    75cc:	f00a fd61 	bl	12092 <luaK_codeABCk>
    luaK_patchlist(fs, luaK_jump(fs), lb->pc);
    75d0:	4628      	mov	r0, r5
    75d2:	f7fd f945 	bl	4860 <luaK_jump>
    75d6:	687a      	ldr	r2, [r7, #4]
    75d8:	4601      	mov	r1, r0
    75da:	4628      	mov	r0, r5
    75dc:	f00a fd4d 	bl	1207a <luaK_patchlist>
    75e0:	e480      	b.n	6ee4 <statement+0x70>
    msg = luaO_pushfstring(ls->L, msg, getstr(name), lb->line);
    75e2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    75e6:	4905      	ldr	r1, [pc, #20]	; (75fc <statement+0x788>)
    75e8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    75ea:	f105 0210 	add.w	r2, r5, #16
    75ee:	f00d fc82 	bl	14ef6 <luaO_pushfstring>
    75f2:	e684      	b.n	72fe <statement+0x48a>
    75f4:	00018234 	.word	0x00018234
    75f8:	0001866a 	.word	0x0001866a
    75fc:	00018677 	.word	0x00018677

00007600 <body>:
static void body (LexState *ls, expdesc *e, int ismethod, int line) {
    7600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FuncState *fs = ls->fs;
    7604:	e9d0 9b0c 	ldrd	r9, fp, [r0, #48]	; 0x30
  Proto *f = fs->f;  /* prototype of current function */
    7608:	f8d9 5000 	ldr.w	r5, [r9]
static void body (LexState *ls, expdesc *e, int ismethod, int line) {
    760c:	4692      	mov	sl, r2
  if (fs->np >= f->sizep) {
    760e:	69ef      	ldr	r7, [r5, #28]
    7610:	f8d9 2020 	ldr.w	r2, [r9, #32]
static void body (LexState *ls, expdesc *e, int ismethod, int line) {
    7614:	4604      	mov	r4, r0
  if (fs->np >= f->sizep) {
    7616:	42ba      	cmp	r2, r7
static void body (LexState *ls, expdesc *e, int ismethod, int line) {
    7618:	460e      	mov	r6, r1
    761a:	4698      	mov	r8, r3
    761c:	b097      	sub	sp, #92	; 0x5c
  if (fs->np >= f->sizep) {
    761e:	f280 8091 	bge.w	7744 <body+0x144>
  f->p[fs->np++] = clp = luaF_newproto(L);
    7622:	4658      	mov	r0, fp
    7624:	f00c f81f 	bl	13666 <luaF_newproto>
    7628:	f8d9 3020 	ldr.w	r3, [r9, #32]
    762c:	6baa      	ldr	r2, [r5, #56]	; 0x38
    762e:	1c59      	adds	r1, r3, #1
    7630:	f8c9 1020 	str.w	r1, [r9, #32]
    7634:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  luaC_objbarrier(L, f, clp);
    7638:	796b      	ldrb	r3, [r5, #5]
  f->p[fs->np++] = clp = luaF_newproto(L);
    763a:	4607      	mov	r7, r0
  luaC_objbarrier(L, f, clp);
    763c:	0698      	lsls	r0, r3, #26
    763e:	f100 8098 	bmi.w	7772 <body+0x172>
  open_func(ls, &new_fs, &bl);
    7642:	4620      	mov	r0, r4
    7644:	a908      	add	r1, sp, #32
  new_fs.f->linedefined = line;
    7646:	f8c7 8028 	str.w	r8, [r7, #40]	; 0x28
  open_func(ls, &new_fs, &bl);
    764a:	aa04      	add	r2, sp, #16
  new_fs.f = addprototype(ls);
    764c:	9708      	str	r7, [sp, #32]
  open_func(ls, &new_fs, &bl);
    764e:	f00d fca4 	bl	14f9a <open_func>
  checknext(ls, '(');
    7652:	2128      	movs	r1, #40	; 0x28
    7654:	4620      	mov	r0, r4
    7656:	f00d fcda 	bl	1500e <checknext>
  if (ismethod) {
    765a:	f1ba 0f00 	cmp.w	sl, #0
    765e:	d00c      	beq.n	767a <body+0x7a>
    new_localvarliteral(ls, "self");  /* create 'self' parameter */
    7660:	2204      	movs	r2, #4
    7662:	494f      	ldr	r1, [pc, #316]	; (77a0 <body+0x1a0>)
    7664:	4620      	mov	r0, r4
    7666:	f00d f9c4 	bl	149f2 <luaX_newstring>
    766a:	4601      	mov	r1, r0
    766c:	4620      	mov	r0, r4
    766e:	f7ff f9eb 	bl	6a48 <new_localvar>
    adjustlocalvars(ls, 1);
    7672:	2101      	movs	r1, #1
    7674:	4620      	mov	r0, r4
    7676:	f7ff fa87 	bl	6b88 <adjustlocalvars>
  if (ls->t.token != ')') {  /* is 'parlist' not empty? */
    767a:	6923      	ldr	r3, [r4, #16]
  FuncState *fs = ls->fs;
    767c:	6b27      	ldr	r7, [r4, #48]	; 0x30
  if (ls->t.token != ')') {  /* is 'parlist' not empty? */
    767e:	2b29      	cmp	r3, #41	; 0x29
  Proto *f = fs->f;
    7680:	f8d7 a000 	ldr.w	sl, [r7]
  if (ls->t.token != ')') {  /* is 'parlist' not empty? */
    7684:	f000 8089 	beq.w	779a <body+0x19a>
  int nparams = 0;
    7688:	f04f 0900 	mov.w	r9, #0
      switch (ls->t.token) {
    768c:	f240 1b23 	movw	fp, #291	; 0x123
    7690:	6923      	ldr	r3, [r4, #16]
    7692:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
    7696:	d077      	beq.n	7788 <body+0x188>
    7698:	455b      	cmp	r3, fp
    769a:	d17a      	bne.n	7792 <body+0x192>
          new_localvar(ls, str_checkname(ls));
    769c:	4620      	mov	r0, r4
    769e:	f00d fd86 	bl	151ae <str_checkname>
    76a2:	4601      	mov	r1, r0
    76a4:	4620      	mov	r0, r4
    76a6:	f7ff f9cf 	bl	6a48 <new_localvar>
    } while (!isvararg && testnext(ls, ','));
    76aa:	212c      	movs	r1, #44	; 0x2c
    76ac:	4620      	mov	r0, r4
    76ae:	f00d fca4 	bl	14ffa <testnext>
          nparams++;
    76b2:	f109 0901 	add.w	r9, r9, #1
    } while (!isvararg && testnext(ls, ','));
    76b6:	4605      	mov	r5, r0
    76b8:	2800      	cmp	r0, #0
    76ba:	d1e9      	bne.n	7690 <body+0x90>
  adjustlocalvars(ls, nparams);
    76bc:	4649      	mov	r1, r9
    76be:	4620      	mov	r0, r4
    76c0:	f7ff fa62 	bl	6b88 <adjustlocalvars>
  f->numparams = cast_byte(fs->nactvar);
    76c4:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
    76c8:	f88a 2006 	strb.w	r2, [sl, #6]
  if (isvararg)
    76cc:	b14d      	cbz	r5, 76e2 <body+0xe2>
  fs->f->is_vararg = 1;
    76ce:	2101      	movs	r1, #1
    76d0:	683b      	ldr	r3, [r7, #0]
  luaK_codeABC(fs, OP_VARARGPREP, nparams, 0, 0);
    76d2:	4638      	mov	r0, r7
  fs->f->is_vararg = 1;
    76d4:	71d9      	strb	r1, [r3, #7]
  luaK_codeABC(fs, OP_VARARGPREP, nparams, 0, 0);
    76d6:	2300      	movs	r3, #0
    76d8:	2151      	movs	r1, #81	; 0x51
    76da:	e9cd 3300 	strd	r3, r3, [sp]
    76de:	f00a fcd8 	bl	12092 <luaK_codeABCk>
  luaK_reserveregs(fs, fs->nactvar);  /* reserve registers for parameters */
    76e2:	4638      	mov	r0, r7
    76e4:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
    76e8:	f00a fd1c 	bl	12124 <luaK_reserveregs>
  checknext(ls, ')');
    76ec:	2129      	movs	r1, #41	; 0x29
    76ee:	4620      	mov	r0, r4
    76f0:	f00d fc8d 	bl	1500e <checknext>
  statlist(ls);
    76f4:	4620      	mov	r0, r4
    76f6:	f00d fe1c 	bl	15332 <statlist>
  new_fs.f->lastlinedefined = ls->linenumber;
    76fa:	6862      	ldr	r2, [r4, #4]
    76fc:	9b08      	ldr	r3, [sp, #32]
  check_match(ls, TK_END, TK_FUNCTION, line);
    76fe:	4620      	mov	r0, r4
  new_fs.f->lastlinedefined = ls->linenumber;
    7700:	62da      	str	r2, [r3, #44]	; 0x2c
  check_match(ls, TK_END, TK_FUNCTION, line);
    7702:	f240 1105 	movw	r1, #261	; 0x105
    7706:	4643      	mov	r3, r8
    7708:	f44f 7284 	mov.w	r2, #264	; 0x108
    770c:	f7ff fa10 	bl	6b30 <check_match>
  FuncState *fs = ls->fs->prev;
    7710:	6b23      	ldr	r3, [r4, #48]	; 0x30
  init_exp(v, VRELOC, luaK_codeABx(fs, OP_CLOSURE, 0, fs->np - 1));
    7712:	2200      	movs	r2, #0
  FuncState *fs = ls->fs->prev;
    7714:	685d      	ldr	r5, [r3, #4]
  init_exp(v, VRELOC, luaK_codeABx(fs, OP_CLOSURE, 0, fs->np - 1));
    7716:	214f      	movs	r1, #79	; 0x4f
    7718:	6a2b      	ldr	r3, [r5, #32]
    771a:	4628      	mov	r0, r5
    771c:	3b01      	subs	r3, #1
    771e:	f00a fcd8 	bl	120d2 <luaK_codeABx>
  e->f = e->t = NO_JUMP;
    7722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7726:	e9c6 3304 	strd	r3, r3, [r6, #16]
  e->k = k;
    772a:	2311      	movs	r3, #17
  luaK_exp2nextreg(fs, v);  /* fix it at the last register */
    772c:	4631      	mov	r1, r6
  e->k = k;
    772e:	7033      	strb	r3, [r6, #0]
  e->u.info = i;
    7730:	60b0      	str	r0, [r6, #8]
  luaK_exp2nextreg(fs, v);  /* fix it at the last register */
    7732:	4628      	mov	r0, r5
    7734:	f00a ff04 	bl	12540 <luaK_exp2nextreg>
  close_func(ls);
    7738:	4620      	mov	r0, r4
    773a:	f00d fd8b 	bl	15254 <close_func>
}
    773e:	b017      	add	sp, #92	; 0x5c
    7740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    luaM_growvector(L, f->p, fs->np, f->sizep, Proto *, MAXARG_Bx, "functions");
    7744:	4b17      	ldr	r3, [pc, #92]	; (77a4 <body+0x1a4>)
    7746:	4918      	ldr	r1, [pc, #96]	; (77a8 <body+0x1a8>)
    7748:	9302      	str	r3, [sp, #8]
    774a:	2304      	movs	r3, #4
    774c:	e9cd 3100 	strd	r3, r1, [sp]
    7750:	4658      	mov	r0, fp
    7752:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    7754:	f105 031c 	add.w	r3, r5, #28
    7758:	f7fe fe80 	bl	645c <luaM_growaux_>
    775c:	463b      	mov	r3, r7
      f->p[oldsize++] = NULL;
    775e:	2100      	movs	r1, #0
    while (oldsize < f->sizep)
    7760:	69ea      	ldr	r2, [r5, #28]
    luaM_growvector(L, f->p, fs->np, f->sizep, Proto *, MAXARG_Bx, "functions");
    7762:	63a8      	str	r0, [r5, #56]	; 0x38
    while (oldsize < f->sizep)
    7764:	4293      	cmp	r3, r2
    7766:	f6bf af5c 	bge.w	7622 <body+0x22>
      f->p[oldsize++] = NULL;
    776a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    776e:	3301      	adds	r3, #1
    7770:	e7f8      	b.n	7764 <body+0x164>
  luaC_objbarrier(L, f, clp);
    7772:	797b      	ldrb	r3, [r7, #5]
    7774:	f013 0f18 	tst.w	r3, #24
    7778:	f43f af63 	beq.w	7642 <body+0x42>
    777c:	463a      	mov	r2, r7
    777e:	4629      	mov	r1, r5
    7780:	4658      	mov	r0, fp
    7782:	f00c febc 	bl	144fe <luaC_barrier_>
    7786:	e75c      	b.n	7642 <body+0x42>
          luaX_next(ls);
    7788:	4620      	mov	r0, r4
    778a:	f00d f95e 	bl	14a4a <luaX_next>
          isvararg = 1;
    778e:	2501      	movs	r5, #1
    7790:	e794      	b.n	76bc <body+0xbc>
        default: luaX_syntaxerror(ls, "<name> or '...' expected");
    7792:	4620      	mov	r0, r4
    7794:	4905      	ldr	r1, [pc, #20]	; (77ac <body+0x1ac>)
    7796:	f00d f928 	bl	149ea <luaX_syntaxerror>
  int isvararg = 0;
    779a:	2500      	movs	r5, #0
  int nparams = 0;
    779c:	46a9      	mov	r9, r5
    779e:	e78d      	b.n	76bc <body+0xbc>
    77a0:	000186a7 	.word	0x000186a7
    77a4:	0001869d 	.word	0x0001869d
    77a8:	0001ffff 	.word	0x0001ffff
    77ac:	000186ac 	.word	0x000186ac

000077b0 <subexpr>:
static BinOpr subexpr (LexState *ls, expdesc *v, int limit) {
    77b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    77b4:	4606      	mov	r6, r0
    77b6:	b088      	sub	sp, #32
  enterlevel(ls);
    77b8:	6b40      	ldr	r0, [r0, #52]	; 0x34
static BinOpr subexpr (LexState *ls, expdesc *v, int limit) {
    77ba:	460c      	mov	r4, r1
    77bc:	4617      	mov	r7, r2
  enterlevel(ls);
    77be:	f00e f835 	bl	1582c <luaE_incCstack>
  uop = getunopr(ls->t.token);
    77c2:	6933      	ldr	r3, [r6, #16]
  switch (op) {
    77c4:	2b7e      	cmp	r3, #126	; 0x7e
    77c6:	d050      	beq.n	786a <subexpr+0xba>
    77c8:	dc0e      	bgt.n	77e8 <subexpr+0x38>
    77ca:	2b23      	cmp	r3, #35	; 0x23
    77cc:	d06a      	beq.n	78a4 <subexpr+0xf4>
    77ce:	2b2d      	cmp	r3, #45	; 0x2d
    77d0:	d06a      	beq.n	78a8 <subexpr+0xf8>
  switch (ls->t.token) {
    77d2:	2b7b      	cmp	r3, #123	; 0x7b
    77d4:	f000 809b 	beq.w	790e <subexpr+0x15e>
    77d8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    77dc:	d079      	beq.n	78d2 <subexpr+0x122>
      suffixedexp(ls, v);
    77de:	4621      	mov	r1, r4
    77e0:	4630      	mov	r0, r6
    77e2:	f000 fa09 	bl	7bf8 <suffixedexp>
      return;
    77e6:	e051      	b.n	788c <subexpr+0xdc>
  switch (op) {
    77e8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
    77ec:	d05e      	beq.n	78ac <subexpr+0xfc>
  switch (ls->t.token) {
    77ee:	f240 1213 	movw	r2, #275	; 0x113
    77f2:	4293      	cmp	r3, r2
    77f4:	d067      	beq.n	78c6 <subexpr+0x116>
    77f6:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
    77fa:	da11      	bge.n	7820 <subexpr+0x70>
    77fc:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
    7800:	f000 808a 	beq.w	7918 <subexpr+0x168>
    7804:	dde5      	ble.n	77d2 <subexpr+0x22>
    7806:	f240 120d 	movw	r2, #269	; 0x10d
    780a:	4293      	cmp	r3, r2
    780c:	d1e7      	bne.n	77de <subexpr+0x2e>
  e->f = e->t = NO_JUMP;
    780e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7812:	e9c4 3304 	strd	r3, r3, [r4, #16]
  e->k = k;
    7816:	2301      	movs	r3, #1
    7818:	7023      	strb	r3, [r4, #0]
  e->u.info = i;
    781a:	2300      	movs	r3, #0
    781c:	60a3      	str	r3, [r4, #8]
}
    781e:	e014      	b.n	784a <subexpr+0x9a>
  switch (ls->t.token) {
    7820:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
    7824:	d044      	beq.n	78b0 <subexpr+0x100>
    7826:	dc14      	bgt.n	7852 <subexpr+0xa2>
    7828:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
    782c:	d057      	beq.n	78de <subexpr+0x12e>
    782e:	f240 1221 	movw	r2, #289	; 0x121
    7832:	4293      	cmp	r3, r2
    7834:	d1d3      	bne.n	77de <subexpr+0x2e>
  e->f = e->t = NO_JUMP;
    7836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    783a:	e9c4 3304 	strd	r3, r3, [r4, #16]
  e->k = k;
    783e:	2305      	movs	r3, #5
    7840:	7023      	strb	r3, [r4, #0]
      v->u.nval = ls->t.seminfo.r;
    7842:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
    7846:	e9c4 2302 	strd	r2, r3, [r4, #8]
  luaX_next(ls);
    784a:	4630      	mov	r0, r6
    784c:	f00d f8fd 	bl	14a4a <luaX_next>
    7850:	e01c      	b.n	788c <subexpr+0xdc>
  switch (ls->t.token) {
    7852:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
    7856:	d1c2      	bne.n	77de <subexpr+0x2e>
  e->f = e->t = NO_JUMP;
    7858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      codestring(v, ls->t.seminfo.ts);
    785c:	69b2      	ldr	r2, [r6, #24]
  e->f = e->t = NO_JUMP;
    785e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  e->k = VKSTR;
    7862:	2307      	movs	r3, #7
  e->u.strval = s;
    7864:	60a2      	str	r2, [r4, #8]
  e->k = VKSTR;
    7866:	7023      	strb	r3, [r4, #0]
}
    7868:	e7ef      	b.n	784a <subexpr+0x9a>
    case '~': return OPR_BNOT;
    786a:	2501      	movs	r5, #1
    luaX_next(ls);  /* skip operator */
    786c:	4630      	mov	r0, r6
    int line = ls->linenumber;
    786e:	f8d6 8004 	ldr.w	r8, [r6, #4]
    luaX_next(ls);  /* skip operator */
    7872:	f00d f8ea 	bl	14a4a <luaX_next>
    subexpr(ls, v, UNARY_PRIORITY);
    7876:	220c      	movs	r2, #12
    7878:	4621      	mov	r1, r4
    787a:	4630      	mov	r0, r6
    787c:	f7ff ff98 	bl	77b0 <subexpr>
    luaK_prefix(ls->fs, uop, v, line);
    7880:	4643      	mov	r3, r8
    7882:	4622      	mov	r2, r4
    7884:	4629      	mov	r1, r5
    7886:	6b30      	ldr	r0, [r6, #48]	; 0x30
    7888:	f7fd f84c 	bl	4924 <luaK_prefix>
  op = getbinopr(ls->t.token);
    788c:	6933      	ldr	r3, [r6, #16]
  switch (op) {
    788e:	2b7e      	cmp	r3, #126	; 0x7e
    7890:	f000 80d0 	beq.w	7a34 <subexpr+0x284>
    7894:	f300 8089 	bgt.w	79aa <subexpr+0x1fa>
    7898:	2b2f      	cmp	r3, #47	; 0x2f
    789a:	dc77      	bgt.n	798c <subexpr+0x1dc>
    789c:	2b24      	cmp	r3, #36	; 0x24
    789e:	dc57      	bgt.n	7950 <subexpr+0x1a0>
    default: return OPR_NOBINOPR;
    78a0:	2515      	movs	r5, #21
    78a2:	e044      	b.n	792e <subexpr+0x17e>
  switch (op) {
    78a4:	2503      	movs	r5, #3
    78a6:	e7e1      	b.n	786c <subexpr+0xbc>
    case '-': return OPR_MINUS;
    78a8:	2500      	movs	r5, #0
    78aa:	e7df      	b.n	786c <subexpr+0xbc>
    case TK_NOT: return OPR_NOT;
    78ac:	2502      	movs	r5, #2
    78ae:	e7dd      	b.n	786c <subexpr+0xbc>
  e->f = e->t = NO_JUMP;
    78b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    78b4:	e9c4 3304 	strd	r3, r3, [r4, #16]
  e->k = k;
    78b8:	2306      	movs	r3, #6
    78ba:	7023      	strb	r3, [r4, #0]
      v->u.ival = ls->t.seminfo.i;
    78bc:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
    78c0:	e9c4 2302 	strd	r2, r3, [r4, #8]
      break;
    78c4:	e7c1      	b.n	784a <subexpr+0x9a>
  e->f = e->t = NO_JUMP;
    78c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    78ca:	e9c4 3304 	strd	r3, r3, [r4, #16]
  e->k = k;
    78ce:	2302      	movs	r3, #2
    78d0:	e7a2      	b.n	7818 <subexpr+0x68>
  e->f = e->t = NO_JUMP;
    78d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    78d6:	e9c4 3304 	strd	r3, r3, [r4, #16]
  e->k = k;
    78da:	2303      	movs	r3, #3
    78dc:	e79c      	b.n	7818 <subexpr+0x68>
      FuncState *fs = ls->fs;
    78de:	6b30      	ldr	r0, [r6, #48]	; 0x30
      check_condition(ls, fs->f->is_vararg,
    78e0:	6803      	ldr	r3, [r0, #0]
    78e2:	79db      	ldrb	r3, [r3, #7]
    78e4:	b91b      	cbnz	r3, 78ee <subexpr+0x13e>
    78e6:	4630      	mov	r0, r6
    78e8:	4966      	ldr	r1, [pc, #408]	; (7a84 <subexpr+0x2d4>)
    78ea:	f00d f87e 	bl	149ea <luaX_syntaxerror>
      init_exp(v, VVARARG, luaK_codeABC(fs, OP_VARARG, 0, 0, 1));
    78ee:	2300      	movs	r3, #0
    78f0:	2201      	movs	r2, #1
    78f2:	2150      	movs	r1, #80	; 0x50
    78f4:	e9cd 2300 	strd	r2, r3, [sp]
    78f8:	461a      	mov	r2, r3
    78fa:	f00a fbca 	bl	12092 <luaK_codeABCk>
  e->f = e->t = NO_JUMP;
    78fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7902:	e9c4 3304 	strd	r3, r3, [r4, #16]
  e->k = k;
    7906:	2313      	movs	r3, #19
  e->u.info = i;
    7908:	60a0      	str	r0, [r4, #8]
  e->k = k;
    790a:	7023      	strb	r3, [r4, #0]
}
    790c:	e79d      	b.n	784a <subexpr+0x9a>
      constructor(ls, v);
    790e:	4621      	mov	r1, r4
    7910:	4630      	mov	r0, r6
    7912:	f00d fd71 	bl	153f8 <constructor>
      return;
    7916:	e7b9      	b.n	788c <subexpr+0xdc>
      luaX_next(ls);
    7918:	4630      	mov	r0, r6
    791a:	f00d f896 	bl	14a4a <luaX_next>
      body(ls, v, 0, ls->linenumber);
    791e:	2200      	movs	r2, #0
    7920:	4621      	mov	r1, r4
    7922:	4630      	mov	r0, r6
    7924:	6873      	ldr	r3, [r6, #4]
    7926:	f7ff fe6b 	bl	7600 <body>
      return;
    792a:	e7af      	b.n	788c <subexpr+0xdc>
    case TK_IDIV: return OPR_IDIV;
    792c:	2506      	movs	r5, #6
  while (op != OPR_NOBINOPR && priority[op].left > limit) {
    792e:	f8df 9158 	ldr.w	r9, [pc, #344]	; 7a88 <subexpr+0x2d8>
    7932:	2d15      	cmp	r5, #21
    7934:	d004      	beq.n	7940 <subexpr+0x190>
    7936:	f819 3015 	ldrb.w	r3, [r9, r5, lsl #1]
    793a:	42bb      	cmp	r3, r7
    793c:	f300 8086 	bgt.w	7a4c <subexpr+0x29c>
}
    7940:	4628      	mov	r0, r5
  leavelevel(ls);
    7942:	6b72      	ldr	r2, [r6, #52]	; 0x34
    7944:	6e13      	ldr	r3, [r2, #96]	; 0x60
    7946:	3b01      	subs	r3, #1
    7948:	6613      	str	r3, [r2, #96]	; 0x60
}
    794a:	b008      	add	sp, #32
    794c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (op) {
    7950:	3b25      	subs	r3, #37	; 0x25
    7952:	2b0a      	cmp	r3, #10
    7954:	d8a4      	bhi.n	78a0 <subexpr+0xf0>
    7956:	a201      	add	r2, pc, #4	; (adr r2, 795c <subexpr+0x1ac>)
    7958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    795c:	00007a0d 	.word	0x00007a0d
    7960:	00007a15 	.word	0x00007a15
    7964:	000078a1 	.word	0x000078a1
    7968:	000078a1 	.word	0x000078a1
    796c:	000078a1 	.word	0x000078a1
    7970:	00007a09 	.word	0x00007a09
    7974:	00007a3d 	.word	0x00007a3d
    7978:	000078a1 	.word	0x000078a1
    797c:	00007989 	.word	0x00007989
    7980:	000078a1 	.word	0x000078a1
    7984:	00007a11 	.word	0x00007a11
    7988:	2501      	movs	r5, #1
    798a:	e7d0      	b.n	792e <subexpr+0x17e>
    798c:	2b5e      	cmp	r3, #94	; 0x5e
    798e:	d057      	beq.n	7a40 <subexpr+0x290>
    7990:	dc06      	bgt.n	79a0 <subexpr+0x1f0>
    7992:	2b3c      	cmp	r3, #60	; 0x3c
    7994:	d056      	beq.n	7a44 <subexpr+0x294>
    case '>': return OPR_GT;
    7996:	2b3e      	cmp	r3, #62	; 0x3e
    7998:	bf14      	ite	ne
    799a:	2515      	movne	r5, #21
    799c:	2511      	moveq	r5, #17
    799e:	e7c6      	b.n	792e <subexpr+0x17e>
    case '|': return OPR_BOR;
    79a0:	2b7c      	cmp	r3, #124	; 0x7c
    79a2:	bf14      	ite	ne
    79a4:	2515      	movne	r5, #21
    79a6:	2508      	moveq	r5, #8
    79a8:	e7c1      	b.n	792e <subexpr+0x17e>
  switch (op) {
    79aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    79ae:	d04b      	beq.n	7a48 <subexpr+0x298>
    79b0:	f46f 7287 	mvn.w	r2, #270	; 0x10e
    79b4:	4413      	add	r3, r2
    79b6:	2b0f      	cmp	r3, #15
    79b8:	f63f af72 	bhi.w	78a0 <subexpr+0xf0>
    79bc:	2b0f      	cmp	r3, #15
    79be:	f63f af6f 	bhi.w	78a0 <subexpr+0xf0>
    79c2:	a201      	add	r2, pc, #4	; (adr r2, 79c8 <subexpr+0x218>)
    79c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    79c8:	00007a31 	.word	0x00007a31
    79cc:	000078a1 	.word	0x000078a1
    79d0:	000078a1 	.word	0x000078a1
    79d4:	000078a1 	.word	0x000078a1
    79d8:	000078a1 	.word	0x000078a1
    79dc:	000078a1 	.word	0x000078a1
    79e0:	000078a1 	.word	0x000078a1
    79e4:	0000792d 	.word	0x0000792d
    79e8:	00007a1d 	.word	0x00007a1d
    79ec:	000078a1 	.word	0x000078a1
    79f0:	00007a25 	.word	0x00007a25
    79f4:	00007a2d 	.word	0x00007a2d
    79f8:	00007a29 	.word	0x00007a29
    79fc:	00007a21 	.word	0x00007a21
    7a00:	00007a39 	.word	0x00007a39
    7a04:	00007a19 	.word	0x00007a19
    case '*': return OPR_MUL;
    7a08:	2502      	movs	r5, #2
    7a0a:	e790      	b.n	792e <subexpr+0x17e>
    case '%': return OPR_MOD;
    7a0c:	2503      	movs	r5, #3
    7a0e:	e78e      	b.n	792e <subexpr+0x17e>
    case '/': return OPR_DIV;
    7a10:	2505      	movs	r5, #5
    7a12:	e78c      	b.n	792e <subexpr+0x17e>
    case '&': return OPR_BAND;
    7a14:	2507      	movs	r5, #7
    7a16:	e78a      	b.n	792e <subexpr+0x17e>
    case TK_SHR: return OPR_SHR;
    7a18:	250b      	movs	r5, #11
    7a1a:	e788      	b.n	792e <subexpr+0x17e>
    case TK_CONCAT: return OPR_CONCAT;
    7a1c:	250c      	movs	r5, #12
    7a1e:	e786      	b.n	792e <subexpr+0x17e>
    case TK_NE: return OPR_NE;
    7a20:	2510      	movs	r5, #16
    7a22:	e784      	b.n	792e <subexpr+0x17e>
    case TK_EQ: return OPR_EQ;
    7a24:	250d      	movs	r5, #13
    7a26:	e782      	b.n	792e <subexpr+0x17e>
    case TK_LE: return OPR_LE;
    7a28:	250f      	movs	r5, #15
    7a2a:	e780      	b.n	792e <subexpr+0x17e>
    case TK_GE: return OPR_GE;
    7a2c:	2512      	movs	r5, #18
    7a2e:	e77e      	b.n	792e <subexpr+0x17e>
    case TK_OR: return OPR_OR;
    7a30:	2514      	movs	r5, #20
    7a32:	e77c      	b.n	792e <subexpr+0x17e>
    case '~': return OPR_BXOR;
    7a34:	2509      	movs	r5, #9
    7a36:	e77a      	b.n	792e <subexpr+0x17e>
    case TK_SHL: return OPR_SHL;
    7a38:	250a      	movs	r5, #10
    7a3a:	e778      	b.n	792e <subexpr+0x17e>
    case '+': return OPR_ADD;
    7a3c:	2500      	movs	r5, #0
    7a3e:	e776      	b.n	792e <subexpr+0x17e>
    case '^': return OPR_POW;
    7a40:	2504      	movs	r5, #4
    7a42:	e774      	b.n	792e <subexpr+0x17e>
    case '<': return OPR_LT;
    7a44:	250e      	movs	r5, #14
    7a46:	e772      	b.n	792e <subexpr+0x17e>
    case TK_AND: return OPR_AND;
    7a48:	2513      	movs	r5, #19
    7a4a:	e770      	b.n	792e <subexpr+0x17e>
    luaX_next(ls);  /* skip operator */
    7a4c:	4630      	mov	r0, r6
    int line = ls->linenumber;
    7a4e:	f8d6 a004 	ldr.w	sl, [r6, #4]
    luaX_next(ls);  /* skip operator */
    7a52:	f00c fffa 	bl	14a4a <luaX_next>
    luaK_infix(ls->fs, op, v);
    7a56:	4629      	mov	r1, r5
    7a58:	4622      	mov	r2, r4
    7a5a:	6b30      	ldr	r0, [r6, #48]	; 0x30
    7a5c:	f00a ff46 	bl	128ec <luaK_infix>
    nextop = subexpr(ls, &v2, priority[op].right);
    7a60:	eb09 0345 	add.w	r3, r9, r5, lsl #1
    7a64:	785a      	ldrb	r2, [r3, #1]
    7a66:	a902      	add	r1, sp, #8
    7a68:	4630      	mov	r0, r6
    7a6a:	f7ff fea1 	bl	77b0 <subexpr>
    7a6e:	4680      	mov	r8, r0
    luaK_posfix(ls->fs, op, v, &v2, line);
    7a70:	4629      	mov	r1, r5
    7a72:	4622      	mov	r2, r4
    7a74:	6b30      	ldr	r0, [r6, #48]	; 0x30
    7a76:	f8cd a000 	str.w	sl, [sp]
    7a7a:	ab02      	add	r3, sp, #8
    7a7c:	f7fc ffcc 	bl	4a18 <luaK_posfix>
    op = nextop;
    7a80:	4645      	mov	r5, r8
    7a82:	e756      	b.n	7932 <subexpr+0x182>
    7a84:	000186c5 	.word	0x000186c5
    7a88:	00018739 	.word	0x00018739

00007a8c <recfield>:
  if (ls->t.token == TK_NAME) {
    7a8c:	f240 1323 	movw	r3, #291	; 0x123
static void recfield (LexState *ls, ConsControl *cc) {
    7a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ls->t.token == TK_NAME) {
    7a94:	6902      	ldr	r2, [r0, #16]
  FuncState *fs = ls->fs;
    7a96:	6b07      	ldr	r7, [r0, #48]	; 0x30
  if (ls->t.token == TK_NAME) {
    7a98:	429a      	cmp	r2, r3
static void recfield (LexState *ls, ConsControl *cc) {
    7a9a:	4606      	mov	r6, r0
    7a9c:	460d      	mov	r5, r1
  int reg = ls->fs->freereg;
    7a9e:	f897 8034 	ldrb.w	r8, [r7, #52]	; 0x34
static void recfield (LexState *ls, ConsControl *cc) {
    7aa2:	b092      	sub	sp, #72	; 0x48
  if (ls->t.token == TK_NAME) {
    7aa4:	d133      	bne.n	7b0e <recfield+0x82>
    checklimit(fs, cc->nh, MAX_INT, "items in a constructor");
    7aa6:	4b1c      	ldr	r3, [pc, #112]	; (7b18 <recfield+0x8c>)
    7aa8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    7aac:	4638      	mov	r0, r7
    7aae:	69c9      	ldr	r1, [r1, #28]
    7ab0:	f7fe ff70 	bl	6994 <checklimit>
  codestring(e, str_checkname(ls));
    7ab4:	4630      	mov	r0, r6
    7ab6:	f00d fb7a 	bl	151ae <str_checkname>
  e->f = e->t = NO_JUMP;
    7aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7abe:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  e->k = VKSTR;
    7ac2:	2307      	movs	r3, #7
  e->u.strval = s;
    7ac4:	9008      	str	r0, [sp, #32]
  e->k = VKSTR;
    7ac6:	f88d 3018 	strb.w	r3, [sp, #24]
  tab = *cc->t;
    7aca:	466c      	mov	r4, sp
  cc->nh++;
    7acc:	69eb      	ldr	r3, [r5, #28]
  checknext(ls, '=');
    7ace:	4630      	mov	r0, r6
  cc->nh++;
    7ad0:	3301      	adds	r3, #1
    7ad2:	61eb      	str	r3, [r5, #28]
  checknext(ls, '=');
    7ad4:	213d      	movs	r1, #61	; 0x3d
    7ad6:	f00d fa9a 	bl	1500e <checknext>
  tab = *cc->t;
    7ada:	69ad      	ldr	r5, [r5, #24]
    7adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  luaK_indexed(fs, &tab, &key);
    7ae0:	aa06      	add	r2, sp, #24
  tab = *cc->t;
    7ae2:	e895 0003 	ldmia.w	r5, {r0, r1}
    7ae6:	e884 0003 	stmia.w	r4, {r0, r1}
  luaK_indexed(fs, &tab, &key);
    7aea:	4669      	mov	r1, sp
    7aec:	4638      	mov	r0, r7
    7aee:	f00a feba 	bl	12866 <luaK_indexed>
  expr(ls, &val);
    7af2:	4630      	mov	r0, r6
    7af4:	a90c      	add	r1, sp, #48	; 0x30
    7af6:	f00d fc31 	bl	1535c <expr>
  luaK_storevar(fs, &tab, &val);
    7afa:	4669      	mov	r1, sp
    7afc:	4638      	mov	r0, r7
    7afe:	aa0c      	add	r2, sp, #48	; 0x30
    7b00:	f00a fddd 	bl	126be <luaK_storevar>
  fs->freereg = reg;  /* free registers */
    7b04:	f887 8034 	strb.w	r8, [r7, #52]	; 0x34
}
    7b08:	b012      	add	sp, #72	; 0x48
    7b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    yindex(ls, &key);
    7b0e:	a906      	add	r1, sp, #24
    7b10:	f00d fc27 	bl	15362 <yindex>
    7b14:	e7d9      	b.n	7aca <recfield+0x3e>
    7b16:	bf00      	nop
    7b18:	000186f0 	.word	0x000186f0

00007b1c <funcargs>:
static void funcargs (LexState *ls, expdesc *f, int line) {
    7b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (ls->t.token) {
    7b1e:	6903      	ldr	r3, [r0, #16]
static void funcargs (LexState *ls, expdesc *f, int line) {
    7b20:	4604      	mov	r4, r0
  switch (ls->t.token) {
    7b22:	2b7b      	cmp	r3, #123	; 0x7b
static void funcargs (LexState *ls, expdesc *f, int line) {
    7b24:	460d      	mov	r5, r1
    7b26:	4617      	mov	r7, r2
  FuncState *fs = ls->fs;
    7b28:	6b06      	ldr	r6, [r0, #48]	; 0x30
static void funcargs (LexState *ls, expdesc *f, int line) {
    7b2a:	b089      	sub	sp, #36	; 0x24
  switch (ls->t.token) {
    7b2c:	d04c      	beq.n	7bc8 <funcargs+0xac>
    7b2e:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
    7b32:	d04d      	beq.n	7bd0 <funcargs+0xb4>
    7b34:	2b28      	cmp	r3, #40	; 0x28
    7b36:	d157      	bne.n	7be8 <funcargs+0xcc>
      luaX_next(ls);
    7b38:	f00c ff87 	bl	14a4a <luaX_next>
      if (ls->t.token == ')')  /* arg list is empty? */
    7b3c:	6923      	ldr	r3, [r4, #16]
    7b3e:	2b29      	cmp	r3, #41	; 0x29
    7b40:	d132      	bne.n	7ba8 <funcargs+0x8c>
        args.k = VVOID;
    7b42:	2300      	movs	r3, #0
    7b44:	f88d 3008 	strb.w	r3, [sp, #8]
      check_match(ls, ')', '(', line);
    7b48:	463b      	mov	r3, r7
    7b4a:	2228      	movs	r2, #40	; 0x28
    7b4c:	2129      	movs	r1, #41	; 0x29
    7b4e:	4620      	mov	r0, r4
    7b50:	f7fe ffee 	bl	6b30 <check_match>
  if (hasmultret(args.k))
    7b54:	f89d 3008 	ldrb.w	r3, [sp, #8]
  base = f->u.info;  /* base register for call */
    7b58:	68ac      	ldr	r4, [r5, #8]
  if (hasmultret(args.k))
    7b5a:	f1a3 0212 	sub.w	r2, r3, #18
    7b5e:	2a01      	cmp	r2, #1
    7b60:	d945      	bls.n	7bee <funcargs+0xd2>
    if (args.k != VVOID)
    7b62:	b11b      	cbz	r3, 7b6c <funcargs+0x50>
      luaK_exp2nextreg(fs, &args);  /* close last argument */
    7b64:	4630      	mov	r0, r6
    7b66:	a902      	add	r1, sp, #8
    7b68:	f00a fcea 	bl	12540 <luaK_exp2nextreg>
    nparams = fs->freereg - (base+1);
    7b6c:	43e2      	mvns	r2, r4
    7b6e:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
    7b72:	4413      	add	r3, r2
  init_exp(f, VCALL, luaK_codeABC(fs, OP_CALL, base, nparams+1, 2));
    7b74:	2202      	movs	r2, #2
    7b76:	2100      	movs	r1, #0
    7b78:	4630      	mov	r0, r6
    7b7a:	e9cd 2100 	strd	r2, r1, [sp]
    7b7e:	3301      	adds	r3, #1
    7b80:	4622      	mov	r2, r4
    7b82:	2144      	movs	r1, #68	; 0x44
    7b84:	f00a fa85 	bl	12092 <luaK_codeABCk>
  e->f = e->t = NO_JUMP;
    7b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7b8c:	e9c5 3304 	strd	r3, r3, [r5, #16]
  e->k = k;
    7b90:	2312      	movs	r3, #18
  e->u.info = i;
    7b92:	60a8      	str	r0, [r5, #8]
  luaK_fixline(fs, line);
    7b94:	4639      	mov	r1, r7
    7b96:	4630      	mov	r0, r6
  e->k = k;
    7b98:	702b      	strb	r3, [r5, #0]
  luaK_fixline(fs, line);
    7b9a:	f00a fef6 	bl	1298a <luaK_fixline>
  fs->freereg = base+1;  /* call remove function and arguments and leaves
    7b9e:	3401      	adds	r4, #1
    7ba0:	f886 4034 	strb.w	r4, [r6, #52]	; 0x34
}
    7ba4:	b009      	add	sp, #36	; 0x24
    7ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        explist(ls, &args);
    7ba8:	4620      	mov	r0, r4
    7baa:	a902      	add	r1, sp, #8
    7bac:	f00d fbec 	bl	15388 <explist>
        if (hasmultret(args.k))
    7bb0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7bb4:	3b12      	subs	r3, #18
    7bb6:	2b01      	cmp	r3, #1
    7bb8:	d8c6      	bhi.n	7b48 <funcargs+0x2c>
          luaK_setmultret(fs, &args);
    7bba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7bbe:	4630      	mov	r0, r6
    7bc0:	a902      	add	r1, sp, #8
    7bc2:	f00a fae0 	bl	12186 <luaK_setreturns>
    7bc6:	e7bf      	b.n	7b48 <funcargs+0x2c>
      constructor(ls, &args);
    7bc8:	a902      	add	r1, sp, #8
    7bca:	f00d fc15 	bl	153f8 <constructor>
      break;
    7bce:	e7c1      	b.n	7b54 <funcargs+0x38>
  e->f = e->t = NO_JUMP;
    7bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7bd4:	e9cd 3306 	strd	r3, r3, [sp, #24]
  e->k = VKSTR;
    7bd8:	2307      	movs	r3, #7
      codestring(&args, ls->t.seminfo.ts);
    7bda:	6982      	ldr	r2, [r0, #24]
  e->k = VKSTR;
    7bdc:	f88d 3008 	strb.w	r3, [sp, #8]
  e->u.strval = s;
    7be0:	9204      	str	r2, [sp, #16]
      luaX_next(ls);  /* must use 'seminfo' before 'next' */
    7be2:	f00c ff32 	bl	14a4a <luaX_next>
      break;
    7be6:	e7b5      	b.n	7b54 <funcargs+0x38>
      luaX_syntaxerror(ls, "function arguments expected");
    7be8:	4902      	ldr	r1, [pc, #8]	; (7bf4 <funcargs+0xd8>)
    7bea:	f00c fefe 	bl	149ea <luaX_syntaxerror>
    nparams = LUA_MULTRET;  /* open call */
    7bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7bf2:	e7bf      	b.n	7b74 <funcargs+0x58>
    7bf4:	00018707 	.word	0x00018707

00007bf8 <suffixedexp>:
static void suffixedexp (LexState *ls, expdesc *v) {
    7bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch (ls->t.token) {
    7bfc:	f8d0 8010 	ldr.w	r8, [r0, #16]
static void suffixedexp (LexState *ls, expdesc *v) {
    7c00:	4604      	mov	r4, r0
  switch (ls->t.token) {
    7c02:	f1b8 0f28 	cmp.w	r8, #40	; 0x28
static void suffixedexp (LexState *ls, expdesc *v) {
    7c06:	460d      	mov	r5, r1
  FuncState *fs = ls->fs;
    7c08:	6b06      	ldr	r6, [r0, #48]	; 0x30
  int line = ls->linenumber;
    7c0a:	6847      	ldr	r7, [r0, #4]
static void suffixedexp (LexState *ls, expdesc *v) {
    7c0c:	b087      	sub	sp, #28
  switch (ls->t.token) {
    7c0e:	d006      	beq.n	7c1e <suffixedexp+0x26>
    7c10:	f240 1323 	movw	r3, #291	; 0x123
    7c14:	4598      	cmp	r8, r3
    7c16:	d021      	beq.n	7c5c <suffixedexp+0x64>
      luaX_syntaxerror(ls, "unexpected symbol");
    7c18:	492d      	ldr	r1, [pc, #180]	; (7cd0 <suffixedexp+0xd8>)
    7c1a:	f00c fee6 	bl	149ea <luaX_syntaxerror>
      luaX_next(ls);
    7c1e:	f00c ff14 	bl	14a4a <luaX_next>
      expr(ls, v);
    7c22:	4629      	mov	r1, r5
    7c24:	4620      	mov	r0, r4
    7c26:	f00d fb99 	bl	1535c <expr>
      check_match(ls, ')', '(', line);
    7c2a:	2129      	movs	r1, #41	; 0x29
    7c2c:	4620      	mov	r0, r4
    7c2e:	463b      	mov	r3, r7
    7c30:	4642      	mov	r2, r8
    7c32:	f7fe ff7d 	bl	6b30 <check_match>
      luaK_dischargevars(ls->fs, v);
    7c36:	4629      	mov	r1, r5
    7c38:	6b20      	ldr	r0, [r4, #48]	; 0x30
    7c3a:	f00a fae0 	bl	121fe <luaK_dischargevars>
  e->f = e->t = NO_JUMP;
    7c3e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  e->k = VKSTR;
    7c42:	f04f 0907 	mov.w	r9, #7
    switch (ls->t.token) {
    7c46:	6923      	ldr	r3, [r4, #16]
    7c48:	2b3a      	cmp	r3, #58	; 0x3a
    7c4a:	d02b      	beq.n	7ca4 <suffixedexp+0xac>
    7c4c:	dc09      	bgt.n	7c62 <suffixedexp+0x6a>
    7c4e:	2b28      	cmp	r3, #40	; 0x28
    7c50:	d010      	beq.n	7c74 <suffixedexp+0x7c>
    7c52:	2b2e      	cmp	r3, #46	; 0x2e
    7c54:	d013      	beq.n	7c7e <suffixedexp+0x86>
}
    7c56:	b007      	add	sp, #28
    7c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      singlevar(ls, v);
    7c5c:	f00d fad1 	bl	15202 <singlevar>
      return;
    7c60:	e7ed      	b.n	7c3e <suffixedexp+0x46>
    switch (ls->t.token) {
    7c62:	2b5b      	cmp	r3, #91	; 0x5b
    7c64:	d010      	beq.n	7c88 <suffixedexp+0x90>
    7c66:	2b5a      	cmp	r3, #90	; 0x5a
    7c68:	ddf5      	ble.n	7c56 <suffixedexp+0x5e>
    7c6a:	2b7b      	cmp	r3, #123	; 0x7b
    7c6c:	d002      	beq.n	7c74 <suffixedexp+0x7c>
    7c6e:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
    7c72:	d1f0      	bne.n	7c56 <suffixedexp+0x5e>
        luaK_exp2nextreg(fs, v);
    7c74:	4629      	mov	r1, r5
    7c76:	4630      	mov	r0, r6
    7c78:	f00a fc62 	bl	12540 <luaK_exp2nextreg>
    7c7c:	e022      	b.n	7cc4 <suffixedexp+0xcc>
        fieldsel(ls, v);
    7c7e:	4629      	mov	r1, r5
    7c80:	4620      	mov	r0, r4
    7c82:	f00d faa1 	bl	151c8 <fieldsel>
        break;
    7c86:	e7de      	b.n	7c46 <suffixedexp+0x4e>
        luaK_exp2anyregup(fs, v);
    7c88:	4629      	mov	r1, r5
    7c8a:	4630      	mov	r0, r6
    7c8c:	f00a fcda 	bl	12644 <luaK_exp2anyregup>
        yindex(ls, &key);
    7c90:	4669      	mov	r1, sp
    7c92:	4620      	mov	r0, r4
    7c94:	f00d fb65 	bl	15362 <yindex>
        luaK_indexed(fs, v, &key);
    7c98:	466a      	mov	r2, sp
    7c9a:	4629      	mov	r1, r5
    7c9c:	4630      	mov	r0, r6
    7c9e:	f00a fde2 	bl	12866 <luaK_indexed>
        break;
    7ca2:	e7d0      	b.n	7c46 <suffixedexp+0x4e>
        luaX_next(ls);
    7ca4:	4620      	mov	r0, r4
    7ca6:	f00c fed0 	bl	14a4a <luaX_next>
  codestring(e, str_checkname(ls));
    7caa:	4620      	mov	r0, r4
    7cac:	f00d fa7f 	bl	151ae <str_checkname>
        luaK_self(fs, v, &key);
    7cb0:	466a      	mov	r2, sp
  e->u.strval = s;
    7cb2:	9002      	str	r0, [sp, #8]
        luaK_self(fs, v, &key);
    7cb4:	4629      	mov	r1, r5
    7cb6:	4630      	mov	r0, r6
  e->f = e->t = NO_JUMP;
    7cb8:	e9cd 8804 	strd	r8, r8, [sp, #16]
  e->k = VKSTR;
    7cbc:	f88d 9000 	strb.w	r9, [sp]
        luaK_self(fs, v, &key);
    7cc0:	f00a fd44 	bl	1274c <luaK_self>
        funcargs(ls, v, line);
    7cc4:	463a      	mov	r2, r7
    7cc6:	4629      	mov	r1, r5
    7cc8:	4620      	mov	r0, r4
    7cca:	f7ff ff27 	bl	7b1c <funcargs>
        break;
    7cce:	e7ba      	b.n	7c46 <suffixedexp+0x4e>
    7cd0:	00018723 	.word	0x00018723

00007cd4 <restassign>:
static void restassign (LexState *ls, struct LHS_assign *lh, int nvars) {
    7cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  check_condition(ls, vkisvar(lh->v.k), "syntax error");
    7cd8:	7a0b      	ldrb	r3, [r1, #8]
static void restassign (LexState *ls, struct LHS_assign *lh, int nvars) {
    7cda:	4605      	mov	r5, r0
  check_condition(ls, vkisvar(lh->v.k), "syntax error");
    7cdc:	3b09      	subs	r3, #9
    7cde:	2b06      	cmp	r3, #6
static void restassign (LexState *ls, struct LHS_assign *lh, int nvars) {
    7ce0:	460c      	mov	r4, r1
    7ce2:	4616      	mov	r6, r2
    7ce4:	b08a      	sub	sp, #40	; 0x28
  check_condition(ls, vkisvar(lh->v.k), "syntax error");
    7ce6:	d902      	bls.n	7cee <restassign+0x1a>
    7ce8:	4948      	ldr	r1, [pc, #288]	; (7e0c <restassign+0x138>)
    7cea:	f00c fe7e 	bl	149ea <luaX_syntaxerror>
  check_readonly(ls, &lh->v);
    7cee:	f101 0808 	add.w	r8, r1, #8
    7cf2:	4641      	mov	r1, r8
    7cf4:	f7fe fedc 	bl	6ab0 <check_readonly>
  if (testnext(ls, ',')) {  /* restassign -> ',' suffixedexp restassign */
    7cf8:	212c      	movs	r1, #44	; 0x2c
    7cfa:	4628      	mov	r0, r5
    7cfc:	f00d f97d 	bl	14ffa <testnext>
    7d00:	2800      	cmp	r0, #0
    7d02:	d066      	beq.n	7dd2 <restassign+0xfe>
    suffixedexp(ls, &nv.v);
    7d04:	4628      	mov	r0, r5
    7d06:	a904      	add	r1, sp, #16
    nv.prev = lh;
    7d08:	9402      	str	r4, [sp, #8]
    suffixedexp(ls, &nv.v);
    7d0a:	f7ff ff75 	bl	7bf8 <suffixedexp>
    if (!vkisindexed(nv.v.k))
    7d0e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    7d12:	3b0c      	subs	r3, #12
    7d14:	2b03      	cmp	r3, #3
    7d16:	d92f      	bls.n	7d78 <restassign+0xa4>
  int conflict = 0;
    7d18:	2300      	movs	r3, #0
          lh->v.k = VINDEXSTR;
    7d1a:	f04f 0c0f 	mov.w	ip, #15
    7d1e:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  int extra = fs->freereg;  /* eventual position to save local variable */
    7d20:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
    if (vkisindexed(lh->v.k)) {  /* assignment to table field? */
    7d24:	7a21      	ldrb	r1, [r4, #8]
    7d26:	f1a1 000c 	sub.w	r0, r1, #12
    7d2a:	2803      	cmp	r0, #3
    7d2c:	d80d      	bhi.n	7d4a <restassign+0x76>
      if (lh->v.k == VINDEXUP) {  /* is table an upvalue? */
    7d2e:	290d      	cmp	r1, #13
        if (v->k == VUPVAL && lh->v.u.ind.t == v->u.info) {
    7d30:	f89d 0010 	ldrb.w	r0, [sp, #16]
      if (lh->v.k == VINDEXUP) {  /* is table an upvalue? */
    7d34:	d13b      	bne.n	7dae <restassign+0xda>
        if (v->k == VUPVAL && lh->v.u.ind.t == v->u.info) {
    7d36:	280a      	cmp	r0, #10
    7d38:	d107      	bne.n	7d4a <restassign+0x76>
    7d3a:	7ca0      	ldrb	r0, [r4, #18]
    7d3c:	9906      	ldr	r1, [sp, #24]
    7d3e:	4288      	cmp	r0, r1
    7d40:	d103      	bne.n	7d4a <restassign+0x76>
          lh->v.k = VINDEXSTR;
    7d42:	f884 c008 	strb.w	ip, [r4, #8]
          lh->v.u.ind.t = extra;  /* assignment will use safe copy */
    7d46:	74a2      	strb	r2, [r4, #18]
          conflict = 1;
    7d48:	2301      	movs	r3, #1
  for (; lh; lh = lh->prev) {  /* check all previous assignments */
    7d4a:	6824      	ldr	r4, [r4, #0]
    7d4c:	2c00      	cmp	r4, #0
    7d4e:	d1e9      	bne.n	7d24 <restassign+0x50>
  if (conflict) {
    7d50:	b193      	cbz	r3, 7d78 <restassign+0xa4>
    if (v->k == VLOCAL)
    7d52:	f89d 3010 	ldrb.w	r3, [sp, #16]
      luaK_codeABC(fs, OP_GETUPVAL, extra, v->u.info, 0);
    7d56:	4638      	mov	r0, r7
    if (v->k == VLOCAL)
    7d58:	2b09      	cmp	r3, #9
      luaK_codeABC(fs, OP_MOVE, extra, v->u.var.ridx, 0);
    7d5a:	bf0c      	ite	eq
    7d5c:	4621      	moveq	r1, r4
      luaK_codeABC(fs, OP_GETUPVAL, extra, v->u.info, 0);
    7d5e:	2109      	movne	r1, #9
      luaK_codeABC(fs, OP_MOVE, extra, v->u.var.ridx, 0);
    7d60:	e9cd 4400 	strd	r4, r4, [sp]
    7d64:	bf0c      	ite	eq
    7d66:	f89d 3018 	ldrbeq.w	r3, [sp, #24]
      luaK_codeABC(fs, OP_GETUPVAL, extra, v->u.info, 0);
    7d6a:	9b06      	ldrne	r3, [sp, #24]
    7d6c:	f00a f991 	bl	12092 <luaK_codeABCk>
    luaK_reserveregs(fs, 1);
    7d70:	2101      	movs	r1, #1
    7d72:	4638      	mov	r0, r7
    7d74:	f00a f9d6 	bl	12124 <luaK_reserveregs>
    enterlevel(ls);  /* control recursion depth */
    7d78:	6b68      	ldr	r0, [r5, #52]	; 0x34
    7d7a:	f00d fd57 	bl	1582c <luaE_incCstack>
    restassign(ls, &nv, nvars+1);
    7d7e:	1c72      	adds	r2, r6, #1
    7d80:	4628      	mov	r0, r5
    7d82:	a902      	add	r1, sp, #8
    7d84:	f7ff ffa6 	bl	7cd4 <restassign>
    leavelevel(ls);
    7d88:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    7d8a:	6e13      	ldr	r3, [r2, #96]	; 0x60
    7d8c:	3b01      	subs	r3, #1
    7d8e:	6613      	str	r3, [r2, #96]	; 0x60
  e->f = e->t = NO_JUMP;
    7d90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  init_exp(&e, VNONRELOC, ls->fs->freereg-1);  /* default assignment */
    7d94:	6b28      	ldr	r0, [r5, #48]	; 0x30
  luaK_storevar(ls->fs, &lh->v, &e);
    7d96:	4641      	mov	r1, r8
  init_exp(&e, VNONRELOC, ls->fs->freereg-1);  /* default assignment */
    7d98:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  e->f = e->t = NO_JUMP;
    7d9c:	e9cd 2206 	strd	r2, r2, [sp, #24]
  e->k = k;
    7da0:	2208      	movs	r2, #8
  init_exp(&e, VNONRELOC, ls->fs->freereg-1);  /* default assignment */
    7da2:	3b01      	subs	r3, #1
  e->k = k;
    7da4:	f88d 2008 	strb.w	r2, [sp, #8]
  e->u.info = i;
    7da8:	9304      	str	r3, [sp, #16]
  luaK_storevar(ls->fs, &lh->v, &e);
    7daa:	446a      	add	r2, sp
    7dac:	e029      	b.n	7e02 <restassign+0x12e>
        if (v->k == VLOCAL && lh->v.u.ind.t == v->u.var.ridx) {
    7dae:	2809      	cmp	r0, #9
    7db0:	d1cb      	bne.n	7d4a <restassign+0x76>
    7db2:	f89d 0018 	ldrb.w	r0, [sp, #24]
    7db6:	f894 e012 	ldrb.w	lr, [r4, #18]
    7dba:	4586      	cmp	lr, r0
    7dbc:	d101      	bne.n	7dc2 <restassign+0xee>
          conflict = 1;  /* table is the local being assigned now */
    7dbe:	2301      	movs	r3, #1
          lh->v.u.ind.t = extra;  /* assignment will use safe copy */
    7dc0:	74a2      	strb	r2, [r4, #18]
        if (lh->v.k == VINDEXED && v->k == VLOCAL &&
    7dc2:	290c      	cmp	r1, #12
    7dc4:	d1c1      	bne.n	7d4a <restassign+0x76>
            lh->v.u.ind.idx == v->u.var.ridx) {
    7dc6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
        if (lh->v.k == VINDEXED && v->k == VLOCAL &&
    7dca:	4281      	cmp	r1, r0
    7dcc:	d1bd      	bne.n	7d4a <restassign+0x76>
          lh->v.u.ind.idx = extra;  /* previous assignment will use safe copy */
    7dce:	8222      	strh	r2, [r4, #16]
    7dd0:	e7ba      	b.n	7d48 <restassign+0x74>
    checknext(ls, '=');
    7dd2:	213d      	movs	r1, #61	; 0x3d
    7dd4:	4628      	mov	r0, r5
    7dd6:	f00d f91a 	bl	1500e <checknext>
    nexps = explist(ls, &e);
    7dda:	4628      	mov	r0, r5
    7ddc:	a902      	add	r1, sp, #8
    7dde:	f00d fad3 	bl	15388 <explist>
    if (nexps != nvars)
    7de2:	42b0      	cmp	r0, r6
    nexps = explist(ls, &e);
    7de4:	4602      	mov	r2, r0
    if (nexps != nvars)
    7de6:	d005      	beq.n	7df4 <restassign+0x120>
      adjust_assign(ls, nvars, nexps, &e);
    7de8:	4631      	mov	r1, r6
    7dea:	6b28      	ldr	r0, [r5, #48]	; 0x30
    7dec:	ab02      	add	r3, sp, #8
    7dee:	f00d f9b5 	bl	1515c <adjust_assign.isra.0>
    7df2:	e7cd      	b.n	7d90 <restassign+0xbc>
      luaK_setoneret(ls->fs, &e);  /* close last expression */
    7df4:	6b28      	ldr	r0, [r5, #48]	; 0x30
    7df6:	a902      	add	r1, sp, #8
    7df8:	f00a f9e3 	bl	121c2 <luaK_setoneret>
      luaK_storevar(ls->fs, &lh->v, &e);
    7dfc:	4641      	mov	r1, r8
    7dfe:	6b28      	ldr	r0, [r5, #48]	; 0x30
    7e00:	aa02      	add	r2, sp, #8
  luaK_storevar(ls->fs, &lh->v, &e);
    7e02:	f00a fc5c 	bl	126be <luaK_storevar>
}
    7e06:	b00a      	add	sp, #40	; 0x28
    7e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e0c:	0001866a 	.word	0x0001866a

00007e10 <test_then_block>:
static void test_then_block (LexState *ls, int *escapelist) {
    7e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e12:	4604      	mov	r4, r0
    7e14:	b08d      	sub	sp, #52	; 0x34
    7e16:	460f      	mov	r7, r1
  FuncState *fs = ls->fs;
    7e18:	6b05      	ldr	r5, [r0, #48]	; 0x30
  luaX_next(ls);  /* skip IF or ELSEIF */
    7e1a:	f00c fe16 	bl	14a4a <luaX_next>
  expr(ls, &v);  /* read condition */
    7e1e:	4620      	mov	r0, r4
    7e20:	a906      	add	r1, sp, #24
    7e22:	f00d fa9b 	bl	1535c <expr>
  checknext(ls, TK_THEN);
    7e26:	f44f 7189 	mov.w	r1, #274	; 0x112
    7e2a:	4620      	mov	r0, r4
    7e2c:	f00d f8ef 	bl	1500e <checknext>
  if (ls->t.token == TK_BREAK) {  /* 'if x then break' ? */
    7e30:	f240 1301 	movw	r3, #257	; 0x101
    7e34:	6922      	ldr	r2, [r4, #16]
    7e36:	429a      	cmp	r2, r3
    7e38:	d147      	bne.n	7eca <test_then_block+0xba>
    luaK_goiffalse(ls->fs, &v);  /* will jump if condition is true */
    7e3a:	a906      	add	r1, sp, #24
    7e3c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    int line = ls->linenumber;
    7e3e:	6866      	ldr	r6, [r4, #4]
    luaK_goiffalse(ls->fs, &v);  /* will jump if condition is true */
    7e40:	f00a fcd0 	bl	127e4 <luaK_goiffalse>
    luaX_next(ls);  /* skip 'break' */
    7e44:	4620      	mov	r0, r4
    7e46:	f00c fe00 	bl	14a4a <luaX_next>
    enterblock(fs, &bl, 0);  /* must enter block before 'goto' */
    7e4a:	2200      	movs	r2, #0
    7e4c:	4628      	mov	r0, r5
    7e4e:	a902      	add	r1, sp, #8
    7e50:	f00d f88b 	bl	14f6a <enterblock>
    newgotoentry(ls, luaS_newliteral(ls->L, "break"), line, v.t);
    7e54:	2205      	movs	r2, #5
    7e56:	4922      	ldr	r1, [pc, #136]	; (7ee0 <test_then_block+0xd0>)
    7e58:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7e5a:	f00d fe5f 	bl	15b1c <luaS_newlstr>
  return newlabelentry(ls, &ls->dyd->gt, name, line, pc);
    7e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7e60:	6c61      	ldr	r1, [r4, #68]	; 0x44
    newgotoentry(ls, luaS_newliteral(ls->L, "break"), line, v.t);
    7e62:	4602      	mov	r2, r0
  return newlabelentry(ls, &ls->dyd->gt, name, line, pc);
    7e64:	9300      	str	r3, [sp, #0]
    7e66:	4620      	mov	r0, r4
    7e68:	4633      	mov	r3, r6
    7e6a:	310c      	adds	r1, #12
    7e6c:	f7fe fd66 	bl	693c <newlabelentry>
    while (testnext(ls, ';')) {}  /* skip semicolons */
    7e70:	213b      	movs	r1, #59	; 0x3b
    7e72:	4620      	mov	r0, r4
    7e74:	f00d f8c1 	bl	14ffa <testnext>
    7e78:	4601      	mov	r1, r0
    7e7a:	2800      	cmp	r0, #0
    7e7c:	d1f8      	bne.n	7e70 <test_then_block+0x60>
    if (block_follow(ls, 0)) {  /* jump is the entire block? */
    7e7e:	6920      	ldr	r0, [r4, #16]
    7e80:	f00d f959 	bl	15136 <block_follow.isra.0>
    7e84:	b120      	cbz	r0, 7e90 <test_then_block+0x80>
      leaveblock(fs);
    7e86:	4628      	mov	r0, r5
    7e88:	f7fe ff5c 	bl	6d44 <leaveblock>
}
    7e8c:	b00d      	add	sp, #52	; 0x34
    7e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      jf = luaK_jump(fs);
    7e90:	4628      	mov	r0, r5
    7e92:	f7fc fce5 	bl	4860 <luaK_jump>
    7e96:	4606      	mov	r6, r0
  statlist(ls);  /* 'then' part */
    7e98:	4620      	mov	r0, r4
    7e9a:	f00d fa4a 	bl	15332 <statlist>
  leaveblock(fs);
    7e9e:	4628      	mov	r0, r5
    7ea0:	f7fe ff50 	bl	6d44 <leaveblock>
  if (ls->t.token == TK_ELSE ||
    7ea4:	f46f 7281 	mvn.w	r2, #258	; 0x102
    7ea8:	6923      	ldr	r3, [r4, #16]
    7eaa:	4413      	add	r3, r2
    7eac:	2b01      	cmp	r3, #1
    7eae:	d807      	bhi.n	7ec0 <test_then_block+0xb0>
    luaK_concat(fs, escapelist, luaK_jump(fs));  /* must jump over it */
    7eb0:	4628      	mov	r0, r5
    7eb2:	f7fc fcd5 	bl	4860 <luaK_jump>
    7eb6:	4639      	mov	r1, r7
    7eb8:	4602      	mov	r2, r0
    7eba:	4628      	mov	r0, r5
    7ebc:	f00a f8c2 	bl	12044 <luaK_concat>
  luaK_patchtohere(fs, jf);
    7ec0:	4631      	mov	r1, r6
    7ec2:	4628      	mov	r0, r5
    7ec4:	f00a f8e1 	bl	1208a <luaK_patchtohere>
    7ec8:	e7e0      	b.n	7e8c <test_then_block+0x7c>
    luaK_goiftrue(ls->fs, &v);  /* skip over block if condition is false */
    7eca:	6b20      	ldr	r0, [r4, #48]	; 0x30
    7ecc:	a906      	add	r1, sp, #24
    7ece:	f00a fc5f 	bl	12790 <luaK_goiftrue>
    enterblock(fs, &bl, 0);
    7ed2:	2200      	movs	r2, #0
    7ed4:	4628      	mov	r0, r5
    7ed6:	a902      	add	r1, sp, #8
    7ed8:	f00d f847 	bl	14f6a <enterblock>
    jf = v.f;
    7edc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    7ede:	e7db      	b.n	7e98 <test_then_block+0x88>
    7ee0:	00018234 	.word	0x00018234

00007ee4 <forbody>:
static void forbody (LexState *ls, int base, int line, int nvars, int isgen) {
    7ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ee8:	460e      	mov	r6, r1
    7eea:	b086      	sub	sp, #24
  checknext(ls, TK_DO);
    7eec:	f44f 7181 	mov.w	r1, #258	; 0x102
  FuncState *fs = ls->fs;
    7ef0:	6b04      	ldr	r4, [r0, #48]	; 0x30
static void forbody (LexState *ls, int base, int line, int nvars, int isgen) {
    7ef2:	4682      	mov	sl, r0
    7ef4:	461f      	mov	r7, r3
    7ef6:	4690      	mov	r8, r2
    7ef8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  checknext(ls, TK_DO);
    7efc:	f00d f887 	bl	1500e <checknext>
  prep = luaK_codeABx(fs, forprep[isgen], base, 0);
    7f00:	492e      	ldr	r1, [pc, #184]	; (7fbc <forbody+0xd8>)
    7f02:	2300      	movs	r3, #0
    7f04:	4632      	mov	r2, r6
    7f06:	f811 1009 	ldrb.w	r1, [r1, r9]
    7f0a:	4620      	mov	r0, r4
    7f0c:	f00a f8e1 	bl	120d2 <luaK_codeABx>
  enterblock(fs, &bl, 0);  /* scope for declared variables */
    7f10:	2200      	movs	r2, #0
  prep = luaK_codeABx(fs, forprep[isgen], base, 0);
    7f12:	4605      	mov	r5, r0
  enterblock(fs, &bl, 0);  /* scope for declared variables */
    7f14:	a902      	add	r1, sp, #8
    7f16:	4620      	mov	r0, r4
    7f18:	f00d f827 	bl	14f6a <enterblock>
  adjustlocalvars(ls, nvars);
    7f1c:	4639      	mov	r1, r7
    7f1e:	4650      	mov	r0, sl
    7f20:	f7fe fe32 	bl	6b88 <adjustlocalvars>
  luaK_reserveregs(fs, nvars);
    7f24:	4639      	mov	r1, r7
    7f26:	4620      	mov	r0, r4
    7f28:	f00a f8fc 	bl	12124 <luaK_reserveregs>
  block(ls);
    7f2c:	4650      	mov	r0, sl
    7f2e:	f00d fb0f 	bl	15550 <block>
  leaveblock(fs);  /* end of scope for declared variables */
    7f32:	4620      	mov	r0, r4
    7f34:	f7fe ff06 	bl	6d44 <leaveblock>
  fixforjump(fs, prep, luaK_getlabel(fs), 0);
    7f38:	4620      	mov	r0, r4
    7f3a:	f00a f89a 	bl	12072 <luaK_getlabel>
  int offset = dest - (pc + 1);
    7f3e:	3801      	subs	r0, #1
  Instruction *jmp = &fs->f->code[pc];
    7f40:	6823      	ldr	r3, [r4, #0]
  int offset = dest - (pc + 1);
    7f42:	1b40      	subs	r0, r0, r5
  if (l_unlikely(offset > MAXARG_Bx))
    7f44:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
  Instruction *jmp = &fs->f->code[pc];
    7f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (l_unlikely(offset > MAXARG_Bx))
    7f4a:	db03      	blt.n	7f54 <forbody+0x70>
    luaX_syntaxerror(fs->ls, "control structure too long");
    7f4c:	491c      	ldr	r1, [pc, #112]	; (7fc0 <forbody+0xdc>)
    7f4e:	68a0      	ldr	r0, [r4, #8]
    7f50:	f00c fd4b 	bl	149ea <luaX_syntaxerror>
  SETARG_Bx(*jmp, offset);
    7f54:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
    7f58:	f3c3 030e 	ubfx	r3, r3, #0, #15
    7f5c:	ea43 30c0 	orr.w	r0, r3, r0, lsl #15
    7f60:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
  if (isgen) {  /* generic for? */
    7f64:	f1b9 0f00 	cmp.w	r9, #0
    7f68:	d00b      	beq.n	7f82 <forbody+0x9e>
    luaK_codeABC(fs, OP_TFORCALL, base, 0, nvars);
    7f6a:	2300      	movs	r3, #0
    7f6c:	214c      	movs	r1, #76	; 0x4c
    7f6e:	4632      	mov	r2, r6
    7f70:	4620      	mov	r0, r4
    7f72:	e9cd 7300 	strd	r7, r3, [sp]
    7f76:	f00a f88c 	bl	12092 <luaK_codeABCk>
    luaK_fixline(fs, line);
    7f7a:	4641      	mov	r1, r8
    7f7c:	4620      	mov	r0, r4
    7f7e:	f00a fd04 	bl	1298a <luaK_fixline>
  endfor = luaK_codeABx(fs, forloop[isgen], base, 0);
    7f82:	4910      	ldr	r1, [pc, #64]	; (7fc4 <forbody+0xe0>)
    7f84:	2300      	movs	r3, #0
    7f86:	4632      	mov	r2, r6
    7f88:	4620      	mov	r0, r4
    7f8a:	f811 1009 	ldrb.w	r1, [r1, r9]
    7f8e:	f00a f8a0 	bl	120d2 <luaK_codeABx>
  Instruction *jmp = &fs->f->code[pc];
    7f92:	6823      	ldr	r3, [r4, #0]
    offset = -offset;
    7f94:	1b45      	subs	r5, r0, r5
  if (l_unlikely(offset > MAXARG_Bx))
    7f96:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
  Instruction *jmp = &fs->f->code[pc];
    7f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (l_unlikely(offset > MAXARG_Bx))
    7f9c:	dad6      	bge.n	7f4c <forbody+0x68>
  SETARG_Bx(*jmp, offset);
    7f9e:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
  luaK_fixline(fs, line);
    7fa2:	4641      	mov	r1, r8
  SETARG_Bx(*jmp, offset);
    7fa4:	f3c3 030e 	ubfx	r3, r3, #0, #15
    7fa8:	ea43 35c5 	orr.w	r5, r3, r5, lsl #15
    7fac:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
  luaK_fixline(fs, line);
    7fb0:	4620      	mov	r0, r4
    7fb2:	f00a fcea 	bl	1298a <luaK_fixline>
}
    7fb6:	b006      	add	sp, #24
    7fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7fbc:	00018737 	.word	0x00018737
    7fc0:	00017de5 	.word	0x00017de5
    7fc4:	00018735 	.word	0x00018735

00007fc8 <lua_newstate>:
  lua_unlock(L);
  return status;
}


LUA_API lua_State *lua_newstate (lua_Alloc f, void *ud) {
    7fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7fcc:	460f      	mov	r7, r1
    7fce:	4680      	mov	r8, r0
  int i;
  lua_State *L;
  global_State *g;
  LG *l = cast(LG *, (*f)(ud, NULL, LUA_TTHREAD, sizeof(LG)));
    7fd0:	f44f 7358 	mov.w	r3, #864	; 0x360
    7fd4:	2208      	movs	r2, #8
    7fd6:	2100      	movs	r1, #0
    7fd8:	4638      	mov	r0, r7
LUA_API lua_State *lua_newstate (lua_Alloc f, void *ud) {
    7fda:	b085      	sub	sp, #20
  LG *l = cast(LG *, (*f)(ud, NULL, LUA_TTHREAD, sizeof(LG)));
    7fdc:	47c0      	blx	r8
  if (l == NULL) return NULL;
    7fde:	4604      	mov	r4, r0
    7fe0:	2800      	cmp	r0, #0
    7fe2:	f000 8084 	beq.w	80ee <lua_newstate+0x126>
  L = &l->l.l;
  g = &l->g;
  L->tt = LUA_VTHREAD;
    7fe6:	f640 0308 	movw	r3, #2056	; 0x808
    7fea:	8103      	strh	r3, [r0, #8]
  g = &l->g;
    7fec:	f100 0378 	add.w	r3, r0, #120	; 0x78
  G(L) = g;
    7ff0:	6143      	str	r3, [r0, #20]
  L->status = LUA_OK;
    7ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
  L->stack = NULL;
    7ff6:	2500      	movs	r5, #0
  L->status = LUA_OK;
    7ff8:	8143      	strh	r3, [r0, #10]
  g->currentwhite = bitmask(WHITE0BIT);
    7ffa:	f04f 0908 	mov.w	r9, #8
  L->marked = luaC_white(g);
  preinit_thread(L, g);
  g->allgc = obj2gco(L);  /* by now, only object is the main thread */
  L->next = NULL;
  incnny(L);  /* main thread is always non yieldable */
    7ffe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  L = &l->l.l;
    8002:	1d06      	adds	r6, r0, #4
  L->hook = NULL;
    8004:	65c5      	str	r5, [r0, #92]	; 0x5c
  incnny(L);  /* main thread is always non yieldable */
    8006:	6643      	str	r3, [r0, #100]	; 0x64
  L->errorJmp = NULL;
    8008:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
  resethookcount(L);
    800c:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
  g->frealloc = f;
  g->ud = ud;
    8010:	e9c0 871e 	strd	r8, r7, [r0, #120]	; 0x78
  g->warnf = NULL;
  g->ud_warn = NULL;
    8014:	e9c0 55d5 	strd	r5, r5, [r0, #852]	; 0x354
  g->currentwhite = bitmask(WHITE0BIT);
    8018:	f880 90c4 	strb.w	r9, [r0, #196]	; 0xc4
  L->stack = NULL;
    801c:	6205      	str	r5, [r0, #32]
  L->ci = NULL;
    801e:	6185      	str	r5, [r0, #24]
  L->nci = 0;
    8020:	8185      	strh	r5, [r0, #12]
  L->hookmask = 0;
    8022:	6745      	str	r5, [r0, #116]	; 0x74
  L->openupval = NULL;
    8024:	6245      	str	r5, [r0, #36]	; 0x24
  L->errfunc = 0;
    8026:	6605      	str	r5, [r0, #96]	; 0x60
  L->oldpc = 0;
    8028:	6685      	str	r5, [r0, #104]	; 0x68
  g->allgc = obj2gco(L);  /* by now, only object is the main thread */
    802a:	f8c0 60d0 	str.w	r6, [r0, #208]	; 0xd0
  L->next = NULL;
    802e:	6045      	str	r5, [r0, #4]
  g->mainthread = L;
    8030:	f8c0 611c 	str.w	r6, [r0, #284]	; 0x11c
  unsigned int h = cast_uint(time(NULL));
    8034:	4628      	mov	r0, r5
    8036:	f006 fe41 	bl	ecbc <time>
    803a:	4b30      	ldr	r3, [pc, #192]	; (80fc <lua_newstate+0x134>)
    803c:	4602      	mov	r2, r0
    803e:	e9cd 0600 	strd	r0, r6, [sp]
  return luaS_hash(buff, p, h);
    8042:	210c      	movs	r1, #12
    8044:	a801      	add	r0, sp, #4
    8046:	9303      	str	r3, [sp, #12]
    8048:	f8cd d008 	str.w	sp, [sp, #8]
    804c:	f00d fc78 	bl	15940 <luaS_hash>
  g->finobjsur = g->finobjold1 = g->finobjrold = NULL;
  g->sweepgc = NULL;
  g->gray = g->grayagain = NULL;
  g->weak = g->ephemeron = g->allweak = NULL;
  g->twups = NULL;
  g->totalbytes = sizeof(LG);
    8050:	f44f 7358 	mov.w	r3, #864	; 0x360
  g->GCdebt = 0;
  g->lastatomic = 0;
  setivalue(&g->nilvalue, 0);  /* to signal that state is not yet built */
    8054:	2200      	movs	r2, #0
  g->GCdebt = 0;
    8056:	e9c4 3520 	strd	r3, r5, [r4, #128]	; 0x80
  setivalue(&g->nilvalue, 0);  /* to signal that state is not yet built */
    805a:	2300      	movs	r3, #0
    805c:	e9c4 232c 	strd	r2, r3, [r4, #176]	; 0xb0
    8060:	2303      	movs	r3, #3
    8062:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
  setgcparam(g->gcpause, LUAI_GCPAUSE);
  setgcparam(g->gcstepmul, LUAI_GCMUL);
  g->gcstepsize = LUAI_GCSTEPSIZE;
  setgcparam(g->genmajormul, LUAI_GENMAJORMUL);
  g->genminormul = LUAI_GENMINORMUL;
    8066:	4b26      	ldr	r3, [pc, #152]	; (8100 <lua_newstate+0x138>)
  g->strt.size = g->strt.nuse = 0;
    8068:	e9c4 5525 	strd	r5, r5, [r4, #148]	; 0x94
  g->genminormul = LUAI_GENMINORMUL;
    806c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
  setgcparam(g->gcpause, LUAI_GCPAUSE);
    8070:	f641 1332 	movw	r3, #6450	; 0x1932
    8074:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
  g->gcstepsize = LUAI_GCSTEPSIZE;
    8078:	230d      	movs	r3, #13
  g->finobj = g->tobefnz = g->fixedgc = NULL;
    807a:	e9c4 553c 	strd	r5, r5, [r4, #240]	; 0xf0
  g->firstold1 = g->survival = g->old1 = g->reallyold = NULL;
    807e:	e9c4 553f 	strd	r5, r5, [r4, #252]	; 0xfc
  g->finobjsur = g->finobjold1 = g->finobjrold = NULL;
    8082:	e9c4 5543 	strd	r5, r5, [r4, #268]	; 0x10c
  g->gray = g->grayagain = NULL;
    8086:	e9c4 5537 	strd	r5, r5, [r4, #220]	; 0xdc
  g->weak = g->ephemeron = g->allweak = NULL;
    808a:	e9c4 553a 	strd	r5, r5, [r4, #232]	; 0xe8
  g->seed = luai_makeseed(L);
    808e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
  g->strt.hash = NULL;
    8092:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  setnilvalue(&g->l_registry);
    8096:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
  g->panic = NULL;
    809a:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
  g->finobj = g->tobefnz = g->fixedgc = NULL;
    809e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
  g->firstold1 = g->survival = g->old1 = g->reallyold = NULL;
    80a2:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    80a6:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
  g->finobjsur = g->finobjold1 = g->finobjrold = NULL;
    80aa:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
  g->sweepgc = NULL;
    80ae:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
  g->weak = g->ephemeron = g->allweak = NULL;
    80b2:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
  g->twups = NULL;
    80b6:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
  g->lastatomic = 0;
    80ba:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  g->gcstate = GCSpause;
    80be:	f884 90c5 	strb.w	r9, [r4, #197]	; 0xc5
  g->gckind = KGC_INC;
    80c2:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
  g->gcstepsize = LUAI_GCSTEPSIZE;
    80c6:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
  for (i=0; i < LUA_NUMTAGS; i++) g->mt[i] = NULL;
    80ca:	f504 73c4 	add.w	r3, r4, #392	; 0x188
    80ce:	f504 74d6 	add.w	r4, r4, #428	; 0x1ac
    80d2:	f843 5b04 	str.w	r5, [r3], #4
    80d6:	42a3      	cmp	r3, r4
    80d8:	d1fb      	bne.n	80d2 <lua_newstate+0x10a>
  if (luaD_rawrunprotected(L, f_luaopen, NULL) != LUA_OK) {
    80da:	2200      	movs	r2, #0
    80dc:	4630      	mov	r0, r6
    80de:	4909      	ldr	r1, [pc, #36]	; (8104 <lua_newstate+0x13c>)
    80e0:	f00a fe7d 	bl	12dde <luaD_rawrunprotected>
    80e4:	b138      	cbz	r0, 80f6 <lua_newstate+0x12e>
    /* memory allocation error: free partial state */
    close_state(L);
    80e6:	4630      	mov	r0, r6
    80e8:	f00d fb61 	bl	157ae <close_state>
    L = NULL;
    80ec:	2400      	movs	r4, #0
  }
  return L;
}
    80ee:	4620      	mov	r0, r4
    80f0:	b005      	add	sp, #20
    80f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  L = &l->l.l;
    80f6:	4634      	mov	r4, r6
    80f8:	e7f9      	b.n	80ee <lua_newstate+0x126>
    80fa:	bf00      	nop
    80fc:	00007fc9 	.word	0x00007fc9
    8100:	00021914 	.word	0x00021914
    8104:	000156d9 	.word	0x000156d9

00008108 <luaE_checkcstack>:
void luaE_checkcstack (lua_State *L) {
    8108:	b508      	push	{r3, lr}
  if (getCcalls(L) == LUAI_MAXCCALLS)
    810a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    810e:	2bc8      	cmp	r3, #200	; 0xc8
    8110:	d102      	bne.n	8118 <luaE_checkcstack+0x10>
    luaG_runerror(L, "C stack overflow");
    8112:	4904      	ldr	r1, [pc, #16]	; (8124 <luaE_checkcstack+0x1c>)
    8114:	f00a fe0c 	bl	12d30 <luaG_runerror>
  else if (getCcalls(L) >= (LUAI_MAXCCALLS / 10 * 11))
    8118:	2bdb      	cmp	r3, #219	; 0xdb
    811a:	d902      	bls.n	8122 <luaE_checkcstack+0x1a>
    luaD_throw(L, LUA_ERRERR);  /* error while handling stack error */
    811c:	2105      	movs	r1, #5
    811e:	f00a fe38 	bl	12d92 <luaD_throw>
}
    8122:	bd08      	pop	{r3, pc}
    8124:	00018763 	.word	0x00018763

00008128 <luaE_warnerror>:


/*
** Generate a warning from an error message
*/
void luaE_warnerror (lua_State *L, const char *where) {
    8128:	b570      	push	{r4, r5, r6, lr}
    812a:	4604      	mov	r4, r0
    812c:	460e      	mov	r6, r1
  TValue *errobj = s2v(L->top - 1);  /* error object */
    812e:	68c2      	ldr	r2, [r0, #12]
  const char *msg = (ttisstring(errobj))
                  ? svalue(errobj)
                  : "error object is not a string";
  /* produce warning "error in %s (%s)" (where, msg) */
  luaE_warning(L, "error in ", 1);
    8130:	4912      	ldr	r1, [pc, #72]	; (817c <luaE_warnerror+0x54>)
                  : "error object is not a string";
    8132:	f812 3c08 	ldrb.w	r3, [r2, #-8]
    8136:	f003 030f 	and.w	r3, r3, #15
    813a:	2b04      	cmp	r3, #4
    813c:	bf08      	it	eq
    813e:	f852 5c10 	ldreq.w	r5, [r2, #-16]
  luaE_warning(L, "error in ", 1);
    8142:	f04f 0201 	mov.w	r2, #1
                  : "error object is not a string";
    8146:	bf14      	ite	ne
    8148:	4d0d      	ldrne	r5, [pc, #52]	; (8180 <luaE_warnerror+0x58>)
    814a:	3510      	addeq	r5, #16
  luaE_warning(L, "error in ", 1);
    814c:	f00d fbbc 	bl	158c8 <luaE_warning>
  luaE_warning(L, where, 1);
    8150:	4631      	mov	r1, r6
    8152:	4620      	mov	r0, r4
    8154:	2201      	movs	r2, #1
    8156:	f00d fbb7 	bl	158c8 <luaE_warning>
  luaE_warning(L, " (", 1);
    815a:	4620      	mov	r0, r4
    815c:	2201      	movs	r2, #1
    815e:	4909      	ldr	r1, [pc, #36]	; (8184 <luaE_warnerror+0x5c>)
    8160:	f00d fbb2 	bl	158c8 <luaE_warning>
  luaE_warning(L, msg, 1);
    8164:	4629      	mov	r1, r5
    8166:	4620      	mov	r0, r4
    8168:	2201      	movs	r2, #1
    816a:	f00d fbad 	bl	158c8 <luaE_warning>
  luaE_warning(L, ")", 0);
    816e:	4620      	mov	r0, r4
}
    8170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  luaE_warning(L, ")", 0);
    8174:	2200      	movs	r2, #0
    8176:	4904      	ldr	r1, [pc, #16]	; (8188 <luaE_warnerror+0x60>)
    8178:	f00d bba6 	b.w	158c8 <luaE_warning>
    817c:	00018774 	.word	0x00018774
    8180:	00017d76 	.word	0x00017d76
    8184:	0001877e 	.word	0x0001877e
    8188:	00017d17 	.word	0x00017d17

0000818c <luaS_init>:


/*
** Initialize the string table and the string cache
*/
void luaS_init (lua_State *L) {
    818c:	b538      	push	{r3, r4, r5, lr}
  global_State *g = G(L);
  int i, j;
  stringtable *tb = &G(L)->strt;
  tb->hash = luaM_newvector(L, MINSTRTABSIZE, TString*);
    818e:	2200      	movs	r2, #0
    8190:	f44f 7100 	mov.w	r1, #512	; 0x200
  global_State *g = G(L);
    8194:	6904      	ldr	r4, [r0, #16]
void luaS_init (lua_State *L) {
    8196:	4605      	mov	r5, r0
  tb->hash = luaM_newvector(L, MINSTRTABSIZE, TString*);
    8198:	f00c fcd0 	bl	14b3c <luaM_malloc_>
  tablerehash(tb->hash, 0, MINSTRTABSIZE);  /* clear array */
    819c:	2280      	movs	r2, #128	; 0x80
    819e:	2100      	movs	r1, #0
  tb->hash = luaM_newvector(L, MINSTRTABSIZE, TString*);
    81a0:	61a0      	str	r0, [r4, #24]
  tablerehash(tb->hash, 0, MINSTRTABSIZE);  /* clear array */
    81a2:	f00d fb99 	bl	158d8 <tablerehash>
  tb->size = MINSTRTABSIZE;
    81a6:	2380      	movs	r3, #128	; 0x80
/*
** new string (with explicit length)
*/
TString *luaS_newlstr (lua_State *L, const char *str, size_t l) {
  if (l <= LUAI_MAXSHORTLEN)  /* short string? */
    return internshrstr(L, str, l);
    81a8:	2211      	movs	r2, #17
  tb->size = MINSTRTABSIZE;
    81aa:	6223      	str	r3, [r4, #32]
    return internshrstr(L, str, l);
    81ac:	490a      	ldr	r1, [pc, #40]	; (81d8 <luaS_init+0x4c>)
    81ae:	4628      	mov	r0, r5
    81b0:	f00d fc08 	bl	159c4 <internshrstr>
    81b4:	4601      	mov	r1, r0
  g->memerrmsg = luaS_newliteral(L, MEMERRMSG);
    81b6:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
  luaC_fix(L, obj2gco(g->memerrmsg));  /* it should never be collected */
    81ba:	4628      	mov	r0, r5
    81bc:	f00c f9de 	bl	1457c <luaC_fix>
  for (i = 0; i < STRCACHE_N; i++)  /* fill cache with valid strings */
    81c0:	4623      	mov	r3, r4
      g->strcache[i][j] = g->memerrmsg;
    81c2:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    81c6:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
    81ca:	e9c3 224d 	strd	r2, r2, [r3, #308]	; 0x134
  for (i = 0; i < STRCACHE_N; i++)  /* fill cache with valid strings */
    81ce:	3308      	adds	r3, #8
    81d0:	4299      	cmp	r1, r3
    81d2:	d1fa      	bne.n	81ca <luaS_init+0x3e>
}
    81d4:	bd38      	pop	{r3, r4, r5, pc}
    81d6:	bf00      	nop
    81d8:	00018781 	.word	0x00018781

000081dc <mainpositionTV>:

/*
** returns the 'main' position of an element in a table (that is,
** the index of its hash value).
*/
static Node *mainpositionTV (const Table *t, const TValue *key) {
    81dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (ttypetag(key)) {
    81de:	7a0b      	ldrb	r3, [r1, #8]
static Node *mainpositionTV (const Table *t, const TValue *key) {
    81e0:	4605      	mov	r5, r0
  switch (ttypetag(key)) {
    81e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    81e6:	3b01      	subs	r3, #1
    81e8:	2b15      	cmp	r3, #21
    81ea:	d863      	bhi.n	82b4 <mainpositionTV+0xd8>
    81ec:	e8df f003 	tbb	[pc, r3]
    81f0:	430b6259 	.word	0x430b6259
    81f4:	62626262 	.word	0x62626262
    81f8:	62626262 	.word	0x62626262
    81fc:	62626262 	.word	0x62626262
    8200:	4f12625b 	.word	0x4f12625b
    8204:	6262      	.short	0x6262
    case LUA_VNUMINT: {
      lua_Integer i = ivalue(key);
      return hashint(t, i);
    8206:	e9d1 2300 	ldrd	r2, r3, [r1]
    default: {
      GCObject *o = gcvalue(key);
      return hashpointer(t, o);
    }
  }
}
    820a:	b003      	add	sp, #12
    820c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      return hashint(t, i);
    8210:	f00d bcc7 	b.w	15ba2 <hashint>
      return hashmod(t, l_hashfloat(n));
    8214:	6904      	ldr	r4, [r0, #16]
  n = l_mathop(frexp)(n, &i) * -cast_num(INT_MIN);
    8216:	aa01      	add	r2, sp, #4
    8218:	e9d1 0100 	ldrd	r0, r1, [r1]
    821c:	f004 fd6e 	bl	ccfc <frexp>
    8220:	2200      	movs	r2, #0
    8222:	4b2a      	ldr	r3, [pc, #168]	; (82cc <mainpositionTV+0xf0>)
    8224:	f7f8 f920 	bl	468 <__aeabi_dmul>
  if (!lua_numbertointeger(n, &ni)) {  /* is 'n' inf/-inf/NaN? */
    8228:	2200      	movs	r2, #0
    822a:	4b29      	ldr	r3, [pc, #164]	; (82d0 <mainpositionTV+0xf4>)
  n = l_mathop(frexp)(n, &i) * -cast_num(INT_MIN);
    822c:	4606      	mov	r6, r0
    822e:	460f      	mov	r7, r1
  if (!lua_numbertointeger(n, &ni)) {  /* is 'n' inf/-inf/NaN? */
    8230:	f7f8 fba0 	bl	974 <__aeabi_dcmpge>
    8234:	b180      	cbz	r0, 8258 <mainpositionTV+0x7c>
    8236:	2200      	movs	r2, #0
    8238:	4630      	mov	r0, r6
    823a:	4639      	mov	r1, r7
    823c:	4b25      	ldr	r3, [pc, #148]	; (82d4 <mainpositionTV+0xf8>)
    823e:	f7f8 fb85 	bl	94c <__aeabi_dcmplt>
    8242:	b148      	cbz	r0, 8258 <mainpositionTV+0x7c>
    8244:	4630      	mov	r0, r6
    8246:	4639      	mov	r1, r7
    8248:	f7f8 fc9c 	bl	b84 <__aeabi_d2lz>
    unsigned int u = cast_uint(i) + cast_uint(ni);
    824c:	9b01      	ldr	r3, [sp, #4]
    824e:	4418      	add	r0, r3
    return cast_int(u <= cast_uint(INT_MAX) ? u : ~u);
    8250:	43c3      	mvns	r3, r0
    8252:	4298      	cmp	r0, r3
    8254:	bfb8      	it	lt
    8256:	4618      	movlt	r0, r3
      return hashmod(t, l_hashfloat(n));
    8258:	2301      	movs	r3, #1
    825a:	79ea      	ldrb	r2, [r5, #7]
    825c:	4093      	lsls	r3, r2
    825e:	3b01      	subs	r3, #1
    8260:	f043 0301 	orr.w	r3, r3, #1
    8264:	fb90 f2f3 	sdiv	r2, r0, r3
    8268:	fb03 0012 	mls	r0, r3, r2, r0
      return hashpow2(t, luaS_hashlongstr(ts));
    826c:	2318      	movs	r3, #24
    826e:	fb03 4000 	mla	r0, r3, r0, r4
}
    8272:	b003      	add	sp, #12
    8274:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return hashstr(t, ts);
    8276:	79c3      	ldrb	r3, [r0, #7]
    8278:	2001      	movs	r0, #1
    827a:	4098      	lsls	r0, r3
    827c:	680b      	ldr	r3, [r1, #0]
    827e:	3801      	subs	r0, #1
    8280:	689b      	ldr	r3, [r3, #8]
    8282:	4003      	ands	r3, r0
      return hashpointer(t, o);
    8284:	2218      	movs	r2, #24
    8286:	6928      	ldr	r0, [r5, #16]
    8288:	fb02 0003 	mla	r0, r2, r3, r0
    828c:	e7f1      	b.n	8272 <mainpositionTV+0x96>
      return hashpow2(t, luaS_hashlongstr(ts));
    828e:	6904      	ldr	r4, [r0, #16]
    8290:	6808      	ldr	r0, [r1, #0]
    8292:	f00d fb65 	bl	15960 <luaS_hashlongstr>
    8296:	2301      	movs	r3, #1
    8298:	79ea      	ldrb	r2, [r5, #7]
    829a:	4093      	lsls	r3, r2
    829c:	3b01      	subs	r3, #1
    829e:	4018      	ands	r0, r3
    82a0:	e7e4      	b.n	826c <mainpositionTV+0x90>
      return hashboolean(t, 0);
    82a2:	6900      	ldr	r0, [r0, #16]
    82a4:	e7e5      	b.n	8272 <mainpositionTV+0x96>
      return hashboolean(t, 1);
    82a6:	79c3      	ldrb	r3, [r0, #7]
    82a8:	2001      	movs	r0, #1
    82aa:	4098      	lsls	r0, r3
    82ac:	3801      	subs	r0, #1
    82ae:	f000 0301 	and.w	r3, r0, #1
    82b2:	e7e7      	b.n	8284 <mainpositionTV+0xa8>
      return hashpointer(t, o);
    82b4:	2301      	movs	r3, #1
    82b6:	79c0      	ldrb	r0, [r0, #7]
    82b8:	4083      	lsls	r3, r0
    82ba:	3b01      	subs	r3, #1
    82bc:	6808      	ldr	r0, [r1, #0]
    82be:	f043 0301 	orr.w	r3, r3, #1
    82c2:	fbb0 f2f3 	udiv	r2, r0, r3
    82c6:	fb03 0312 	mls	r3, r3, r2, r0
    82ca:	e7db      	b.n	8284 <mainpositionTV+0xa8>
    82cc:	41e00000 	.word	0x41e00000
    82d0:	c3e00000 	.word	0xc3e00000
    82d4:	43e00000 	.word	0x43e00000

000082d8 <getgeneric>:
/*
** "Generic" get version. (Not that generic: not valid for integers,
** which may be in array part, nor for floats with integral values.)
** See explanation about 'deadok' in function 'equalkey'.
*/
static const TValue *getgeneric (Table *t, const TValue *key, int deadok) {
    82d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82da:	460d      	mov	r5, r1
    82dc:	4616      	mov	r6, r2
  Node *n = mainpositionTV(t, key);
    82de:	f7ff ff7d 	bl	81dc <mainpositionTV>
      return gval(n);  /* that's it */
    else {
      int nx = gnext(n);
      if (nx == 0)
        return &absentkey;  /* not found */
      n += nx;
    82e2:	2718      	movs	r7, #24
  Node *n = mainpositionTV(t, key);
    82e4:	4604      	mov	r4, r0
  if ((rawtt(k1) != keytt(n2)) &&  /* not the same variants? */
    82e6:	7a2b      	ldrb	r3, [r5, #8]
    82e8:	7a62      	ldrb	r2, [r4, #9]
    82ea:	4293      	cmp	r3, r2
    82ec:	d009      	beq.n	8302 <getgeneric+0x2a>
    82ee:	b11e      	cbz	r6, 82f8 <getgeneric+0x20>
       !(deadok && keyisdead(n2) && iscollectable(k1)))
    82f0:	2a0b      	cmp	r2, #11
    82f2:	d101      	bne.n	82f8 <getgeneric+0x20>
    82f4:	065b      	lsls	r3, r3, #25
    82f6:	d40b      	bmi.n	8310 <getgeneric+0x38>
      int nx = gnext(n);
    82f8:	68e3      	ldr	r3, [r4, #12]
      if (nx == 0)
    82fa:	b373      	cbz	r3, 835a <getgeneric+0x82>
      n += nx;
    82fc:	fb07 4403 	mla	r4, r7, r3, r4
    if (equalkey(key, n, deadok))
    8300:	e7f1      	b.n	82e6 <getgeneric+0xe>
  switch (keytt(n2)) {
    8302:	2b11      	cmp	r3, #17
    8304:	d013      	beq.n	832e <getgeneric+0x56>
    8306:	d814      	bhi.n	8332 <getgeneric+0x5a>
    8308:	2b02      	cmp	r3, #2
    830a:	d001      	beq.n	8310 <getgeneric+0x38>
    830c:	d805      	bhi.n	831a <getgeneric+0x42>
    830e:	d10e      	bne.n	832e <getgeneric+0x56>
    if (equalkey(key, n, deadok))
    8310:	682a      	ldr	r2, [r5, #0]
    8312:	6923      	ldr	r3, [r4, #16]
    8314:	429a      	cmp	r2, r3
    8316:	d1ef      	bne.n	82f8 <getgeneric+0x20>
    8318:	e009      	b.n	832e <getgeneric+0x56>
  switch (keytt(n2)) {
    831a:	2b03      	cmp	r3, #3
    831c:	d1f8      	bne.n	8310 <getgeneric+0x38>
    if (equalkey(key, n, deadok))
    831e:	e9d5 0200 	ldrd	r0, r2, [r5]
    8322:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    8326:	429a      	cmp	r2, r3
    8328:	bf08      	it	eq
    832a:	4288      	cmpeq	r0, r1
    832c:	d1e4      	bne.n	82f8 <getgeneric+0x20>
      return gval(n);  /* that's it */
    832e:	4620      	mov	r0, r4
    }
  }
}
    8330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (keytt(n2)) {
    8332:	2b16      	cmp	r3, #22
    8334:	d0ec      	beq.n	8310 <getgeneric+0x38>
    8336:	2b54      	cmp	r3, #84	; 0x54
    8338:	d00a      	beq.n	8350 <getgeneric+0x78>
    833a:	2b13      	cmp	r3, #19
    833c:	d1e8      	bne.n	8310 <getgeneric+0x38>
    if (equalkey(key, n, deadok))
    833e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    8342:	e9d5 0100 	ldrd	r0, r1, [r5]
    8346:	f7f8 faf7 	bl	938 <__aeabi_dcmpeq>
    834a:	2800      	cmp	r0, #0
    834c:	d0d4      	beq.n	82f8 <getgeneric+0x20>
    834e:	e7ee      	b.n	832e <getgeneric+0x56>
      return luaS_eqlngstr(tsvalue(k1), keystrval(n2));
    8350:	6921      	ldr	r1, [r4, #16]
    8352:	6828      	ldr	r0, [r5, #0]
    8354:	f00d fae1 	bl	1591a <luaS_eqlngstr>
    8358:	e7f7      	b.n	834a <getgeneric+0x72>
        return &absentkey;  /* not found */
    835a:	4801      	ldr	r0, [pc, #4]	; (8360 <getgeneric+0x88>)
    835c:	e7e8      	b.n	8330 <getgeneric+0x58>
    835e:	bf00      	nop
    8360:	00017808 	.word	0x00017808

00008364 <luaH_new>:
** }=============================================================
*/


Table *luaH_new (lua_State *L) {
  GCObject *o = luaC_newobj(L, LUA_VTABLE, sizeof(Table));
    8364:	2220      	movs	r2, #32
    8366:	2105      	movs	r1, #5
Table *luaH_new (lua_State *L) {
    8368:	b508      	push	{r3, lr}
  GCObject *o = luaC_newobj(L, LUA_VTABLE, sizeof(Table));
    836a:	f00c f914 	bl	14596 <luaC_newobj>
    t->node = cast(Node *, dummynode);  /* use common 'dummynode' */
    836e:	4905      	ldr	r1, [pc, #20]	; (8384 <luaH_new+0x20>)
  Table *t = gco2t(o);
  t->metatable = NULL;
    8370:	2200      	movs	r2, #0
    t->node = cast(Node *, dummynode);  /* use common 'dummynode' */
    8372:	6101      	str	r1, [r0, #16]
  t->flags = cast_byte(maskflags);  /* table has no metamethod fields */
    8374:	213f      	movs	r1, #63	; 0x3f
    8376:	80c1      	strh	r1, [r0, #6]
  t->array = NULL;
    8378:	e9c0 2202 	strd	r2, r2, [r0, #8]
  t->metatable = NULL;
    837c:	6182      	str	r2, [r0, #24]
    t->lastfree = NULL;  /* signal that it is using dummy node */
    837e:	6142      	str	r2, [r0, #20]
  t->alimit = 0;
  setnodevector(L, t, 0);
  return t;
}
    8380:	bd08      	pop	{r3, pc}
    8382:	bf00      	nop
    8384:	00017818 	.word	0x00017818

00008388 <luaH_getint>:
** this case, try to avoid a call to 'luaH_realasize' when key is just
** one more than the limit (so that it can be incremented without
** changing the real size of the array).
*/
const TValue *luaH_getint (Table *t, lua_Integer key) {
  if (l_castS2U(key) - 1u < t->alimit)  /* 'key' in [1, t->alimit]? */
    8388:	1e51      	subs	r1, r2, #1
const TValue *luaH_getint (Table *t, lua_Integer key) {
    838a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    838c:	4614      	mov	r4, r2
    838e:	461e      	mov	r6, r3
  if (l_castS2U(key) - 1u < t->alimit)  /* 'key' in [1, t->alimit]? */
    8390:	f143 32ff 	adc.w	r2, r3, #4294967295	; 0xffffffff
    8394:	6883      	ldr	r3, [r0, #8]
const TValue *luaH_getint (Table *t, lua_Integer key) {
    8396:	4605      	mov	r5, r0
  if (l_castS2U(key) - 1u < t->alimit)  /* 'key' in [1, t->alimit]? */
    8398:	4299      	cmp	r1, r3
    839a:	f172 0700 	sbcs.w	r7, r2, #0
    839e:	d203      	bcs.n	83a8 <luaH_getint+0x20>
    return &t->array[key - 1];
  else if (!limitequalsasize(t) &&  /* key still may be in the array part? */
           (l_castS2U(key) == t->alimit + 1 ||
            l_castS2U(key) - 1u < luaH_realasize(t))) {
    t->alimit = cast_uint(key);  /* probably '#t' is here now */
    return &t->array[key - 1];
    83a0:	68e8      	ldr	r0, [r5, #12]
    83a2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
        n += nx;
      }
    }
    return &absentkey;
  }
}
    83a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (!limitequalsasize(t) &&  /* key still may be in the array part? */
    83a8:	f990 7006 	ldrsb.w	r7, [r0, #6]
    83ac:	2f00      	cmp	r7, #0
    83ae:	da0f      	bge.n	83d0 <luaH_getint+0x48>
    83b0:	1e5f      	subs	r7, r3, #1
    83b2:	421f      	tst	r7, r3
    83b4:	d00c      	beq.n	83d0 <luaH_getint+0x48>
           (l_castS2U(key) == t->alimit + 1 ||
    83b6:	3301      	adds	r3, #1
  else if (!limitequalsasize(t) &&  /* key still may be in the array part? */
    83b8:	2e00      	cmp	r6, #0
    83ba:	bf08      	it	eq
    83bc:	429c      	cmpeq	r4, r3
    83be:	d005      	beq.n	83cc <luaH_getint+0x44>
            l_castS2U(key) - 1u < luaH_realasize(t))) {
    83c0:	f00d fc15 	bl	15bee <luaH_realasize>
           (l_castS2U(key) == t->alimit + 1 ||
    83c4:	4281      	cmp	r1, r0
    83c6:	f172 0300 	sbcs.w	r3, r2, #0
    83ca:	d201      	bcs.n	83d0 <luaH_getint+0x48>
    t->alimit = cast_uint(key);  /* probably '#t' is here now */
    83cc:	60ac      	str	r4, [r5, #8]
    83ce:	e7e7      	b.n	83a0 <luaH_getint+0x18>
    Node *n = hashint(t, key);
    83d0:	4622      	mov	r2, r4
    83d2:	4633      	mov	r3, r6
    83d4:	4628      	mov	r0, r5
    83d6:	f00d fbe4 	bl	15ba2 <hashint>
        n += nx;
    83da:	2218      	movs	r2, #24
      if (keyisinteger(n) && keyival(n) == key)
    83dc:	7a43      	ldrb	r3, [r0, #9]
    83de:	2b03      	cmp	r3, #3
    83e0:	d105      	bne.n	83ee <luaH_getint+0x66>
    83e2:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
    83e6:	42b3      	cmp	r3, r6
    83e8:	bf08      	it	eq
    83ea:	42a1      	cmpeq	r1, r4
    83ec:	d0db      	beq.n	83a6 <luaH_getint+0x1e>
        int nx = gnext(n);
    83ee:	68c3      	ldr	r3, [r0, #12]
        if (nx == 0) break;
    83f0:	b113      	cbz	r3, 83f8 <luaH_getint+0x70>
        n += nx;
    83f2:	fb02 0003 	mla	r0, r2, r3, r0
      if (keyisinteger(n) && keyival(n) == key)
    83f6:	e7f1      	b.n	83dc <luaH_getint+0x54>
    return &absentkey;
    83f8:	4800      	ldr	r0, [pc, #0]	; (83fc <luaH_getint+0x74>)
    83fa:	e7d4      	b.n	83a6 <luaH_getint+0x1e>
    83fc:	00017808 	.word	0x00017808

00008400 <luaH_getshortstr>:

/*
** search function for short strings
*/
const TValue *luaH_getshortstr (Table *t, TString *key) {
  Node *n = hashstr(t, key);
    8400:	2301      	movs	r3, #1
    8402:	79c2      	ldrb	r2, [r0, #7]
    8404:	6900      	ldr	r0, [r0, #16]
    8406:	4093      	lsls	r3, r2
    8408:	688a      	ldr	r2, [r1, #8]
    840a:	3b01      	subs	r3, #1
    840c:	4013      	ands	r3, r2
    840e:	2218      	movs	r2, #24
    8410:	fb02 0003 	mla	r0, r2, r3, r0
  lua_assert(key->tt == LUA_VSHRSTR);
  for (;;) {  /* check whether 'key' is somewhere in the chain */
    if (keyisshrstr(n) && eqshrstr(keystrval(n), key))
    8414:	7a43      	ldrb	r3, [r0, #9]
    8416:	2b44      	cmp	r3, #68	; 0x44
    8418:	d102      	bne.n	8420 <luaH_getshortstr+0x20>
    841a:	6903      	ldr	r3, [r0, #16]
    841c:	428b      	cmp	r3, r1
    841e:	d003      	beq.n	8428 <luaH_getshortstr+0x28>
      return gval(n);  /* that's it */
    else {
      int nx = gnext(n);
    8420:	68c3      	ldr	r3, [r0, #12]
      if (nx == 0)
    8422:	2b00      	cmp	r3, #0
    8424:	d1f4      	bne.n	8410 <luaH_getshortstr+0x10>
        return &absentkey;  /* not found */
    8426:	4801      	ldr	r0, [pc, #4]	; (842c <luaH_getshortstr+0x2c>)
      n += nx;
    }
  }
}
    8428:	4770      	bx	lr
    842a:	bf00      	nop
    842c:	00017808 	.word	0x00017808

00008430 <luaH_get>:


/*
** main search function
*/
const TValue *luaH_get (Table *t, const TValue *key) {
    8430:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8432:	7a0b      	ldrb	r3, [r1, #8]
    8434:	4605      	mov	r5, r0
    8436:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  switch (ttypetag(key)) {
    843a:	2b04      	cmp	r3, #4
const TValue *luaH_get (Table *t, const TValue *key) {
    843c:	460c      	mov	r4, r1
  switch (ttypetag(key)) {
    843e:	d01c      	beq.n	847a <luaH_get+0x4a>
    8440:	d80a      	bhi.n	8458 <luaH_get+0x28>
    8442:	b33b      	cbz	r3, 8494 <luaH_get+0x64>
    8444:	2b03      	cmp	r3, #3
    8446:	d01e      	beq.n	8486 <luaH_get+0x56>
      if (luaV_flttointeger(fltvalue(key), &k, F2Ieq)) /* integral index? */
        return luaH_getint(t, k);  /* use specialized version */
      /* else... */
    }  /* FALLTHROUGH */
    default:
      return getgeneric(t, key, 0);
    8448:	2200      	movs	r2, #0
    844a:	4621      	mov	r1, r4
    844c:	4628      	mov	r0, r5
  }
}
    844e:	b003      	add	sp, #12
    8450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return getgeneric(t, key, 0);
    8454:	f7ff bf40 	b.w	82d8 <getgeneric>
  switch (ttypetag(key)) {
    8458:	2b13      	cmp	r3, #19
    845a:	d1f5      	bne.n	8448 <luaH_get+0x18>
      if (luaV_flttointeger(fltvalue(key), &k, F2Ieq)) /* integral index? */
    845c:	e9d1 0100 	ldrd	r0, r1, [r1]
    8460:	2300      	movs	r3, #0
    8462:	466a      	mov	r2, sp
    8464:	f000 fcca 	bl	8dfc <luaV_flttointeger>
    8468:	2800      	cmp	r0, #0
    846a:	d0ed      	beq.n	8448 <luaH_get+0x18>
        return luaH_getint(t, k);  /* use specialized version */
    846c:	e9dd 2300 	ldrd	r2, r3, [sp]
    8470:	4628      	mov	r0, r5
    8472:	f7ff ff89 	bl	8388 <luaH_getint>
}
    8476:	b003      	add	sp, #12
    8478:	bd30      	pop	{r4, r5, pc}
    case LUA_VSHRSTR: return luaH_getshortstr(t, tsvalue(key));
    847a:	6809      	ldr	r1, [r1, #0]
}
    847c:	b003      	add	sp, #12
    847e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    case LUA_VSHRSTR: return luaH_getshortstr(t, tsvalue(key));
    8482:	f7ff bfbd 	b.w	8400 <luaH_getshortstr>
    case LUA_VNUMINT: return luaH_getint(t, ivalue(key));
    8486:	e9d1 2300 	ldrd	r2, r3, [r1]
}
    848a:	b003      	add	sp, #12
    848c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    case LUA_VNUMINT: return luaH_getint(t, ivalue(key));
    8490:	f7ff bf7a 	b.w	8388 <luaH_getint>
  switch (ttypetag(key)) {
    8494:	4800      	ldr	r0, [pc, #0]	; (8498 <luaH_get+0x68>)
    8496:	e7ee      	b.n	8476 <luaH_get+0x46>
    8498:	00017808 	.word	0x00017808

0000849c <luaH_resize>:
                                          unsigned int nhsize) {
    849c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    84a0:	4606      	mov	r6, r0
    84a2:	b08e      	sub	sp, #56	; 0x38
  t->alimit = luaH_realasize(t);
    84a4:	4608      	mov	r0, r1
                                          unsigned int nhsize) {
    84a6:	4617      	mov	r7, r2
    84a8:	461a      	mov	r2, r3
  t->alimit = luaH_realasize(t);
    84aa:	f00d fba0 	bl	15bee <luaH_realasize>
  setrealasize(t);
    84ae:	798b      	ldrb	r3, [r1, #6]
                                          unsigned int nhsize) {
    84b0:	460c      	mov	r4, r1
  setrealasize(t);
    84b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  t->alimit = luaH_realasize(t);
    84b6:	4605      	mov	r5, r0
    84b8:	6088      	str	r0, [r1, #8]
  setrealasize(t);
    84ba:	718b      	strb	r3, [r1, #6]
  if (size == 0) {  /* no elements to hash part? */
    84bc:	2a00      	cmp	r2, #0
    84be:	d150      	bne.n	8562 <luaH_resize+0xc6>
    t->node = cast(Node *, dummynode);  /* use common 'dummynode' */
    84c0:	4b5e      	ldr	r3, [pc, #376]	; (863c <luaH_resize+0x1a0>)
    t->lsizenode = 0;
    84c2:	f88d 201f 	strb.w	r2, [sp, #31]
    t->node = cast(Node *, dummynode);  /* use common 'dummynode' */
    84c6:	930a      	str	r3, [sp, #40]	; 0x28
    t->lastfree = NULL;  /* signal that it is using dummy node */
    84c8:	920b      	str	r2, [sp, #44]	; 0x2c
  if (newasize < oldasize) {  /* will array shrink? */
    84ca:	42af      	cmp	r7, r5
    84cc:	d239      	bcs.n	8542 <luaH_resize+0xa6>
  Node *lastfree = t1->lastfree;
    84ce:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    84d2:	f04f 0900 	mov.w	r9, #0
  t1->lsizenode = t2->lsizenode;
    84d6:	f89d 001f 	ldrb.w	r0, [sp, #31]
  lu_byte lsizenode = t1->lsizenode;
    84da:	79e1      	ldrb	r1, [r4, #7]
  t1->lsizenode = t2->lsizenode;
    84dc:	71e0      	strb	r0, [r4, #7]
  t1->node = t2->node;
    84de:	980a      	ldr	r0, [sp, #40]	; 0x28
    t->alimit = newasize;  /* pretend array has new size... */
    84e0:	60a7      	str	r7, [r4, #8]
  t1->node = t2->node;
    84e2:	6120      	str	r0, [r4, #16]
  t1->lastfree = t2->lastfree;
    84e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  t2->lastfree = lastfree;
    84e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  t1->lastfree = t2->lastfree;
    84ea:	6160      	str	r0, [r4, #20]
  t2->lsizenode = lsizenode;
    84ec:	f88d 101f 	strb.w	r1, [sp, #31]
    for (i = newasize; i < oldasize; i++) {
    84f0:	f107 0801 	add.w	r8, r7, #1
      if (!isempty(&t->array[i]))
    84f4:	ea4f 1208 	mov.w	r2, r8, lsl #4
    84f8:	f1a2 0310 	sub.w	r3, r2, #16
    84fc:	68e2      	ldr	r2, [r4, #12]
    84fe:	441a      	add	r2, r3
    8500:	7a13      	ldrb	r3, [r2, #8]
    8502:	0719      	lsls	r1, r3, #28
    8504:	d006      	beq.n	8514 <luaH_resize+0x78>
        luaH_setint(L, t, i + 1, &t->array[i]);
    8506:	9200      	str	r2, [sp, #0]
    8508:	464b      	mov	r3, r9
    850a:	4642      	mov	r2, r8
    850c:	4621      	mov	r1, r4
    850e:	4630      	mov	r0, r6
    8510:	f00d fbab 	bl	15c6a <luaH_setint>
    for (i = newasize; i < oldasize; i++) {
    8514:	f118 0801 	adds.w	r8, r8, #1
    8518:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    851c:	f149 0900 	adc.w	r9, r9, #0
    8520:	42ab      	cmp	r3, r5
    8522:	d3e7      	bcc.n	84f4 <luaH_resize+0x58>
  Node *lastfree = t1->lastfree;
    8524:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
  t1->lsizenode = t2->lsizenode;
    8528:	f89d 001f 	ldrb.w	r0, [sp, #31]
  lu_byte lsizenode = t1->lsizenode;
    852c:	79e1      	ldrb	r1, [r4, #7]
  t1->lsizenode = t2->lsizenode;
    852e:	71e0      	strb	r0, [r4, #7]
  t1->node = t2->node;
    8530:	980a      	ldr	r0, [sp, #40]	; 0x28
    t->alimit = oldasize;  /* restore current size... */
    8532:	60a5      	str	r5, [r4, #8]
  t1->node = t2->node;
    8534:	6120      	str	r0, [r4, #16]
  t1->lastfree = t2->lastfree;
    8536:	980b      	ldr	r0, [sp, #44]	; 0x2c
  t2->lastfree = lastfree;
    8538:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  t1->lastfree = t2->lastfree;
    853c:	6160      	str	r0, [r4, #20]
  t2->lsizenode = lsizenode;
    853e:	f88d 101f 	strb.w	r1, [sp, #31]
  newarray = luaM_reallocvector(L, t->array, oldasize, newasize, TValue);
    8542:	4630      	mov	r0, r6
    8544:	68e1      	ldr	r1, [r4, #12]
    8546:	013b      	lsls	r3, r7, #4
    8548:	012a      	lsls	r2, r5, #4
    854a:	f00c fac7 	bl	14adc <luaM_realloc_>
  if (l_unlikely(newarray == NULL && newasize > 0)) {  /* allocation failed? */
    854e:	bbc8      	cbnz	r0, 85c4 <luaH_resize+0x128>
    8550:	b3c7      	cbz	r7, 85c4 <luaH_resize+0x128>
    freehash(L, &newt);  /* release new hash part */
    8552:	4630      	mov	r0, r6
    8554:	a906      	add	r1, sp, #24
    8556:	f00d fb41 	bl	15bdc <freehash>
    luaM_error(L);  /* raise error (with array unchanged) */
    855a:	2104      	movs	r1, #4
    855c:	4630      	mov	r0, r6
    855e:	f00a fc18 	bl	12d92 <luaD_throw>
    int lsize = luaO_ceillog2(size);
    8562:	4610      	mov	r0, r2
    8564:	f7fd fff0 	bl	6548 <luaO_ceillog2>
    if (lsize > MAXHBITS || (1u << lsize) > MAXHSIZE)
    8568:	281e      	cmp	r0, #30
    int lsize = luaO_ceillog2(size);
    856a:	4680      	mov	r8, r0
    if (lsize > MAXHBITS || (1u << lsize) > MAXHSIZE)
    856c:	dc06      	bgt.n	857c <luaH_resize+0xe0>
    856e:	f04f 0901 	mov.w	r9, #1
    8572:	4b33      	ldr	r3, [pc, #204]	; (8640 <luaH_resize+0x1a4>)
    8574:	fa09 f900 	lsl.w	r9, r9, r0
    8578:	4599      	cmp	r9, r3
    857a:	d903      	bls.n	8584 <luaH_resize+0xe8>
      luaG_runerror(L, "table overflow");
    857c:	4630      	mov	r0, r6
    857e:	4931      	ldr	r1, [pc, #196]	; (8644 <luaH_resize+0x1a8>)
    8580:	f00a fbd6 	bl	12d30 <luaG_runerror>
    t->node = luaM_newvector(L, size, Node);
    8584:	2018      	movs	r0, #24
    8586:	fa00 fa08 	lsl.w	sl, r0, r8
    858a:	2200      	movs	r2, #0
    858c:	4651      	mov	r1, sl
    858e:	4630      	mov	r0, r6
    8590:	f00c fad4 	bl	14b3c <luaM_malloc_>
    for (i = 0; i < (int)size; i++) {
    8594:	2200      	movs	r2, #0
      setempty(gval(n));
    8596:	f04f 0c10 	mov.w	ip, #16
      gnext(n) = 0;
    859a:	4611      	mov	r1, r2
    t->node = luaM_newvector(L, size, Node);
    859c:	900a      	str	r0, [sp, #40]	; 0x28
    for (i = 0; i < (int)size; i++) {
    859e:	f100 0308 	add.w	r3, r0, #8
    85a2:	4591      	cmp	r9, r2
    85a4:	f103 0318 	add.w	r3, r3, #24
    85a8:	dc04      	bgt.n	85b4 <luaH_resize+0x118>
    t->lastfree = gnode(t, size);  /* all positions are free */
    85aa:	4450      	add	r0, sl
    t->lsizenode = cast_byte(lsize);
    85ac:	f88d 801f 	strb.w	r8, [sp, #31]
    t->lastfree = gnode(t, size);  /* all positions are free */
    85b0:	900b      	str	r0, [sp, #44]	; 0x2c
}
    85b2:	e78a      	b.n	84ca <luaH_resize+0x2e>
      gnext(n) = 0;
    85b4:	f843 1c14 	str.w	r1, [r3, #-20]
      setnilkey(n);
    85b8:	f803 1c17 	strb.w	r1, [r3, #-23]
      setempty(gval(n));
    85bc:	f803 cc18 	strb.w	ip, [r3, #-24]
    for (i = 0; i < (int)size; i++) {
    85c0:	3201      	adds	r2, #1
    85c2:	e7ee      	b.n	85a2 <luaH_resize+0x106>
  t1->lsizenode = t2->lsizenode;
    85c4:	f89d 101f 	ldrb.w	r1, [sp, #31]
  lu_byte lsizenode = t1->lsizenode;
    85c8:	79e3      	ldrb	r3, [r4, #7]
  t1->lsizenode = t2->lsizenode;
    85ca:	71e1      	strb	r1, [r4, #7]
  t1->node = t2->node;
    85cc:	990a      	ldr	r1, [sp, #40]	; 0x28
  Node *lastfree = t1->lastfree;
    85ce:	e9d4 c204 	ldrd	ip, r2, [r4, #16]
  t1->node = t2->node;
    85d2:	6121      	str	r1, [r4, #16]
  t1->lastfree = t2->lastfree;
    85d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  t2->lastfree = lastfree;
    85d6:	e9cd c20a 	strd	ip, r2, [sp, #40]	; 0x28
     setempty(&t->array[i]);
    85da:	2210      	movs	r2, #16
  t->alimit = newasize;
    85dc:	e9c4 7002 	strd	r7, r0, [r4, #8]
  t1->lastfree = t2->lastfree;
    85e0:	6161      	str	r1, [r4, #20]
  t2->lsizenode = lsizenode;
    85e2:	f88d 301f 	strb.w	r3, [sp, #31]
     setempty(&t->array[i]);
    85e6:	3008      	adds	r0, #8
  for (i = oldasize; i < newasize; i++)  /* clear new slice of the array */
    85e8:	42bd      	cmp	r5, r7
    85ea:	d30d      	bcc.n	8608 <luaH_resize+0x16c>
  int size = sizenode(ot);
    85ec:	2701      	movs	r7, #1
  for (j = 0; j < size; j++) {
    85ee:	2500      	movs	r5, #0
    Node *old = gnode(ot, j);
    85f0:	f04f 0818 	mov.w	r8, #24
  int size = sizenode(ot);
    85f4:	409f      	lsls	r7, r3
  for (j = 0; j < size; j++) {
    85f6:	42af      	cmp	r7, r5
    85f8:	dc0a      	bgt.n	8610 <luaH_resize+0x174>
  freehash(L, &newt);  /* free old hash part */
    85fa:	4630      	mov	r0, r6
    85fc:	a906      	add	r1, sp, #24
    85fe:	f00d faed 	bl	15bdc <freehash>
}
    8602:	b00e      	add	sp, #56	; 0x38
    8604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     setempty(&t->array[i]);
    8608:	0129      	lsls	r1, r5, #4
    860a:	5442      	strb	r2, [r0, r1]
  for (i = oldasize; i < newasize; i++)  /* clear new slice of the array */
    860c:	3501      	adds	r5, #1
    860e:	e7eb      	b.n	85e8 <luaH_resize+0x14c>
    Node *old = gnode(ot, j);
    8610:	990a      	ldr	r1, [sp, #40]	; 0x28
    8612:	fb08 1105 	mla	r1, r8, r5, r1
    if (!isempty(gval(old))) {
    8616:	7a0b      	ldrb	r3, [r1, #8]
    8618:	071b      	lsls	r3, r3, #28
    861a:	d00c      	beq.n	8636 <luaH_resize+0x19a>
      getnodekey(L, &k, old);
    861c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    8620:	e9cd 2302 	strd	r2, r3, [sp, #8]
    8624:	7a4b      	ldrb	r3, [r1, #9]
      luaH_set(L, t, &k, gval(old));
    8626:	4630      	mov	r0, r6
      getnodekey(L, &k, old);
    8628:	f88d 3010 	strb.w	r3, [sp, #16]
      luaH_set(L, t, &k, gval(old));
    862c:	aa02      	add	r2, sp, #8
    862e:	460b      	mov	r3, r1
    8630:	4621      	mov	r1, r4
    8632:	f00d fb56 	bl	15ce2 <luaH_set>
  for (j = 0; j < size; j++) {
    8636:	3501      	adds	r5, #1
    8638:	e7dd      	b.n	85f6 <luaH_resize+0x15a>
    863a:	bf00      	nop
    863c:	00017818 	.word	0x00017818
    8640:	0aaaaaaa 	.word	0x0aaaaaaa
    8644:	00018793 	.word	0x00018793

00008648 <luaH_newkey>:
void luaH_newkey (lua_State *L, Table *t, const TValue *key, TValue *value) {
    8648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    864c:	4698      	mov	r8, r3
  if (l_unlikely(ttisnil(key)))
    864e:	7a13      	ldrb	r3, [r2, #8]
void luaH_newkey (lua_State *L, Table *t, const TValue *key, TValue *value) {
    8650:	460d      	mov	r5, r1
  if (l_unlikely(ttisnil(key)))
    8652:	0719      	lsls	r1, r3, #28
void luaH_newkey (lua_State *L, Table *t, const TValue *key, TValue *value) {
    8654:	4681      	mov	r9, r0
    8656:	4616      	mov	r6, r2
    8658:	b0a7      	sub	sp, #156	; 0x9c
  if (l_unlikely(ttisnil(key)))
    865a:	d102      	bne.n	8662 <luaH_newkey+0x1a>
    luaG_runerror(L, "table index is nil");
    865c:	49ad      	ldr	r1, [pc, #692]	; (8914 <luaH_newkey+0x2cc>)
      luaG_runerror(L, "table index is NaN");
    865e:	f00a fb67 	bl	12d30 <luaG_runerror>
  else if (ttisfloat(key)) {
    8662:	2b13      	cmp	r3, #19
    8664:	d111      	bne.n	868a <luaH_newkey+0x42>
    lua_Number f = fltvalue(key);
    8666:	e9d2 ab00 	ldrd	sl, fp, [r2]
    if (luaV_flttointeger(f, &k, F2Ieq)) {  /* does key fit in an integer? */
    866a:	2300      	movs	r3, #0
    866c:	4650      	mov	r0, sl
    866e:	4659      	mov	r1, fp
    8670:	aa06      	add	r2, sp, #24
    8672:	f000 fbc3 	bl	8dfc <luaV_flttointeger>
    8676:	2800      	cmp	r0, #0
    8678:	d038      	beq.n	86ec <luaH_newkey+0xa4>
      setivalue(&aux, k);
    867a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    867e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    8682:	2303      	movs	r3, #3
      key = &aux;  /* insert it as an integer */
    8684:	ae02      	add	r6, sp, #8
      setivalue(&aux, k);
    8686:	f88d 3010 	strb.w	r3, [sp, #16]
  if (ttisnil(value))
    868a:	f898 3008 	ldrb.w	r3, [r8, #8]
    868e:	071a      	lsls	r2, r3, #28
    8690:	f000 80fe 	beq.w	8890 <luaH_newkey+0x248>
  mp = mainpositionTV(t, key);
    8694:	4631      	mov	r1, r6
    8696:	4628      	mov	r0, r5
    8698:	f7ff fda0 	bl	81dc <mainpositionTV>
  if (!isempty(gval(mp)) || isdummy(t)) {  /* main position is taken? */
    869c:	7a03      	ldrb	r3, [r0, #8]
  mp = mainpositionTV(t, key);
    869e:	4604      	mov	r4, r0
  if (!isempty(gval(mp)) || isdummy(t)) {  /* main position is taken? */
    86a0:	f013 0f0f 	tst.w	r3, #15
    86a4:	696b      	ldr	r3, [r5, #20]
    86a6:	d12c      	bne.n	8702 <luaH_newkey+0xba>
    86a8:	2b00      	cmp	r3, #0
    86aa:	d16f      	bne.n	878c <luaH_newkey+0x144>
      key = &aux;  /* insert it as an integer */
    86ac:	2200      	movs	r2, #0
    86ae:	f10d 0b18 	add.w	fp, sp, #24
    86b2:	465b      	mov	r3, fp
  for (i = 0; i <= MAXABITS; i++) nums[i] = 0;  /* reset counts */
    86b4:	4611      	mov	r1, r2
    86b6:	3201      	adds	r2, #1
    86b8:	2a20      	cmp	r2, #32
    86ba:	f843 1b04 	str.w	r1, [r3], #4
    86be:	d1fa      	bne.n	86b6 <luaH_newkey+0x6e>
  unsigned int i = 1;  /* count to traverse all array keys */
    86c0:	2101      	movs	r1, #1
  t->alimit = luaH_realasize(t);
    86c2:	4628      	mov	r0, r5
    86c4:	f00d fa93 	bl	15bee <luaH_realasize>
  unsigned int ause = 0;  /* summation of 'nums' */
    86c8:	2400      	movs	r4, #0
  setrealasize(t);
    86ca:	46dc      	mov	ip, fp
  for (lg = 0, ttlg = 1; lg <= MAXABITS; lg++, ttlg *= 2) {
    86cc:	460f      	mov	r7, r1
  setrealasize(t);
    86ce:	79ab      	ldrb	r3, [r5, #6]
  t->alimit = luaH_realasize(t);
    86d0:	60a8      	str	r0, [r5, #8]
  setrealasize(t);
    86d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    86d6:	71ab      	strb	r3, [r5, #6]
    if (lim > asize) {
    86d8:	42b8      	cmp	r0, r7
    86da:	f080 80dc 	bcs.w	8896 <luaH_newkey+0x24e>
      if (i > lim)
    86de:	4288      	cmp	r0, r1
    86e0:	f0c0 8087 	bcc.w	87f2 <luaH_newkey+0x1aa>
    86e4:	4682      	mov	sl, r0
    86e6:	f04f 0e00 	mov.w	lr, #0
    86ea:	e075      	b.n	87d8 <luaH_newkey+0x190>
    else if (l_unlikely(luai_numisnan(f)))
    86ec:	4652      	mov	r2, sl
    86ee:	465b      	mov	r3, fp
    86f0:	4650      	mov	r0, sl
    86f2:	4659      	mov	r1, fp
    86f4:	f7f8 f920 	bl	938 <__aeabi_dcmpeq>
    86f8:	2800      	cmp	r0, #0
    86fa:	d1c6      	bne.n	868a <luaH_newkey+0x42>
      luaG_runerror(L, "table index is NaN");
    86fc:	4648      	mov	r0, r9
    86fe:	4986      	ldr	r1, [pc, #536]	; (8918 <luaH_newkey+0x2d0>)
    8700:	e7ad      	b.n	865e <luaH_newkey+0x16>
  if (!isdummy(t)) {
    8702:	2b00      	cmp	r3, #0
    8704:	d0d2      	beq.n	86ac <luaH_newkey+0x64>
    while (t->lastfree > t->node) {
    8706:	692b      	ldr	r3, [r5, #16]
    8708:	f8d5 a014 	ldr.w	sl, [r5, #20]
    870c:	459a      	cmp	sl, r3
    870e:	d9cd      	bls.n	86ac <luaH_newkey+0x64>
      if (keyisnil(t->lastfree))
    8710:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
      t->lastfree--;
    8714:	f1aa 0718 	sub.w	r7, sl, #24
    8718:	616f      	str	r7, [r5, #20]
      if (keyisnil(t->lastfree))
    871a:	2a00      	cmp	r2, #0
    871c:	d1f4      	bne.n	8708 <luaH_newkey+0xc0>
    if (f == NULL) {  /* cannot find a free place? */
    871e:	2f00      	cmp	r7, #0
    8720:	d0c4      	beq.n	86ac <luaH_newkey+0x64>
  getnodekey(cast(lua_State *, NULL), &key, nd);
    8722:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    8726:	e9cd 2306 	strd	r2, r3, [sp, #24]
    872a:	7a63      	ldrb	r3, [r4, #9]
  return mainpositionTV(t, &key);
    872c:	4628      	mov	r0, r5
    872e:	a906      	add	r1, sp, #24
  getnodekey(cast(lua_State *, NULL), &key, nd);
    8730:	f88d 3020 	strb.w	r3, [sp, #32]
  return mainpositionTV(t, &key);
    8734:	f7ff fd52 	bl	81dc <mainpositionTV>
    if (othern != mp) {  /* is colliding node out of its main position? */
    8738:	4284      	cmp	r4, r0
    873a:	f000 80d9 	beq.w	88f0 <luaH_newkey+0x2a8>
      while (othern + gnext(othern) != mp)  /* find previous */
    873e:	2118      	movs	r1, #24
    8740:	68c3      	ldr	r3, [r0, #12]
    8742:	4602      	mov	r2, r0
    8744:	fb01 0003 	mla	r0, r1, r3, r0
    8748:	42a0      	cmp	r0, r4
    874a:	d1f9      	bne.n	8740 <luaH_newkey+0xf8>
      *f = *mp;  /* copy colliding node into free pos. (mp->next also goes) */
    874c:	46a6      	mov	lr, r4
      gnext(othern) = cast_int(f - othern);  /* rechain to point to 'f' */
    874e:	1abb      	subs	r3, r7, r2
    8750:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 891c <luaH_newkey+0x2d4>
    8754:	10db      	asrs	r3, r3, #3
    8756:	fb0b f303 	mul.w	r3, fp, r3
      *f = *mp;  /* copy colliding node into free pos. (mp->next also goes) */
    875a:	f1aa 0c18 	sub.w	ip, sl, #24
      gnext(othern) = cast_int(f - othern);  /* rechain to point to 'f' */
    875e:	60d3      	str	r3, [r2, #12]
      *f = *mp;  /* copy colliding node into free pos. (mp->next also goes) */
    8760:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8764:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
      if (gnext(mp) != 0) {
    8768:	68e3      	ldr	r3, [r4, #12]
      *f = *mp;  /* copy colliding node into free pos. (mp->next also goes) */
    876a:	e89e 0003 	ldmia.w	lr, {r0, r1}
    876e:	e88c 0003 	stmia.w	ip, {r0, r1}
      if (gnext(mp) != 0) {
    8772:	b14b      	cbz	r3, 8788 <luaH_newkey+0x140>
        gnext(f) += cast_int(mp - f);  /* correct 'next' */
    8774:	f85a 3c0c 	ldr.w	r3, [sl, #-12]
    8778:	1be7      	subs	r7, r4, r7
    877a:	10ff      	asrs	r7, r7, #3
    877c:	fb0b 3307 	mla	r3, fp, r7, r3
    8780:	f84a 3c0c 	str.w	r3, [sl, #-12]
        gnext(mp) = 0;  /* now 'mp' is free */
    8784:	2300      	movs	r3, #0
    8786:	60e3      	str	r3, [r4, #12]
      setempty(gval(mp));
    8788:	2310      	movs	r3, #16
    878a:	7223      	strb	r3, [r4, #8]
  setnodekey(L, mp, key);
    878c:	e9d6 2300 	ldrd	r2, r3, [r6]
    8790:	e9c4 2304 	strd	r2, r3, [r4, #16]
    8794:	7a33      	ldrb	r3, [r6, #8]
  luaC_barrierback(L, obj2gco(t), key);
    8796:	065a      	lsls	r2, r3, #25
  setnodekey(L, mp, key);
    8798:	7263      	strb	r3, [r4, #9]
  luaC_barrierback(L, obj2gco(t), key);
    879a:	d50b      	bpl.n	87b4 <luaH_newkey+0x16c>
    879c:	796b      	ldrb	r3, [r5, #5]
    879e:	069b      	lsls	r3, r3, #26
    87a0:	d508      	bpl.n	87b4 <luaH_newkey+0x16c>
    87a2:	6833      	ldr	r3, [r6, #0]
    87a4:	795b      	ldrb	r3, [r3, #5]
    87a6:	f013 0f18 	tst.w	r3, #24
    87aa:	d003      	beq.n	87b4 <luaH_newkey+0x16c>
    87ac:	4629      	mov	r1, r5
    87ae:	4648      	mov	r0, r9
    87b0:	f00b fec9 	bl	14546 <luaC_barrierback_>
  setobj2t(L, gval(mp), value);
    87b4:	e9d8 2300 	ldrd	r2, r3, [r8]
    87b8:	e9c4 2300 	strd	r2, r3, [r4]
    87bc:	f898 3008 	ldrb.w	r3, [r8, #8]
    87c0:	7223      	strb	r3, [r4, #8]
    87c2:	e065      	b.n	8890 <luaH_newkey+0x248>
      if (!isempty(&t->array[i-1]))
    87c4:	68eb      	ldr	r3, [r5, #12]
    87c6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    87ca:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    for (; i <= lim; i++) {
    87ce:	3101      	adds	r1, #1
      if (!isempty(&t->array[i-1]))
    87d0:	071b      	lsls	r3, r3, #28
        lc++;
    87d2:	bf18      	it	ne
    87d4:	f10e 0e01 	addne.w	lr, lr, #1
    for (; i <= lim; i++) {
    87d8:	4551      	cmp	r1, sl
    87da:	d9f3      	bls.n	87c4 <luaH_newkey+0x17c>
    nums[lg] += lc;
    87dc:	f8dc 3000 	ldr.w	r3, [ip]
  for (lg = 0, ttlg = 1; lg <= MAXABITS; lg++, ttlg *= 2) {
    87e0:	3a01      	subs	r2, #1
    nums[lg] += lc;
    87e2:	4473      	add	r3, lr
    87e4:	f84c 3b04 	str.w	r3, [ip], #4
    ause += lc;
    87e8:	4474      	add	r4, lr
  for (lg = 0, ttlg = 1; lg <= MAXABITS; lg++, ttlg *= 2) {
    87ea:	ea4f 0747 	mov.w	r7, r7, lsl #1
    87ee:	f47f af73 	bne.w	86d8 <luaH_newkey+0x90>
  int i = sizenode(t);
    87f2:	f04f 0a01 	mov.w	sl, #1
  int ause = 0;  /* elements added to 'nums' (can go to array part) */
    87f6:	2700      	movs	r7, #0
  int i = sizenode(t);
    87f8:	79eb      	ldrb	r3, [r5, #7]
  if (l_castS2U(k) - 1u < MAXASIZE)  /* 'k' in [1, MAXASIZE]? */
    87fa:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
  int i = sizenode(t);
    87fe:	fa0a fa03 	lsl.w	sl, sl, r3
  int totaluse = 0;  /* total number of elements */
    8802:	463b      	mov	r3, r7
    8804:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
  while (i--) {
    8808:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
    880c:	d145      	bne.n	889a <luaH_newkey+0x252>
  if (ttisinteger(ek))
    880e:	7a32      	ldrb	r2, [r6, #8]
  *pna += ause;
    8810:	4427      	add	r7, r4
  if (ttisinteger(ek))
    8812:	2a03      	cmp	r2, #3
    8814:	f104 0401 	add.w	r4, r4, #1
    8818:	d117      	bne.n	884a <luaH_newkey+0x202>
    na += countint(ivalue(ek), nums);
    881a:	e9d6 0200 	ldrd	r0, r2, [r6]
  if (l_castS2U(k) - 1u < MAXASIZE)  /* 'k' in [1, MAXASIZE]? */
    881e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
    8822:	f110 3cff 	adds.w	ip, r0, #4294967295	; 0xffffffff
    8826:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
    882a:	458c      	cmp	ip, r1
    882c:	f172 0200 	sbcs.w	r2, r2, #0
    8830:	d25c      	bcs.n	88ec <luaH_newkey+0x2a4>
    8832:	9301      	str	r3, [sp, #4]
    nums[luaO_ceillog2(k)]++;  /* count as such */
    8834:	f7fd fe88 	bl	6548 <luaO_ceillog2>
    8838:	a906      	add	r1, sp, #24
    883a:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
    883e:	9b01      	ldr	r3, [sp, #4]
    8840:	3201      	adds	r2, #1
    8842:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
    8846:	2201      	movs	r2, #1
    na += countint(ivalue(ek), nums);
    8848:	4417      	add	r7, r2
  unsigned int optimal = 0;  /* optimal size for array part */
    884a:	2200      	movs	r2, #0
  totaluse++;
    884c:	4423      	add	r3, r4
  unsigned int na = 0;  /* number of elements to go to array part */
    884e:	4694      	mov	ip, r2
  for (i = 0, twotoi = 1;
    8850:	2101      	movs	r1, #1
  unsigned int a = 0;  /* number of elements smaller than 2^i */
    8852:	4610      	mov	r0, r2
  for (i = 0, twotoi = 1;
    8854:	4614      	mov	r4, r2
       twotoi > 0 && *pna > twotoi / 2;
    8856:	ebb7 0f51 	cmp.w	r7, r1, lsr #1
    885a:	ea4f 0e51 	mov.w	lr, r1, lsr #1
    885e:	d90b      	bls.n	8878 <luaH_newkey+0x230>
    a += nums[i];
    8860:	f85b ab04 	ldr.w	sl, [fp], #4
       i++, twotoi *= 2) {
    8864:	3401      	adds	r4, #1
    a += nums[i];
    8866:	4450      	add	r0, sl
    if (a > twotoi/2) {  /* more than half elements present? */
    8868:	4570      	cmp	r0, lr
    886a:	bf84      	itt	hi
    886c:	460a      	movhi	r2, r1
    886e:	4684      	movhi	ip, r0
  for (i = 0, twotoi = 1;
    8870:	2c20      	cmp	r4, #32
       i++, twotoi *= 2) {
    8872:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = 0, twotoi = 1;
    8876:	d1ee      	bne.n	8856 <luaH_newkey+0x20e>
  luaH_resize(L, t, asize, totaluse - na);
    8878:	4629      	mov	r1, r5
    887a:	4648      	mov	r0, r9
    887c:	eba3 030c 	sub.w	r3, r3, ip
    8880:	f7ff fe0c 	bl	849c <luaH_resize>
      luaH_set(L, t, key, value);  /* insert key into grown table */
    8884:	4643      	mov	r3, r8
    8886:	4632      	mov	r2, r6
    8888:	4629      	mov	r1, r5
    888a:	4648      	mov	r0, r9
    888c:	f00d fa29 	bl	15ce2 <luaH_set>
}
    8890:	b027      	add	sp, #156	; 0x9c
    8892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8896:	46ba      	mov	sl, r7
    8898:	e725      	b.n	86e6 <luaH_newkey+0x9e>
    Node *n = &t->node[i];
    889a:	2218      	movs	r2, #24
    889c:	6928      	ldr	r0, [r5, #16]
    889e:	fb02 0c0a 	mla	ip, r2, sl, r0
    if (!isempty(gval(n))) {
    88a2:	f89c 0008 	ldrb.w	r0, [ip, #8]
    88a6:	0700      	lsls	r0, r0, #28
    88a8:	d01b      	beq.n	88e2 <luaH_newkey+0x29a>
      if (keyisinteger(n))
    88aa:	f89c 0009 	ldrb.w	r0, [ip, #9]
    88ae:	2803      	cmp	r0, #3
    88b0:	d116      	bne.n	88e0 <luaH_newkey+0x298>
        ause += countint(keyival(n), nums);
    88b2:	e9dc 0204 	ldrd	r0, r2, [ip, #16]
  if (l_castS2U(k) - 1u < MAXASIZE)  /* 'k' in [1, MAXASIZE]? */
    88b6:	f110 3eff 	adds.w	lr, r0, #4294967295	; 0xffffffff
    88ba:	f142 3cff 	adc.w	ip, r2, #4294967295	; 0xffffffff
    88be:	458e      	cmp	lr, r1
    88c0:	f17c 0200 	sbcs.w	r2, ip, #0
    88c4:	d210      	bcs.n	88e8 <luaH_newkey+0x2a0>
    88c6:	9301      	str	r3, [sp, #4]
    nums[luaO_ceillog2(k)]++;  /* count as such */
    88c8:	f7fd fe3e 	bl	6548 <luaO_ceillog2>
    88cc:	f85b 2020 	ldr.w	r2, [fp, r0, lsl #2]
    88d0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
    88d4:	3201      	adds	r2, #1
    88d6:	f84b 2020 	str.w	r2, [fp, r0, lsl #2]
    88da:	2001      	movs	r0, #1
    88dc:	9b01      	ldr	r3, [sp, #4]
        ause += countint(keyival(n), nums);
    88de:	4407      	add	r7, r0
      totaluse++;
    88e0:	3301      	adds	r3, #1
    88e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    88e6:	e78f      	b.n	8808 <luaH_newkey+0x1c0>
    return 0;
    88e8:	2000      	movs	r0, #0
    88ea:	e7f8      	b.n	88de <luaH_newkey+0x296>
    88ec:	2200      	movs	r2, #0
    88ee:	e7ab      	b.n	8848 <luaH_newkey+0x200>
      if (gnext(mp) != 0)
    88f0:	68e3      	ldr	r3, [r4, #12]
    88f2:	b143      	cbz	r3, 8906 <luaH_newkey+0x2be>
        gnext(f) = cast_int((mp + gnext(mp)) - f);  /* chain new position */
    88f4:	2218      	movs	r2, #24
    88f6:	fb02 4303 	mla	r3, r2, r3, r4
    88fa:	4a08      	ldr	r2, [pc, #32]	; (891c <luaH_newkey+0x2d4>)
    88fc:	1bdb      	subs	r3, r3, r7
    88fe:	10db      	asrs	r3, r3, #3
    8900:	4353      	muls	r3, r2
    8902:	f84a 3c0c 	str.w	r3, [sl, #-12]
      gnext(mp) = cast_int(f - mp);
    8906:	1b3b      	subs	r3, r7, r4
    8908:	4a04      	ldr	r2, [pc, #16]	; (891c <luaH_newkey+0x2d4>)
    890a:	10db      	asrs	r3, r3, #3
    890c:	4353      	muls	r3, r2
    890e:	60e3      	str	r3, [r4, #12]
    8910:	463c      	mov	r4, r7
    8912:	e73b      	b.n	878c <luaH_newkey+0x144>
    8914:	000187a2 	.word	0x000187a2
    8918:	000187b5 	.word	0x000187b5
    891c:	aaaaaaab 	.word	0xaaaaaaab

00008920 <luaT_init>:
  "string", "table", "function", udatatypename, "thread",
  "upvalue", "proto" /* these last cases are used for tests only */
};


void luaT_init (lua_State *L) {
    8920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8922:	4604      	mov	r4, r0
    "__band", "__bor", "__bxor", "__shl", "__shr",
    "__unm", "__bnot", "__lt", "__le",
    "__concat", "__call", "__close"
  };
  int i;
  for (i=0; i<TM_N; i++) {
    8924:	2500      	movs	r5, #0
    8926:	4f0b      	ldr	r7, [pc, #44]	; (8954 <luaT_init+0x34>)
    G(L)->tmname[i] = luaS_new(L, luaT_eventname[i]);
    8928:	f857 1b04 	ldr.w	r1, [r7], #4
    892c:	4620      	mov	r0, r4
    892e:	6926      	ldr	r6, [r4, #16]
    8930:	f00d f90d 	bl	15b4e <luaS_new>
    8934:	f105 022a 	add.w	r2, r5, #42	; 0x2a
    luaC_fix(L, obj2gco(G(L)->tmname[i]));  /* never collect these names */
    8938:	6923      	ldr	r3, [r4, #16]
    G(L)->tmname[i] = luaS_new(L, luaT_eventname[i]);
    893a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
    893e:	6070      	str	r0, [r6, #4]
    luaC_fix(L, obj2gco(G(L)->tmname[i]));  /* never collect these names */
    8940:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8944:	4620      	mov	r0, r4
    8946:	6859      	ldr	r1, [r3, #4]
  for (i=0; i<TM_N; i++) {
    8948:	3501      	adds	r5, #1
    luaC_fix(L, obj2gco(G(L)->tmname[i]));  /* never collect these names */
    894a:	f00b fe17 	bl	1457c <luaC_fix>
  for (i=0; i<TM_N; i++) {
    894e:	2d19      	cmp	r5, #25
    8950:	d1ea      	bne.n	8928 <luaT_init+0x8>
  }
}
    8952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8954:	00017a54 	.word	0x00017a54

00008958 <luaT_objtypename>:

/*
** Return the name of the type of an object. For tables and userdata
** with metatable, use their '__name' metafield, if present.
*/
const char *luaT_objtypename (lua_State *L, const TValue *o) {
    8958:	b538      	push	{r3, r4, r5, lr}
  Table *mt;
  if ((ttistable(o) && (mt = hvalue(o)->metatable) != NULL) ||
    895a:	7a0b      	ldrb	r3, [r1, #8]
const char *luaT_objtypename (lua_State *L, const TValue *o) {
    895c:	460c      	mov	r4, r1
  if ((ttistable(o) && (mt = hvalue(o)->metatable) != NULL) ||
    895e:	2b45      	cmp	r3, #69	; 0x45
    8960:	d111      	bne.n	8986 <luaT_objtypename+0x2e>
    8962:	680b      	ldr	r3, [r1, #0]
    8964:	699d      	ldr	r5, [r3, #24]
      (ttisfulluserdata(o) && (mt = uvalue(o)->metatable) != NULL)) {
    8966:	b19d      	cbz	r5, 8990 <luaT_objtypename+0x38>
    const TValue *name = luaH_getshortstr(mt, luaS_new(L, "__name"));
    8968:	490d      	ldr	r1, [pc, #52]	; (89a0 <luaT_objtypename+0x48>)
    896a:	f00d f8f0 	bl	15b4e <luaS_new>
    896e:	4601      	mov	r1, r0
    8970:	4628      	mov	r0, r5
    8972:	f7ff fd45 	bl	8400 <luaH_getshortstr>
    if (ttisstring(name))  /* is '__name' a string? */
    8976:	7a03      	ldrb	r3, [r0, #8]
    8978:	f003 030f 	and.w	r3, r3, #15
    897c:	2b04      	cmp	r3, #4
    897e:	d107      	bne.n	8990 <luaT_objtypename+0x38>
      return getstr(tsvalue(name));  /* use it as type name */
    8980:	6800      	ldr	r0, [r0, #0]
    8982:	3010      	adds	r0, #16
  }
  return ttypename(ttype(o));  /* else use standard type name */
}
    8984:	bd38      	pop	{r3, r4, r5, pc}
  if ((ttistable(o) && (mt = hvalue(o)->metatable) != NULL) ||
    8986:	2b47      	cmp	r3, #71	; 0x47
    8988:	d102      	bne.n	8990 <luaT_objtypename+0x38>
      (ttisfulluserdata(o) && (mt = uvalue(o)->metatable) != NULL)) {
    898a:	680b      	ldr	r3, [r1, #0]
    898c:	68dd      	ldr	r5, [r3, #12]
    898e:	e7ea      	b.n	8966 <luaT_objtypename+0xe>
  return ttypename(ttype(o));  /* else use standard type name */
    8990:	7a23      	ldrb	r3, [r4, #8]
    8992:	4a04      	ldr	r2, [pc, #16]	; (89a4 <luaT_objtypename+0x4c>)
    8994:	f003 030f 	and.w	r3, r3, #15
    8998:	3301      	adds	r3, #1
    899a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    899e:	e7f1      	b.n	8984 <luaT_objtypename+0x2c>
    89a0:	000187c8 	.word	0x000187c8
    89a4:	00017ab8 	.word	0x00017ab8

000089a8 <luaT_trybinTM>:
  return 1;
}


void luaT_trybinTM (lua_State *L, const TValue *p1, const TValue *p2,
                    StkId res, TMS event) {
    89a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    89aa:	f89d 7020 	ldrb.w	r7, [sp, #32]
    89ae:	4606      	mov	r6, r0
  if (l_unlikely(!callbinTM(L, p1, p2, res, event))) {
    89b0:	9700      	str	r7, [sp, #0]
                    StkId res, TMS event) {
    89b2:	460c      	mov	r4, r1
    89b4:	4615      	mov	r5, r2
  if (l_unlikely(!callbinTM(L, p1, p2, res, event))) {
    89b6:	f00d fb14 	bl	15fe2 <callbinTM>
    89ba:	b9e0      	cbnz	r0, 89f6 <luaT_trybinTM+0x4e>
    switch (event) {
    89bc:	2f11      	cmp	r7, #17
    89be:	d810      	bhi.n	89e2 <luaT_trybinTM+0x3a>
    89c0:	2f0c      	cmp	r7, #12
    89c2:	d910      	bls.n	89e6 <luaT_trybinTM+0x3e>
      case TM_BAND: case TM_BOR: case TM_BXOR:
      case TM_SHL: case TM_SHR: case TM_BNOT: {
        if (ttisnumber(p1) && ttisnumber(p2))
    89c4:	7a23      	ldrb	r3, [r4, #8]
    89c6:	f003 030f 	and.w	r3, r3, #15
    89ca:	2b03      	cmp	r3, #3
    89cc:	d10d      	bne.n	89ea <luaT_trybinTM+0x42>
    89ce:	7a2b      	ldrb	r3, [r5, #8]
    89d0:	f003 030f 	and.w	r3, r3, #15
    89d4:	2b03      	cmp	r3, #3
    89d6:	d108      	bne.n	89ea <luaT_trybinTM+0x42>
          luaG_tointerror(L, p1, p2);
    89d8:	462a      	mov	r2, r5
    89da:	4621      	mov	r1, r4
    89dc:	4630      	mov	r0, r6
    89de:	f7fc fc3f 	bl	5260 <luaG_tointerror>
    switch (event) {
    89e2:	2f13      	cmp	r7, #19
    89e4:	d0ee      	beq.n	89c4 <luaT_trybinTM+0x1c>
        else
          luaG_opinterror(L, p1, p2, "perform bitwise operation on");
      }
      /* calls never return, but to avoid warnings: *//* FALLTHROUGH */
      default:
        luaG_opinterror(L, p1, p2, "perform arithmetic on");
    89e6:	4b05      	ldr	r3, [pc, #20]	; (89fc <luaT_trybinTM+0x54>)
    89e8:	e000      	b.n	89ec <luaT_trybinTM+0x44>
          luaG_opinterror(L, p1, p2, "perform bitwise operation on");
    89ea:	4b05      	ldr	r3, [pc, #20]	; (8a00 <luaT_trybinTM+0x58>)
        luaG_opinterror(L, p1, p2, "perform arithmetic on");
    89ec:	462a      	mov	r2, r5
    89ee:	4621      	mov	r1, r4
    89f0:	4630      	mov	r0, r6
    89f2:	f00a f9c0 	bl	12d76 <luaG_opinterror>
    }
  }
}
    89f6:	b003      	add	sp, #12
    89f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89fa:	bf00      	nop
    89fc:	000187ec 	.word	0x000187ec
    8a00:	000187cf 	.word	0x000187cf

00008a04 <error>:
static l_noret error (LoadState *S, const char *why) {
    8a04:	4604      	mov	r4, r0
    8a06:	b508      	push	{r3, lr}
  luaO_pushfstring(S->L, "%s: bad binary format (%s)", S->name, why);
    8a08:	6882      	ldr	r2, [r0, #8]
static l_noret error (LoadState *S, const char *why) {
    8a0a:	460b      	mov	r3, r1
  luaO_pushfstring(S->L, "%s: bad binary format (%s)", S->name, why);
    8a0c:	6800      	ldr	r0, [r0, #0]
    8a0e:	4903      	ldr	r1, [pc, #12]	; (8a1c <error+0x18>)
    8a10:	f00c fa71 	bl	14ef6 <luaO_pushfstring>
  luaD_throw(S->L, LUA_ERRSYNTAX);
    8a14:	2103      	movs	r1, #3
    8a16:	6820      	ldr	r0, [r4, #0]
    8a18:	f00a f9bb 	bl	12d92 <luaD_throw>
    8a1c:	000188ce 	.word	0x000188ce

00008a20 <loadBlock>:
static void loadBlock (LoadState *S, void *b, size_t size) {
    8a20:	b510      	push	{r4, lr}
    8a22:	4604      	mov	r4, r0
  if (luaZ_read(S->Z, b, size) != 0)
    8a24:	6840      	ldr	r0, [r0, #4]
    8a26:	f00d ff10 	bl	1684a <luaZ_read>
    8a2a:	b118      	cbz	r0, 8a34 <loadBlock+0x14>
    error(S, "truncated chunk");
    8a2c:	4620      	mov	r0, r4
    8a2e:	4902      	ldr	r1, [pc, #8]	; (8a38 <loadBlock+0x18>)
    8a30:	f7ff ffe8 	bl	8a04 <error>
}
    8a34:	bd10      	pop	{r4, pc}
    8a36:	bf00      	nop
    8a38:	000188e9 	.word	0x000188e9

00008a3c <loadByte>:
static lu_byte loadByte (LoadState *S) {
    8a3c:	b510      	push	{r4, lr}
    8a3e:	4604      	mov	r4, r0
  int b = zgetc(S->Z);
    8a40:	6840      	ldr	r0, [r0, #4]
    8a42:	6803      	ldr	r3, [r0, #0]
    8a44:	1e5a      	subs	r2, r3, #1
    8a46:	6002      	str	r2, [r0, #0]
    8a48:	b12b      	cbz	r3, 8a56 <loadByte+0x1a>
    8a4a:	6843      	ldr	r3, [r0, #4]
    8a4c:	1c5a      	adds	r2, r3, #1
    8a4e:	6042      	str	r2, [r0, #4]
    8a50:	7818      	ldrb	r0, [r3, #0]
}
    8a52:	b2c0      	uxtb	r0, r0
    8a54:	bd10      	pop	{r4, pc}
  int b = zgetc(S->Z);
    8a56:	f00d fedd 	bl	16814 <luaZ_fill>
  if (b == EOZ)
    8a5a:	1c43      	adds	r3, r0, #1
    8a5c:	d1f9      	bne.n	8a52 <loadByte+0x16>
    error(S, "truncated chunk");
    8a5e:	4620      	mov	r0, r4
    8a60:	4901      	ldr	r1, [pc, #4]	; (8a68 <loadByte+0x2c>)
    8a62:	f7ff ffcf 	bl	8a04 <error>
    8a66:	bf00      	nop
    8a68:	000188e9 	.word	0x000188e9

00008a6c <loadUnsigned>:
static size_t loadUnsigned (LoadState *S, size_t limit) {
    8a6c:	b570      	push	{r4, r5, r6, lr}
    8a6e:	4605      	mov	r5, r0
  size_t x = 0;
    8a70:	2400      	movs	r4, #0
  limit >>= 7;
    8a72:	09ce      	lsrs	r6, r1, #7
    b = loadByte(S);
    8a74:	4628      	mov	r0, r5
    8a76:	f7ff ffe1 	bl	8a3c <loadByte>
    if (x >= limit)
    8a7a:	42b4      	cmp	r4, r6
    8a7c:	d303      	bcc.n	8a86 <loadUnsigned+0x1a>
      error(S, "integer overflow");
    8a7e:	4628      	mov	r0, r5
    8a80:	4905      	ldr	r1, [pc, #20]	; (8a98 <loadUnsigned+0x2c>)
    8a82:	f7ff ffbf 	bl	8a04 <error>
    x = (x << 7) | (b & 0x7f);
    8a86:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    8a8a:	ea43 14c4 	orr.w	r4, r3, r4, lsl #7
  } while ((b & 0x80) == 0);
    8a8e:	0603      	lsls	r3, r0, #24
    8a90:	d5f0      	bpl.n	8a74 <loadUnsigned+0x8>
}
    8a92:	4620      	mov	r0, r4
    8a94:	bd70      	pop	{r4, r5, r6, pc}
    8a96:	bf00      	nop
    8a98:	000188f9 	.word	0x000188f9

00008a9c <loadFunction>:
static void loadFunction (LoadState *S, Proto *f, TString *psource) {
    8a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8aa0:	460d      	mov	r5, r1
    8aa2:	4616      	mov	r6, r2
    8aa4:	4604      	mov	r4, r0
  f->source = loadStringN(S, f);
    8aa6:	f00d fbd4 	bl	16252 <loadStringN>
    8aaa:	2800      	cmp	r0, #0
    8aac:	bf18      	it	ne
    8aae:	4606      	movne	r6, r0
  f->linedefined = loadInt(S);
    8ab0:	4620      	mov	r0, r4
  f->source = loadStringN(S, f);
    8ab2:	64ee      	str	r6, [r5, #76]	; 0x4c
  f->linedefined = loadInt(S);
    8ab4:	f00d fbc9 	bl	1624a <loadInt>
    8ab8:	62a8      	str	r0, [r5, #40]	; 0x28
  f->lastlinedefined = loadInt(S);
    8aba:	4620      	mov	r0, r4
    8abc:	f00d fbc5 	bl	1624a <loadInt>
    8ac0:	62e8      	str	r0, [r5, #44]	; 0x2c
  f->numparams = loadByte(S);
    8ac2:	4620      	mov	r0, r4
    8ac4:	f7ff ffba 	bl	8a3c <loadByte>
    8ac8:	71a8      	strb	r0, [r5, #6]
  f->is_vararg = loadByte(S);
    8aca:	4620      	mov	r0, r4
    8acc:	f7ff ffb6 	bl	8a3c <loadByte>
    8ad0:	71e8      	strb	r0, [r5, #7]
  f->maxstacksize = loadByte(S);
    8ad2:	4620      	mov	r0, r4
    8ad4:	f7ff ffb2 	bl	8a3c <loadByte>
    8ad8:	7228      	strb	r0, [r5, #8]
  int n = loadInt(S);
    8ada:	4620      	mov	r0, r4
    8adc:	f00d fbb5 	bl	1624a <loadInt>
  f->code = luaM_newvectorchecked(S->L, n, Instruction);
    8ae0:	1c43      	adds	r3, r0, #1
    8ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  int n = loadInt(S);
    8ae6:	4606      	mov	r6, r0
  f->code = luaM_newvectorchecked(S->L, n, Instruction);
    8ae8:	d302      	bcc.n	8af0 <loadFunction+0x54>
  f->locvars = luaM_newvectorchecked(S->L, n, LocVar);
    8aea:	6820      	ldr	r0, [r4, #0]
    8aec:	f7fd fcb0 	bl	6450 <luaM_toobig>
  f->code = luaM_newvectorchecked(S->L, n, Instruction);
    8af0:	0087      	lsls	r7, r0, #2
    8af2:	4639      	mov	r1, r7
    8af4:	2200      	movs	r2, #0
    8af6:	6820      	ldr	r0, [r4, #0]
    8af8:	f00c f820 	bl	14b3c <luaM_malloc_>
  loadVector(S, f->code, n);
    8afc:	463a      	mov	r2, r7
  f->code = luaM_newvectorchecked(S->L, n, Instruction);
    8afe:	4601      	mov	r1, r0
    8b00:	6368      	str	r0, [r5, #52]	; 0x34
  f->sizecode = n;
    8b02:	616e      	str	r6, [r5, #20]
  loadVector(S, f->code, n);
    8b04:	4620      	mov	r0, r4
    8b06:	f7ff ff8b 	bl	8a20 <loadBlock>
  int n = loadInt(S);
    8b0a:	4620      	mov	r0, r4
    8b0c:	f00d fb9d 	bl	1624a <loadInt>
  f->k = luaM_newvectorchecked(S->L, n, TValue);
    8b10:	1c43      	adds	r3, r0, #1
    8b12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  int n = loadInt(S);
    8b16:	4607      	mov	r7, r0
  f->k = luaM_newvectorchecked(S->L, n, TValue);
    8b18:	d2e7      	bcs.n	8aea <loadFunction+0x4e>
    8b1a:	2200      	movs	r2, #0
    8b1c:	0101      	lsls	r1, r0, #4
    8b1e:	6820      	ldr	r0, [r4, #0]
    8b20:	f00c f80c 	bl	14b3c <luaM_malloc_>
  for (i = 0; i < n; i++)
    8b24:	2300      	movs	r3, #0
    8b26:	461a      	mov	r2, r3
  f->k = luaM_newvectorchecked(S->L, n, TValue);
    8b28:	6328      	str	r0, [r5, #48]	; 0x30
  f->sizek = n;
    8b2a:	612f      	str	r7, [r5, #16]
    setnilvalue(&f->k[i]);
    8b2c:	3008      	adds	r0, #8
  for (i = 0; i < n; i++)
    8b2e:	429f      	cmp	r7, r3
    8b30:	f300 8081 	bgt.w	8c36 <loadFunction+0x19a>
  for (i = 0; i < n; i++) {
    8b34:	f04f 0800 	mov.w	r8, #0
        setivalue(o, loadInteger(S));
    8b38:	f04f 0a03 	mov.w	sl, #3
  for (i = 0; i < n; i++) {
    8b3c:	4547      	cmp	r7, r8
    8b3e:	dc7e      	bgt.n	8c3e <loadFunction+0x1a2>
  n = loadInt(S);
    8b40:	4620      	mov	r0, r4
    8b42:	f00d fb82 	bl	1624a <loadInt>
  f->upvalues = luaM_newvectorchecked(S->L, n, Upvaldesc);
    8b46:	1c43      	adds	r3, r0, #1
    8b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  n = loadInt(S);
    8b4c:	4606      	mov	r6, r0
  f->upvalues = luaM_newvectorchecked(S->L, n, Upvaldesc);
    8b4e:	d2cc      	bcs.n	8aea <loadFunction+0x4e>
    8b50:	2200      	movs	r2, #0
    8b52:	00c1      	lsls	r1, r0, #3
    8b54:	6820      	ldr	r0, [r4, #0]
    8b56:	f00b fff1 	bl	14b3c <luaM_malloc_>
  for (i = 0; i < n; i++)  /* make array valid for GC */
    8b5a:	2300      	movs	r3, #0
    8b5c:	461a      	mov	r2, r3
  f->upvalues = luaM_newvectorchecked(S->L, n, Upvaldesc);
    8b5e:	63e8      	str	r0, [r5, #60]	; 0x3c
  f->sizeupvalues = n;
    8b60:	60ee      	str	r6, [r5, #12]
  for (i = 0; i < n; i++)  /* make array valid for GC */
    8b62:	429e      	cmp	r6, r3
    8b64:	f300 80b2 	bgt.w	8ccc <loadFunction+0x230>
  for (i = 0; i < n; i++) {  /* following calls can raise errors */
    8b68:	2700      	movs	r7, #0
    8b6a:	42be      	cmp	r6, r7
    8b6c:	f300 80b2 	bgt.w	8cd4 <loadFunction+0x238>
  int n = loadInt(S);
    8b70:	4620      	mov	r0, r4
    8b72:	f00d fb6a 	bl	1624a <loadInt>
  f->p = luaM_newvectorchecked(S->L, n, Proto *);
    8b76:	1c43      	adds	r3, r0, #1
    8b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  int n = loadInt(S);
    8b7c:	4606      	mov	r6, r0
  f->p = luaM_newvectorchecked(S->L, n, Proto *);
    8b7e:	d2b4      	bcs.n	8aea <loadFunction+0x4e>
    8b80:	2200      	movs	r2, #0
    8b82:	0081      	lsls	r1, r0, #2
    8b84:	6820      	ldr	r0, [r4, #0]
    8b86:	f00b ffd9 	bl	14b3c <luaM_malloc_>
  for (i = 0; i < n; i++)
    8b8a:	2300      	movs	r3, #0
    8b8c:	461a      	mov	r2, r3
  f->p = luaM_newvectorchecked(S->L, n, Proto *);
    8b8e:	63a8      	str	r0, [r5, #56]	; 0x38
  f->sizep = n;
    8b90:	61ee      	str	r6, [r5, #28]
  for (i = 0; i < n; i++)
    8b92:	429e      	cmp	r6, r3
    8b94:	f300 80b9 	bgt.w	8d0a <loadFunction+0x26e>
  for (i = 0; i < n; i++) {
    8b98:	2700      	movs	r7, #0
    8b9a:	42be      	cmp	r6, r7
    8b9c:	f300 80b9 	bgt.w	8d12 <loadFunction+0x276>
  n = loadInt(S);
    8ba0:	4620      	mov	r0, r4
    8ba2:	f00d fb52 	bl	1624a <loadInt>
  f->lineinfo = luaM_newvectorchecked(S->L, n, ls_byte);
    8ba6:	2200      	movs	r2, #0
  n = loadInt(S);
    8ba8:	4606      	mov	r6, r0
  f->lineinfo = luaM_newvectorchecked(S->L, n, ls_byte);
    8baa:	4601      	mov	r1, r0
    8bac:	6820      	ldr	r0, [r4, #0]
    8bae:	f00b ffc5 	bl	14b3c <luaM_malloc_>
  loadVector(S, f->lineinfo, n);
    8bb2:	4632      	mov	r2, r6
  f->lineinfo = luaM_newvectorchecked(S->L, n, ls_byte);
    8bb4:	4601      	mov	r1, r0
    8bb6:	6428      	str	r0, [r5, #64]	; 0x40
  f->sizelineinfo = n;
    8bb8:	61ae      	str	r6, [r5, #24]
  loadVector(S, f->lineinfo, n);
    8bba:	4620      	mov	r0, r4
    8bbc:	f7ff ff30 	bl	8a20 <loadBlock>
  n = loadInt(S);
    8bc0:	4620      	mov	r0, r4
    8bc2:	f00d fb42 	bl	1624a <loadInt>
  f->abslineinfo = luaM_newvectorchecked(S->L, n, AbsLineInfo);
    8bc6:	1c43      	adds	r3, r0, #1
    8bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  n = loadInt(S);
    8bcc:	4606      	mov	r6, r0
  f->abslineinfo = luaM_newvectorchecked(S->L, n, AbsLineInfo);
    8bce:	d28c      	bcs.n	8aea <loadFunction+0x4e>
    8bd0:	00c1      	lsls	r1, r0, #3
    8bd2:	2200      	movs	r2, #0
    8bd4:	6820      	ldr	r0, [r4, #0]
    8bd6:	f00b ffb1 	bl	14b3c <luaM_malloc_>
  for (i = 0; i < n; i++) {
    8bda:	2700      	movs	r7, #0
  f->abslineinfo = luaM_newvectorchecked(S->L, n, AbsLineInfo);
    8bdc:	6468      	str	r0, [r5, #68]	; 0x44
  f->sizeabslineinfo = n;
    8bde:	626e      	str	r6, [r5, #36]	; 0x24
  for (i = 0; i < n; i++) {
    8be0:	42be      	cmp	r6, r7
    8be2:	f300 80b6 	bgt.w	8d52 <loadFunction+0x2b6>
  n = loadInt(S);
    8be6:	4620      	mov	r0, r4
    8be8:	f00d fb2f 	bl	1624a <loadInt>
  f->locvars = luaM_newvectorchecked(S->L, n, LocVar);
    8bec:	4b77      	ldr	r3, [pc, #476]	; (8dcc <loadFunction+0x330>)
    8bee:	1c42      	adds	r2, r0, #1
    8bf0:	429a      	cmp	r2, r3
  n = loadInt(S);
    8bf2:	4606      	mov	r6, r0
  f->locvars = luaM_newvectorchecked(S->L, n, LocVar);
    8bf4:	f63f af79 	bhi.w	8aea <loadFunction+0x4e>
    8bf8:	270c      	movs	r7, #12
    8bfa:	2200      	movs	r2, #0
    8bfc:	fb07 f100 	mul.w	r1, r7, r0
    8c00:	6820      	ldr	r0, [r4, #0]
    8c02:	f00b ff9b 	bl	14b3c <luaM_malloc_>
  for (i = 0; i < n; i++)
    8c06:	2300      	movs	r3, #0
    8c08:	461a      	mov	r2, r3
  f->locvars = luaM_newvectorchecked(S->L, n, LocVar);
    8c0a:	64a8      	str	r0, [r5, #72]	; 0x48
  f->sizelocvars = n;
    8c0c:	622e      	str	r6, [r5, #32]
  for (i = 0; i < n; i++)
    8c0e:	429e      	cmp	r6, r3
    8c10:	f300 80b1 	bgt.w	8d76 <loadFunction+0x2da>
  for (i = 0; i < n; i++) {
    8c14:	2700      	movs	r7, #0
    8c16:	f04f 0a0c 	mov.w	sl, #12
    8c1a:	42be      	cmp	r6, r7
    8c1c:	f300 80b0 	bgt.w	8d80 <loadFunction+0x2e4>
  n = loadInt(S);
    8c20:	4620      	mov	r0, r4
    8c22:	f00d fb12 	bl	1624a <loadInt>
  for (i = 0; i < n; i++)
    8c26:	2600      	movs	r6, #0
  n = loadInt(S);
    8c28:	4607      	mov	r7, r0
  for (i = 0; i < n; i++)
    8c2a:	42b7      	cmp	r7, r6
    8c2c:	f300 80c3 	bgt.w	8db6 <loadFunction+0x31a>
}
    8c30:	b003      	add	sp, #12
    8c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    setnilvalue(&f->k[i]);
    8c36:	0119      	lsls	r1, r3, #4
    8c38:	5442      	strb	r2, [r0, r1]
  for (i = 0; i < n; i++)
    8c3a:	3301      	adds	r3, #1
    8c3c:	e777      	b.n	8b2e <loadFunction+0x92>
    TValue *o = &f->k[i];
    8c3e:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
    int t = loadByte(S);
    8c42:	4620      	mov	r0, r4
    TValue *o = &f->k[i];
    8c44:	ea4f 1b08 	mov.w	fp, r8, lsl #4
    8c48:	eb09 1608 	add.w	r6, r9, r8, lsl #4
    int t = loadByte(S);
    8c4c:	f7ff fef6 	bl	8a3c <loadByte>
    switch (t) {
    8c50:	2814      	cmp	r0, #20
    8c52:	d829      	bhi.n	8ca8 <loadFunction+0x20c>
    8c54:	e8df f000 	tbb	[pc, r0]
    8c58:	1d280e0b 	.word	0x1d280e0b
    8c5c:	2828282b 	.word	0x2828282b
    8c60:	28282828 	.word	0x28282828
    8c64:	28282828 	.word	0x28282828
    8c68:	12281028 	.word	0x12281028
    8c6c:	2b          	.byte	0x2b
    8c6d:	00          	.byte	0x00
        setnilvalue(o);
    8c6e:	2300      	movs	r3, #0
        setsvalue2n(S->L, o, loadString(S, f));
    8c70:	7233      	strb	r3, [r6, #8]
        break;
    8c72:	e019      	b.n	8ca8 <loadFunction+0x20c>
        setbfvalue(o);
    8c74:	2301      	movs	r3, #1
    8c76:	e7fb      	b.n	8c70 <loadFunction+0x1d4>
        setbtvalue(o);
    8c78:	2311      	movs	r3, #17
    8c7a:	e7f9      	b.n	8c70 <loadFunction+0x1d4>
  loadVar(S, x);
    8c7c:	2208      	movs	r2, #8
    8c7e:	4669      	mov	r1, sp
    8c80:	4620      	mov	r0, r4
    8c82:	f7ff fecd 	bl	8a20 <loadBlock>
  return x;
    8c86:	e9dd 2300 	ldrd	r2, r3, [sp]
        setfltvalue(o, loadNumber(S));
    8c8a:	e9c6 2300 	strd	r2, r3, [r6]
    8c8e:	2313      	movs	r3, #19
    8c90:	e7ee      	b.n	8c70 <loadFunction+0x1d4>
  loadVar(S, x);
    8c92:	2208      	movs	r2, #8
    8c94:	4669      	mov	r1, sp
    8c96:	4620      	mov	r0, r4
    8c98:	f7ff fec2 	bl	8a20 <loadBlock>
  return x;
    8c9c:	e9dd 2300 	ldrd	r2, r3, [sp]
        setivalue(o, loadInteger(S));
    8ca0:	e9c6 2300 	strd	r2, r3, [r6]
    8ca4:	f886 a008 	strb.w	sl, [r6, #8]
  for (i = 0; i < n; i++) {
    8ca8:	f108 0801 	add.w	r8, r8, #1
    8cac:	e746      	b.n	8b3c <loadFunction+0xa0>
  TString *st = loadStringN(S, p);
    8cae:	4629      	mov	r1, r5
    8cb0:	4620      	mov	r0, r4
    8cb2:	f00d face 	bl	16252 <loadStringN>
  if (st == NULL)
    8cb6:	b918      	cbnz	r0, 8cc0 <loadFunction+0x224>
    error(S, "bad format for constant string");
    8cb8:	4620      	mov	r0, r4
    8cba:	4945      	ldr	r1, [pc, #276]	; (8dd0 <loadFunction+0x334>)
    8cbc:	f7ff fea2 	bl	8a04 <error>
        setsvalue2n(S->L, o, loadString(S, f));
    8cc0:	f849 000b 	str.w	r0, [r9, fp]
    8cc4:	7903      	ldrb	r3, [r0, #4]
    8cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8cca:	e7d1      	b.n	8c70 <loadFunction+0x1d4>
    f->upvalues[i].name = NULL;
    8ccc:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
  for (i = 0; i < n; i++)  /* make array valid for GC */
    8cd0:	3301      	adds	r3, #1
    8cd2:	e746      	b.n	8b62 <loadFunction+0xc6>
    f->upvalues[i].instack = loadByte(S);
    8cd4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    8cd6:	4620      	mov	r0, r4
    8cd8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
    8cdc:	f7ff feae 	bl	8a3c <loadByte>
    8ce0:	f889 0004 	strb.w	r0, [r9, #4]
    f->upvalues[i].idx = loadByte(S);
    8ce4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    8ce6:	ea4f 08c7 	mov.w	r8, r7, lsl #3
    8cea:	4620      	mov	r0, r4
    8cec:	eb03 0908 	add.w	r9, r3, r8
    8cf0:	f7ff fea4 	bl	8a3c <loadByte>
    8cf4:	f889 0005 	strb.w	r0, [r9, #5]
    f->upvalues[i].kind = loadByte(S);
    8cf8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    8cfa:	4620      	mov	r0, r4
    8cfc:	4498      	add	r8, r3
    8cfe:	f7ff fe9d 	bl	8a3c <loadByte>
  for (i = 0; i < n; i++) {  /* following calls can raise errors */
    8d02:	3701      	adds	r7, #1
    f->upvalues[i].kind = loadByte(S);
    8d04:	f888 0006 	strb.w	r0, [r8, #6]
  for (i = 0; i < n; i++) {  /* following calls can raise errors */
    8d08:	e72f      	b.n	8b6a <loadFunction+0xce>
    f->p[i] = NULL;
    8d0a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0; i < n; i++)
    8d0e:	3301      	adds	r3, #1
    8d10:	e73f      	b.n	8b92 <loadFunction+0xf6>
    f->p[i] = luaF_newproto(S->L);
    8d12:	6820      	ldr	r0, [r4, #0]
    8d14:	f8d5 9038 	ldr.w	r9, [r5, #56]	; 0x38
    8d18:	f00a fca5 	bl	13666 <luaF_newproto>
    8d1c:	f849 0027 	str.w	r0, [r9, r7, lsl #2]
    luaC_objbarrier(S->L, f, f->p[i]);
    8d20:	796b      	ldrb	r3, [r5, #5]
    8d22:	ea4f 0887 	mov.w	r8, r7, lsl #2
    8d26:	069b      	lsls	r3, r3, #26
    8d28:	d50a      	bpl.n	8d40 <loadFunction+0x2a4>
    8d2a:	6bab      	ldr	r3, [r5, #56]	; 0x38
    8d2c:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    8d30:	7953      	ldrb	r3, [r2, #5]
    8d32:	f013 0f18 	tst.w	r3, #24
    8d36:	d003      	beq.n	8d40 <loadFunction+0x2a4>
    8d38:	4629      	mov	r1, r5
    8d3a:	6820      	ldr	r0, [r4, #0]
    8d3c:	f00b fbdf 	bl	144fe <luaC_barrier_>
    loadFunction(S, f->p[i], f->source);
    8d40:	6bab      	ldr	r3, [r5, #56]	; 0x38
    8d42:	4620      	mov	r0, r4
    8d44:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    8d46:	f853 1008 	ldr.w	r1, [r3, r8]
    8d4a:	f7ff fea7 	bl	8a9c <loadFunction>
  for (i = 0; i < n; i++) {
    8d4e:	3701      	adds	r7, #1
    8d50:	e723      	b.n	8b9a <loadFunction+0xfe>
    f->abslineinfo[i].pc = loadInt(S);
    8d52:	4620      	mov	r0, r4
    8d54:	f8d5 9044 	ldr.w	r9, [r5, #68]	; 0x44
    8d58:	f00d fa77 	bl	1624a <loadInt>
    f->abslineinfo[i].line = loadInt(S);
    8d5c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    f->abslineinfo[i].pc = loadInt(S);
    8d5e:	f849 0037 	str.w	r0, [r9, r7, lsl #3]
    f->abslineinfo[i].line = loadInt(S);
    8d62:	ea4f 08c7 	mov.w	r8, r7, lsl #3
    8d66:	4620      	mov	r0, r4
    8d68:	4498      	add	r8, r3
    8d6a:	f00d fa6e 	bl	1624a <loadInt>
  for (i = 0; i < n; i++) {
    8d6e:	3701      	adds	r7, #1
    f->abslineinfo[i].line = loadInt(S);
    8d70:	f8c8 0004 	str.w	r0, [r8, #4]
  for (i = 0; i < n; i++) {
    8d74:	e734      	b.n	8be0 <loadFunction+0x144>
    f->locvars[i].varname = NULL;
    8d76:	fb07 f103 	mul.w	r1, r7, r3
  for (i = 0; i < n; i++)
    8d7a:	3301      	adds	r3, #1
    f->locvars[i].varname = NULL;
    8d7c:	5042      	str	r2, [r0, r1]
  for (i = 0; i < n; i++)
    8d7e:	e746      	b.n	8c0e <loadFunction+0x172>
    f->locvars[i].varname = loadStringN(S, f);
    8d80:	4629      	mov	r1, r5
    8d82:	4620      	mov	r0, r4
    8d84:	f8d5 9048 	ldr.w	r9, [r5, #72]	; 0x48
    8d88:	f00d fa63 	bl	16252 <loadStringN>
    8d8c:	fb0a f807 	mul.w	r8, sl, r7
    f->locvars[i].startpc = loadInt(S);
    8d90:	6cab      	ldr	r3, [r5, #72]	; 0x48
    f->locvars[i].varname = loadStringN(S, f);
    8d92:	f849 0008 	str.w	r0, [r9, r8]
    f->locvars[i].startpc = loadInt(S);
    8d96:	4620      	mov	r0, r4
    8d98:	eb03 0908 	add.w	r9, r3, r8
    8d9c:	f00d fa55 	bl	1624a <loadInt>
    f->locvars[i].endpc = loadInt(S);
    8da0:	6cab      	ldr	r3, [r5, #72]	; 0x48
    f->locvars[i].startpc = loadInt(S);
    8da2:	f8c9 0004 	str.w	r0, [r9, #4]
    f->locvars[i].endpc = loadInt(S);
    8da6:	4620      	mov	r0, r4
    8da8:	4498      	add	r8, r3
    8daa:	f00d fa4e 	bl	1624a <loadInt>
  for (i = 0; i < n; i++) {
    8dae:	3701      	adds	r7, #1
    f->locvars[i].endpc = loadInt(S);
    8db0:	f8c8 0008 	str.w	r0, [r8, #8]
  for (i = 0; i < n; i++) {
    8db4:	e731      	b.n	8c1a <loadFunction+0x17e>
    f->upvalues[i].name = loadStringN(S, f);
    8db6:	4629      	mov	r1, r5
    8db8:	4620      	mov	r0, r4
    8dba:	f8d5 803c 	ldr.w	r8, [r5, #60]	; 0x3c
    8dbe:	f00d fa48 	bl	16252 <loadStringN>
    8dc2:	f848 0036 	str.w	r0, [r8, r6, lsl #3]
  for (i = 0; i < n; i++)
    8dc6:	3601      	adds	r6, #1
    8dc8:	e72f      	b.n	8c2a <loadFunction+0x18e>
    8dca:	bf00      	nop
    8dcc:	15555555 	.word	0x15555555
    8dd0:	0001890a 	.word	0x0001890a

00008dd4 <fchecksize>:
static void fchecksize (LoadState *S, size_t size, const char *tname) {
    8dd4:	b570      	push	{r4, r5, r6, lr}
    8dd6:	460e      	mov	r6, r1
    8dd8:	4604      	mov	r4, r0
    8dda:	4615      	mov	r5, r2
  if (loadByte(S) != size)
    8ddc:	f7ff fe2e 	bl	8a3c <loadByte>
    8de0:	42b0      	cmp	r0, r6
    8de2:	d008      	beq.n	8df6 <fchecksize+0x22>
    error(S, luaO_pushfstring(S->L, "%s size mismatch", tname));
    8de4:	4904      	ldr	r1, [pc, #16]	; (8df8 <fchecksize+0x24>)
    8de6:	462a      	mov	r2, r5
    8de8:	6820      	ldr	r0, [r4, #0]
    8dea:	f00c f884 	bl	14ef6 <luaO_pushfstring>
    8dee:	4601      	mov	r1, r0
    8df0:	4620      	mov	r0, r4
    8df2:	f7ff fe07 	bl	8a04 <error>
}
    8df6:	bd70      	pop	{r4, r5, r6, pc}
    8df8:	00018929 	.word	0x00018929

00008dfc <luaV_flttointeger>:


/*
** try to convert a float to an integer, rounding according to 'mode'.
*/
int luaV_flttointeger (lua_Number n, lua_Integer *p, F2Imod mode) {
    8dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8e00:	4680      	mov	r8, r0
    8e02:	4689      	mov	r9, r1
    8e04:	4615      	mov	r5, r2
    8e06:	461c      	mov	r4, r3
  lua_Number f = l_floor(n);
    8e08:	f7f8 f8d6 	bl	fb8 <floor>
    8e0c:	4606      	mov	r6, r0
    8e0e:	460f      	mov	r7, r1
  if (n != f) {  /* not an integral value? */
    8e10:	4602      	mov	r2, r0
    8e12:	460b      	mov	r3, r1
    8e14:	4640      	mov	r0, r8
    8e16:	4649      	mov	r1, r9
    8e18:	f7f7 fd8e 	bl	938 <__aeabi_dcmpeq>
    8e1c:	b950      	cbnz	r0, 8e34 <luaV_flttointeger+0x38>
    if (mode == F2Ieq) return 0;  /* fails if mode demands integral value */
    8e1e:	b304      	cbz	r4, 8e62 <luaV_flttointeger+0x66>
    else if (mode == F2Iceil)  /* needs ceil? */
    8e20:	2c02      	cmp	r4, #2
    8e22:	d107      	bne.n	8e34 <luaV_flttointeger+0x38>
      f += 1;  /* convert floor to ceil (remember: n != f) */
    8e24:	4630      	mov	r0, r6
    8e26:	4639      	mov	r1, r7
    8e28:	2200      	movs	r2, #0
    8e2a:	4b0f      	ldr	r3, [pc, #60]	; (8e68 <luaV_flttointeger+0x6c>)
    8e2c:	f7f7 f966 	bl	fc <__adddf3>
    8e30:	4606      	mov	r6, r0
    8e32:	460f      	mov	r7, r1
  }
  return lua_numbertointeger(f, p);
    8e34:	2200      	movs	r2, #0
    8e36:	4630      	mov	r0, r6
    8e38:	4639      	mov	r1, r7
    8e3a:	4b0c      	ldr	r3, [pc, #48]	; (8e6c <luaV_flttointeger+0x70>)
    8e3c:	f7f7 fd9a 	bl	974 <__aeabi_dcmpge>
    8e40:	b168      	cbz	r0, 8e5e <luaV_flttointeger+0x62>
    8e42:	2200      	movs	r2, #0
    8e44:	4630      	mov	r0, r6
    8e46:	4639      	mov	r1, r7
    8e48:	4b09      	ldr	r3, [pc, #36]	; (8e70 <luaV_flttointeger+0x74>)
    8e4a:	f7f7 fd7f 	bl	94c <__aeabi_dcmplt>
    8e4e:	b130      	cbz	r0, 8e5e <luaV_flttointeger+0x62>
    8e50:	4630      	mov	r0, r6
    8e52:	4639      	mov	r1, r7
    8e54:	f7f7 fe96 	bl	b84 <__aeabi_d2lz>
    8e58:	e9c5 0100 	strd	r0, r1, [r5]
    8e5c:	2001      	movs	r0, #1
}
    8e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (mode == F2Ieq) return 0;  /* fails if mode demands integral value */
    8e62:	4620      	mov	r0, r4
    8e64:	e7fb      	b.n	8e5e <luaV_flttointeger+0x62>
    8e66:	bf00      	nop
    8e68:	3ff00000 	.word	0x3ff00000
    8e6c:	c3e00000 	.word	0xc3e00000
    8e70:	43e00000 	.word	0x43e00000

00008e74 <luaV_finishget>:
** Finish the table access 'val = t[key]'.
** if 'slot' is NULL, 't' is not a table; otherwise, 'slot' points to
** t[k] entry (which must be empty).
*/
void luaV_finishget (lua_State *L, const TValue *t, TValue *key, StkId val,
                      const TValue *slot) {
    8e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e78:	4605      	mov	r5, r0
    8e7a:	460e      	mov	r6, r1
    8e7c:	461f      	mov	r7, r3
    8e7e:	f44f 69fa 	mov.w	r9, #2000	; 0x7d0
    8e82:	4690      	mov	r8, r2
    8e84:	9a08      	ldr	r2, [sp, #32]
  int loop;  /* counter to avoid infinite loops */
  const TValue *tm;  /* metamethod */
  for (loop = 0; loop < MAXTAGLOOP; loop++) {
    if (slot == NULL) {  /* 't' is not a table? */
    8e86:	b972      	cbnz	r2, 8ea6 <luaV_finishget+0x32>
      lua_assert(!ttistable(t));
      tm = luaT_gettmbyobj(L, t, TM_INDEX);
    8e88:	4631      	mov	r1, r6
    8e8a:	4628      	mov	r0, r5
    8e8c:	f00d f820 	bl	15ed0 <luaT_gettmbyobj>
      if (l_unlikely(notm(tm)))
    8e90:	7a03      	ldrb	r3, [r0, #8]
      tm = luaT_gettmbyobj(L, t, TM_INDEX);
    8e92:	4604      	mov	r4, r0
      if (l_unlikely(notm(tm)))
    8e94:	0718      	lsls	r0, r3, #28
    8e96:	d119      	bne.n	8ecc <luaV_finishget+0x58>
        luaG_typeerror(L, t, "index");  /* no metamethod */
    8e98:	4631      	mov	r1, r6
    8e9a:	4628      	mov	r0, r5
    8e9c:	4a1d      	ldr	r2, [pc, #116]	; (8f14 <luaV_finishget+0xa0>)
    8e9e:	f7fc f9af 	bl	5200 <luaG_typeerror>
    8ea2:	4626      	mov	r6, r4
    8ea4:	e7ef      	b.n	8e86 <luaV_finishget+0x12>
      /* else will try the metamethod */
    }
    else {  /* 't' is a table */
      lua_assert(isempty(slot));
      tm = fasttm(L, hvalue(t)->metatable, TM_INDEX);  /* table's metamethod */
    8ea6:	6833      	ldr	r3, [r6, #0]
    8ea8:	6998      	ldr	r0, [r3, #24]
    8eaa:	b918      	cbnz	r0, 8eb4 <luaV_finishget+0x40>
      if (tm == NULL) {  /* no metamethod? */
        setnilvalue(s2v(val));  /* result is nil */
    8eac:	2300      	movs	r3, #0
      luaT_callTMres(L, tm, t, key, val);  /* call it */
      return;
    }
    t = tm;  /* else try to access 'tm[key]' */
    if (luaV_fastget(L, t, key, slot, luaH_get)) {  /* fast track? */
      setobj2s(L, val, slot);  /* done */
    8eae:	723b      	strb	r3, [r7, #8]
      return;
    }
    /* else repeat (tail call 'luaV_finishget') */
  }
  luaG_runerror(L, "'__index' chain too long; possible loop");
}
    8eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      tm = fasttm(L, hvalue(t)->metatable, TM_INDEX);  /* table's metamethod */
    8eb4:	7981      	ldrb	r1, [r0, #6]
    8eb6:	f011 0101 	ands.w	r1, r1, #1
    8eba:	d1f7      	bne.n	8eac <luaV_finishget+0x38>
    8ebc:	692b      	ldr	r3, [r5, #16]
    8ebe:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    8ec2:	f00c fff4 	bl	15eae <luaT_gettm>
      if (tm == NULL) {  /* no metamethod? */
    8ec6:	4604      	mov	r4, r0
    8ec8:	2800      	cmp	r0, #0
    8eca:	d0ef      	beq.n	8eac <luaV_finishget+0x38>
    if (ttisfunction(tm)) {  /* is metamethod a function? */
    8ecc:	7a23      	ldrb	r3, [r4, #8]
    8ece:	f003 020f 	and.w	r2, r3, #15
    8ed2:	2a06      	cmp	r2, #6
    8ed4:	d108      	bne.n	8ee8 <luaV_finishget+0x74>
      luaT_callTMres(L, tm, t, key, val);  /* call it */
    8ed6:	4643      	mov	r3, r8
    8ed8:	4632      	mov	r2, r6
    8eda:	4621      	mov	r1, r4
    8edc:	4628      	mov	r0, r5
    8ede:	9708      	str	r7, [sp, #32]
}
    8ee0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      luaT_callTMres(L, tm, t, key, val);  /* call it */
    8ee4:	f00d b844 	b.w	15f70 <luaT_callTMres>
    if (luaV_fastget(L, t, key, slot, luaH_get)) {  /* fast track? */
    8ee8:	2b45      	cmp	r3, #69	; 0x45
    8eea:	d10b      	bne.n	8f04 <luaV_finishget+0x90>
    8eec:	4641      	mov	r1, r8
    8eee:	6820      	ldr	r0, [r4, #0]
    8ef0:	f7ff fa9e 	bl	8430 <luaH_get>
    8ef4:	7a03      	ldrb	r3, [r0, #8]
    8ef6:	4602      	mov	r2, r0
    8ef8:	0719      	lsls	r1, r3, #28
    8efa:	d004      	beq.n	8f06 <luaV_finishget+0x92>
      setobj2s(L, val, slot);  /* done */
    8efc:	c803      	ldmia	r0, {r0, r1}
    8efe:	e9c7 0100 	strd	r0, r1, [r7]
    8f02:	e7d4      	b.n	8eae <luaV_finishget+0x3a>
    if (luaV_fastget(L, t, key, slot, luaH_get)) {  /* fast track? */
    8f04:	2200      	movs	r2, #0
  for (loop = 0; loop < MAXTAGLOOP; loop++) {
    8f06:	f1b9 0901 	subs.w	r9, r9, #1
    8f0a:	d1ca      	bne.n	8ea2 <luaV_finishget+0x2e>
  luaG_runerror(L, "'__index' chain too long; possible loop");
    8f0c:	4628      	mov	r0, r5
    8f0e:	4902      	ldr	r1, [pc, #8]	; (8f18 <luaV_finishget+0xa4>)
    8f10:	f009 ff0e 	bl	12d30 <luaG_runerror>
    8f14:	00017f56 	.word	0x00017f56
    8f18:	000189d9 	.word	0x000189d9

00008f1c <luaV_finishset>:
** to the entry 't[key]', or to a value with an absent key if there
** is no such entry.  (The value at 'slot' must be empty, otherwise
** 'luaV_fastget' would have done the job.)
*/
void luaV_finishset (lua_State *L, const TValue *t, TValue *key,
                     TValue *val, const TValue *slot) {
    8f1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f20:	4605      	mov	r5, r0
    8f22:	4688      	mov	r8, r1
    8f24:	4692      	mov	sl, r2
    8f26:	461e      	mov	r6, r3
    8f28:	f44f 6bfa 	mov.w	fp, #2000	; 0x7d0
    8f2c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  int loop;  /* counter to avoid infinite loops */
  for (loop = 0; loop < MAXTAGLOOP; loop++) {
    const TValue *tm;  /* '__newindex' metamethod */
    if (slot != NULL) {  /* is 't' a table? */
    8f2e:	2f00      	cmp	r7, #0
    8f30:	d044      	beq.n	8fbc <luaV_finishset+0xa0>
      Table *h = hvalue(t);  /* save 't' table */
    8f32:	f8d8 9000 	ldr.w	r9, [r8]
      lua_assert(isempty(slot));  /* slot must be empty */
      tm = fasttm(L, h->metatable, TM_NEWINDEX);  /* get metamethod */
    8f36:	f8d9 0018 	ldr.w	r0, [r9, #24]
    8f3a:	b9a0      	cbnz	r0, 8f66 <luaV_finishset+0x4a>
      if (tm == NULL) {  /* no metamethod? */
        luaH_finishset(L, h, key, slot, val);  /* set new value */
    8f3c:	463b      	mov	r3, r7
    8f3e:	4652      	mov	r2, sl
    8f40:	4649      	mov	r1, r9
    8f42:	4628      	mov	r0, r5
    8f44:	9600      	str	r6, [sp, #0]
    8f46:	f00c febb 	bl	15cc0 <luaH_finishset>
        invalidateTMcache(h);
    8f4a:	f899 3006 	ldrb.w	r3, [r9, #6]
    8f4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    8f52:	f889 3006 	strb.w	r3, [r9, #6]
        luaC_barrierback(L, obj2gco(h), val);
    8f56:	7a33      	ldrb	r3, [r6, #8]
    8f58:	065a      	lsls	r2, r3, #25
    8f5a:	d41f      	bmi.n	8f9c <luaV_finishset+0x80>
      return;  /* done */
    }
    /* else 'return luaV_finishset(L, t, key, val, slot)' (loop) */
  }
  luaG_runerror(L, "'__newindex' chain too long; possible loop");
}
    8f5c:	b003      	add	sp, #12
    8f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f62:	46a0      	mov	r8, r4
    8f64:	e7e3      	b.n	8f2e <luaV_finishset+0x12>
      tm = fasttm(L, h->metatable, TM_NEWINDEX);  /* get metamethod */
    8f66:	7983      	ldrb	r3, [r0, #6]
    8f68:	079b      	lsls	r3, r3, #30
    8f6a:	d4e7      	bmi.n	8f3c <luaV_finishset+0x20>
    8f6c:	692b      	ldr	r3, [r5, #16]
    8f6e:	2101      	movs	r1, #1
    8f70:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
    8f74:	f00c ff9b 	bl	15eae <luaT_gettm>
      if (tm == NULL) {  /* no metamethod? */
    8f78:	4604      	mov	r4, r0
    8f7a:	2800      	cmp	r0, #0
    8f7c:	d0de      	beq.n	8f3c <luaV_finishset+0x20>
    if (ttisfunction(tm)) {
    8f7e:	7a23      	ldrb	r3, [r4, #8]
    8f80:	f003 020f 	and.w	r2, r3, #15
    8f84:	2a06      	cmp	r2, #6
    8f86:	d127      	bne.n	8fd8 <luaV_finishset+0xbc>
      luaT_callTM(L, tm, t, key, val);
    8f88:	4653      	mov	r3, sl
    8f8a:	4642      	mov	r2, r8
    8f8c:	4621      	mov	r1, r4
    8f8e:	4628      	mov	r0, r5
    8f90:	960c      	str	r6, [sp, #48]	; 0x30
}
    8f92:	b003      	add	sp, #12
    8f94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      luaT_callTM(L, tm, t, key, val);
    8f98:	f00c bfb8 	b.w	15f0c <luaT_callTM>
        luaC_barrierback(L, obj2gco(h), val);
    8f9c:	f899 3005 	ldrb.w	r3, [r9, #5]
    8fa0:	069c      	lsls	r4, r3, #26
    8fa2:	d5db      	bpl.n	8f5c <luaV_finishset+0x40>
    8fa4:	6833      	ldr	r3, [r6, #0]
    8fa6:	795b      	ldrb	r3, [r3, #5]
    8fa8:	f013 0f18 	tst.w	r3, #24
    8fac:	d0d6      	beq.n	8f5c <luaV_finishset+0x40>
    8fae:	4649      	mov	r1, r9
      luaV_finishfastset(L, t, slot, val);
    8fb0:	4628      	mov	r0, r5
}
    8fb2:	b003      	add	sp, #12
    8fb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      luaV_finishfastset(L, t, slot, val);
    8fb8:	f00b bac5 	b.w	14546 <luaC_barrierback_>
      tm = luaT_gettmbyobj(L, t, TM_NEWINDEX);
    8fbc:	2201      	movs	r2, #1
    8fbe:	4641      	mov	r1, r8
    8fc0:	4628      	mov	r0, r5
    8fc2:	f00c ff85 	bl	15ed0 <luaT_gettmbyobj>
      if (l_unlikely(notm(tm)))
    8fc6:	7a03      	ldrb	r3, [r0, #8]
      tm = luaT_gettmbyobj(L, t, TM_NEWINDEX);
    8fc8:	4604      	mov	r4, r0
      if (l_unlikely(notm(tm)))
    8fca:	0718      	lsls	r0, r3, #28
    8fcc:	d1d7      	bne.n	8f7e <luaV_finishset+0x62>
        luaG_typeerror(L, t, "index");
    8fce:	4641      	mov	r1, r8
    8fd0:	4628      	mov	r0, r5
    8fd2:	4a14      	ldr	r2, [pc, #80]	; (9024 <luaV_finishset+0x108>)
    8fd4:	f7fc f914 	bl	5200 <luaG_typeerror>
    if (luaV_fastget(L, t, key, slot, luaH_get)) {
    8fd8:	2b45      	cmp	r3, #69	; 0x45
    8fda:	d11a      	bne.n	9012 <luaV_finishset+0xf6>
    8fdc:	4651      	mov	r1, sl
    8fde:	6820      	ldr	r0, [r4, #0]
    8fe0:	f7ff fa26 	bl	8430 <luaH_get>
    8fe4:	7a03      	ldrb	r3, [r0, #8]
    8fe6:	4607      	mov	r7, r0
    8fe8:	0719      	lsls	r1, r3, #28
    8fea:	d013      	beq.n	9014 <luaV_finishset+0xf8>
      luaV_finishfastset(L, t, slot, val);
    8fec:	e9d6 2300 	ldrd	r2, r3, [r6]
    8ff0:	e9c0 2300 	strd	r2, r3, [r0]
    8ff4:	7a33      	ldrb	r3, [r6, #8]
    8ff6:	7203      	strb	r3, [r0, #8]
    8ff8:	7a33      	ldrb	r3, [r6, #8]
    8ffa:	065a      	lsls	r2, r3, #25
    8ffc:	d5ae      	bpl.n	8f5c <luaV_finishset+0x40>
    8ffe:	6821      	ldr	r1, [r4, #0]
    9000:	794b      	ldrb	r3, [r1, #5]
    9002:	069b      	lsls	r3, r3, #26
    9004:	d5aa      	bpl.n	8f5c <luaV_finishset+0x40>
    9006:	6833      	ldr	r3, [r6, #0]
    9008:	795b      	ldrb	r3, [r3, #5]
    900a:	f013 0f18 	tst.w	r3, #24
    900e:	d0a5      	beq.n	8f5c <luaV_finishset+0x40>
    9010:	e7ce      	b.n	8fb0 <luaV_finishset+0x94>
    if (luaV_fastget(L, t, key, slot, luaH_get)) {
    9012:	2700      	movs	r7, #0
  for (loop = 0; loop < MAXTAGLOOP; loop++) {
    9014:	f1bb 0b01 	subs.w	fp, fp, #1
    9018:	d1a3      	bne.n	8f62 <luaV_finishset+0x46>
  luaG_runerror(L, "'__newindex' chain too long; possible loop");
    901a:	4628      	mov	r0, r5
    901c:	4902      	ldr	r1, [pc, #8]	; (9028 <luaV_finishset+0x10c>)
    901e:	f009 fe87 	bl	12d30 <luaG_runerror>
    9022:	bf00      	nop
    9024:	00017f56 	.word	0x00017f56
    9028:	00018a01 	.word	0x00018a01

0000902c <luaV_concat>:

/*
** Main operation for concatenation: concat 'total' values in the stack,
** from 'L->top - total' up to 'L->top - 1'.
*/
void luaV_concat (lua_State *L, int total) {
    902c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (total == 1)
    9030:	2901      	cmp	r1, #1
void luaV_concat (lua_State *L, int total) {
    9032:	4606      	mov	r6, r0
    9034:	4688      	mov	r8, r1
    9036:	b08b      	sub	sp, #44	; 0x2c
  if (total == 1)
    9038:	f000 8086 	beq.w	9148 <luaV_concat+0x11c>
    return;  /* "all" values already concatenated */
  do {
    StkId top = L->top;
    903c:	68f4      	ldr	r4, [r6, #12]
    int n = 2;  /* number of elements handled in this pass (at least 2) */
    if (!(ttisstring(s2v(top - 2)) || cvt2str(s2v(top - 2))) ||
    903e:	f814 3c18 	ldrb.w	r3, [r4, #-24]
    9042:	f003 030f 	and.w	r3, r3, #15
    9046:	3b03      	subs	r3, #3
    9048:	2b01      	cmp	r3, #1
    904a:	d820      	bhi.n	908e <luaV_concat+0x62>
    904c:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    9050:	f003 030f 	and.w	r3, r3, #15
    9054:	2b04      	cmp	r3, #4
    9056:	d006      	beq.n	9066 <luaV_concat+0x3a>
        !tostring(L, s2v(top - 1)))
    9058:	2b03      	cmp	r3, #3
    905a:	d118      	bne.n	908e <luaV_concat+0x62>
    905c:	4630      	mov	r0, r6
    905e:	f1a4 0110 	sub.w	r1, r4, #16
    9062:	f00b ff34 	bl	14ece <luaO_tostring>
      luaT_tryconcatTM(L);
    else if (isemptystr(s2v(top - 1)))  /* second operand is empty? */
    9066:	f814 1c08 	ldrb.w	r1, [r4, #-8]
      cast_void(tostring(L, s2v(top - 2)));  /* result is first operand */
    906a:	f814 3c18 	ldrb.w	r3, [r4, #-24]
    else if (isemptystr(s2v(top - 1)))  /* second operand is empty? */
    906e:	2944      	cmp	r1, #68	; 0x44
    9070:	d112      	bne.n	9098 <luaV_concat+0x6c>
    9072:	f854 2c10 	ldr.w	r2, [r4, #-16]
    9076:	79d2      	ldrb	r2, [r2, #7]
    9078:	b972      	cbnz	r2, 9098 <luaV_concat+0x6c>
      cast_void(tostring(L, s2v(top - 2)));  /* result is first operand */
    907a:	f003 030f 	and.w	r3, r3, #15
    907e:	2b03      	cmp	r3, #3
    9080:	d108      	bne.n	9094 <luaV_concat+0x68>
    9082:	4630      	mov	r0, r6
    9084:	f1a4 0120 	sub.w	r1, r4, #32
    9088:	f00b ff21 	bl	14ece <luaO_tostring>
    908c:	e002      	b.n	9094 <luaV_concat+0x68>
      luaT_tryconcatTM(L);
    908e:	4630      	mov	r0, r6
    9090:	f00c ffcb 	bl	1602a <luaT_tryconcatTM>
    int n = 2;  /* number of elements handled in this pass (at least 2) */
    9094:	2502      	movs	r5, #2
    9096:	e04c      	b.n	9132 <luaV_concat+0x106>
    else if (isemptystr(s2v(top - 2))) {  /* first operand is empty string? */
    9098:	2b44      	cmp	r3, #68	; 0x44
    909a:	d10a      	bne.n	90b2 <luaV_concat+0x86>
    909c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    90a0:	79db      	ldrb	r3, [r3, #7]
    90a2:	b933      	cbnz	r3, 90b2 <luaV_concat+0x86>
      setobjs2s(L, top - 2, top - 1);  /* result is second op. */
    90a4:	e954 2304 	ldrd	r2, r3, [r4, #-16]
    90a8:	f804 1c18 	strb.w	r1, [r4, #-24]
    90ac:	e944 2308 	strd	r2, r3, [r4, #-32]
    90b0:	e7f0      	b.n	9094 <luaV_concat+0x68>
void luaV_concat (lua_State *L, int total) {
    90b2:	2501      	movs	r5, #1
    }
    else {
      /* at least two non-empty string values; get as many as possible */
      size_t tl = vslen(s2v(top - 1));
    90b4:	f854 3c10 	ldr.w	r3, [r4, #-16]
    90b8:	f1a4 0920 	sub.w	r9, r4, #32
    90bc:	791a      	ldrb	r2, [r3, #4]
    90be:	2a04      	cmp	r2, #4
    90c0:	bf0c      	ite	eq
    90c2:	79df      	ldrbeq	r7, [r3, #7]
    90c4:	68df      	ldrne	r7, [r3, #12]
      TString *ts;
      /* collect total length and number of strings */
      for (n = 1; n < total && tostring(L, s2v(top - n - 1)); n++) {
    90c6:	4545      	cmp	r5, r8
    90c8:	da1f      	bge.n	910a <luaV_concat+0xde>
    90ca:	f899 3008 	ldrb.w	r3, [r9, #8]
    90ce:	f003 030f 	and.w	r3, r3, #15
    90d2:	2b04      	cmp	r3, #4
    90d4:	d005      	beq.n	90e2 <luaV_concat+0xb6>
    90d6:	2b03      	cmp	r3, #3
    90d8:	d117      	bne.n	910a <luaV_concat+0xde>
    90da:	4649      	mov	r1, r9
    90dc:	4630      	mov	r0, r6
    90de:	f00b fef6 	bl	14ece <luaO_tostring>
        size_t l = vslen(s2v(top - n - 1));
    90e2:	f8d9 3000 	ldr.w	r3, [r9]
        if (l_unlikely(l >= (MAX_SIZE/sizeof(char)) - tl))
    90e6:	f1a9 0910 	sub.w	r9, r9, #16
        size_t l = vslen(s2v(top - n - 1));
    90ea:	791a      	ldrb	r2, [r3, #4]
    90ec:	2a04      	cmp	r2, #4
        if (l_unlikely(l >= (MAX_SIZE/sizeof(char)) - tl))
    90ee:	ea6f 0207 	mvn.w	r2, r7
        size_t l = vslen(s2v(top - n - 1));
    90f2:	bf0c      	ite	eq
    90f4:	79db      	ldrbeq	r3, [r3, #7]
    90f6:	68db      	ldrne	r3, [r3, #12]
        if (l_unlikely(l >= (MAX_SIZE/sizeof(char)) - tl))
    90f8:	429a      	cmp	r2, r3
    90fa:	d803      	bhi.n	9104 <luaV_concat+0xd8>
          luaG_runerror(L, "string length overflow");
    90fc:	4630      	mov	r0, r6
    90fe:	491a      	ldr	r1, [pc, #104]	; (9168 <luaV_concat+0x13c>)
    9100:	f009 fe16 	bl	12d30 <luaG_runerror>
        tl += l;
    9104:	441f      	add	r7, r3
      for (n = 1; n < total && tostring(L, s2v(top - n - 1)); n++) {
    9106:	3501      	adds	r5, #1
    9108:	e7dd      	b.n	90c6 <luaV_concat+0x9a>
      }
      if (tl <= LUAI_MAXSHORTLEN) {  /* is result a short string? */
    910a:	2f28      	cmp	r7, #40	; 0x28
    910c:	d81f      	bhi.n	914e <luaV_concat+0x122>
        char buff[LUAI_MAXSHORTLEN];
        copy2buff(top, n, buff);  /* copy strings to buffer */
    910e:	466a      	mov	r2, sp
    9110:	4629      	mov	r1, r5
    9112:	4620      	mov	r0, r4
    9114:	f00d f920 	bl	16358 <copy2buff>
        ts = luaS_newlstr(L, buff, tl);
    9118:	463a      	mov	r2, r7
    911a:	4669      	mov	r1, sp
    911c:	4630      	mov	r0, r6
    911e:	f00c fcfd 	bl	15b1c <luaS_newlstr>
    9122:	4607      	mov	r7, r0
      }
      else {  /* long string; copy strings directly to final result */
        ts = luaS_createlngstrobj(L, tl);
        copy2buff(top, n, getstr(ts));
      }
      setsvalue2s(L, top - n, ts);  /* create result */
    9124:	eba4 1405 	sub.w	r4, r4, r5, lsl #4
    9128:	6027      	str	r7, [r4, #0]
    912a:	793b      	ldrb	r3, [r7, #4]
    912c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9130:	7223      	strb	r3, [r4, #8]
    }
    total -= n-1;  /* got 'n' strings to create 1 new */
    L->top -= n-1;  /* popped 'n' strings and pushed one */
    9132:	68f3      	ldr	r3, [r6, #12]
    total -= n-1;  /* got 'n' strings to create 1 new */
    9134:	f1c5 0501 	rsb	r5, r5, #1
    9138:	44a8      	add	r8, r5
  } while (total > 1);  /* repeat until only 1 result left */
    913a:	f1b8 0f01 	cmp.w	r8, #1
    L->top -= n-1;  /* popped 'n' strings and pushed one */
    913e:	eb03 1505 	add.w	r5, r3, r5, lsl #4
    9142:	60f5      	str	r5, [r6, #12]
  } while (total > 1);  /* repeat until only 1 result left */
    9144:	f73f af7a 	bgt.w	903c <luaV_concat+0x10>
}
    9148:	b00b      	add	sp, #44	; 0x2c
    914a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ts = luaS_createlngstrobj(L, tl);
    914e:	4639      	mov	r1, r7
    9150:	4630      	mov	r0, r6
    9152:	f00c fcbf 	bl	15ad4 <luaS_createlngstrobj>
        copy2buff(top, n, getstr(ts));
    9156:	4629      	mov	r1, r5
        ts = luaS_createlngstrobj(L, tl);
    9158:	4607      	mov	r7, r0
        copy2buff(top, n, getstr(ts));
    915a:	f100 0210 	add.w	r2, r0, #16
    915e:	4620      	mov	r0, r4
    9160:	f00d f8fa 	bl	16358 <copy2buff>
    9164:	e7de      	b.n	9124 <luaV_concat+0xf8>
    9166:	bf00      	nop
    9168:	00018a2c 	.word	0x00018a2c

0000916c <luaV_objlen>:


/*
** Main operation 'ra = #rb'.
*/
void luaV_objlen (lua_State *L, StkId ra, const TValue *rb) {
    916c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    916e:	7a13      	ldrb	r3, [r2, #8]
    9170:	4606      	mov	r6, r0
    9172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  const TValue *tm;
  switch (ttypetag(rb)) {
    9176:	2b05      	cmp	r3, #5
void luaV_objlen (lua_State *L, StkId ra, const TValue *rb) {
    9178:	460c      	mov	r4, r1
    917a:	4615      	mov	r5, r2
  switch (ttypetag(rb)) {
    917c:	d009      	beq.n	9192 <luaV_objlen+0x26>
    917e:	2b14      	cmp	r3, #20
    9180:	d026      	beq.n	91d0 <luaV_objlen+0x64>
    9182:	2b04      	cmp	r3, #4
    9184:	d127      	bne.n	91d6 <luaV_objlen+0x6a>
      if (tm) break;  /* metamethod? break switch to call it */
      setivalue(s2v(ra), luaH_getn(h));  /* else primitive len */
      return;
    }
    case LUA_VSHRSTR: {
      setivalue(s2v(ra), tsvalue(rb)->shrlen);
    9186:	6813      	ldr	r3, [r2, #0]
    9188:	79db      	ldrb	r3, [r3, #7]
      return;
    }
    case LUA_VLNGSTR: {
      setivalue(s2v(ra), tsvalue(rb)->u.lnglen);
    918a:	6023      	str	r3, [r4, #0]
    918c:	2300      	movs	r3, #0
    918e:	6063      	str	r3, [r4, #4]
    9190:	e007      	b.n	91a2 <luaV_objlen+0x36>
      Table *h = hvalue(rb);
    9192:	6817      	ldr	r7, [r2, #0]
      tm = fasttm(L, h->metatable, TM_LEN);
    9194:	69b8      	ldr	r0, [r7, #24]
    9196:	b940      	cbnz	r0, 91aa <luaV_objlen+0x3e>
      setivalue(s2v(ra), luaH_getn(h));  /* else primitive len */
    9198:	4638      	mov	r0, r7
    919a:	f00c fdb4 	bl	15d06 <luaH_getn>
    919e:	e9c4 0100 	strd	r0, r1, [r4]
      setivalue(s2v(ra), tsvalue(rb)->u.lnglen);
    91a2:	2303      	movs	r3, #3
    91a4:	7223      	strb	r3, [r4, #8]
        luaG_typeerror(L, rb, "get length of");
      break;
    }
  }
  luaT_callTMres(L, tm, rb, rb, ra);
}
    91a6:	b003      	add	sp, #12
    91a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tm = fasttm(L, h->metatable, TM_LEN);
    91aa:	7983      	ldrb	r3, [r0, #6]
    91ac:	06da      	lsls	r2, r3, #27
    91ae:	d4f3      	bmi.n	9198 <luaV_objlen+0x2c>
    91b0:	6933      	ldr	r3, [r6, #16]
    91b2:	2104      	movs	r1, #4
    91b4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
    91b8:	f00c fe79 	bl	15eae <luaT_gettm>
      if (tm) break;  /* metamethod? break switch to call it */
    91bc:	4601      	mov	r1, r0
    91be:	2800      	cmp	r0, #0
    91c0:	d0ea      	beq.n	9198 <luaV_objlen+0x2c>
  luaT_callTMres(L, tm, rb, rb, ra);
    91c2:	462b      	mov	r3, r5
    91c4:	462a      	mov	r2, r5
    91c6:	4630      	mov	r0, r6
    91c8:	9400      	str	r4, [sp, #0]
    91ca:	f00c fed1 	bl	15f70 <luaT_callTMres>
    91ce:	e7ea      	b.n	91a6 <luaV_objlen+0x3a>
      setivalue(s2v(ra), tsvalue(rb)->u.lnglen);
    91d0:	6813      	ldr	r3, [r2, #0]
    91d2:	68db      	ldr	r3, [r3, #12]
    91d4:	e7d9      	b.n	918a <luaV_objlen+0x1e>
      tm = luaT_gettmbyobj(L, rb, TM_LEN);
    91d6:	4629      	mov	r1, r5
    91d8:	2204      	movs	r2, #4
    91da:	f00c fe79 	bl	15ed0 <luaT_gettmbyobj>
      if (l_unlikely(notm(tm)))  /* no metamethod? */
    91de:	7a03      	ldrb	r3, [r0, #8]
      tm = luaT_gettmbyobj(L, rb, TM_LEN);
    91e0:	4601      	mov	r1, r0
      if (l_unlikely(notm(tm)))  /* no metamethod? */
    91e2:	071b      	lsls	r3, r3, #28
    91e4:	d1ed      	bne.n	91c2 <luaV_objlen+0x56>
        luaG_typeerror(L, rb, "get length of");
    91e6:	4629      	mov	r1, r5
    91e8:	4630      	mov	r0, r6
    91ea:	4a01      	ldr	r2, [pc, #4]	; (91f0 <luaV_objlen+0x84>)
    91ec:	f7fc f808 	bl	5200 <luaG_typeerror>
    91f0:	00018a43 	.word	0x00018a43

000091f4 <luaV_idiv>:
** Integer division; return 'm // n', that is, floor(m/n).
** C division truncates its result (rounds towards zero).
** 'floor(q) == trunc(q)' when 'q >= 0' or when 'q' is integer,
** otherwise 'floor(q) == trunc(q) - 1'.
*/
lua_Integer luaV_idiv (lua_State *L, lua_Integer m, lua_Integer n) {
    91f4:	b570      	push	{r4, r5, r6, lr}
    91f6:	4614      	mov	r4, r2
    91f8:	e9dd 2604 	ldrd	r2, r6, [sp, #16]
  if (l_unlikely(l_castS2U(n) + 1u <= 1u)) {  /* special cases: -1 or 0 */
    91fc:	1c51      	adds	r1, r2, #1
lua_Integer luaV_idiv (lua_State *L, lua_Integer m, lua_Integer n) {
    91fe:	461d      	mov	r5, r3
  if (l_unlikely(l_castS2U(n) + 1u <= 1u)) {  /* special cases: -1 or 0 */
    9200:	f146 0300 	adc.w	r3, r6, #0
    9204:	2902      	cmp	r1, #2
    9206:	f173 0300 	sbcs.w	r3, r3, #0
    920a:	d209      	bcs.n	9220 <luaV_idiv+0x2c>
    if (n == 0)
    920c:	ea52 0306 	orrs.w	r3, r2, r6
    9210:	d102      	bne.n	9218 <luaV_idiv+0x24>
      luaG_runerror(L, "attempt to divide by zero");
    9212:	490b      	ldr	r1, [pc, #44]	; (9240 <luaV_idiv+0x4c>)
    9214:	f009 fd8c 	bl	12d30 <luaG_runerror>
    return intop(-, 0, m);   /* n==-1; avoid overflow with 0x80000...//-1 */
    9218:	4260      	negs	r0, r4
    921a:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
    lua_Integer q = m / n;  /* perform C division */
    if ((m ^ n) < 0 && m % n != 0)  /* 'm/n' would be negative non-integer? */
      q -= 1;  /* correct result for different rounding */
    return q;
  }
}
    921e:	bd70      	pop	{r4, r5, r6, pc}
    lua_Integer q = m / n;  /* perform C division */
    9220:	4620      	mov	r0, r4
    9222:	4633      	mov	r3, r6
    9224:	4629      	mov	r1, r5
    9226:	f7f7 fbb9 	bl	99c <__aeabi_ldivmod>
    if ((m ^ n) < 0 && m % n != 0)  /* 'm/n' would be negative non-integer? */
    922a:	ea96 0f05 	teq	r6, r5
    922e:	460c      	mov	r4, r1
    9230:	d5f5      	bpl.n	921e <luaV_idiv+0x2a>
    9232:	4313      	orrs	r3, r2
    9234:	d0f3      	beq.n	921e <luaV_idiv+0x2a>
      q -= 1;  /* correct result for different rounding */
    9236:	3801      	subs	r0, #1
    9238:	f164 0100 	sbc.w	r1, r4, #0
    923c:	e7ef      	b.n	921e <luaV_idiv+0x2a>
    923e:	bf00      	nop
    9240:	00018a51 	.word	0x00018a51

00009244 <luaV_mod>:
/*
** Integer modulus; return 'm % n'. (Assume that C '%' with
** negative operands follows C99 behavior. See previous comment
** about luaV_idiv.)
*/
lua_Integer luaV_mod (lua_State *L, lua_Integer m, lua_Integer n) {
    9244:	b570      	push	{r4, r5, r6, lr}
    9246:	4616      	mov	r6, r2
    9248:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  if (l_unlikely(l_castS2U(n) + 1u <= 1u)) {  /* special cases: -1 or 0 */
    924c:	1c62      	adds	r2, r4, #1
lua_Integer luaV_mod (lua_State *L, lua_Integer m, lua_Integer n) {
    924e:	4619      	mov	r1, r3
  if (l_unlikely(l_castS2U(n) + 1u <= 1u)) {  /* special cases: -1 or 0 */
    9250:	f145 0300 	adc.w	r3, r5, #0
    9254:	2a02      	cmp	r2, #2
    9256:	f173 0300 	sbcs.w	r3, r3, #0
    925a:	d205      	bcs.n	9268 <luaV_mod+0x24>
    if (n == 0)
    925c:	ea54 0305 	orrs.w	r3, r4, r5
    9260:	d112      	bne.n	9288 <luaV_mod+0x44>
      luaG_runerror(L, "attempt to perform 'n%%0'");
    9262:	490b      	ldr	r1, [pc, #44]	; (9290 <luaV_mod+0x4c>)
    9264:	f009 fd64 	bl	12d30 <luaG_runerror>
    return 0;   /* m % -1 == 0; avoid overflow with 0x80000...%-1 */
  }
  else {
    lua_Integer r = m % n;
    9268:	4622      	mov	r2, r4
    926a:	462b      	mov	r3, r5
    926c:	4630      	mov	r0, r6
    926e:	f7f7 fb95 	bl	99c <__aeabi_ldivmod>
    9272:	4610      	mov	r0, r2
    if (r != 0 && (r ^ n) < 0)  /* 'm/n' would be non-integer negative? */
    9274:	431a      	orrs	r2, r3
    lua_Integer r = m % n;
    9276:	4619      	mov	r1, r3
    if (r != 0 && (r ^ n) < 0)  /* 'm/n' would be non-integer negative? */
    9278:	d005      	beq.n	9286 <luaV_mod+0x42>
    927a:	ea95 0f03 	teq	r5, r3
    927e:	d502      	bpl.n	9286 <luaV_mod+0x42>
      r += n;  /* correct result for different rounding */
    9280:	1820      	adds	r0, r4, r0
    9282:	eb45 0103 	adc.w	r1, r5, r3
    return r;
  }
}
    9286:	bd70      	pop	{r4, r5, r6, pc}
    return 0;   /* m % -1 == 0; avoid overflow with 0x80000...%-1 */
    9288:	2000      	movs	r0, #0
    928a:	4601      	mov	r1, r0
    928c:	e7fb      	b.n	9286 <luaV_mod+0x42>
    928e:	bf00      	nop
    9290:	00018a6b 	.word	0x00018a6b

00009294 <luaV_execute>:
#define vmdispatch(o)	switch(o)
#define vmcase(l)	case l:
#define vmbreak		break


void luaV_execute (lua_State *L, CallInfo *ci) {
    9294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9298:	4607      	mov	r7, r0
    929a:	460e      	mov	r6, r1
    929c:	b09d      	sub	sp, #116	; 0x74
  int trap;
#if LUA_USE_JUMPTABLE
#include "ljumptab.h"
#endif
 startfunc:
  trap = L->hookmask;
    929e:	f8d7 9070 	ldr.w	r9, [r7, #112]	; 0x70
 returning:  /* trap already set */
  cl = clLvalue(s2v(ci->func));
    92a2:	6833      	ldr	r3, [r6, #0]
  k = cl->p->k;
  pc = ci->u.l.savedpc;
    92a4:	6934      	ldr	r4, [r6, #16]
  cl = clLvalue(s2v(ci->func));
    92a6:	681b      	ldr	r3, [r3, #0]
    92a8:	930c      	str	r3, [sp, #48]	; 0x30
  k = cl->p->k;
    92aa:	68db      	ldr	r3, [r3, #12]
    92ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    92ae:	9205      	str	r2, [sp, #20]
  if (l_unlikely(trap)) {
    92b0:	f1b9 0f00 	cmp.w	r9, #0
    92b4:	d00a      	beq.n	92cc <luaV_execute+0x38>
    if (pc == cl->p->code) {  /* first instruction (not resuming)? */
    92b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    92b8:	42a2      	cmp	r2, r4
    92ba:	d105      	bne.n	92c8 <luaV_execute+0x34>
      if (cl->p->is_vararg)
    92bc:	79db      	ldrb	r3, [r3, #7]
    92be:	bb23      	cbnz	r3, 930a <luaV_execute+0x76>
        trap = 0;  /* hooks will start after VARARGPREP instruction */
      else  /* check 'call' hook */
        luaD_hookcall(L, ci);
    92c0:	4631      	mov	r1, r6
    92c2:	4638      	mov	r0, r7
    92c4:	f009 fe9e 	bl	13004 <luaD_hookcall>
    }
    ci->u.l.trap = 1;  /* assume trap is on, for now */
    92c8:	2301      	movs	r3, #1
    92ca:	6173      	str	r3, [r6, #20]
  }
  base = ci->func + 1;
    92cc:	6833      	ldr	r3, [r6, #0]
    92ce:	f103 0a10 	add.w	sl, r3, #16
  /* main loop of interpreter */
  for (;;) {
    Instruction i;  /* instruction being executed */
    StkId ra;  /* instruction's A register */
    vmfetch();
    92d2:	f1b9 0f00 	cmp.w	r9, #0
    92d6:	d007      	beq.n	92e8 <luaV_execute+0x54>
    92d8:	4621      	mov	r1, r4
    92da:	4638      	mov	r0, r7
    92dc:	f7fc f820 	bl	5320 <luaG_traceexec>
    92e0:	4681      	mov	r9, r0
    92e2:	6833      	ldr	r3, [r6, #0]
    92e4:	f103 0a10 	add.w	sl, r3, #16
    92e8:	f854 bb04 	ldr.w	fp, [r4], #4
    #endif
    lua_assert(base == ci->func + 1);
    lua_assert(base <= L->top && L->top < L->stack_last);
    /* invalidate top for instructions not expecting it */
    lua_assert(isIT(i) || (cast_void(L->top = base), 1));
    vmdispatch (GET_OPCODE(i)) {
    92ec:	4ac9      	ldr	r2, [pc, #804]	; (9614 <luaV_execute+0x380>)
    92ee:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    vmfetch();
    92f2:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    vmdispatch (GET_OPCODE(i)) {
    92f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    vmfetch();
    92fa:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    vmdispatch (GET_OPCODE(i)) {
    92fe:	f043 0301 	orr.w	r3, r3, #1
    9302:	4718      	bx	r3
    9304:	4630      	mov	r0, r6
    9306:	4606      	mov	r6, r0
    9308:	e7c9      	b.n	929e <luaV_execute+0xa>
        trap = 0;  /* hooks will start after VARARGPREP instruction */
    930a:	f04f 0900 	mov.w	r9, #0
    930e:	e7db      	b.n	92c8 <luaV_execute+0x34>
      vmcase(OP_MOVE) {
        setobjs2s(L, ra, RB(i));
    9310:	f3cb 4b07 	ubfx	fp, fp, #16, #8
    9314:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
    9318:	e9db 2300 	ldrd	r2, r3, [fp]
    931c:	e9c5 2300 	strd	r2, r3, [r5]
    9320:	f89b 3008 	ldrb.w	r3, [fp, #8]
    9324:	722b      	strb	r3, [r5, #8]
        vmbreak;
    9326:	f1b9 0f00 	cmp.w	r9, #0
    932a:	d007      	beq.n	933c <luaV_execute+0xa8>
    932c:	4621      	mov	r1, r4
    932e:	4638      	mov	r0, r7
    9330:	f7fb fff6 	bl	5320 <luaG_traceexec>
    9334:	4681      	mov	r9, r0
    9336:	6833      	ldr	r3, [r6, #0]
    9338:	f103 0a10 	add.w	sl, r3, #16
    933c:	4621      	mov	r1, r4
    933e:	f851 bb04 	ldr.w	fp, [r1], #4
    9342:	4ab4      	ldr	r2, [pc, #720]	; (9614 <luaV_execute+0x380>)
    9344:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    9348:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    934c:	460c      	mov	r4, r1
    934e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9352:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    9356:	e7d2      	b.n	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_LOADI) {
        lua_Integer b = GETARG_sBx(i);
    9358:	ea4f 30db 	mov.w	r0, fp, lsr #15
    935c:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    9360:	38ff      	subs	r0, #255	; 0xff
    9362:	17c3      	asrs	r3, r0, #31
    9364:	e9c5 0300 	strd	r0, r3, [r5]
        setivalue(s2v(ra), b);
    9368:	2303      	movs	r3, #3
    936a:	722b      	strb	r3, [r5, #8]
        vmbreak;
    936c:	f1b9 0f00 	cmp.w	r9, #0
    9370:	d007      	beq.n	9382 <luaV_execute+0xee>
    9372:	4621      	mov	r1, r4
    9374:	4638      	mov	r0, r7
    9376:	f7fb ffd3 	bl	5320 <luaG_traceexec>
    937a:	4681      	mov	r9, r0
    937c:	6833      	ldr	r3, [r6, #0]
    937e:	f103 0a10 	add.w	sl, r3, #16
    9382:	4621      	mov	r1, r4
    9384:	f851 bb04 	ldr.w	fp, [r1], #4
    9388:	4aa2      	ldr	r2, [pc, #648]	; (9614 <luaV_execute+0x380>)
    938a:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    938e:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    9392:	460c      	mov	r4, r1
    9394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9398:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    939c:	e7af      	b.n	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_LOADF) {
        int b = GETARG_sBx(i);
    939e:	ea4f 30db 	mov.w	r0, fp, lsr #15
        setfltvalue(s2v(ra), cast_num(b));
    93a2:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    93a6:	38ff      	subs	r0, #255	; 0xff
    93a8:	f7f6 fff4 	bl	394 <__aeabi_i2d>
    93ac:	2313      	movs	r3, #19
    93ae:	e9c5 0100 	strd	r0, r1, [r5]
    93b2:	722b      	strb	r3, [r5, #8]
        vmbreak;
    93b4:	f1b9 0f00 	cmp.w	r9, #0
    93b8:	d007      	beq.n	93ca <luaV_execute+0x136>
    93ba:	4621      	mov	r1, r4
    93bc:	4638      	mov	r0, r7
    93be:	f7fb ffaf 	bl	5320 <luaG_traceexec>
    93c2:	4681      	mov	r9, r0
    93c4:	6833      	ldr	r3, [r6, #0]
    93c6:	f103 0a10 	add.w	sl, r3, #16
    93ca:	4621      	mov	r1, r4
    93cc:	f851 bb04 	ldr.w	fp, [r1], #4
    93d0:	4a90      	ldr	r2, [pc, #576]	; (9614 <luaV_execute+0x380>)
    93d2:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    93d6:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    93da:	460c      	mov	r4, r1
    93dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93e0:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    93e4:	e78b      	b.n	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_LOADK) {
        TValue *rb = k + GETARG_Bx(i);
    93e6:	9b05      	ldr	r3, [sp, #20]
    93e8:	ea4f 3bdb 	mov.w	fp, fp, lsr #15
    93ec:	eb03 1b0b 	add.w	fp, r3, fp, lsl #4
        setobj2s(L, ra, rb);
    93f0:	e9db 2300 	ldrd	r2, r3, [fp]
    93f4:	e9c5 2300 	strd	r2, r3, [r5]
    93f8:	f89b 3008 	ldrb.w	r3, [fp, #8]
    93fc:	722b      	strb	r3, [r5, #8]
        vmbreak;
    93fe:	f1b9 0f00 	cmp.w	r9, #0
    9402:	d007      	beq.n	9414 <luaV_execute+0x180>
    9404:	4621      	mov	r1, r4
    9406:	4638      	mov	r0, r7
    9408:	f7fb ff8a 	bl	5320 <luaG_traceexec>
    940c:	4681      	mov	r9, r0
    940e:	6833      	ldr	r3, [r6, #0]
    9410:	f103 0a10 	add.w	sl, r3, #16
    9414:	4621      	mov	r1, r4
    9416:	f851 bb04 	ldr.w	fp, [r1], #4
    941a:	4a7e      	ldr	r2, [pc, #504]	; (9614 <luaV_execute+0x380>)
    941c:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    9420:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    9424:	460c      	mov	r4, r1
    9426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    942a:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    942e:	e766      	b.n	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_LOADKX) {
        TValue *rb;
        rb = k + GETARG_Ax(*pc); pc++;
    9430:	f854 0b04 	ldr.w	r0, [r4], #4
    9434:	9b05      	ldr	r3, [sp, #20]
    9436:	09c0      	lsrs	r0, r0, #7
    9438:	eb03 1000 	add.w	r0, r3, r0, lsl #4
        setobj2s(L, ra, rb);
    943c:	e9d0 2300 	ldrd	r2, r3, [r0]
    9440:	e9c5 2300 	strd	r2, r3, [r5]
    9444:	7a03      	ldrb	r3, [r0, #8]
    9446:	722b      	strb	r3, [r5, #8]
        vmbreak;
    9448:	f1b9 0f00 	cmp.w	r9, #0
    944c:	d007      	beq.n	945e <luaV_execute+0x1ca>
    944e:	4621      	mov	r1, r4
    9450:	4638      	mov	r0, r7
    9452:	f7fb ff65 	bl	5320 <luaG_traceexec>
    9456:	4681      	mov	r9, r0
    9458:	6833      	ldr	r3, [r6, #0]
    945a:	f103 0a10 	add.w	sl, r3, #16
    945e:	f854 bb04 	ldr.w	fp, [r4], #4
    9462:	4a6c      	ldr	r2, [pc, #432]	; (9614 <luaV_execute+0x380>)
    9464:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    9468:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    946c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9470:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    9474:	e743      	b.n	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_LOADFALSE) {
        setbfvalue(s2v(ra));
    9476:	2301      	movs	r3, #1
    9478:	722b      	strb	r3, [r5, #8]
        vmbreak;
    947a:	f1b9 0f00 	cmp.w	r9, #0
    947e:	d007      	beq.n	9490 <luaV_execute+0x1fc>
    9480:	4621      	mov	r1, r4
    9482:	4638      	mov	r0, r7
    9484:	f7fb ff4c 	bl	5320 <luaG_traceexec>
    9488:	4681      	mov	r9, r0
    948a:	6833      	ldr	r3, [r6, #0]
    948c:	f103 0a10 	add.w	sl, r3, #16
    9490:	4621      	mov	r1, r4
    9492:	f851 bb04 	ldr.w	fp, [r1], #4
    9496:	4a5f      	ldr	r2, [pc, #380]	; (9614 <luaV_execute+0x380>)
    9498:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    949c:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    94a0:	460c      	mov	r4, r1
    94a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94a6:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    94aa:	e728      	b.n	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_LFALSESKIP) {
        setbfvalue(s2v(ra));
    94ac:	2301      	movs	r3, #1
        pc++;  /* skip next instruction */
    94ae:	3404      	adds	r4, #4
        setbfvalue(s2v(ra));
    94b0:	722b      	strb	r3, [r5, #8]
        vmbreak;
    94b2:	f1b9 0f00 	cmp.w	r9, #0
    94b6:	d007      	beq.n	94c8 <luaV_execute+0x234>
    94b8:	4621      	mov	r1, r4
    94ba:	4638      	mov	r0, r7
    94bc:	f7fb ff30 	bl	5320 <luaG_traceexec>
    94c0:	4681      	mov	r9, r0
    94c2:	6833      	ldr	r3, [r6, #0]
    94c4:	f103 0a10 	add.w	sl, r3, #16
    94c8:	f854 bb04 	ldr.w	fp, [r4], #4
    94cc:	4a51      	ldr	r2, [pc, #324]	; (9614 <luaV_execute+0x380>)
    94ce:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    94d2:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    94d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94da:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    94de:	e70e      	b.n	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_LOADTRUE) {
        setbtvalue(s2v(ra));
    94e0:	2311      	movs	r3, #17
    94e2:	722b      	strb	r3, [r5, #8]
        vmbreak;
    94e4:	f1b9 0f00 	cmp.w	r9, #0
    94e8:	d007      	beq.n	94fa <luaV_execute+0x266>
    94ea:	4621      	mov	r1, r4
    94ec:	4638      	mov	r0, r7
    94ee:	f7fb ff17 	bl	5320 <luaG_traceexec>
    94f2:	4681      	mov	r9, r0
    94f4:	6833      	ldr	r3, [r6, #0]
    94f6:	f103 0a10 	add.w	sl, r3, #16
    94fa:	4621      	mov	r1, r4
    94fc:	f851 bb04 	ldr.w	fp, [r1], #4
    9500:	4a44      	ldr	r2, [pc, #272]	; (9614 <luaV_execute+0x380>)
    9502:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    9506:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    950a:	460c      	mov	r4, r1
    950c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9510:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    9514:	e6f3      	b.n	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_LOADNIL) {
        int b = GETARG_B(i);
        do {
          setnilvalue(s2v(ra++));
    9516:	2200      	movs	r2, #0
        int b = GETARG_B(i);
    9518:	f3cb 4b07 	ubfx	fp, fp, #16, #8
        } while (b--);
    951c:	f1bb 0b01 	subs.w	fp, fp, #1
          setnilvalue(s2v(ra++));
    9520:	722a      	strb	r2, [r5, #8]
    9522:	f105 0510 	add.w	r5, r5, #16
        } while (b--);
    9526:	d2f9      	bcs.n	951c <luaV_execute+0x288>
        vmbreak;
    9528:	f1b9 0f00 	cmp.w	r9, #0
    952c:	d007      	beq.n	953e <luaV_execute+0x2aa>
    952e:	4621      	mov	r1, r4
    9530:	4638      	mov	r0, r7
    9532:	f7fb fef5 	bl	5320 <luaG_traceexec>
    9536:	4681      	mov	r9, r0
    9538:	6833      	ldr	r3, [r6, #0]
    953a:	f103 0a10 	add.w	sl, r3, #16
    953e:	4621      	mov	r1, r4
    9540:	f851 bb04 	ldr.w	fp, [r1], #4
    9544:	4a33      	ldr	r2, [pc, #204]	; (9614 <luaV_execute+0x380>)
    9546:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    954a:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    954e:	460c      	mov	r4, r1
    9550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9554:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    9558:	e6d1      	b.n	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_GETUPVAL) {
        int b = GETARG_B(i);
        setobj2s(L, ra, cl->upvals[b]->v);
    955a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        int b = GETARG_B(i);
    955c:	f3cb 4b07 	ubfx	fp, fp, #16, #8
        setobj2s(L, ra, cl->upvals[b]->v);
    9560:	f10b 0b04 	add.w	fp, fp, #4
    9564:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
    9568:	6899      	ldr	r1, [r3, #8]
    956a:	e9d1 2300 	ldrd	r2, r3, [r1]
    956e:	e9c5 2300 	strd	r2, r3, [r5]
    9572:	7a0b      	ldrb	r3, [r1, #8]
    9574:	722b      	strb	r3, [r5, #8]
        vmbreak;
    9576:	f1b9 0f00 	cmp.w	r9, #0
    957a:	d007      	beq.n	958c <luaV_execute+0x2f8>
    957c:	4621      	mov	r1, r4
    957e:	4638      	mov	r0, r7
    9580:	f7fb fece 	bl	5320 <luaG_traceexec>
    9584:	4681      	mov	r9, r0
    9586:	6833      	ldr	r3, [r6, #0]
    9588:	f103 0a10 	add.w	sl, r3, #16
    958c:	4621      	mov	r1, r4
    958e:	f851 bb04 	ldr.w	fp, [r1], #4
    9592:	4a20      	ldr	r2, [pc, #128]	; (9614 <luaV_execute+0x380>)
    9594:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    9598:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    959c:	460c      	mov	r4, r1
    959e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95a2:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    95a6:	e6aa      	b.n	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_SETUPVAL) {
        UpVal *uv = cl->upvals[GETARG_B(i)];
    95a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    95aa:	f3cb 4b07 	ubfx	fp, fp, #16, #8
    95ae:	f10b 0b04 	add.w	fp, fp, #4
    95b2:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
        setobj(L, uv->v, s2v(ra));
    95b6:	e9d5 2300 	ldrd	r2, r3, [r5]
    95ba:	6888      	ldr	r0, [r1, #8]
    95bc:	e9c0 2300 	strd	r2, r3, [r0]
    95c0:	7a2b      	ldrb	r3, [r5, #8]
    95c2:	7203      	strb	r3, [r0, #8]
        luaC_barrier(L, uv, s2v(ra));
    95c4:	7a2b      	ldrb	r3, [r5, #8]
    95c6:	0658      	lsls	r0, r3, #25
    95c8:	d50a      	bpl.n	95e0 <luaV_execute+0x34c>
    95ca:	794b      	ldrb	r3, [r1, #5]
    95cc:	069a      	lsls	r2, r3, #26
    95ce:	d507      	bpl.n	95e0 <luaV_execute+0x34c>
    95d0:	682a      	ldr	r2, [r5, #0]
    95d2:	7953      	ldrb	r3, [r2, #5]
    95d4:	f013 0f18 	tst.w	r3, #24
    95d8:	d002      	beq.n	95e0 <luaV_execute+0x34c>
    95da:	4638      	mov	r0, r7
    95dc:	f00a ff8f 	bl	144fe <luaC_barrier_>
        vmbreak;
    95e0:	f1b9 0f00 	cmp.w	r9, #0
    95e4:	d007      	beq.n	95f6 <luaV_execute+0x362>
    95e6:	4621      	mov	r1, r4
    95e8:	4638      	mov	r0, r7
    95ea:	f7fb fe99 	bl	5320 <luaG_traceexec>
    95ee:	4681      	mov	r9, r0
    95f0:	6833      	ldr	r3, [r6, #0]
    95f2:	f103 0a10 	add.w	sl, r3, #16
    95f6:	4621      	mov	r1, r4
    95f8:	f851 bb04 	ldr.w	fp, [r1], #4
    95fc:	4a05      	ldr	r2, [pc, #20]	; (9614 <luaV_execute+0x380>)
    95fe:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    9602:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    9606:	460c      	mov	r4, r1
    9608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    960c:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    9610:	e675      	b.n	92fe <luaV_execute+0x6a>
    9612:	bf00      	nop
    9614:	00017ae8 	.word	0x00017ae8
      }
      vmcase(OP_GETTABUP) {
        const TValue *slot;
        TValue *upval = cl->upvals[GETARG_B(i)]->v;
    9618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    961a:	f3cb 4307 	ubfx	r3, fp, #16, #8
    961e:	3304      	adds	r3, #4
    9620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        TValue *rc = KC(i);
    9624:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
        TValue *upval = cl->upvals[GETARG_B(i)]->v;
    9628:	f8d3 8008 	ldr.w	r8, [r3, #8]
        TValue *rc = KC(i);
    962c:	9a05      	ldr	r2, [sp, #20]
    962e:	ea4f 130b 	mov.w	r3, fp, lsl #4
        TString *key = tsvalue(rc);  /* key must be a string */
    9632:	58d1      	ldr	r1, [r2, r3]
        if (luaV_fastget(L, upval, key, slot, luaH_getshortstr)) {
    9634:	f898 3008 	ldrb.w	r3, [r8, #8]
        TValue *rc = KC(i);
    9638:	eb02 1b0b 	add.w	fp, r2, fp, lsl #4
        if (luaV_fastget(L, upval, key, slot, luaH_getshortstr)) {
    963c:	2b45      	cmp	r3, #69	; 0x45
    963e:	d124      	bne.n	968a <luaV_execute+0x3f6>
    9640:	f8d8 0000 	ldr.w	r0, [r8]
    9644:	f7fe fedc 	bl	8400 <luaH_getshortstr>
    9648:	7a01      	ldrb	r1, [r0, #8]
    964a:	070b      	lsls	r3, r1, #28
    964c:	d01e      	beq.n	968c <luaV_execute+0x3f8>
          setobj2s(L, ra, slot);
    964e:	e9d0 2300 	ldrd	r2, r3, [r0]
    9652:	e9c5 2300 	strd	r2, r3, [r5]
    9656:	7229      	strb	r1, [r5, #8]
        }
        else
          Protect(luaV_finishget(L, upval, rc, ra, slot));
        vmbreak;
    9658:	f1b9 0f00 	cmp.w	r9, #0
    965c:	d007      	beq.n	966e <luaV_execute+0x3da>
    965e:	4621      	mov	r1, r4
    9660:	4638      	mov	r0, r7
    9662:	f7fb fe5d 	bl	5320 <luaG_traceexec>
    9666:	4681      	mov	r9, r0
    9668:	6833      	ldr	r3, [r6, #0]
    966a:	f103 0a10 	add.w	sl, r3, #16
    966e:	4621      	mov	r1, r4
    9670:	f851 bb04 	ldr.w	fp, [r1], #4
    9674:	4abd      	ldr	r2, [pc, #756]	; (996c <luaV_execute+0x6d8>)
    9676:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    967a:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    967e:	460c      	mov	r4, r1
    9680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9684:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    9688:	e639      	b.n	92fe <luaV_execute+0x6a>
        if (luaV_fastget(L, upval, key, slot, luaH_getshortstr)) {
    968a:	2000      	movs	r0, #0
          Protect(luaV_finishget(L, upval, rc, ra, slot));
    968c:	6873      	ldr	r3, [r6, #4]
    968e:	6134      	str	r4, [r6, #16]
    9690:	465a      	mov	r2, fp
    9692:	60fb      	str	r3, [r7, #12]
    9694:	9000      	str	r0, [sp, #0]
    9696:	462b      	mov	r3, r5
    9698:	4641      	mov	r1, r8
    969a:	4638      	mov	r0, r7
    969c:	f7ff fbea 	bl	8e74 <luaV_finishget>
    96a0:	f8d6 9014 	ldr.w	r9, [r6, #20]
    96a4:	e7d8      	b.n	9658 <luaV_execute+0x3c4>
      }
      vmcase(OP_GETTABLE) {
        const TValue *slot;
        TValue *rb = vRB(i);
    96a6:	f3cb 4807 	ubfx	r8, fp, #16, #8
        TValue *rc = vRC(i);
    96aa:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    96ae:	ea4f 130b 	mov.w	r3, fp, lsl #4
    96b2:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
        lua_Unsigned n;
        if (ttisinteger(rc)  /* fast track for integers? */
    96b6:	f89b 2008 	ldrb.w	r2, [fp, #8]
        TValue *rb = vRB(i);
    96ba:	eb0a 1808 	add.w	r8, sl, r8, lsl #4
        if (ttisinteger(rc)  /* fast track for integers? */
    96be:	2a03      	cmp	r2, #3
    96c0:	f898 1008 	ldrb.w	r1, [r8, #8]
    96c4:	d129      	bne.n	971a <luaV_execute+0x486>
    96c6:	2945      	cmp	r1, #69	; 0x45
            ? (cast_void(n = ivalue(rc)), luaV_fastgeti(L, rb, n, slot))
    96c8:	f85a 2003 	ldr.w	r2, [sl, r3]
    96cc:	f8db 3004 	ldr.w	r3, [fp, #4]
        if (ttisinteger(rc)  /* fast track for integers? */
    96d0:	d14a      	bne.n	9768 <luaV_execute+0x4d4>
            ? (cast_void(n = ivalue(rc)), luaV_fastgeti(L, rb, n, slot))
    96d2:	f8d8 0000 	ldr.w	r0, [r8]
    96d6:	f112 3cff 	adds.w	ip, r2, #4294967295	; 0xffffffff
    96da:	6881      	ldr	r1, [r0, #8]
    96dc:	f143 3eff 	adc.w	lr, r3, #4294967295	; 0xffffffff
    96e0:	458c      	cmp	ip, r1
    96e2:	f17e 0100 	sbcs.w	r1, lr, #0
    96e6:	d215      	bcs.n	9714 <luaV_execute+0x480>
    96e8:	68c0      	ldr	r0, [r0, #12]
    96ea:	eb00 100c 	add.w	r0, r0, ip, lsl #4
        if (ttisinteger(rc)  /* fast track for integers? */
    96ee:	7a03      	ldrb	r3, [r0, #8]
    96f0:	f013 030f 	ands.w	r3, r3, #15
    96f4:	bf18      	it	ne
    96f6:	2301      	movne	r3, #1
    96f8:	b9bb      	cbnz	r3, 972a <luaV_execute+0x496>
            : luaV_fastget(L, rb, rc, slot, luaH_get)) {
          setobj2s(L, ra, slot);
        }
        else
          Protect(luaV_finishget(L, rb, rc, ra, slot));
    96fa:	6873      	ldr	r3, [r6, #4]
    96fc:	6134      	str	r4, [r6, #16]
    96fe:	465a      	mov	r2, fp
    9700:	60fb      	str	r3, [r7, #12]
    9702:	9000      	str	r0, [sp, #0]
    9704:	462b      	mov	r3, r5
    9706:	4641      	mov	r1, r8
    9708:	4638      	mov	r0, r7
    970a:	f7ff fbb3 	bl	8e74 <luaV_finishget>
    970e:	f8d6 9014 	ldr.w	r9, [r6, #20]
    9712:	e010      	b.n	9736 <luaV_execute+0x4a2>
            ? (cast_void(n = ivalue(rc)), luaV_fastgeti(L, rb, n, slot))
    9714:	f7fe fe38 	bl	8388 <luaH_getint>
    9718:	e7e9      	b.n	96ee <luaV_execute+0x45a>
        if (ttisinteger(rc)  /* fast track for integers? */
    971a:	2945      	cmp	r1, #69	; 0x45
    971c:	d124      	bne.n	9768 <luaV_execute+0x4d4>
            : luaV_fastget(L, rb, rc, slot, luaH_get)) {
    971e:	4659      	mov	r1, fp
    9720:	f8d8 0000 	ldr.w	r0, [r8]
    9724:	f7fe fe84 	bl	8430 <luaH_get>
    9728:	e7e1      	b.n	96ee <luaV_execute+0x45a>
          setobj2s(L, ra, slot);
    972a:	e9d0 2300 	ldrd	r2, r3, [r0]
    972e:	e9c5 2300 	strd	r2, r3, [r5]
    9732:	7a03      	ldrb	r3, [r0, #8]
    9734:	722b      	strb	r3, [r5, #8]
        vmbreak;
    9736:	f1b9 0f00 	cmp.w	r9, #0
    973a:	d007      	beq.n	974c <luaV_execute+0x4b8>
    973c:	4621      	mov	r1, r4
    973e:	4638      	mov	r0, r7
    9740:	f7fb fdee 	bl	5320 <luaG_traceexec>
    9744:	4681      	mov	r9, r0
    9746:	6833      	ldr	r3, [r6, #0]
    9748:	f103 0a10 	add.w	sl, r3, #16
    974c:	4621      	mov	r1, r4
    974e:	f851 bb04 	ldr.w	fp, [r1], #4
    9752:	4a86      	ldr	r2, [pc, #536]	; (996c <luaV_execute+0x6d8>)
    9754:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    9758:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    975c:	460c      	mov	r4, r1
    975e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9762:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    9766:	e5ca      	b.n	92fe <luaV_execute+0x6a>
            ? (cast_void(n = ivalue(rc)), luaV_fastgeti(L, rb, n, slot))
    9768:	2000      	movs	r0, #0
    976a:	e7c6      	b.n	96fa <luaV_execute+0x466>
      }
      vmcase(OP_GETI) {
        const TValue *slot;
        TValue *rb = vRB(i);
    976c:	f3cb 4807 	ubfx	r8, fp, #16, #8
    9770:	ea4f 1208 	mov.w	r2, r8, lsl #4
    9774:	eb0a 1808 	add.w	r8, sl, r8, lsl #4
        int c = GETARG_C(i);
        if (luaV_fastgeti(L, rb, c, slot)) {
    9778:	f898 3008 	ldrb.w	r3, [r8, #8]
        int c = GETARG_C(i);
    977c:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
        if (luaV_fastgeti(L, rb, c, slot)) {
    9780:	2b45      	cmp	r3, #69	; 0x45
    9782:	f04f 0300 	mov.w	r3, #0
    9786:	d136      	bne.n	97f6 <luaV_execute+0x562>
    9788:	f85a 0002 	ldr.w	r0, [sl, r2]
    978c:	f11b 3cff 	adds.w	ip, fp, #4294967295	; 0xffffffff
    9790:	6882      	ldr	r2, [r0, #8]
    9792:	f143 31ff 	adc.w	r1, r3, #4294967295	; 0xffffffff
    9796:	4594      	cmp	ip, r2
    9798:	f171 0200 	sbcs.w	r2, r1, #0
    979c:	d226      	bcs.n	97ec <luaV_execute+0x558>
    979e:	68c0      	ldr	r0, [r0, #12]
    97a0:	f10b 5380 	add.w	r3, fp, #268435456	; 0x10000000
    97a4:	3b01      	subs	r3, #1
    97a6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    97aa:	7a19      	ldrb	r1, [r3, #8]
    97ac:	070a      	lsls	r2, r1, #28
    97ae:	d022      	beq.n	97f6 <luaV_execute+0x562>
          setobj2s(L, ra, slot);
    97b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    97b4:	e9c5 2300 	strd	r2, r3, [r5]
    97b8:	7229      	strb	r1, [r5, #8]
        else {
          TValue key;
          setivalue(&key, c);
          Protect(luaV_finishget(L, rb, &key, ra, slot));
        }
        vmbreak;
    97ba:	f1b9 0f00 	cmp.w	r9, #0
    97be:	d007      	beq.n	97d0 <luaV_execute+0x53c>
    97c0:	4621      	mov	r1, r4
    97c2:	4638      	mov	r0, r7
    97c4:	f7fb fdac 	bl	5320 <luaG_traceexec>
    97c8:	4681      	mov	r9, r0
    97ca:	6833      	ldr	r3, [r6, #0]
    97cc:	f103 0a10 	add.w	sl, r3, #16
    97d0:	4621      	mov	r1, r4
    97d2:	f851 bb04 	ldr.w	fp, [r1], #4
    97d6:	4a65      	ldr	r2, [pc, #404]	; (996c <luaV_execute+0x6d8>)
    97d8:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    97dc:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    97e0:	460c      	mov	r4, r1
    97e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97e6:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    97ea:	e588      	b.n	92fe <luaV_execute+0x6a>
        if (luaV_fastgeti(L, rb, c, slot)) {
    97ec:	465a      	mov	r2, fp
    97ee:	f7fe fdcb 	bl	8388 <luaH_getint>
    97f2:	4603      	mov	r3, r0
    97f4:	e7d9      	b.n	97aa <luaV_execute+0x516>
          setivalue(&key, c);
    97f6:	2200      	movs	r2, #0
    97f8:	9219      	str	r2, [sp, #100]	; 0x64
    97fa:	2203      	movs	r2, #3
    97fc:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
          Protect(luaV_finishget(L, rb, &key, ra, slot));
    9800:	6872      	ldr	r2, [r6, #4]
          setivalue(&key, c);
    9802:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
          Protect(luaV_finishget(L, rb, &key, ra, slot));
    9806:	4641      	mov	r1, r8
    9808:	6134      	str	r4, [r6, #16]
    980a:	4638      	mov	r0, r7
    980c:	60fa      	str	r2, [r7, #12]
    980e:	9300      	str	r3, [sp, #0]
    9810:	aa18      	add	r2, sp, #96	; 0x60
    9812:	462b      	mov	r3, r5
    9814:	f7ff fb2e 	bl	8e74 <luaV_finishget>
    9818:	f8d6 9014 	ldr.w	r9, [r6, #20]
    981c:	e7cd      	b.n	97ba <luaV_execute+0x526>
      }
      vmcase(OP_GETFIELD) {
        const TValue *slot;
        TValue *rb = vRB(i);
    981e:	f3cb 4807 	ubfx	r8, fp, #16, #8
        TValue *rc = KC(i);
    9822:	9905      	ldr	r1, [sp, #20]
    9824:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    9828:	ea4f 120b 	mov.w	r2, fp, lsl #4
        TValue *rb = vRB(i);
    982c:	ea4f 1308 	mov.w	r3, r8, lsl #4
    9830:	eb0a 1808 	add.w	r8, sl, r8, lsl #4
        TValue *rc = KC(i);
    9834:	eb01 1b0b 	add.w	fp, r1, fp, lsl #4
        TString *key = tsvalue(rc);  /* key must be a string */
    9838:	5889      	ldr	r1, [r1, r2]
        if (luaV_fastget(L, rb, key, slot, luaH_getshortstr)) {
    983a:	f898 2008 	ldrb.w	r2, [r8, #8]
    983e:	2a45      	cmp	r2, #69	; 0x45
    9840:	d124      	bne.n	988c <luaV_execute+0x5f8>
    9842:	f85a 0003 	ldr.w	r0, [sl, r3]
    9846:	f7fe fddb 	bl	8400 <luaH_getshortstr>
    984a:	7a01      	ldrb	r1, [r0, #8]
    984c:	070b      	lsls	r3, r1, #28
    984e:	d01e      	beq.n	988e <luaV_execute+0x5fa>
          setobj2s(L, ra, slot);
    9850:	e9d0 2300 	ldrd	r2, r3, [r0]
    9854:	e9c5 2300 	strd	r2, r3, [r5]
    9858:	7229      	strb	r1, [r5, #8]
        }
        else
          Protect(luaV_finishget(L, rb, rc, ra, slot));
        vmbreak;
    985a:	f1b9 0f00 	cmp.w	r9, #0
    985e:	d007      	beq.n	9870 <luaV_execute+0x5dc>
    9860:	4621      	mov	r1, r4
    9862:	4638      	mov	r0, r7
    9864:	f7fb fd5c 	bl	5320 <luaG_traceexec>
    9868:	4681      	mov	r9, r0
    986a:	6833      	ldr	r3, [r6, #0]
    986c:	f103 0a10 	add.w	sl, r3, #16
    9870:	4621      	mov	r1, r4
    9872:	f851 bb04 	ldr.w	fp, [r1], #4
    9876:	4a3d      	ldr	r2, [pc, #244]	; (996c <luaV_execute+0x6d8>)
    9878:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    987c:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    9880:	460c      	mov	r4, r1
    9882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9886:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    988a:	e538      	b.n	92fe <luaV_execute+0x6a>
        if (luaV_fastget(L, rb, key, slot, luaH_getshortstr)) {
    988c:	2000      	movs	r0, #0
          Protect(luaV_finishget(L, rb, rc, ra, slot));
    988e:	6873      	ldr	r3, [r6, #4]
    9890:	6134      	str	r4, [r6, #16]
    9892:	465a      	mov	r2, fp
    9894:	60fb      	str	r3, [r7, #12]
    9896:	9000      	str	r0, [sp, #0]
    9898:	462b      	mov	r3, r5
    989a:	4641      	mov	r1, r8
    989c:	4638      	mov	r0, r7
    989e:	f7ff fae9 	bl	8e74 <luaV_finishget>
    98a2:	f8d6 9014 	ldr.w	r9, [r6, #20]
    98a6:	e7d8      	b.n	985a <luaV_execute+0x5c6>
      }
      vmcase(OP_SETTABUP) {
        const TValue *slot;
        TValue *upval = cl->upvals[GETARG_A(i)]->v;
    98a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    98aa:	f3cb 13c7 	ubfx	r3, fp, #7, #8
    98ae:	3304      	adds	r3, #4
    98b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        TValue *rb = KB(i);
    98b4:	9a05      	ldr	r2, [sp, #20]
        TValue *rc = RKC(i);
    98b6:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
        TValue *rb = KB(i);
    98ba:	f3cb 4807 	ubfx	r8, fp, #16, #8
    98be:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
        TValue *upval = cl->upvals[GETARG_A(i)]->v;
    98c2:	689d      	ldr	r5, [r3, #8]
        TValue *rc = RKC(i);
    98c4:	bf18      	it	ne
    98c6:	eb02 1b0b 	addne.w	fp, r2, fp, lsl #4
        TValue *rb = KB(i);
    98ca:	ea4f 1308 	mov.w	r3, r8, lsl #4
    98ce:	eb02 1808 	add.w	r8, r2, r8, lsl #4
        TString *key = tsvalue(rb);  /* key must be a string */
    98d2:	9a05      	ldr	r2, [sp, #20]
        TValue *rc = RKC(i);
    98d4:	bf08      	it	eq
    98d6:	eb0a 1b0b 	addeq.w	fp, sl, fp, lsl #4
        TString *key = tsvalue(rb);  /* key must be a string */
    98da:	58d1      	ldr	r1, [r2, r3]
        if (luaV_fastget(L, upval, key, slot, luaH_getshortstr)) {
    98dc:	7a2b      	ldrb	r3, [r5, #8]
    98de:	2b45      	cmp	r3, #69	; 0x45
    98e0:	d136      	bne.n	9950 <luaV_execute+0x6bc>
    98e2:	6828      	ldr	r0, [r5, #0]
    98e4:	f7fe fd8c 	bl	8400 <luaH_getshortstr>
    98e8:	7a03      	ldrb	r3, [r0, #8]
    98ea:	071a      	lsls	r2, r3, #28
    98ec:	d031      	beq.n	9952 <luaV_execute+0x6be>
          luaV_finishfastset(L, upval, slot, rc);
    98ee:	e9db 2300 	ldrd	r2, r3, [fp]
    98f2:	e9c0 2300 	strd	r2, r3, [r0]
    98f6:	f89b 3008 	ldrb.w	r3, [fp, #8]
    98fa:	7203      	strb	r3, [r0, #8]
    98fc:	f89b 3008 	ldrb.w	r3, [fp, #8]
    9900:	065b      	lsls	r3, r3, #25
    9902:	d50c      	bpl.n	991e <luaV_execute+0x68a>
    9904:	6829      	ldr	r1, [r5, #0]
    9906:	794b      	ldrb	r3, [r1, #5]
    9908:	0698      	lsls	r0, r3, #26
    990a:	d508      	bpl.n	991e <luaV_execute+0x68a>
    990c:	f8db 3000 	ldr.w	r3, [fp]
    9910:	795b      	ldrb	r3, [r3, #5]
    9912:	f013 0f18 	tst.w	r3, #24
    9916:	d002      	beq.n	991e <luaV_execute+0x68a>
    9918:	4638      	mov	r0, r7
    991a:	f00a fe14 	bl	14546 <luaC_barrierback_>
        }
        else
          Protect(luaV_finishset(L, upval, rb, rc, slot));
        vmbreak;
    991e:	f1b9 0f00 	cmp.w	r9, #0
    9922:	d007      	beq.n	9934 <luaV_execute+0x6a0>
    9924:	4621      	mov	r1, r4
    9926:	4638      	mov	r0, r7
    9928:	f7fb fcfa 	bl	5320 <luaG_traceexec>
    992c:	4681      	mov	r9, r0
    992e:	6833      	ldr	r3, [r6, #0]
    9930:	f103 0a10 	add.w	sl, r3, #16
    9934:	4621      	mov	r1, r4
    9936:	f851 bb04 	ldr.w	fp, [r1], #4
    993a:	4a0c      	ldr	r2, [pc, #48]	; (996c <luaV_execute+0x6d8>)
    993c:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    9940:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    9944:	460c      	mov	r4, r1
    9946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    994a:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    994e:	e4d6      	b.n	92fe <luaV_execute+0x6a>
        if (luaV_fastget(L, upval, key, slot, luaH_getshortstr)) {
    9950:	2000      	movs	r0, #0
          Protect(luaV_finishset(L, upval, rb, rc, slot));
    9952:	6873      	ldr	r3, [r6, #4]
    9954:	6134      	str	r4, [r6, #16]
    9956:	4642      	mov	r2, r8
    9958:	60fb      	str	r3, [r7, #12]
    995a:	9000      	str	r0, [sp, #0]
    995c:	465b      	mov	r3, fp
    995e:	4629      	mov	r1, r5
    9960:	4638      	mov	r0, r7
    9962:	f7ff fadb 	bl	8f1c <luaV_finishset>
    9966:	f8d6 9014 	ldr.w	r9, [r6, #20]
    996a:	e7d8      	b.n	991e <luaV_execute+0x68a>
    996c:	00017ae8 	.word	0x00017ae8
      }
      vmcase(OP_SETTABLE) {
        const TValue *slot;
        TValue *rb = vRB(i);  /* key (table is in 'ra') */
        TValue *rc = RKC(i);  /* value */
    9970:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
    9974:	bf18      	it	ne
    9976:	9b05      	ldrne	r3, [sp, #20]
        TValue *rb = vRB(i);  /* key (table is in 'ra') */
    9978:	f3cb 4807 	ubfx	r8, fp, #16, #8
    997c:	eb0a 1808 	add.w	r8, sl, r8, lsl #4
        TValue *rc = RKC(i);  /* value */
    9980:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    9984:	bf18      	it	ne
    9986:	eb03 1b0b 	addne.w	fp, r3, fp, lsl #4
        lua_Unsigned n;
        if (ttisinteger(rb)  /* fast track for integers? */
    998a:	f898 3008 	ldrb.w	r3, [r8, #8]
        TValue *rc = RKC(i);  /* value */
    998e:	bf08      	it	eq
    9990:	eb0a 1b0b 	addeq.w	fp, sl, fp, lsl #4
        if (ttisinteger(rb)  /* fast track for integers? */
    9994:	2b03      	cmp	r3, #3
            ? (cast_void(n = ivalue(rb)), luaV_fastgeti(L, s2v(ra), n, slot))
    9996:	7a29      	ldrb	r1, [r5, #8]
        if (ttisinteger(rb)  /* fast track for integers? */
    9998:	d126      	bne.n	99e8 <luaV_execute+0x754>
            ? (cast_void(n = ivalue(rb)), luaV_fastgeti(L, s2v(ra), n, slot))
    999a:	e9d8 2300 	ldrd	r2, r3, [r8]
        if (ttisinteger(rb)  /* fast track for integers? */
    999e:	2945      	cmp	r1, #69	; 0x45
    99a0:	d15a      	bne.n	9a58 <luaV_execute+0x7c4>
            ? (cast_void(n = ivalue(rb)), luaV_fastgeti(L, s2v(ra), n, slot))
    99a2:	6828      	ldr	r0, [r5, #0]
    99a4:	f112 3cff 	adds.w	ip, r2, #4294967295	; 0xffffffff
    99a8:	6881      	ldr	r1, [r0, #8]
    99aa:	f143 3eff 	adc.w	lr, r3, #4294967295	; 0xffffffff
    99ae:	458c      	cmp	ip, r1
    99b0:	f17e 0100 	sbcs.w	r1, lr, #0
    99b4:	d215      	bcs.n	99e2 <luaV_execute+0x74e>
    99b6:	68c0      	ldr	r0, [r0, #12]
    99b8:	eb00 100c 	add.w	r0, r0, ip, lsl #4
        if (ttisinteger(rb)  /* fast track for integers? */
    99bc:	7a03      	ldrb	r3, [r0, #8]
    99be:	f013 030f 	ands.w	r3, r3, #15
    99c2:	bf18      	it	ne
    99c4:	2301      	movne	r3, #1
    99c6:	b9b3      	cbnz	r3, 99f6 <luaV_execute+0x762>
            : luaV_fastget(L, s2v(ra), rb, slot, luaH_get)) {
          luaV_finishfastset(L, s2v(ra), slot, rc);
        }
        else
          Protect(luaV_finishset(L, s2v(ra), rb, rc, slot));
    99c8:	6873      	ldr	r3, [r6, #4]
    99ca:	6134      	str	r4, [r6, #16]
    99cc:	4642      	mov	r2, r8
    99ce:	60fb      	str	r3, [r7, #12]
    99d0:	9000      	str	r0, [sp, #0]
    99d2:	465b      	mov	r3, fp
    99d4:	4629      	mov	r1, r5
    99d6:	4638      	mov	r0, r7
    99d8:	f7ff faa0 	bl	8f1c <luaV_finishset>
    99dc:	f8d6 9014 	ldr.w	r9, [r6, #20]
    99e0:	e021      	b.n	9a26 <luaV_execute+0x792>
            ? (cast_void(n = ivalue(rb)), luaV_fastgeti(L, s2v(ra), n, slot))
    99e2:	f7fe fcd1 	bl	8388 <luaH_getint>
    99e6:	e7e9      	b.n	99bc <luaV_execute+0x728>
        if (ttisinteger(rb)  /* fast track for integers? */
    99e8:	2945      	cmp	r1, #69	; 0x45
    99ea:	d135      	bne.n	9a58 <luaV_execute+0x7c4>
            : luaV_fastget(L, s2v(ra), rb, slot, luaH_get)) {
    99ec:	4641      	mov	r1, r8
    99ee:	6828      	ldr	r0, [r5, #0]
    99f0:	f7fe fd1e 	bl	8430 <luaH_get>
    99f4:	e7e2      	b.n	99bc <luaV_execute+0x728>
          luaV_finishfastset(L, s2v(ra), slot, rc);
    99f6:	e9db 2300 	ldrd	r2, r3, [fp]
    99fa:	e9c0 2300 	strd	r2, r3, [r0]
    99fe:	f89b 3008 	ldrb.w	r3, [fp, #8]
    9a02:	7203      	strb	r3, [r0, #8]
    9a04:	f89b 3008 	ldrb.w	r3, [fp, #8]
    9a08:	0659      	lsls	r1, r3, #25
    9a0a:	d50c      	bpl.n	9a26 <luaV_execute+0x792>
    9a0c:	6829      	ldr	r1, [r5, #0]
    9a0e:	794b      	ldrb	r3, [r1, #5]
    9a10:	069a      	lsls	r2, r3, #26
    9a12:	d508      	bpl.n	9a26 <luaV_execute+0x792>
    9a14:	f8db 3000 	ldr.w	r3, [fp]
    9a18:	795b      	ldrb	r3, [r3, #5]
    9a1a:	f013 0f18 	tst.w	r3, #24
    9a1e:	d002      	beq.n	9a26 <luaV_execute+0x792>
    9a20:	4638      	mov	r0, r7
    9a22:	f00a fd90 	bl	14546 <luaC_barrierback_>
        vmbreak;
    9a26:	f1b9 0f00 	cmp.w	r9, #0
    9a2a:	d007      	beq.n	9a3c <luaV_execute+0x7a8>
    9a2c:	4621      	mov	r1, r4
    9a2e:	4638      	mov	r0, r7
    9a30:	f7fb fc76 	bl	5320 <luaG_traceexec>
    9a34:	4681      	mov	r9, r0
    9a36:	6833      	ldr	r3, [r6, #0]
    9a38:	f103 0a10 	add.w	sl, r3, #16
    9a3c:	4621      	mov	r1, r4
    9a3e:	f851 bb04 	ldr.w	fp, [r1], #4
    9a42:	4abe      	ldr	r2, [pc, #760]	; (9d3c <luaV_execute+0xaa8>)
    9a44:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    9a48:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    9a4c:	460c      	mov	r4, r1
    9a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a52:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    9a56:	e452      	b.n	92fe <luaV_execute+0x6a>
            ? (cast_void(n = ivalue(rb)), luaV_fastgeti(L, s2v(ra), n, slot))
    9a58:	2000      	movs	r0, #0
    9a5a:	e7b5      	b.n	99c8 <luaV_execute+0x734>
      }
      vmcase(OP_SETI) {
        const TValue *slot;
        int c = GETARG_B(i);
        TValue *rc = RKC(i);
    9a5c:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
    9a60:	bf18      	it	ne
    9a62:	9b05      	ldrne	r3, [sp, #20]
        int c = GETARG_B(i);
    9a64:	f3cb 4807 	ubfx	r8, fp, #16, #8
        TValue *rc = RKC(i);
    9a68:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    9a6c:	bf18      	it	ne
    9a6e:	eb03 1b0b 	addne.w	fp, r3, fp, lsl #4
        if (luaV_fastgeti(L, s2v(ra), c, slot)) {
    9a72:	7a2b      	ldrb	r3, [r5, #8]
        TValue *rc = RKC(i);
    9a74:	bf08      	it	eq
    9a76:	eb0a 1b0b 	addeq.w	fp, sl, fp, lsl #4
        if (luaV_fastgeti(L, s2v(ra), c, slot)) {
    9a7a:	2b45      	cmp	r3, #69	; 0x45
    9a7c:	ea4f 71e8 	mov.w	r1, r8, asr #31
    9a80:	d14c      	bne.n	9b1c <luaV_execute+0x888>
    9a82:	6828      	ldr	r0, [r5, #0]
    9a84:	f118 33ff 	adds.w	r3, r8, #4294967295	; 0xffffffff
    9a88:	f8d0 c008 	ldr.w	ip, [r0, #8]
    9a8c:	f141 32ff 	adc.w	r2, r1, #4294967295	; 0xffffffff
    9a90:	4563      	cmp	r3, ip
    9a92:	f172 0300 	sbcs.w	r3, r2, #0
    9a96:	d23a      	bcs.n	9b0e <luaV_execute+0x87a>
    9a98:	68c0      	ldr	r0, [r0, #12]
    9a9a:	f108 5380 	add.w	r3, r8, #268435456	; 0x10000000
    9a9e:	3b01      	subs	r3, #1
    9aa0:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    9aa4:	7a03      	ldrb	r3, [r0, #8]
    9aa6:	071b      	lsls	r3, r3, #28
    9aa8:	d039      	beq.n	9b1e <luaV_execute+0x88a>
          luaV_finishfastset(L, s2v(ra), slot, rc);
    9aaa:	e9db 2300 	ldrd	r2, r3, [fp]
    9aae:	e9c0 2300 	strd	r2, r3, [r0]
    9ab2:	f89b 3008 	ldrb.w	r3, [fp, #8]
    9ab6:	7203      	strb	r3, [r0, #8]
    9ab8:	f89b 3008 	ldrb.w	r3, [fp, #8]
    9abc:	0659      	lsls	r1, r3, #25
    9abe:	d50c      	bpl.n	9ada <luaV_execute+0x846>
    9ac0:	6829      	ldr	r1, [r5, #0]
    9ac2:	794b      	ldrb	r3, [r1, #5]
    9ac4:	069a      	lsls	r2, r3, #26
    9ac6:	d508      	bpl.n	9ada <luaV_execute+0x846>
    9ac8:	f8db 3000 	ldr.w	r3, [fp]
    9acc:	795b      	ldrb	r3, [r3, #5]
    9ace:	f013 0f18 	tst.w	r3, #24
    9ad2:	d002      	beq.n	9ada <luaV_execute+0x846>
    9ad4:	4638      	mov	r0, r7
    9ad6:	f00a fd36 	bl	14546 <luaC_barrierback_>
        else {
          TValue key;
          setivalue(&key, c);
          Protect(luaV_finishset(L, s2v(ra), &key, rc, slot));
        }
        vmbreak;
    9ada:	f1b9 0f00 	cmp.w	r9, #0
    9ade:	d007      	beq.n	9af0 <luaV_execute+0x85c>
    9ae0:	4621      	mov	r1, r4
    9ae2:	4638      	mov	r0, r7
    9ae4:	f7fb fc1c 	bl	5320 <luaG_traceexec>
    9ae8:	4681      	mov	r9, r0
    9aea:	6833      	ldr	r3, [r6, #0]
    9aec:	f103 0a10 	add.w	sl, r3, #16
    9af0:	4621      	mov	r1, r4
    9af2:	f851 bb04 	ldr.w	fp, [r1], #4
    9af6:	4a91      	ldr	r2, [pc, #580]	; (9d3c <luaV_execute+0xaa8>)
    9af8:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    9afc:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    9b00:	460c      	mov	r4, r1
    9b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b06:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    9b0a:	f7ff bbf8 	b.w	92fe <luaV_execute+0x6a>
        if (luaV_fastgeti(L, s2v(ra), c, slot)) {
    9b0e:	460b      	mov	r3, r1
    9b10:	4642      	mov	r2, r8
    9b12:	9106      	str	r1, [sp, #24]
    9b14:	f7fe fc38 	bl	8388 <luaH_getint>
    9b18:	9906      	ldr	r1, [sp, #24]
    9b1a:	e7c3      	b.n	9aa4 <luaV_execute+0x810>
    9b1c:	2000      	movs	r0, #0
          setivalue(&key, c);
    9b1e:	2303      	movs	r3, #3
    9b20:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
          Protect(luaV_finishset(L, s2v(ra), &key, rc, slot));
    9b24:	6873      	ldr	r3, [r6, #4]
          setivalue(&key, c);
    9b26:	e9cd 8118 	strd	r8, r1, [sp, #96]	; 0x60
          Protect(luaV_finishset(L, s2v(ra), &key, rc, slot));
    9b2a:	aa18      	add	r2, sp, #96	; 0x60
    9b2c:	6134      	str	r4, [r6, #16]
    9b2e:	4629      	mov	r1, r5
    9b30:	60fb      	str	r3, [r7, #12]
    9b32:	9000      	str	r0, [sp, #0]
    9b34:	465b      	mov	r3, fp
    9b36:	4638      	mov	r0, r7
    9b38:	f7ff f9f0 	bl	8f1c <luaV_finishset>
    9b3c:	f8d6 9014 	ldr.w	r9, [r6, #20]
    9b40:	e7cb      	b.n	9ada <luaV_execute+0x846>
      }
      vmcase(OP_SETFIELD) {
        const TValue *slot;
        TValue *rb = KB(i);
    9b42:	9a05      	ldr	r2, [sp, #20]
        TValue *rc = RKC(i);
    9b44:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
        TValue *rb = KB(i);
    9b48:	f3cb 4807 	ubfx	r8, fp, #16, #8
    9b4c:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    9b50:	ea4f 1308 	mov.w	r3, r8, lsl #4
        TValue *rc = RKC(i);
    9b54:	bf18      	it	ne
    9b56:	eb02 1b0b 	addne.w	fp, r2, fp, lsl #4
        TValue *rb = KB(i);
    9b5a:	eb02 1808 	add.w	r8, r2, r8, lsl #4
        TString *key = tsvalue(rb);  /* key must be a string */
    9b5e:	9a05      	ldr	r2, [sp, #20]
        TValue *rc = RKC(i);
    9b60:	bf08      	it	eq
    9b62:	eb0a 1b0b 	addeq.w	fp, sl, fp, lsl #4
        TString *key = tsvalue(rb);  /* key must be a string */
    9b66:	58d1      	ldr	r1, [r2, r3]
        if (luaV_fastget(L, s2v(ra), key, slot, luaH_getshortstr)) {
    9b68:	7a2b      	ldrb	r3, [r5, #8]
    9b6a:	2b45      	cmp	r3, #69	; 0x45
    9b6c:	d137      	bne.n	9bde <luaV_execute+0x94a>
    9b6e:	6828      	ldr	r0, [r5, #0]
    9b70:	f7fe fc46 	bl	8400 <luaH_getshortstr>
    9b74:	7a03      	ldrb	r3, [r0, #8]
    9b76:	071b      	lsls	r3, r3, #28
    9b78:	d032      	beq.n	9be0 <luaV_execute+0x94c>
          luaV_finishfastset(L, s2v(ra), slot, rc);
    9b7a:	e9db 2300 	ldrd	r2, r3, [fp]
    9b7e:	e9c0 2300 	strd	r2, r3, [r0]
    9b82:	f89b 3008 	ldrb.w	r3, [fp, #8]
    9b86:	7203      	strb	r3, [r0, #8]
    9b88:	f89b 3008 	ldrb.w	r3, [fp, #8]
    9b8c:	0659      	lsls	r1, r3, #25
    9b8e:	d50c      	bpl.n	9baa <luaV_execute+0x916>
    9b90:	6829      	ldr	r1, [r5, #0]
    9b92:	794b      	ldrb	r3, [r1, #5]
    9b94:	069a      	lsls	r2, r3, #26
    9b96:	d508      	bpl.n	9baa <luaV_execute+0x916>
    9b98:	f8db 3000 	ldr.w	r3, [fp]
    9b9c:	795b      	ldrb	r3, [r3, #5]
    9b9e:	f013 0f18 	tst.w	r3, #24
    9ba2:	d002      	beq.n	9baa <luaV_execute+0x916>
    9ba4:	4638      	mov	r0, r7
    9ba6:	f00a fcce 	bl	14546 <luaC_barrierback_>
        }
        else
          Protect(luaV_finishset(L, s2v(ra), rb, rc, slot));
        vmbreak;
    9baa:	f1b9 0f00 	cmp.w	r9, #0
    9bae:	d007      	beq.n	9bc0 <luaV_execute+0x92c>
    9bb0:	4621      	mov	r1, r4
    9bb2:	4638      	mov	r0, r7
    9bb4:	f7fb fbb4 	bl	5320 <luaG_traceexec>
    9bb8:	4681      	mov	r9, r0
    9bba:	6833      	ldr	r3, [r6, #0]
    9bbc:	f103 0a10 	add.w	sl, r3, #16
    9bc0:	4621      	mov	r1, r4
    9bc2:	f851 bb04 	ldr.w	fp, [r1], #4
    9bc6:	4a5d      	ldr	r2, [pc, #372]	; (9d3c <luaV_execute+0xaa8>)
    9bc8:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    9bcc:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    9bd0:	460c      	mov	r4, r1
    9bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bd6:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    9bda:	f7ff bb90 	b.w	92fe <luaV_execute+0x6a>
        if (luaV_fastget(L, s2v(ra), key, slot, luaH_getshortstr)) {
    9bde:	2000      	movs	r0, #0
          Protect(luaV_finishset(L, s2v(ra), rb, rc, slot));
    9be0:	6873      	ldr	r3, [r6, #4]
    9be2:	6134      	str	r4, [r6, #16]
    9be4:	4642      	mov	r2, r8
    9be6:	60fb      	str	r3, [r7, #12]
    9be8:	9000      	str	r0, [sp, #0]
    9bea:	465b      	mov	r3, fp
    9bec:	4629      	mov	r1, r5
    9bee:	4638      	mov	r0, r7
    9bf0:	f7ff f994 	bl	8f1c <luaV_finishset>
    9bf4:	f8d6 9014 	ldr.w	r9, [r6, #20]
    9bf8:	e7d7      	b.n	9baa <luaV_execute+0x916>
      }
      vmcase(OP_NEWTABLE) {
        int b = GETARG_B(i);  /* log2(hash size) + 1 */
        int c = GETARG_C(i);  /* array size */
        Table *t;
        if (b > 0)
    9bfa:	f41b 0f7f 	tst.w	fp, #16711680	; 0xff0000
          b = 1 << (b - 1);  /* size is 2^(b - 1) */
    9bfe:	bf18      	it	ne
    9c00:	2301      	movne	r3, #1
        int b = GETARG_B(i);  /* log2(hash size) + 1 */
    9c02:	f3cb 4807 	ubfx	r8, fp, #16, #8
          b = 1 << (b - 1);  /* size is 2^(b - 1) */
    9c06:	bf1c      	itt	ne
    9c08:	f108 31ff 	addne.w	r1, r8, #4294967295	; 0xffffffff
    9c0c:	fa03 f801 	lslne.w	r8, r3, r1
        lua_assert((!TESTARG_k(i)) == (GETARG_Ax(*pc) == 0));
        if (TESTARG_k(i))  /* non-zero extra argument? */
    9c10:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
          c += GETARG_Ax(*pc) * (MAXARG_C + 1);  /* add it to size */
    9c14:	bf18      	it	ne
    9c16:	6823      	ldrne	r3, [r4, #0]
        int c = GETARG_C(i);  /* array size */
    9c18:	ea4f 621b 	mov.w	r2, fp, lsr #24
          c += GETARG_Ax(*pc) * (MAXARG_C + 1);  /* add it to size */
    9c1c:	bf18      	it	ne
    9c1e:	09db      	lsrne	r3, r3, #7
        pc++;  /* skip extra argument */
        L->top = ra + 1;  /* correct top in case of emergency GC */
    9c20:	f105 0b10 	add.w	fp, r5, #16
          c += GETARG_Ax(*pc) * (MAXARG_C + 1);  /* add it to size */
    9c24:	bf18      	it	ne
    9c26:	eb02 2203 	addne.w	r2, r2, r3, lsl #8
        t = luaH_new(L);  /* memory allocation */
    9c2a:	4638      	mov	r0, r7
        L->top = ra + 1;  /* correct top in case of emergency GC */
    9c2c:	f8c7 b00c 	str.w	fp, [r7, #12]
    9c30:	9206      	str	r2, [sp, #24]
        t = luaH_new(L);  /* memory allocation */
    9c32:	f7fe fb97 	bl	8364 <luaH_new>
        sethvalue2s(L, ra, t);
    9c36:	2345      	movs	r3, #69	; 0x45
        if (b != 0 || c != 0)
    9c38:	9a06      	ldr	r2, [sp, #24]
        sethvalue2s(L, ra, t);
    9c3a:	722b      	strb	r3, [r5, #8]
        if (b != 0 || c != 0)
    9c3c:	ea58 0302 	orrs.w	r3, r8, r2
        t = luaH_new(L);  /* memory allocation */
    9c40:	4601      	mov	r1, r0
        pc++;  /* skip extra argument */
    9c42:	f104 0404 	add.w	r4, r4, #4
        sethvalue2s(L, ra, t);
    9c46:	6028      	str	r0, [r5, #0]
        if (b != 0 || c != 0)
    9c48:	d003      	beq.n	9c52 <luaV_execute+0x9be>
          luaH_resize(L, t, c, b);  /* idem */
    9c4a:	4643      	mov	r3, r8
    9c4c:	4638      	mov	r0, r7
    9c4e:	f7fe fc25 	bl	849c <luaH_resize>
        checkGC(L, ra + 1);
    9c52:	693b      	ldr	r3, [r7, #16]
    9c54:	68db      	ldr	r3, [r3, #12]
    9c56:	2b00      	cmp	r3, #0
    9c58:	dd07      	ble.n	9c6a <luaV_execute+0x9d6>
    9c5a:	6134      	str	r4, [r6, #16]
    9c5c:	4638      	mov	r0, r7
    9c5e:	f8c7 b00c 	str.w	fp, [r7, #12]
    9c62:	f00a fd08 	bl	14676 <luaC_step>
    9c66:	f8d6 9014 	ldr.w	r9, [r6, #20]
        vmbreak;
    9c6a:	f1b9 0f00 	cmp.w	r9, #0
    9c6e:	d007      	beq.n	9c80 <luaV_execute+0x9ec>
    9c70:	4621      	mov	r1, r4
    9c72:	4638      	mov	r0, r7
    9c74:	f7fb fb54 	bl	5320 <luaG_traceexec>
    9c78:	4681      	mov	r9, r0
    9c7a:	6833      	ldr	r3, [r6, #0]
    9c7c:	f103 0a10 	add.w	sl, r3, #16
    9c80:	f854 bb04 	ldr.w	fp, [r4], #4
    9c84:	4a2d      	ldr	r2, [pc, #180]	; (9d3c <luaV_execute+0xaa8>)
    9c86:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    9c8a:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    9c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c92:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    9c96:	f7ff bb32 	b.w	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_SELF) {
        const TValue *slot;
        TValue *rb = vRB(i);
        TValue *rc = RKC(i);
    9c9a:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
    9c9e:	bf18      	it	ne
    9ca0:	9b05      	ldrne	r3, [sp, #20]
        TValue *rb = vRB(i);
    9ca2:	f3cb 4807 	ubfx	r8, fp, #16, #8
    9ca6:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    9caa:	eb0a 1808 	add.w	r8, sl, r8, lsl #4
        TValue *rc = RKC(i);
    9cae:	bf14      	ite	ne
    9cb0:	eb03 1b0b 	addne.w	fp, r3, fp, lsl #4
    9cb4:	eb0a 1b0b 	addeq.w	fp, sl, fp, lsl #4
        TString *key = tsvalue(rc);  /* key must be a string */
        setobj2s(L, ra + 1, rb);
    9cb8:	e9d8 2300 	ldrd	r2, r3, [r8]
        TString *key = tsvalue(rc);  /* key must be a string */
    9cbc:	f8db 1000 	ldr.w	r1, [fp]
        setobj2s(L, ra + 1, rb);
    9cc0:	e9c5 2304 	strd	r2, r3, [r5, #16]
    9cc4:	f898 3008 	ldrb.w	r3, [r8, #8]
    9cc8:	762b      	strb	r3, [r5, #24]
        if (luaV_fastget(L, rb, key, slot, luaH_getstr)) {
    9cca:	f898 3008 	ldrb.w	r3, [r8, #8]
    9cce:	2b45      	cmp	r3, #69	; 0x45
    9cd0:	d125      	bne.n	9d1e <luaV_execute+0xa8a>
    9cd2:	f8d8 0000 	ldr.w	r0, [r8]
    9cd6:	f00b ffb3 	bl	15c40 <luaH_getstr>
    9cda:	7a01      	ldrb	r1, [r0, #8]
    9cdc:	070b      	lsls	r3, r1, #28
    9cde:	d01f      	beq.n	9d20 <luaV_execute+0xa8c>
          setobj2s(L, ra, slot);
    9ce0:	e9d0 2300 	ldrd	r2, r3, [r0]
    9ce4:	e9c5 2300 	strd	r2, r3, [r5]
    9ce8:	7229      	strb	r1, [r5, #8]
        }
        else
          Protect(luaV_finishget(L, rb, rc, ra, slot));
        vmbreak;
    9cea:	f1b9 0f00 	cmp.w	r9, #0
    9cee:	d007      	beq.n	9d00 <luaV_execute+0xa6c>
    9cf0:	4621      	mov	r1, r4
    9cf2:	4638      	mov	r0, r7
    9cf4:	f7fb fb14 	bl	5320 <luaG_traceexec>
    9cf8:	4681      	mov	r9, r0
    9cfa:	6833      	ldr	r3, [r6, #0]
    9cfc:	f103 0a10 	add.w	sl, r3, #16
    9d00:	4621      	mov	r1, r4
    9d02:	f851 bb04 	ldr.w	fp, [r1], #4
    9d06:	4a0d      	ldr	r2, [pc, #52]	; (9d3c <luaV_execute+0xaa8>)
    9d08:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    9d0c:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    9d10:	460c      	mov	r4, r1
    9d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d16:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    9d1a:	f7ff baf0 	b.w	92fe <luaV_execute+0x6a>
        if (luaV_fastget(L, rb, key, slot, luaH_getstr)) {
    9d1e:	2000      	movs	r0, #0
          Protect(luaV_finishget(L, rb, rc, ra, slot));
    9d20:	6873      	ldr	r3, [r6, #4]
    9d22:	6134      	str	r4, [r6, #16]
    9d24:	465a      	mov	r2, fp
    9d26:	60fb      	str	r3, [r7, #12]
    9d28:	9000      	str	r0, [sp, #0]
    9d2a:	462b      	mov	r3, r5
    9d2c:	4641      	mov	r1, r8
    9d2e:	4638      	mov	r0, r7
    9d30:	f7ff f8a0 	bl	8e74 <luaV_finishget>
    9d34:	f8d6 9014 	ldr.w	r9, [r6, #20]
    9d38:	e7d7      	b.n	9cea <luaV_execute+0xa56>
    9d3a:	bf00      	nop
    9d3c:	00017ae8 	.word	0x00017ae8
      }
      vmcase(OP_ADDI) {
        op_arithI(L, l_addi, luai_numadd);
    9d40:	f3cb 4807 	ubfx	r8, fp, #16, #8
    9d44:	ea4f 1308 	mov.w	r3, r8, lsl #4
    9d48:	eb0a 1808 	add.w	r8, sl, r8, lsl #4
    9d4c:	ea4f 601b 	mov.w	r0, fp, lsr #24
    9d50:	f898 b008 	ldrb.w	fp, [r8, #8]
    9d54:	1d22      	adds	r2, r4, #4
    9d56:	f1bb 0f03 	cmp.w	fp, #3
    9d5a:	f1a0 007f 	sub.w	r0, r0, #127	; 0x7f
    9d5e:	9206      	str	r2, [sp, #24]
    9d60:	d125      	bne.n	9dae <luaV_execute+0xb1a>
    9d62:	f85a 3003 	ldr.w	r3, [sl, r3]
    9d66:	4614      	mov	r4, r2
    9d68:	f8d8 2004 	ldr.w	r2, [r8, #4]
    9d6c:	181b      	adds	r3, r3, r0
    9d6e:	eb42 70e0 	adc.w	r0, r2, r0, asr #31
    9d72:	e9c5 3000 	strd	r3, r0, [r5]
    9d76:	f885 b008 	strb.w	fp, [r5, #8]
        vmbreak;
    9d7a:	f1b9 0f00 	cmp.w	r9, #0
    9d7e:	d007      	beq.n	9d90 <luaV_execute+0xafc>
    9d80:	4621      	mov	r1, r4
    9d82:	4638      	mov	r0, r7
    9d84:	f7fb facc 	bl	5320 <luaG_traceexec>
    9d88:	4681      	mov	r9, r0
    9d8a:	6833      	ldr	r3, [r6, #0]
    9d8c:	f103 0a10 	add.w	sl, r3, #16
    9d90:	4621      	mov	r1, r4
    9d92:	f851 bb04 	ldr.w	fp, [r1], #4
    9d96:	4ab5      	ldr	r2, [pc, #724]	; (a06c <luaV_execute+0xdd8>)
    9d98:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    9d9c:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    9da0:	460c      	mov	r4, r1
    9da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9da6:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    9daa:	f7ff baa8 	b.w	92fe <luaV_execute+0x6a>
        op_arithI(L, l_addi, luai_numadd);
    9dae:	f1bb 0f13 	cmp.w	fp, #19
    9db2:	d1e2      	bne.n	9d7a <luaV_execute+0xae6>
    9db4:	f7f6 faee 	bl	394 <__aeabi_i2d>
    9db8:	4602      	mov	r2, r0
    9dba:	460b      	mov	r3, r1
    9dbc:	e9d8 0100 	ldrd	r0, r1, [r8]
    9dc0:	f7f6 f99c 	bl	fc <__adddf3>
    9dc4:	9c06      	ldr	r4, [sp, #24]
    9dc6:	e9c5 0100 	strd	r0, r1, [r5]
    9dca:	f885 b008 	strb.w	fp, [r5, #8]
    9dce:	e7d4      	b.n	9d7a <luaV_execute+0xae6>
      }
      vmcase(OP_ADDK) {
        op_arithK(L, l_addi, luai_numadd);
    9dd0:	f3cb 4c07 	ubfx	ip, fp, #16, #8
    9dd4:	9b05      	ldr	r3, [sp, #20]
    9dd6:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    9dda:	ea4f 120c 	mov.w	r2, ip, lsl #4
    9dde:	eb0a 1c0c 	add.w	ip, sl, ip, lsl #4
    9de2:	ea4f 1e0b 	mov.w	lr, fp, lsl #4
    9de6:	eb03 1b0b 	add.w	fp, r3, fp, lsl #4
    9dea:	f89c 3008 	ldrb.w	r3, [ip, #8]
    9dee:	f104 0804 	add.w	r8, r4, #4
    9df2:	2b03      	cmp	r3, #3
    9df4:	f042 8075 	bne.w	bee2 <luaV_execute+0x2c4e>
        setobjs2s(L, ra, RB(i));
    9df8:	f8dc 1004 	ldr.w	r1, [ip, #4]
        op_arithK(L, l_addi, luai_numadd);
    9dfc:	f89b c008 	ldrb.w	ip, [fp, #8]
        setobjs2s(L, ra, RB(i));
    9e00:	f85a 0002 	ldr.w	r0, [sl, r2]
        op_arithK(L, l_addi, luai_numadd);
    9e04:	f1bc 0f03 	cmp.w	ip, #3
    9e08:	d126      	bne.n	9e58 <luaV_execute+0xbc4>
    9e0a:	4644      	mov	r4, r8
    9e0c:	9b05      	ldr	r3, [sp, #20]
    9e0e:	f8db 2004 	ldr.w	r2, [fp, #4]
    9e12:	f853 300e 	ldr.w	r3, [r3, lr]
    9e16:	f885 c008 	strb.w	ip, [r5, #8]
    9e1a:	181b      	adds	r3, r3, r0
    9e1c:	eb41 0102 	adc.w	r1, r1, r2
    9e20:	e9c5 3100 	strd	r3, r1, [r5]
        vmbreak;
    9e24:	f1b9 0f00 	cmp.w	r9, #0
    9e28:	d007      	beq.n	9e3a <luaV_execute+0xba6>
    9e2a:	4621      	mov	r1, r4
    9e2c:	4638      	mov	r0, r7
    9e2e:	f7fb fa77 	bl	5320 <luaG_traceexec>
    9e32:	4681      	mov	r9, r0
    9e34:	6833      	ldr	r3, [r6, #0]
    9e36:	f103 0a10 	add.w	sl, r3, #16
    9e3a:	4621      	mov	r1, r4
    9e3c:	f851 bb04 	ldr.w	fp, [r1], #4
    9e40:	4a8a      	ldr	r2, [pc, #552]	; (a06c <luaV_execute+0xdd8>)
    9e42:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    9e46:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    9e4a:	460c      	mov	r4, r1
    9e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e50:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    9e54:	f7ff ba53 	b.w	92fe <luaV_execute+0x6a>
        op_arithK(L, l_addi, luai_numadd);
    9e58:	f7f6 fad8 	bl	40c <__aeabi_l2d>
    9e5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    9e60:	f002 b846 	b.w	bef0 <luaV_execute+0x2c5c>
    9e64:	2b03      	cmp	r3, #3
    9e66:	d1dd      	bne.n	9e24 <luaV_execute+0xb90>
    9e68:	e9db 0100 	ldrd	r0, r1, [fp]
    9e6c:	f7f6 face 	bl	40c <__aeabi_l2d>
    9e70:	4602      	mov	r2, r0
    9e72:	460b      	mov	r3, r1
    9e74:	f002 b843 	b.w	befe <luaV_execute+0x2c6a>
      }
      vmcase(OP_SUBK) {
        op_arithK(L, l_subi, luai_numsub);
    9e78:	f3cb 4c07 	ubfx	ip, fp, #16, #8
    9e7c:	9b05      	ldr	r3, [sp, #20]
    9e7e:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    9e82:	ea4f 120c 	mov.w	r2, ip, lsl #4
    9e86:	eb0a 1c0c 	add.w	ip, sl, ip, lsl #4
    9e8a:	ea4f 1e0b 	mov.w	lr, fp, lsl #4
    9e8e:	eb03 1b0b 	add.w	fp, r3, fp, lsl #4
    9e92:	f89c 3008 	ldrb.w	r3, [ip, #8]
    9e96:	f104 0804 	add.w	r8, r4, #4
    9e9a:	2b03      	cmp	r3, #3
    9e9c:	f042 803c 	bne.w	bf18 <luaV_execute+0x2c84>
        setobjs2s(L, ra, RB(i));
    9ea0:	f8dc 1004 	ldr.w	r1, [ip, #4]
        op_arithK(L, l_subi, luai_numsub);
    9ea4:	f89b c008 	ldrb.w	ip, [fp, #8]
        setobjs2s(L, ra, RB(i));
    9ea8:	f85a 0002 	ldr.w	r0, [sl, r2]
        op_arithK(L, l_subi, luai_numsub);
    9eac:	f1bc 0f03 	cmp.w	ip, #3
    9eb0:	d126      	bne.n	9f00 <luaV_execute+0xc6c>
    9eb2:	4644      	mov	r4, r8
    9eb4:	9b05      	ldr	r3, [sp, #20]
    9eb6:	f8db 2004 	ldr.w	r2, [fp, #4]
    9eba:	f853 300e 	ldr.w	r3, [r3, lr]
    9ebe:	f885 c008 	strb.w	ip, [r5, #8]
    9ec2:	1ac3      	subs	r3, r0, r3
    9ec4:	eb61 0102 	sbc.w	r1, r1, r2
    9ec8:	e9c5 3100 	strd	r3, r1, [r5]
        vmbreak;
    9ecc:	f1b9 0f00 	cmp.w	r9, #0
    9ed0:	d007      	beq.n	9ee2 <luaV_execute+0xc4e>
    9ed2:	4621      	mov	r1, r4
    9ed4:	4638      	mov	r0, r7
    9ed6:	f7fb fa23 	bl	5320 <luaG_traceexec>
    9eda:	4681      	mov	r9, r0
    9edc:	6833      	ldr	r3, [r6, #0]
    9ede:	f103 0a10 	add.w	sl, r3, #16
    9ee2:	4621      	mov	r1, r4
    9ee4:	f851 bb04 	ldr.w	fp, [r1], #4
    9ee8:	4a60      	ldr	r2, [pc, #384]	; (a06c <luaV_execute+0xdd8>)
    9eea:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    9eee:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    9ef2:	460c      	mov	r4, r1
    9ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ef8:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    9efc:	f7ff b9ff 	b.w	92fe <luaV_execute+0x6a>
        op_arithK(L, l_subi, luai_numsub);
    9f00:	f7f6 fa84 	bl	40c <__aeabi_l2d>
    9f04:	e9cd 0106 	strd	r0, r1, [sp, #24]
    9f08:	f002 b80d 	b.w	bf26 <luaV_execute+0x2c92>
    9f0c:	2b03      	cmp	r3, #3
    9f0e:	d1dd      	bne.n	9ecc <luaV_execute+0xc38>
    9f10:	e9db 0100 	ldrd	r0, r1, [fp]
    9f14:	f7f6 fa7a 	bl	40c <__aeabi_l2d>
    9f18:	4602      	mov	r2, r0
    9f1a:	460b      	mov	r3, r1
    9f1c:	f002 b80a 	b.w	bf34 <luaV_execute+0x2ca0>
      }
      vmcase(OP_MULK) {
        op_arithK(L, l_muli, luai_nummul);
    9f20:	f3cb 4e07 	ubfx	lr, fp, #16, #8
    9f24:	9b05      	ldr	r3, [sp, #20]
    9f26:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    9f2a:	ea4f 120e 	mov.w	r2, lr, lsl #4
    9f2e:	eb0a 1e0e 	add.w	lr, sl, lr, lsl #4
    9f32:	ea4f 1c0b 	mov.w	ip, fp, lsl #4
    9f36:	eb03 1b0b 	add.w	fp, r3, fp, lsl #4
    9f3a:	f89e 3008 	ldrb.w	r3, [lr, #8]
    9f3e:	f104 0804 	add.w	r8, r4, #4
    9f42:	2b03      	cmp	r3, #3
    9f44:	f042 8001 	bne.w	bf4a <luaV_execute+0x2cb6>
    9f48:	f89b 3008 	ldrb.w	r3, [fp, #8]
        setobjs2s(L, ra, RB(i));
    9f4c:	f85a 0002 	ldr.w	r0, [sl, r2]
        op_arithK(L, l_muli, luai_nummul);
    9f50:	2b03      	cmp	r3, #3
        setobjs2s(L, ra, RB(i));
    9f52:	f8de 1004 	ldr.w	r1, [lr, #4]
        op_arithK(L, l_muli, luai_nummul);
    9f56:	d128      	bne.n	9faa <luaV_execute+0xd16>
    9f58:	9a05      	ldr	r2, [sp, #20]
    9f5a:	f8db 4004 	ldr.w	r4, [fp, #4]
    9f5e:	f852 200c 	ldr.w	r2, [r2, ip]
    9f62:	722b      	strb	r3, [r5, #8]
    9f64:	4351      	muls	r1, r2
    9f66:	fb00 1104 	mla	r1, r0, r4, r1
    9f6a:	4644      	mov	r4, r8
    9f6c:	fba2 0200 	umull	r0, r2, r2, r0
    9f70:	4411      	add	r1, r2
    9f72:	e9c5 0100 	strd	r0, r1, [r5]
        vmbreak;
    9f76:	f1b9 0f00 	cmp.w	r9, #0
    9f7a:	d007      	beq.n	9f8c <luaV_execute+0xcf8>
    9f7c:	4621      	mov	r1, r4
    9f7e:	4638      	mov	r0, r7
    9f80:	f7fb f9ce 	bl	5320 <luaG_traceexec>
    9f84:	4681      	mov	r9, r0
    9f86:	6833      	ldr	r3, [r6, #0]
    9f88:	f103 0a10 	add.w	sl, r3, #16
    9f8c:	4621      	mov	r1, r4
    9f8e:	f851 bb04 	ldr.w	fp, [r1], #4
    9f92:	4a36      	ldr	r2, [pc, #216]	; (a06c <luaV_execute+0xdd8>)
    9f94:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    9f98:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    9f9c:	460c      	mov	r4, r1
    9f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fa2:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    9fa6:	f7ff b9aa 	b.w	92fe <luaV_execute+0x6a>
        op_arithK(L, l_muli, luai_nummul);
    9faa:	f7f6 fa2f 	bl	40c <__aeabi_l2d>
    9fae:	e9cd 0106 	strd	r0, r1, [sp, #24]
    9fb2:	f001 bfd1 	b.w	bf58 <luaV_execute+0x2cc4>
    9fb6:	2b03      	cmp	r3, #3
    9fb8:	d1dd      	bne.n	9f76 <luaV_execute+0xce2>
    9fba:	e9db 0100 	ldrd	r0, r1, [fp]
    9fbe:	f7f6 fa25 	bl	40c <__aeabi_l2d>
    9fc2:	4602      	mov	r2, r0
    9fc4:	460b      	mov	r3, r1
    9fc6:	f001 bfce 	b.w	bf66 <luaV_execute+0x2cd2>
      }
      vmcase(OP_MODK) {
        op_arithK(L, luaV_mod, luaV_modf);
    9fca:	9b05      	ldr	r3, [sp, #20]
    9fcc:	f3cb 4c07 	ubfx	ip, fp, #16, #8
    9fd0:	eb0a 1c0c 	add.w	ip, sl, ip, lsl #4
    9fd4:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    9fd8:	eb03 1b0b 	add.w	fp, r3, fp, lsl #4
    9fdc:	f89c 3008 	ldrb.w	r3, [ip, #8]
    9fe0:	f104 0804 	add.w	r8, r4, #4
    9fe4:	2b03      	cmp	r3, #3
    9fe6:	f041 87c9 	bne.w	bf7c <luaV_execute+0x2ce8>
        setobjs2s(L, ra, RB(i));
    9fea:	e9dc 2300 	ldrd	r2, r3, [ip]
        op_arithK(L, luaV_mod, luaV_modf);
    9fee:	f89b 1008 	ldrb.w	r1, [fp, #8]
    9ff2:	2903      	cmp	r1, #3
    9ff4:	9106      	str	r1, [sp, #24]
    9ff6:	d125      	bne.n	a044 <luaV_execute+0xdb0>
    9ff8:	e9db 0100 	ldrd	r0, r1, [fp]
    9ffc:	e9cd 0100 	strd	r0, r1, [sp]
    a000:	4638      	mov	r0, r7
    a002:	f7ff f91f 	bl	9244 <luaV_mod>
    a006:	4644      	mov	r4, r8
    a008:	9b06      	ldr	r3, [sp, #24]
    a00a:	e9c5 0100 	strd	r0, r1, [r5]
    a00e:	722b      	strb	r3, [r5, #8]
        vmbreak;
    a010:	f1b9 0f00 	cmp.w	r9, #0
    a014:	d007      	beq.n	a026 <luaV_execute+0xd92>
    a016:	4621      	mov	r1, r4
    a018:	4638      	mov	r0, r7
    a01a:	f7fb f981 	bl	5320 <luaG_traceexec>
    a01e:	4681      	mov	r9, r0
    a020:	6833      	ldr	r3, [r6, #0]
    a022:	f103 0a10 	add.w	sl, r3, #16
    a026:	4621      	mov	r1, r4
    a028:	f851 bb04 	ldr.w	fp, [r1], #4
    a02c:	4a0f      	ldr	r2, [pc, #60]	; (a06c <luaV_execute+0xdd8>)
    a02e:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    a032:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    a036:	460c      	mov	r4, r1
    a038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a03c:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    a040:	f7ff b95d 	b.w	92fe <luaV_execute+0x6a>
        op_arithK(L, luaV_mod, luaV_modf);
    a044:	4610      	mov	r0, r2
    a046:	4619      	mov	r1, r3
    a048:	f7f6 f9e0 	bl	40c <__aeabi_l2d>
    a04c:	4602      	mov	r2, r0
    a04e:	460b      	mov	r3, r1
    a050:	f001 bf99 	b.w	bf86 <luaV_execute+0x2cf2>
    a054:	2903      	cmp	r1, #3
    a056:	d1db      	bne.n	a010 <luaV_execute+0xd7c>
    a058:	e9db 0100 	ldrd	r0, r1, [fp]
    a05c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a060:	f7f6 f9d4 	bl	40c <__aeabi_l2d>
    a064:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a068:	f001 bf94 	b.w	bf94 <luaV_execute+0x2d00>
    a06c:	00017ae8 	.word	0x00017ae8
      }
      vmcase(OP_POWK) {
        op_arithfK(L, luai_numpow);
    a070:	f3cb 4107 	ubfx	r1, fp, #16, #8
    a074:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
    a078:	7a0b      	ldrb	r3, [r1, #8]
    a07a:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    a07e:	2b13      	cmp	r3, #19
    a080:	d13c      	bne.n	a0fc <luaV_execute+0xe68>
    a082:	e9d1 2300 	ldrd	r2, r3, [r1]
    a086:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a08a:	9b05      	ldr	r3, [sp, #20]
    a08c:	eb03 1b0b 	add.w	fp, r3, fp, lsl #4
    a090:	f89b 3008 	ldrb.w	r3, [fp, #8]
    a094:	2b13      	cmp	r3, #19
    a096:	d13a      	bne.n	a10e <luaV_execute+0xe7a>
    a098:	e9db 2300 	ldrd	r2, r3, [fp]
    a09c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    a0a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    a0a4:	2200      	movs	r2, #0
    a0a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a0aa:	3404      	adds	r4, #4
    a0ac:	f7f6 fc44 	bl	938 <__aeabi_dcmpeq>
    a0b0:	2800      	cmp	r0, #0
    a0b2:	d035      	beq.n	a120 <luaV_execute+0xe8c>
    a0b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a0b8:	4610      	mov	r0, r2
    a0ba:	4619      	mov	r1, r3
    a0bc:	f7f6 f9d4 	bl	468 <__aeabi_dmul>
    a0c0:	2313      	movs	r3, #19
    a0c2:	e9c5 0100 	strd	r0, r1, [r5]
    a0c6:	722b      	strb	r3, [r5, #8]
        vmbreak;
    a0c8:	f1b9 0f00 	cmp.w	r9, #0
    a0cc:	d007      	beq.n	a0de <luaV_execute+0xe4a>
    a0ce:	4621      	mov	r1, r4
    a0d0:	4638      	mov	r0, r7
    a0d2:	f7fb f925 	bl	5320 <luaG_traceexec>
    a0d6:	4681      	mov	r9, r0
    a0d8:	6833      	ldr	r3, [r6, #0]
    a0da:	f103 0a10 	add.w	sl, r3, #16
    a0de:	4621      	mov	r1, r4
    a0e0:	f851 bb04 	ldr.w	fp, [r1], #4
    a0e4:	4ab2      	ldr	r2, [pc, #712]	; (a3b0 <luaV_execute+0x111c>)
    a0e6:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    a0ea:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    a0ee:	460c      	mov	r4, r1
    a0f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0f4:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    a0f8:	f7ff b901 	b.w	92fe <luaV_execute+0x6a>
        op_arithfK(L, luai_numpow);
    a0fc:	2b03      	cmp	r3, #3
    a0fe:	d1e3      	bne.n	a0c8 <luaV_execute+0xe34>
    a100:	e9d1 0100 	ldrd	r0, r1, [r1]
    a104:	f7f6 f982 	bl	40c <__aeabi_l2d>
    a108:	e9cd 0106 	strd	r0, r1, [sp, #24]
    a10c:	e7bd      	b.n	a08a <luaV_execute+0xdf6>
    a10e:	2b03      	cmp	r3, #3
    a110:	d1da      	bne.n	a0c8 <luaV_execute+0xe34>
    a112:	e9db 0100 	ldrd	r0, r1, [fp]
    a116:	f7f6 f979 	bl	40c <__aeabi_l2d>
    a11a:	e9cd 0108 	strd	r0, r1, [sp, #32]
    a11e:	e7bf      	b.n	a0a0 <luaV_execute+0xe0c>
    a120:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a124:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    a128:	f002 fe4c 	bl	cdc4 <pow>
    a12c:	e7c8      	b.n	a0c0 <luaV_execute+0xe2c>
      }
      vmcase(OP_DIVK) {
        op_arithfK(L, luai_numdiv);
    a12e:	f3cb 4107 	ubfx	r1, fp, #16, #8
    a132:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
    a136:	7a0b      	ldrb	r3, [r1, #8]
    a138:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    a13c:	2b13      	cmp	r3, #19
    a13e:	d12f      	bne.n	a1a0 <luaV_execute+0xf0c>
    a140:	e9d1 2300 	ldrd	r2, r3, [r1]
    a144:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a148:	9b05      	ldr	r3, [sp, #20]
    a14a:	eb03 1b0b 	add.w	fp, r3, fp, lsl #4
    a14e:	f89b 3008 	ldrb.w	r3, [fp, #8]
    a152:	2b13      	cmp	r3, #19
    a154:	d12d      	bne.n	a1b2 <luaV_execute+0xf1e>
    a156:	e9db 2300 	ldrd	r2, r3, [fp]
    a15a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    a15e:	f7f6 faad 	bl	6bc <__aeabi_ddiv>
    a162:	2313      	movs	r3, #19
    a164:	e9c5 0100 	strd	r0, r1, [r5]
    a168:	3404      	adds	r4, #4
    a16a:	722b      	strb	r3, [r5, #8]
        vmbreak;
    a16c:	f1b9 0f00 	cmp.w	r9, #0
    a170:	d007      	beq.n	a182 <luaV_execute+0xeee>
    a172:	4621      	mov	r1, r4
    a174:	4638      	mov	r0, r7
    a176:	f7fb f8d3 	bl	5320 <luaG_traceexec>
    a17a:	4681      	mov	r9, r0
    a17c:	6833      	ldr	r3, [r6, #0]
    a17e:	f103 0a10 	add.w	sl, r3, #16
    a182:	4621      	mov	r1, r4
    a184:	f851 bb04 	ldr.w	fp, [r1], #4
    a188:	4a89      	ldr	r2, [pc, #548]	; (a3b0 <luaV_execute+0x111c>)
    a18a:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    a18e:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    a192:	460c      	mov	r4, r1
    a194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a198:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    a19c:	f7ff b8af 	b.w	92fe <luaV_execute+0x6a>
        op_arithfK(L, luai_numdiv);
    a1a0:	2b03      	cmp	r3, #3
    a1a2:	d1e3      	bne.n	a16c <luaV_execute+0xed8>
    a1a4:	e9d1 0100 	ldrd	r0, r1, [r1]
    a1a8:	f7f6 f930 	bl	40c <__aeabi_l2d>
    a1ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
    a1b0:	e7ca      	b.n	a148 <luaV_execute+0xeb4>
    a1b2:	2b03      	cmp	r3, #3
    a1b4:	d1da      	bne.n	a16c <luaV_execute+0xed8>
    a1b6:	e9db 0100 	ldrd	r0, r1, [fp]
    a1ba:	f7f6 f927 	bl	40c <__aeabi_l2d>
    a1be:	4602      	mov	r2, r0
    a1c0:	460b      	mov	r3, r1
    a1c2:	e7ca      	b.n	a15a <luaV_execute+0xec6>
      }
      vmcase(OP_IDIVK) {
        op_arithK(L, luaV_idiv, luai_numidiv);
    a1c4:	9b05      	ldr	r3, [sp, #20]
    a1c6:	f3cb 4c07 	ubfx	ip, fp, #16, #8
    a1ca:	eb0a 1c0c 	add.w	ip, sl, ip, lsl #4
    a1ce:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    a1d2:	eb03 1b0b 	add.w	fp, r3, fp, lsl #4
    a1d6:	f89c 3008 	ldrb.w	r3, [ip, #8]
    a1da:	f104 0804 	add.w	r8, r4, #4
    a1de:	2b03      	cmp	r3, #3
    a1e0:	f041 86e4 	bne.w	bfac <luaV_execute+0x2d18>
        setobjs2s(L, ra, RB(i));
    a1e4:	e9dc 2300 	ldrd	r2, r3, [ip]
        op_arithK(L, luaV_idiv, luai_numidiv);
    a1e8:	f89b 1008 	ldrb.w	r1, [fp, #8]
    a1ec:	2903      	cmp	r1, #3
    a1ee:	9106      	str	r1, [sp, #24]
    a1f0:	d125      	bne.n	a23e <luaV_execute+0xfaa>
    a1f2:	e9db 0100 	ldrd	r0, r1, [fp]
    a1f6:	e9cd 0100 	strd	r0, r1, [sp]
    a1fa:	4638      	mov	r0, r7
    a1fc:	f7fe fffa 	bl	91f4 <luaV_idiv>
    a200:	4644      	mov	r4, r8
    a202:	9b06      	ldr	r3, [sp, #24]
    a204:	e9c5 0100 	strd	r0, r1, [r5]
    a208:	722b      	strb	r3, [r5, #8]
        vmbreak;
    a20a:	f1b9 0f00 	cmp.w	r9, #0
    a20e:	d007      	beq.n	a220 <luaV_execute+0xf8c>
    a210:	4621      	mov	r1, r4
    a212:	4638      	mov	r0, r7
    a214:	f7fb f884 	bl	5320 <luaG_traceexec>
    a218:	4681      	mov	r9, r0
    a21a:	6833      	ldr	r3, [r6, #0]
    a21c:	f103 0a10 	add.w	sl, r3, #16
    a220:	4621      	mov	r1, r4
    a222:	f851 bb04 	ldr.w	fp, [r1], #4
    a226:	4a62      	ldr	r2, [pc, #392]	; (a3b0 <luaV_execute+0x111c>)
    a228:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    a22c:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    a230:	460c      	mov	r4, r1
    a232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a236:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    a23a:	f7ff b860 	b.w	92fe <luaV_execute+0x6a>
        op_arithK(L, luaV_idiv, luai_numidiv);
    a23e:	4610      	mov	r0, r2
    a240:	4619      	mov	r1, r3
    a242:	f7f6 f8e3 	bl	40c <__aeabi_l2d>
    a246:	e9cd 0106 	strd	r0, r1, [sp, #24]
    a24a:	f001 beb6 	b.w	bfba <luaV_execute+0x2d26>
    a24e:	2b03      	cmp	r3, #3
    a250:	d1db      	bne.n	a20a <luaV_execute+0xf76>
    a252:	e9db 0100 	ldrd	r0, r1, [fp]
    a256:	f7f6 f8d9 	bl	40c <__aeabi_l2d>
    a25a:	4602      	mov	r2, r0
    a25c:	460b      	mov	r3, r1
    a25e:	f001 beb3 	b.w	bfc8 <luaV_execute+0x2d34>
      }
      vmcase(OP_BANDK) {
        op_bitwiseK(L, l_band);
    a262:	9a05      	ldr	r2, [sp, #20]
    a264:	f3cb 4007 	ubfx	r0, fp, #16, #8
    a268:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    a26c:	ea4f 130b 	mov.w	r3, fp, lsl #4
    a270:	58d3      	ldr	r3, [r2, r3]
    a272:	eb0a 1000 	add.w	r0, sl, r0, lsl #4
    a276:	9306      	str	r3, [sp, #24]
    a278:	7a03      	ldrb	r3, [r0, #8]
    a27a:	eb02 1b0b 	add.w	fp, r2, fp, lsl #4
    a27e:	2b03      	cmp	r3, #3
    a280:	f8db 8004 	ldr.w	r8, [fp, #4]
    a284:	d10f      	bne.n	a2a6 <luaV_execute+0x1012>
    a286:	e9d0 2300 	ldrd	r2, r3, [r0]
    a28a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    a28e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a290:	9a06      	ldr	r2, [sp, #24]
    a292:	3404      	adds	r4, #4
    a294:	401a      	ands	r2, r3
    a296:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a298:	ea03 0308 	and.w	r3, r3, r8
    a29c:	e9c5 2300 	strd	r2, r3, [r5]
    a2a0:	2303      	movs	r3, #3
    a2a2:	722b      	strb	r3, [r5, #8]
    a2a4:	e005      	b.n	a2b2 <luaV_execute+0x101e>
    a2a6:	2200      	movs	r2, #0
    a2a8:	a918      	add	r1, sp, #96	; 0x60
    a2aa:	f00c f991 	bl	165d0 <luaV_tointegerns>
    a2ae:	2800      	cmp	r0, #0
    a2b0:	d1ed      	bne.n	a28e <luaV_execute+0xffa>
        vmbreak;
    a2b2:	f1b9 0f00 	cmp.w	r9, #0
    a2b6:	d007      	beq.n	a2c8 <luaV_execute+0x1034>
    a2b8:	4621      	mov	r1, r4
    a2ba:	4638      	mov	r0, r7
    a2bc:	f7fb f830 	bl	5320 <luaG_traceexec>
    a2c0:	4681      	mov	r9, r0
    a2c2:	6833      	ldr	r3, [r6, #0]
    a2c4:	f103 0a10 	add.w	sl, r3, #16
    a2c8:	4621      	mov	r1, r4
    a2ca:	f851 bb04 	ldr.w	fp, [r1], #4
    a2ce:	4a38      	ldr	r2, [pc, #224]	; (a3b0 <luaV_execute+0x111c>)
    a2d0:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    a2d4:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    a2d8:	460c      	mov	r4, r1
    a2da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2de:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    a2e2:	f7ff b80c 	b.w	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_BORK) {
        op_bitwiseK(L, l_bor);
    a2e6:	9a05      	ldr	r2, [sp, #20]
    a2e8:	f3cb 4007 	ubfx	r0, fp, #16, #8
    a2ec:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    a2f0:	ea4f 130b 	mov.w	r3, fp, lsl #4
    a2f4:	58d3      	ldr	r3, [r2, r3]
    a2f6:	eb0a 1000 	add.w	r0, sl, r0, lsl #4
    a2fa:	9306      	str	r3, [sp, #24]
    a2fc:	7a03      	ldrb	r3, [r0, #8]
    a2fe:	eb02 1b0b 	add.w	fp, r2, fp, lsl #4
    a302:	2b03      	cmp	r3, #3
    a304:	f8db 8004 	ldr.w	r8, [fp, #4]
    a308:	d10f      	bne.n	a32a <luaV_execute+0x1096>
    a30a:	e9d0 2300 	ldrd	r2, r3, [r0]
    a30e:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    a312:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a314:	9a06      	ldr	r2, [sp, #24]
    a316:	3404      	adds	r4, #4
    a318:	431a      	orrs	r2, r3
    a31a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a31c:	ea43 0308 	orr.w	r3, r3, r8
    a320:	e9c5 2300 	strd	r2, r3, [r5]
    a324:	2303      	movs	r3, #3
    a326:	722b      	strb	r3, [r5, #8]
    a328:	e005      	b.n	a336 <luaV_execute+0x10a2>
    a32a:	2200      	movs	r2, #0
    a32c:	a918      	add	r1, sp, #96	; 0x60
    a32e:	f00c f94f 	bl	165d0 <luaV_tointegerns>
    a332:	2800      	cmp	r0, #0
    a334:	d1ed      	bne.n	a312 <luaV_execute+0x107e>
        vmbreak;
    a336:	f1b9 0f00 	cmp.w	r9, #0
    a33a:	d007      	beq.n	a34c <luaV_execute+0x10b8>
    a33c:	4621      	mov	r1, r4
    a33e:	4638      	mov	r0, r7
    a340:	f7fa ffee 	bl	5320 <luaG_traceexec>
    a344:	4681      	mov	r9, r0
    a346:	6833      	ldr	r3, [r6, #0]
    a348:	f103 0a10 	add.w	sl, r3, #16
    a34c:	4621      	mov	r1, r4
    a34e:	f851 bb04 	ldr.w	fp, [r1], #4
    a352:	4a17      	ldr	r2, [pc, #92]	; (a3b0 <luaV_execute+0x111c>)
    a354:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    a358:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    a35c:	460c      	mov	r4, r1
    a35e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a362:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    a366:	f7fe bfca 	b.w	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_BXORK) {
        op_bitwiseK(L, l_bxor);
    a36a:	9a05      	ldr	r2, [sp, #20]
    a36c:	f3cb 4007 	ubfx	r0, fp, #16, #8
    a370:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    a374:	ea4f 130b 	mov.w	r3, fp, lsl #4
    a378:	58d3      	ldr	r3, [r2, r3]
    a37a:	eb0a 1000 	add.w	r0, sl, r0, lsl #4
    a37e:	9306      	str	r3, [sp, #24]
    a380:	7a03      	ldrb	r3, [r0, #8]
    a382:	eb02 1b0b 	add.w	fp, r2, fp, lsl #4
    a386:	2b03      	cmp	r3, #3
    a388:	f8db 8004 	ldr.w	r8, [fp, #4]
    a38c:	d112      	bne.n	a3b4 <luaV_execute+0x1120>
    a38e:	e9d0 2300 	ldrd	r2, r3, [r0]
    a392:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    a396:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a398:	9a06      	ldr	r2, [sp, #24]
    a39a:	3404      	adds	r4, #4
    a39c:	405a      	eors	r2, r3
    a39e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a3a0:	ea83 0308 	eor.w	r3, r3, r8
    a3a4:	e9c5 2300 	strd	r2, r3, [r5]
    a3a8:	2303      	movs	r3, #3
    a3aa:	722b      	strb	r3, [r5, #8]
    a3ac:	e008      	b.n	a3c0 <luaV_execute+0x112c>
    a3ae:	bf00      	nop
    a3b0:	00017ae8 	.word	0x00017ae8
    a3b4:	2200      	movs	r2, #0
    a3b6:	a918      	add	r1, sp, #96	; 0x60
    a3b8:	f00c f90a 	bl	165d0 <luaV_tointegerns>
    a3bc:	2800      	cmp	r0, #0
    a3be:	d1ea      	bne.n	a396 <luaV_execute+0x1102>
        vmbreak;
    a3c0:	f1b9 0f00 	cmp.w	r9, #0
    a3c4:	d007      	beq.n	a3d6 <luaV_execute+0x1142>
    a3c6:	4621      	mov	r1, r4
    a3c8:	4638      	mov	r0, r7
    a3ca:	f7fa ffa9 	bl	5320 <luaG_traceexec>
    a3ce:	4681      	mov	r9, r0
    a3d0:	6833      	ldr	r3, [r6, #0]
    a3d2:	f103 0a10 	add.w	sl, r3, #16
    a3d6:	4621      	mov	r1, r4
    a3d8:	f851 bb04 	ldr.w	fp, [r1], #4
    a3dc:	4ab3      	ldr	r2, [pc, #716]	; (a6ac <luaV_execute+0x1418>)
    a3de:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    a3e2:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    a3e6:	460c      	mov	r4, r1
    a3e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3ec:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    a3f0:	f7fe bf85 	b.w	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_SHRI) {
        TValue *rb = vRB(i);
    a3f4:	f3cb 4007 	ubfx	r0, fp, #16, #8
    a3f8:	eb0a 1000 	add.w	r0, sl, r0, lsl #4
        int ic = GETARG_sC(i);
        lua_Integer ib;
        if (tointegerns(rb, &ib)) {
    a3fc:	7a03      	ldrb	r3, [r0, #8]
        int ic = GETARG_sC(i);
    a3fe:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
        if (tointegerns(rb, &ib)) {
    a402:	2b03      	cmp	r3, #3
    a404:	d110      	bne.n	a428 <luaV_execute+0x1194>
    a406:	e9d0 2300 	ldrd	r2, r3, [r0]
    a40a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
          pc++; setivalue(s2v(ra), luaV_shiftl(ib, -ic));
    a40e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    a412:	f1cb 027f 	rsb	r2, fp, #127	; 0x7f
    a416:	17d3      	asrs	r3, r2, #31
    a418:	f00c f9d3 	bl	167c2 <luaV_shiftl>
    a41c:	2303      	movs	r3, #3
    a41e:	e9c5 0100 	strd	r0, r1, [r5]
    a422:	3404      	adds	r4, #4
    a424:	722b      	strb	r3, [r5, #8]
    a426:	e005      	b.n	a434 <luaV_execute+0x11a0>
        if (tointegerns(rb, &ib)) {
    a428:	2200      	movs	r2, #0
    a42a:	a90e      	add	r1, sp, #56	; 0x38
    a42c:	f00c f8d0 	bl	165d0 <luaV_tointegerns>
    a430:	2800      	cmp	r0, #0
    a432:	d1ec      	bne.n	a40e <luaV_execute+0x117a>
        }
        vmbreak;
    a434:	f1b9 0f00 	cmp.w	r9, #0
    a438:	d007      	beq.n	a44a <luaV_execute+0x11b6>
    a43a:	4621      	mov	r1, r4
    a43c:	4638      	mov	r0, r7
    a43e:	f7fa ff6f 	bl	5320 <luaG_traceexec>
    a442:	4681      	mov	r9, r0
    a444:	6833      	ldr	r3, [r6, #0]
    a446:	f103 0a10 	add.w	sl, r3, #16
    a44a:	4621      	mov	r1, r4
    a44c:	f851 bb04 	ldr.w	fp, [r1], #4
    a450:	4a96      	ldr	r2, [pc, #600]	; (a6ac <luaV_execute+0x1418>)
    a452:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    a456:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    a45a:	460c      	mov	r4, r1
    a45c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a460:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    a464:	f7fe bf4b 	b.w	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_SHLI) {
        TValue *rb = vRB(i);
    a468:	f3cb 4007 	ubfx	r0, fp, #16, #8
    a46c:	eb0a 1000 	add.w	r0, sl, r0, lsl #4
        int ic = GETARG_sC(i);
        lua_Integer ib;
        if (tointegerns(rb, &ib)) {
    a470:	7a03      	ldrb	r3, [r0, #8]
        int ic = GETARG_sC(i);
    a472:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
        if (tointegerns(rb, &ib)) {
    a476:	2b03      	cmp	r3, #3
        int ic = GETARG_sC(i);
    a478:	f1ab 0b7f 	sub.w	fp, fp, #127	; 0x7f
        if (tointegerns(rb, &ib)) {
    a47c:	d10f      	bne.n	a49e <luaV_execute+0x120a>
    a47e:	e9d0 2300 	ldrd	r2, r3, [r0]
    a482:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
          pc++; setivalue(s2v(ra), luaV_shiftl(ic, ib));
    a486:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a48a:	4658      	mov	r0, fp
    a48c:	17c1      	asrs	r1, r0, #31
    a48e:	f00c f998 	bl	167c2 <luaV_shiftl>
    a492:	2303      	movs	r3, #3
    a494:	e9c5 0100 	strd	r0, r1, [r5]
    a498:	3404      	adds	r4, #4
    a49a:	722b      	strb	r3, [r5, #8]
    a49c:	e005      	b.n	a4aa <luaV_execute+0x1216>
        if (tointegerns(rb, &ib)) {
    a49e:	2200      	movs	r2, #0
    a4a0:	a910      	add	r1, sp, #64	; 0x40
    a4a2:	f00c f895 	bl	165d0 <luaV_tointegerns>
    a4a6:	2800      	cmp	r0, #0
    a4a8:	d1ed      	bne.n	a486 <luaV_execute+0x11f2>
        }
        vmbreak;
    a4aa:	f1b9 0f00 	cmp.w	r9, #0
    a4ae:	d007      	beq.n	a4c0 <luaV_execute+0x122c>
    a4b0:	4621      	mov	r1, r4
    a4b2:	4638      	mov	r0, r7
    a4b4:	f7fa ff34 	bl	5320 <luaG_traceexec>
    a4b8:	4681      	mov	r9, r0
    a4ba:	6833      	ldr	r3, [r6, #0]
    a4bc:	f103 0a10 	add.w	sl, r3, #16
    a4c0:	4621      	mov	r1, r4
    a4c2:	f851 bb04 	ldr.w	fp, [r1], #4
    a4c6:	4a79      	ldr	r2, [pc, #484]	; (a6ac <luaV_execute+0x1418>)
    a4c8:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    a4cc:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    a4d0:	460c      	mov	r4, r1
    a4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4d6:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    a4da:	f7fe bf10 	b.w	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_ADD) {
        op_arith(L, l_addi, luai_numadd);
    a4de:	f3cb 4c07 	ubfx	ip, fp, #16, #8
    a4e2:	ea4f 1e0c 	mov.w	lr, ip, lsl #4
    a4e6:	eb0a 1c0c 	add.w	ip, sl, ip, lsl #4
    a4ea:	f89c 3008 	ldrb.w	r3, [ip, #8]
    a4ee:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    a4f2:	2b03      	cmp	r3, #3
    a4f4:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
    a4f8:	f104 0804 	add.w	r8, r4, #4
    a4fc:	f041 8571 	bne.w	bfe2 <luaV_execute+0x2d4e>
    a500:	f89b 2008 	ldrb.w	r2, [fp, #8]
        setobjs2s(L, ra, RB(i));
    a504:	f85a 000e 	ldr.w	r0, [sl, lr]
        op_arith(L, l_addi, luai_numadd);
    a508:	2a03      	cmp	r2, #3
        setobjs2s(L, ra, RB(i));
    a50a:	f8dc 1004 	ldr.w	r1, [ip, #4]
        op_arith(L, l_addi, luai_numadd);
    a50e:	d122      	bne.n	a556 <luaV_execute+0x12c2>
    a510:	e9db 3400 	ldrd	r3, r4, [fp]
    a514:	181b      	adds	r3, r3, r0
    a516:	eb41 0104 	adc.w	r1, r1, r4
    a51a:	4644      	mov	r4, r8
    a51c:	e9c5 3100 	strd	r3, r1, [r5]
    a520:	722a      	strb	r2, [r5, #8]
        vmbreak;
    a522:	f1b9 0f00 	cmp.w	r9, #0
    a526:	d007      	beq.n	a538 <luaV_execute+0x12a4>
    a528:	4621      	mov	r1, r4
    a52a:	4638      	mov	r0, r7
    a52c:	f7fa fef8 	bl	5320 <luaG_traceexec>
    a530:	4681      	mov	r9, r0
    a532:	6833      	ldr	r3, [r6, #0]
    a534:	f103 0a10 	add.w	sl, r3, #16
    a538:	4621      	mov	r1, r4
    a53a:	f851 bb04 	ldr.w	fp, [r1], #4
    a53e:	4a5b      	ldr	r2, [pc, #364]	; (a6ac <luaV_execute+0x1418>)
    a540:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    a544:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    a548:	460c      	mov	r4, r1
    a54a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a54e:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    a552:	f7fe bed4 	b.w	92fe <luaV_execute+0x6a>
        op_arith(L, l_addi, luai_numadd);
    a556:	f7f5 ff59 	bl	40c <__aeabi_l2d>
    a55a:	e9cd 0106 	strd	r0, r1, [sp, #24]
    a55e:	f001 bd47 	b.w	bff0 <luaV_execute+0x2d5c>
    a562:	2b03      	cmp	r3, #3
    a564:	d1dd      	bne.n	a522 <luaV_execute+0x128e>
    a566:	e9db 0100 	ldrd	r0, r1, [fp]
    a56a:	f7f5 ff4f 	bl	40c <__aeabi_l2d>
    a56e:	4602      	mov	r2, r0
    a570:	460b      	mov	r3, r1
    a572:	f001 bd44 	b.w	bffe <luaV_execute+0x2d6a>
      }
      vmcase(OP_SUB) {
        op_arith(L, l_subi, luai_numsub);
    a576:	f3cb 4c07 	ubfx	ip, fp, #16, #8
    a57a:	ea4f 1e0c 	mov.w	lr, ip, lsl #4
    a57e:	eb0a 1c0c 	add.w	ip, sl, ip, lsl #4
    a582:	f89c 3008 	ldrb.w	r3, [ip, #8]
    a586:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    a58a:	2b03      	cmp	r3, #3
    a58c:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
    a590:	f104 0804 	add.w	r8, r4, #4
    a594:	f041 853e 	bne.w	c014 <luaV_execute+0x2d80>
    a598:	f89b 2008 	ldrb.w	r2, [fp, #8]
        setobjs2s(L, ra, RB(i));
    a59c:	f85a 000e 	ldr.w	r0, [sl, lr]
        op_arith(L, l_subi, luai_numsub);
    a5a0:	2a03      	cmp	r2, #3
        setobjs2s(L, ra, RB(i));
    a5a2:	f8dc 1004 	ldr.w	r1, [ip, #4]
        op_arith(L, l_subi, luai_numsub);
    a5a6:	d122      	bne.n	a5ee <luaV_execute+0x135a>
    a5a8:	e9db 3400 	ldrd	r3, r4, [fp]
    a5ac:	1ac3      	subs	r3, r0, r3
    a5ae:	eb61 0104 	sbc.w	r1, r1, r4
    a5b2:	4644      	mov	r4, r8
    a5b4:	e9c5 3100 	strd	r3, r1, [r5]
    a5b8:	722a      	strb	r2, [r5, #8]
        vmbreak;
    a5ba:	f1b9 0f00 	cmp.w	r9, #0
    a5be:	d007      	beq.n	a5d0 <luaV_execute+0x133c>
    a5c0:	4621      	mov	r1, r4
    a5c2:	4638      	mov	r0, r7
    a5c4:	f7fa feac 	bl	5320 <luaG_traceexec>
    a5c8:	4681      	mov	r9, r0
    a5ca:	6833      	ldr	r3, [r6, #0]
    a5cc:	f103 0a10 	add.w	sl, r3, #16
    a5d0:	4621      	mov	r1, r4
    a5d2:	f851 bb04 	ldr.w	fp, [r1], #4
    a5d6:	4a35      	ldr	r2, [pc, #212]	; (a6ac <luaV_execute+0x1418>)
    a5d8:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    a5dc:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    a5e0:	460c      	mov	r4, r1
    a5e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5e6:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    a5ea:	f7fe be88 	b.w	92fe <luaV_execute+0x6a>
        op_arith(L, l_subi, luai_numsub);
    a5ee:	f7f5 ff0d 	bl	40c <__aeabi_l2d>
    a5f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
    a5f6:	f001 bd14 	b.w	c022 <luaV_execute+0x2d8e>
    a5fa:	2b03      	cmp	r3, #3
    a5fc:	d1dd      	bne.n	a5ba <luaV_execute+0x1326>
    a5fe:	e9db 0100 	ldrd	r0, r1, [fp]
    a602:	f7f5 ff03 	bl	40c <__aeabi_l2d>
    a606:	4602      	mov	r2, r0
    a608:	460b      	mov	r3, r1
    a60a:	f001 bd11 	b.w	c030 <luaV_execute+0x2d9c>
      }
      vmcase(OP_MUL) {
        op_arith(L, l_muli, luai_nummul);
    a60e:	f3cb 4c07 	ubfx	ip, fp, #16, #8
    a612:	ea4f 1e0c 	mov.w	lr, ip, lsl #4
    a616:	eb0a 1c0c 	add.w	ip, sl, ip, lsl #4
    a61a:	f89c 3008 	ldrb.w	r3, [ip, #8]
    a61e:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    a622:	2b03      	cmp	r3, #3
    a624:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
    a628:	f104 0804 	add.w	r8, r4, #4
    a62c:	f041 850b 	bne.w	c046 <luaV_execute+0x2db2>
    a630:	f89b 2008 	ldrb.w	r2, [fp, #8]
        setobjs2s(L, ra, RB(i));
    a634:	f85a 000e 	ldr.w	r0, [sl, lr]
        op_arith(L, l_muli, luai_nummul);
    a638:	2a03      	cmp	r2, #3
        setobjs2s(L, ra, RB(i));
    a63a:	f8dc 1004 	ldr.w	r1, [ip, #4]
        op_arith(L, l_muli, luai_nummul);
    a63e:	d125      	bne.n	a68c <luaV_execute+0x13f8>
    a640:	e9db 3400 	ldrd	r3, r4, [fp]
    a644:	4359      	muls	r1, r3
    a646:	fb00 1104 	mla	r1, r0, r4, r1
    a64a:	4644      	mov	r4, r8
    a64c:	fba3 3000 	umull	r3, r0, r3, r0
    a650:	4401      	add	r1, r0
    a652:	e9c5 3100 	strd	r3, r1, [r5]
    a656:	722a      	strb	r2, [r5, #8]
        vmbreak;
    a658:	f1b9 0f00 	cmp.w	r9, #0
    a65c:	d007      	beq.n	a66e <luaV_execute+0x13da>
    a65e:	4621      	mov	r1, r4
    a660:	4638      	mov	r0, r7
    a662:	f7fa fe5d 	bl	5320 <luaG_traceexec>
    a666:	4681      	mov	r9, r0
    a668:	6833      	ldr	r3, [r6, #0]
    a66a:	f103 0a10 	add.w	sl, r3, #16
    a66e:	4621      	mov	r1, r4
    a670:	f851 bb04 	ldr.w	fp, [r1], #4
    a674:	4a0d      	ldr	r2, [pc, #52]	; (a6ac <luaV_execute+0x1418>)
    a676:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    a67a:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    a67e:	460c      	mov	r4, r1
    a680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a684:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    a688:	f7fe be39 	b.w	92fe <luaV_execute+0x6a>
        op_arith(L, l_muli, luai_nummul);
    a68c:	f7f5 febe 	bl	40c <__aeabi_l2d>
    a690:	e9cd 0106 	strd	r0, r1, [sp, #24]
    a694:	f001 bcde 	b.w	c054 <luaV_execute+0x2dc0>
    a698:	2b03      	cmp	r3, #3
    a69a:	d1dd      	bne.n	a658 <luaV_execute+0x13c4>
    a69c:	e9db 0100 	ldrd	r0, r1, [fp]
    a6a0:	f7f5 feb4 	bl	40c <__aeabi_l2d>
    a6a4:	4602      	mov	r2, r0
    a6a6:	460b      	mov	r3, r1
    a6a8:	f001 bcdb 	b.w	c062 <luaV_execute+0x2dce>
    a6ac:	00017ae8 	.word	0x00017ae8
      }
      vmcase(OP_MOD) {
        op_arith(L, luaV_mod, luaV_modf);
    a6b0:	f3cb 4c07 	ubfx	ip, fp, #16, #8
    a6b4:	eb0a 1c0c 	add.w	ip, sl, ip, lsl #4
    a6b8:	f89c 3008 	ldrb.w	r3, [ip, #8]
    a6bc:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    a6c0:	2b03      	cmp	r3, #3
    a6c2:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
    a6c6:	f104 0804 	add.w	r8, r4, #4
    a6ca:	f041 84d5 	bne.w	c078 <luaV_execute+0x2de4>
        setobjs2s(L, ra, RB(i));
    a6ce:	e9dc 2300 	ldrd	r2, r3, [ip]
        op_arith(L, luaV_mod, luaV_modf);
    a6d2:	f89b 1008 	ldrb.w	r1, [fp, #8]
    a6d6:	2903      	cmp	r1, #3
    a6d8:	9106      	str	r1, [sp, #24]
    a6da:	d125      	bne.n	a728 <luaV_execute+0x1494>
    a6dc:	e9db 0100 	ldrd	r0, r1, [fp]
    a6e0:	e9cd 0100 	strd	r0, r1, [sp]
    a6e4:	4638      	mov	r0, r7
    a6e6:	f7fe fdad 	bl	9244 <luaV_mod>
    a6ea:	4644      	mov	r4, r8
    a6ec:	9b06      	ldr	r3, [sp, #24]
    a6ee:	e9c5 0100 	strd	r0, r1, [r5]
    a6f2:	722b      	strb	r3, [r5, #8]
        vmbreak;
    a6f4:	f1b9 0f00 	cmp.w	r9, #0
    a6f8:	d007      	beq.n	a70a <luaV_execute+0x1476>
    a6fa:	4621      	mov	r1, r4
    a6fc:	4638      	mov	r0, r7
    a6fe:	f7fa fe0f 	bl	5320 <luaG_traceexec>
    a702:	4681      	mov	r9, r0
    a704:	6833      	ldr	r3, [r6, #0]
    a706:	f103 0a10 	add.w	sl, r3, #16
    a70a:	4621      	mov	r1, r4
    a70c:	f851 bb04 	ldr.w	fp, [r1], #4
    a710:	4ab1      	ldr	r2, [pc, #708]	; (a9d8 <luaV_execute+0x1744>)
    a712:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    a716:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    a71a:	460c      	mov	r4, r1
    a71c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a720:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    a724:	f7fe bdeb 	b.w	92fe <luaV_execute+0x6a>
        op_arith(L, luaV_mod, luaV_modf);
    a728:	4610      	mov	r0, r2
    a72a:	4619      	mov	r1, r3
    a72c:	f7f5 fe6e 	bl	40c <__aeabi_l2d>
    a730:	4602      	mov	r2, r0
    a732:	460b      	mov	r3, r1
    a734:	f001 bca5 	b.w	c082 <luaV_execute+0x2dee>
    a738:	2903      	cmp	r1, #3
    a73a:	d1db      	bne.n	a6f4 <luaV_execute+0x1460>
    a73c:	e9db 0100 	ldrd	r0, r1, [fp]
    a740:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a744:	f7f5 fe62 	bl	40c <__aeabi_l2d>
    a748:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a74c:	f001 bca0 	b.w	c090 <luaV_execute+0x2dfc>
      }
      vmcase(OP_POW) {
        op_arithf(L, luai_numpow);
    a750:	f3cb 4c07 	ubfx	ip, fp, #16, #8
    a754:	eb0a 1c0c 	add.w	ip, sl, ip, lsl #4
    a758:	f89c 3008 	ldrb.w	r3, [ip, #8]
    a75c:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    a760:	2b13      	cmp	r3, #19
    a762:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
    a766:	d139      	bne.n	a7dc <luaV_execute+0x1548>
    a768:	e9dc 2300 	ldrd	r2, r3, [ip]
    a76c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a770:	f89b 3008 	ldrb.w	r3, [fp, #8]
    a774:	2b13      	cmp	r3, #19
    a776:	d13a      	bne.n	a7ee <luaV_execute+0x155a>
    a778:	e9db 2300 	ldrd	r2, r3, [fp]
    a77c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    a780:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    a784:	2200      	movs	r2, #0
    a786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a78a:	3404      	adds	r4, #4
    a78c:	f7f6 f8d4 	bl	938 <__aeabi_dcmpeq>
    a790:	2800      	cmp	r0, #0
    a792:	d035      	beq.n	a800 <luaV_execute+0x156c>
    a794:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a798:	4610      	mov	r0, r2
    a79a:	4619      	mov	r1, r3
    a79c:	f7f5 fe64 	bl	468 <__aeabi_dmul>
    a7a0:	2313      	movs	r3, #19
    a7a2:	e9c5 0100 	strd	r0, r1, [r5]
    a7a6:	722b      	strb	r3, [r5, #8]
        vmbreak;
    a7a8:	f1b9 0f00 	cmp.w	r9, #0
    a7ac:	d007      	beq.n	a7be <luaV_execute+0x152a>
    a7ae:	4621      	mov	r1, r4
    a7b0:	4638      	mov	r0, r7
    a7b2:	f7fa fdb5 	bl	5320 <luaG_traceexec>
    a7b6:	4681      	mov	r9, r0
    a7b8:	6833      	ldr	r3, [r6, #0]
    a7ba:	f103 0a10 	add.w	sl, r3, #16
    a7be:	4621      	mov	r1, r4
    a7c0:	f851 bb04 	ldr.w	fp, [r1], #4
    a7c4:	4a84      	ldr	r2, [pc, #528]	; (a9d8 <luaV_execute+0x1744>)
    a7c6:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    a7ca:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    a7ce:	460c      	mov	r4, r1
    a7d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7d4:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    a7d8:	f7fe bd91 	b.w	92fe <luaV_execute+0x6a>
        op_arithf(L, luai_numpow);
    a7dc:	2b03      	cmp	r3, #3
    a7de:	d1e3      	bne.n	a7a8 <luaV_execute+0x1514>
    a7e0:	e9dc 0100 	ldrd	r0, r1, [ip]
    a7e4:	f7f5 fe12 	bl	40c <__aeabi_l2d>
    a7e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
    a7ec:	e7c0      	b.n	a770 <luaV_execute+0x14dc>
    a7ee:	2b03      	cmp	r3, #3
    a7f0:	d1da      	bne.n	a7a8 <luaV_execute+0x1514>
    a7f2:	e9db 0100 	ldrd	r0, r1, [fp]
    a7f6:	f7f5 fe09 	bl	40c <__aeabi_l2d>
    a7fa:	e9cd 0108 	strd	r0, r1, [sp, #32]
    a7fe:	e7bf      	b.n	a780 <luaV_execute+0x14ec>
    a800:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a804:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    a808:	f002 fadc 	bl	cdc4 <pow>
    a80c:	e7c8      	b.n	a7a0 <luaV_execute+0x150c>
      }
      vmcase(OP_DIV) {  /* float division (always with floats) */
        op_arithf(L, luai_numdiv);
    a80e:	f3cb 4c07 	ubfx	ip, fp, #16, #8
    a812:	eb0a 1c0c 	add.w	ip, sl, ip, lsl #4
    a816:	f89c 3008 	ldrb.w	r3, [ip, #8]
    a81a:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    a81e:	2b13      	cmp	r3, #19
    a820:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
    a824:	d12c      	bne.n	a880 <luaV_execute+0x15ec>
    a826:	e9dc 2300 	ldrd	r2, r3, [ip]
    a82a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a82e:	f89b 3008 	ldrb.w	r3, [fp, #8]
    a832:	2b13      	cmp	r3, #19
    a834:	d12d      	bne.n	a892 <luaV_execute+0x15fe>
    a836:	e9db 2300 	ldrd	r2, r3, [fp]
    a83a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    a83e:	f7f5 ff3d 	bl	6bc <__aeabi_ddiv>
    a842:	2313      	movs	r3, #19
    a844:	e9c5 0100 	strd	r0, r1, [r5]
    a848:	3404      	adds	r4, #4
    a84a:	722b      	strb	r3, [r5, #8]
        vmbreak;
    a84c:	f1b9 0f00 	cmp.w	r9, #0
    a850:	d007      	beq.n	a862 <luaV_execute+0x15ce>
    a852:	4621      	mov	r1, r4
    a854:	4638      	mov	r0, r7
    a856:	f7fa fd63 	bl	5320 <luaG_traceexec>
    a85a:	4681      	mov	r9, r0
    a85c:	6833      	ldr	r3, [r6, #0]
    a85e:	f103 0a10 	add.w	sl, r3, #16
    a862:	4621      	mov	r1, r4
    a864:	f851 bb04 	ldr.w	fp, [r1], #4
    a868:	4a5b      	ldr	r2, [pc, #364]	; (a9d8 <luaV_execute+0x1744>)
    a86a:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    a86e:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    a872:	460c      	mov	r4, r1
    a874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a878:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    a87c:	f7fe bd3f 	b.w	92fe <luaV_execute+0x6a>
        op_arithf(L, luai_numdiv);
    a880:	2b03      	cmp	r3, #3
    a882:	d1e3      	bne.n	a84c <luaV_execute+0x15b8>
    a884:	e9dc 0100 	ldrd	r0, r1, [ip]
    a888:	f7f5 fdc0 	bl	40c <__aeabi_l2d>
    a88c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    a890:	e7cd      	b.n	a82e <luaV_execute+0x159a>
    a892:	2b03      	cmp	r3, #3
    a894:	d1da      	bne.n	a84c <luaV_execute+0x15b8>
    a896:	e9db 0100 	ldrd	r0, r1, [fp]
    a89a:	f7f5 fdb7 	bl	40c <__aeabi_l2d>
    a89e:	4602      	mov	r2, r0
    a8a0:	460b      	mov	r3, r1
    a8a2:	e7ca      	b.n	a83a <luaV_execute+0x15a6>
      }
      vmcase(OP_IDIV) {  /* floor division */
        op_arith(L, luaV_idiv, luai_numidiv);
    a8a4:	f3cb 4c07 	ubfx	ip, fp, #16, #8
    a8a8:	eb0a 1c0c 	add.w	ip, sl, ip, lsl #4
    a8ac:	f89c 3008 	ldrb.w	r3, [ip, #8]
    a8b0:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    a8b4:	2b03      	cmp	r3, #3
    a8b6:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
    a8ba:	f104 0804 	add.w	r8, r4, #4
    a8be:	f041 83f3 	bne.w	c0a8 <luaV_execute+0x2e14>
        setobjs2s(L, ra, RB(i));
    a8c2:	e9dc 2300 	ldrd	r2, r3, [ip]
        op_arith(L, luaV_idiv, luai_numidiv);
    a8c6:	f89b 1008 	ldrb.w	r1, [fp, #8]
    a8ca:	2903      	cmp	r1, #3
    a8cc:	9106      	str	r1, [sp, #24]
    a8ce:	d125      	bne.n	a91c <luaV_execute+0x1688>
    a8d0:	e9db 0100 	ldrd	r0, r1, [fp]
    a8d4:	e9cd 0100 	strd	r0, r1, [sp]
    a8d8:	4638      	mov	r0, r7
    a8da:	f7fe fc8b 	bl	91f4 <luaV_idiv>
    a8de:	4644      	mov	r4, r8
    a8e0:	9b06      	ldr	r3, [sp, #24]
    a8e2:	e9c5 0100 	strd	r0, r1, [r5]
    a8e6:	722b      	strb	r3, [r5, #8]
        vmbreak;
    a8e8:	f1b9 0f00 	cmp.w	r9, #0
    a8ec:	d007      	beq.n	a8fe <luaV_execute+0x166a>
    a8ee:	4621      	mov	r1, r4
    a8f0:	4638      	mov	r0, r7
    a8f2:	f7fa fd15 	bl	5320 <luaG_traceexec>
    a8f6:	4681      	mov	r9, r0
    a8f8:	6833      	ldr	r3, [r6, #0]
    a8fa:	f103 0a10 	add.w	sl, r3, #16
    a8fe:	4621      	mov	r1, r4
    a900:	f851 bb04 	ldr.w	fp, [r1], #4
    a904:	4a34      	ldr	r2, [pc, #208]	; (a9d8 <luaV_execute+0x1744>)
    a906:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    a90a:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    a90e:	460c      	mov	r4, r1
    a910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a914:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    a918:	f7fe bcf1 	b.w	92fe <luaV_execute+0x6a>
        op_arith(L, luaV_idiv, luai_numidiv);
    a91c:	4610      	mov	r0, r2
    a91e:	4619      	mov	r1, r3
    a920:	f7f5 fd74 	bl	40c <__aeabi_l2d>
    a924:	e9cd 0106 	strd	r0, r1, [sp, #24]
    a928:	f001 bbc5 	b.w	c0b6 <luaV_execute+0x2e22>
    a92c:	2b03      	cmp	r3, #3
    a92e:	d1db      	bne.n	a8e8 <luaV_execute+0x1654>
    a930:	e9db 0100 	ldrd	r0, r1, [fp]
    a934:	f7f5 fd6a 	bl	40c <__aeabi_l2d>
    a938:	4602      	mov	r2, r0
    a93a:	460b      	mov	r3, r1
    a93c:	f001 bbc2 	b.w	c0c4 <luaV_execute+0x2e30>
      }
      vmcase(OP_BAND) {
        op_bitwise(L, l_band);
    a940:	f3cb 4007 	ubfx	r0, fp, #16, #8
    a944:	eb0a 1000 	add.w	r0, sl, r0, lsl #4
    a948:	7a03      	ldrb	r3, [r0, #8]
    a94a:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    a94e:	2b03      	cmp	r3, #3
    a950:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
    a954:	d117      	bne.n	a986 <luaV_execute+0x16f2>
    a956:	e9d0 2300 	ldrd	r2, r3, [r0]
    a95a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    a95e:	f89b 3008 	ldrb.w	r3, [fp, #8]
    a962:	2b03      	cmp	r3, #3
    a964:	d12f      	bne.n	a9c6 <luaV_execute+0x1732>
    a966:	e9db 2300 	ldrd	r2, r3, [fp]
    a96a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    a96e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a970:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a972:	9919      	ldr	r1, [sp, #100]	; 0x64
    a974:	401a      	ands	r2, r3
    a976:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a978:	3404      	adds	r4, #4
    a97a:	400b      	ands	r3, r1
    a97c:	e9c5 2300 	strd	r2, r3, [r5]
    a980:	2303      	movs	r3, #3
    a982:	722b      	strb	r3, [r5, #8]
    a984:	e005      	b.n	a992 <luaV_execute+0x16fe>
    a986:	2200      	movs	r2, #0
    a988:	a916      	add	r1, sp, #88	; 0x58
    a98a:	f00b fe21 	bl	165d0 <luaV_tointegerns>
    a98e:	2800      	cmp	r0, #0
    a990:	d1e5      	bne.n	a95e <luaV_execute+0x16ca>
        vmbreak;
    a992:	f1b9 0f00 	cmp.w	r9, #0
    a996:	d007      	beq.n	a9a8 <luaV_execute+0x1714>
    a998:	4621      	mov	r1, r4
    a99a:	4638      	mov	r0, r7
    a99c:	f7fa fcc0 	bl	5320 <luaG_traceexec>
    a9a0:	4681      	mov	r9, r0
    a9a2:	6833      	ldr	r3, [r6, #0]
    a9a4:	f103 0a10 	add.w	sl, r3, #16
    a9a8:	4621      	mov	r1, r4
    a9aa:	f851 bb04 	ldr.w	fp, [r1], #4
    a9ae:	4a0a      	ldr	r2, [pc, #40]	; (a9d8 <luaV_execute+0x1744>)
    a9b0:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    a9b4:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    a9b8:	460c      	mov	r4, r1
    a9ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9be:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    a9c2:	f7fe bc9c 	b.w	92fe <luaV_execute+0x6a>
        op_bitwise(L, l_band);
    a9c6:	2200      	movs	r2, #0
    a9c8:	4658      	mov	r0, fp
    a9ca:	a918      	add	r1, sp, #96	; 0x60
    a9cc:	f00b fe00 	bl	165d0 <luaV_tointegerns>
    a9d0:	2800      	cmp	r0, #0
    a9d2:	d0de      	beq.n	a992 <luaV_execute+0x16fe>
    a9d4:	e7cb      	b.n	a96e <luaV_execute+0x16da>
    a9d6:	bf00      	nop
    a9d8:	00017ae8 	.word	0x00017ae8
      }
      vmcase(OP_BOR) {
        op_bitwise(L, l_bor);
    a9dc:	f3cb 4007 	ubfx	r0, fp, #16, #8
    a9e0:	eb0a 1000 	add.w	r0, sl, r0, lsl #4
    a9e4:	7a03      	ldrb	r3, [r0, #8]
    a9e6:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    a9ea:	2b03      	cmp	r3, #3
    a9ec:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
    a9f0:	d117      	bne.n	aa22 <luaV_execute+0x178e>
    a9f2:	e9d0 2300 	ldrd	r2, r3, [r0]
    a9f6:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    a9fa:	f89b 3008 	ldrb.w	r3, [fp, #8]
    a9fe:	2b03      	cmp	r3, #3
    aa00:	d12f      	bne.n	aa62 <luaV_execute+0x17ce>
    aa02:	e9db 2300 	ldrd	r2, r3, [fp]
    aa06:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    aa0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    aa0c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    aa0e:	9919      	ldr	r1, [sp, #100]	; 0x64
    aa10:	431a      	orrs	r2, r3
    aa12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    aa14:	3404      	adds	r4, #4
    aa16:	430b      	orrs	r3, r1
    aa18:	e9c5 2300 	strd	r2, r3, [r5]
    aa1c:	2303      	movs	r3, #3
    aa1e:	722b      	strb	r3, [r5, #8]
    aa20:	e005      	b.n	aa2e <luaV_execute+0x179a>
    aa22:	2200      	movs	r2, #0
    aa24:	a916      	add	r1, sp, #88	; 0x58
    aa26:	f00b fdd3 	bl	165d0 <luaV_tointegerns>
    aa2a:	2800      	cmp	r0, #0
    aa2c:	d1e5      	bne.n	a9fa <luaV_execute+0x1766>
        vmbreak;
    aa2e:	f1b9 0f00 	cmp.w	r9, #0
    aa32:	d007      	beq.n	aa44 <luaV_execute+0x17b0>
    aa34:	4621      	mov	r1, r4
    aa36:	4638      	mov	r0, r7
    aa38:	f7fa fc72 	bl	5320 <luaG_traceexec>
    aa3c:	4681      	mov	r9, r0
    aa3e:	6833      	ldr	r3, [r6, #0]
    aa40:	f103 0a10 	add.w	sl, r3, #16
    aa44:	4621      	mov	r1, r4
    aa46:	f851 bb04 	ldr.w	fp, [r1], #4
    aa4a:	4aae      	ldr	r2, [pc, #696]	; (ad04 <luaV_execute+0x1a70>)
    aa4c:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    aa50:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    aa54:	460c      	mov	r4, r1
    aa56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa5a:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    aa5e:	f7fe bc4e 	b.w	92fe <luaV_execute+0x6a>
        op_bitwise(L, l_bor);
    aa62:	2200      	movs	r2, #0
    aa64:	4658      	mov	r0, fp
    aa66:	a918      	add	r1, sp, #96	; 0x60
    aa68:	f00b fdb2 	bl	165d0 <luaV_tointegerns>
    aa6c:	2800      	cmp	r0, #0
    aa6e:	d0de      	beq.n	aa2e <luaV_execute+0x179a>
    aa70:	e7cb      	b.n	aa0a <luaV_execute+0x1776>
      }
      vmcase(OP_BXOR) {
        op_bitwise(L, l_bxor);
    aa72:	f3cb 4007 	ubfx	r0, fp, #16, #8
    aa76:	eb0a 1000 	add.w	r0, sl, r0, lsl #4
    aa7a:	7a03      	ldrb	r3, [r0, #8]
    aa7c:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    aa80:	2b03      	cmp	r3, #3
    aa82:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
    aa86:	d117      	bne.n	aab8 <luaV_execute+0x1824>
    aa88:	e9d0 2300 	ldrd	r2, r3, [r0]
    aa8c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    aa90:	f89b 3008 	ldrb.w	r3, [fp, #8]
    aa94:	2b03      	cmp	r3, #3
    aa96:	d12f      	bne.n	aaf8 <luaV_execute+0x1864>
    aa98:	e9db 2300 	ldrd	r2, r3, [fp]
    aa9c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    aaa0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    aaa2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    aaa4:	9919      	ldr	r1, [sp, #100]	; 0x64
    aaa6:	405a      	eors	r2, r3
    aaa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    aaaa:	3404      	adds	r4, #4
    aaac:	404b      	eors	r3, r1
    aaae:	e9c5 2300 	strd	r2, r3, [r5]
    aab2:	2303      	movs	r3, #3
    aab4:	722b      	strb	r3, [r5, #8]
    aab6:	e005      	b.n	aac4 <luaV_execute+0x1830>
    aab8:	2200      	movs	r2, #0
    aaba:	a916      	add	r1, sp, #88	; 0x58
    aabc:	f00b fd88 	bl	165d0 <luaV_tointegerns>
    aac0:	2800      	cmp	r0, #0
    aac2:	d1e5      	bne.n	aa90 <luaV_execute+0x17fc>
        vmbreak;
    aac4:	f1b9 0f00 	cmp.w	r9, #0
    aac8:	d007      	beq.n	aada <luaV_execute+0x1846>
    aaca:	4621      	mov	r1, r4
    aacc:	4638      	mov	r0, r7
    aace:	f7fa fc27 	bl	5320 <luaG_traceexec>
    aad2:	4681      	mov	r9, r0
    aad4:	6833      	ldr	r3, [r6, #0]
    aad6:	f103 0a10 	add.w	sl, r3, #16
    aada:	4621      	mov	r1, r4
    aadc:	f851 bb04 	ldr.w	fp, [r1], #4
    aae0:	4a88      	ldr	r2, [pc, #544]	; (ad04 <luaV_execute+0x1a70>)
    aae2:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    aae6:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    aaea:	460c      	mov	r4, r1
    aaec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaf0:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    aaf4:	f7fe bc03 	b.w	92fe <luaV_execute+0x6a>
        op_bitwise(L, l_bxor);
    aaf8:	2200      	movs	r2, #0
    aafa:	4658      	mov	r0, fp
    aafc:	a918      	add	r1, sp, #96	; 0x60
    aafe:	f00b fd67 	bl	165d0 <luaV_tointegerns>
    ab02:	2800      	cmp	r0, #0
    ab04:	d0de      	beq.n	aac4 <luaV_execute+0x1830>
    ab06:	e7cb      	b.n	aaa0 <luaV_execute+0x180c>
      }
      vmcase(OP_SHR) {
        op_bitwise(L, luaV_shiftr);
    ab08:	f3cb 4007 	ubfx	r0, fp, #16, #8
    ab0c:	eb0a 1000 	add.w	r0, sl, r0, lsl #4
    ab10:	7a03      	ldrb	r3, [r0, #8]
    ab12:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    ab16:	2b03      	cmp	r3, #3
    ab18:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
    ab1c:	d11a      	bne.n	ab54 <luaV_execute+0x18c0>
    ab1e:	e9d0 2300 	ldrd	r2, r3, [r0]
    ab22:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    ab26:	f89b 3008 	ldrb.w	r3, [fp, #8]
    ab2a:	2b03      	cmp	r3, #3
    ab2c:	d132      	bne.n	ab94 <luaV_execute+0x1900>
    ab2e:	e9db 2300 	ldrd	r2, r3, [fp]
    ab32:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    ab36:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    ab3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    ab3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ab3e:	4252      	negs	r2, r2
    ab40:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    ab44:	f00b fe3d 	bl	167c2 <luaV_shiftl>
    ab48:	2303      	movs	r3, #3
    ab4a:	e9c5 0100 	strd	r0, r1, [r5]
    ab4e:	3404      	adds	r4, #4
    ab50:	722b      	strb	r3, [r5, #8]
    ab52:	e005      	b.n	ab60 <luaV_execute+0x18cc>
    ab54:	2200      	movs	r2, #0
    ab56:	a916      	add	r1, sp, #88	; 0x58
    ab58:	f00b fd3a 	bl	165d0 <luaV_tointegerns>
    ab5c:	2800      	cmp	r0, #0
    ab5e:	d1e2      	bne.n	ab26 <luaV_execute+0x1892>
        vmbreak;
    ab60:	f1b9 0f00 	cmp.w	r9, #0
    ab64:	d007      	beq.n	ab76 <luaV_execute+0x18e2>
    ab66:	4621      	mov	r1, r4
    ab68:	4638      	mov	r0, r7
    ab6a:	f7fa fbd9 	bl	5320 <luaG_traceexec>
    ab6e:	4681      	mov	r9, r0
    ab70:	6833      	ldr	r3, [r6, #0]
    ab72:	f103 0a10 	add.w	sl, r3, #16
    ab76:	4621      	mov	r1, r4
    ab78:	f851 bb04 	ldr.w	fp, [r1], #4
    ab7c:	4a61      	ldr	r2, [pc, #388]	; (ad04 <luaV_execute+0x1a70>)
    ab7e:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    ab82:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    ab86:	460c      	mov	r4, r1
    ab88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab8c:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    ab90:	f7fe bbb5 	b.w	92fe <luaV_execute+0x6a>
        op_bitwise(L, luaV_shiftr);
    ab94:	2200      	movs	r2, #0
    ab96:	4658      	mov	r0, fp
    ab98:	a918      	add	r1, sp, #96	; 0x60
    ab9a:	f00b fd19 	bl	165d0 <luaV_tointegerns>
    ab9e:	2800      	cmp	r0, #0
    aba0:	d0de      	beq.n	ab60 <luaV_execute+0x18cc>
    aba2:	e7c8      	b.n	ab36 <luaV_execute+0x18a2>
      }
      vmcase(OP_SHL) {
        op_bitwise(L, luaV_shiftl);
    aba4:	f3cb 4007 	ubfx	r0, fp, #16, #8
    aba8:	eb0a 1000 	add.w	r0, sl, r0, lsl #4
    abac:	7a03      	ldrb	r3, [r0, #8]
    abae:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
    abb2:	2b03      	cmp	r3, #3
    abb4:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
    abb8:	d117      	bne.n	abea <luaV_execute+0x1956>
    abba:	e9d0 2300 	ldrd	r2, r3, [r0]
    abbe:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    abc2:	f89b 3008 	ldrb.w	r3, [fp, #8]
    abc6:	2b03      	cmp	r3, #3
    abc8:	d12f      	bne.n	ac2a <luaV_execute+0x1996>
    abca:	e9db 2300 	ldrd	r2, r3, [fp]
    abce:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    abd2:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    abd6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    abda:	f00b fdf2 	bl	167c2 <luaV_shiftl>
    abde:	2303      	movs	r3, #3
    abe0:	e9c5 0100 	strd	r0, r1, [r5]
    abe4:	3404      	adds	r4, #4
    abe6:	722b      	strb	r3, [r5, #8]
    abe8:	e005      	b.n	abf6 <luaV_execute+0x1962>
    abea:	2200      	movs	r2, #0
    abec:	a916      	add	r1, sp, #88	; 0x58
    abee:	f00b fcef 	bl	165d0 <luaV_tointegerns>
    abf2:	2800      	cmp	r0, #0
    abf4:	d1e5      	bne.n	abc2 <luaV_execute+0x192e>
        vmbreak;
    abf6:	f1b9 0f00 	cmp.w	r9, #0
    abfa:	d007      	beq.n	ac0c <luaV_execute+0x1978>
    abfc:	4621      	mov	r1, r4
    abfe:	4638      	mov	r0, r7
    ac00:	f7fa fb8e 	bl	5320 <luaG_traceexec>
    ac04:	4681      	mov	r9, r0
    ac06:	6833      	ldr	r3, [r6, #0]
    ac08:	f103 0a10 	add.w	sl, r3, #16
    ac0c:	4621      	mov	r1, r4
    ac0e:	f851 bb04 	ldr.w	fp, [r1], #4
    ac12:	4a3c      	ldr	r2, [pc, #240]	; (ad04 <luaV_execute+0x1a70>)
    ac14:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    ac18:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    ac1c:	460c      	mov	r4, r1
    ac1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac22:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    ac26:	f7fe bb6a 	b.w	92fe <luaV_execute+0x6a>
        op_bitwise(L, luaV_shiftl);
    ac2a:	2200      	movs	r2, #0
    ac2c:	4658      	mov	r0, fp
    ac2e:	a918      	add	r1, sp, #96	; 0x60
    ac30:	f00b fcce 	bl	165d0 <luaV_tointegerns>
    ac34:	2800      	cmp	r0, #0
    ac36:	d0de      	beq.n	abf6 <luaV_execute+0x1962>
    ac38:	e7cb      	b.n	abd2 <luaV_execute+0x193e>
      }
      vmcase(OP_MMBIN) {
        Instruction pi = *(pc - 2);  /* original arith. expression */
        TValue *rb = vRB(i);
        TMS tm = (TMS)GETARG_C(i);
        StkId result = RA(pi);
    ac3a:	f854 3c08 	ldr.w	r3, [r4, #-8]
        lua_assert(OP_ADD <= GET_OPCODE(pi) && GET_OPCODE(pi) <= OP_SHR);
        Protect(luaT_trybinTM(L, s2v(ra), rb, result, tm));
    ac3e:	6872      	ldr	r2, [r6, #4]
    ac40:	6134      	str	r4, [r6, #16]
    ac42:	ea4f 611b 	mov.w	r1, fp, lsr #24
    ac46:	60fa      	str	r2, [r7, #12]
        StkId result = RA(pi);
    ac48:	f3c3 13c7 	ubfx	r3, r3, #7, #8
        TValue *rb = vRB(i);
    ac4c:	f3cb 4207 	ubfx	r2, fp, #16, #8
        Protect(luaT_trybinTM(L, s2v(ra), rb, result, tm));
    ac50:	9100      	str	r1, [sp, #0]
    ac52:	4638      	mov	r0, r7
    ac54:	4629      	mov	r1, r5
    ac56:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    ac5a:	eb0a 1202 	add.w	r2, sl, r2, lsl #4
    ac5e:	f7fd fea3 	bl	89a8 <luaT_trybinTM>
    ac62:	f8d6 9014 	ldr.w	r9, [r6, #20]
        vmbreak;
    ac66:	f1b9 0f00 	cmp.w	r9, #0
    ac6a:	d007      	beq.n	ac7c <luaV_execute+0x19e8>
    ac6c:	4621      	mov	r1, r4
    ac6e:	4638      	mov	r0, r7
    ac70:	f7fa fb56 	bl	5320 <luaG_traceexec>
    ac74:	4681      	mov	r9, r0
    ac76:	6833      	ldr	r3, [r6, #0]
    ac78:	f103 0a10 	add.w	sl, r3, #16
    ac7c:	4621      	mov	r1, r4
    ac7e:	f851 bb04 	ldr.w	fp, [r1], #4
    ac82:	4a20      	ldr	r2, [pc, #128]	; (ad04 <luaV_execute+0x1a70>)
    ac84:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    ac88:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    ac8c:	460c      	mov	r4, r1
    ac8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac92:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    ac96:	f7fe bb32 	b.w	92fe <luaV_execute+0x6a>
      vmcase(OP_MMBINI) {
        Instruction pi = *(pc - 2);  /* original arith. expression */
        int imm = GETARG_sB(i);
        TMS tm = (TMS)GETARG_C(i);
        int flip = GETARG_k(i);
        StkId result = RA(pi);
    ac9a:	f854 3c08 	ldr.w	r3, [r4, #-8]
        Protect(luaT_trybiniTM(L, s2v(ra), imm, flip, result, tm));
    ac9e:	6872      	ldr	r2, [r6, #4]
        StkId result = RA(pi);
    aca0:	f3c3 13c7 	ubfx	r3, r3, #7, #8
        Protect(luaT_trybiniTM(L, s2v(ra), imm, flip, result, tm));
    aca4:	6134      	str	r4, [r6, #16]
        StkId result = RA(pi);
    aca6:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
        Protect(luaT_trybiniTM(L, s2v(ra), imm, flip, result, tm));
    acaa:	60fa      	str	r2, [r7, #12]
    acac:	ea4f 611b 	mov.w	r1, fp, lsr #24
        int imm = GETARG_sB(i);
    acb0:	f3cb 4207 	ubfx	r2, fp, #16, #8
        Protect(luaT_trybiniTM(L, s2v(ra), imm, flip, result, tm));
    acb4:	e9cd 3101 	strd	r3, r1, [sp, #4]
        int imm = GETARG_sB(i);
    acb8:	3a7f      	subs	r2, #127	; 0x7f
        int flip = GETARG_k(i);
    acba:	f3cb 33c0 	ubfx	r3, fp, #15, #1
        Protect(luaT_trybiniTM(L, s2v(ra), imm, flip, result, tm));
    acbe:	9300      	str	r3, [sp, #0]
    acc0:	4629      	mov	r1, r5
    acc2:	4638      	mov	r0, r7
    acc4:	17d3      	asrs	r3, r2, #31
    acc6:	f00b f9d2 	bl	1606e <luaT_trybiniTM>
    acca:	f8d6 9014 	ldr.w	r9, [r6, #20]
        vmbreak;
    acce:	f1b9 0f00 	cmp.w	r9, #0
    acd2:	d007      	beq.n	ace4 <luaV_execute+0x1a50>
    acd4:	4621      	mov	r1, r4
    acd6:	4638      	mov	r0, r7
    acd8:	f7fa fb22 	bl	5320 <luaG_traceexec>
    acdc:	4681      	mov	r9, r0
    acde:	6833      	ldr	r3, [r6, #0]
    ace0:	f103 0a10 	add.w	sl, r3, #16
    ace4:	4621      	mov	r1, r4
    ace6:	f851 bb04 	ldr.w	fp, [r1], #4
    acea:	4a06      	ldr	r2, [pc, #24]	; (ad04 <luaV_execute+0x1a70>)
    acec:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    acf0:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    acf4:	460c      	mov	r4, r1
    acf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acfa:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    acfe:	f7fe bafe 	b.w	92fe <luaV_execute+0x6a>
    ad02:	bf00      	nop
    ad04:	00017ae8 	.word	0x00017ae8
      vmcase(OP_MMBINK) {
        Instruction pi = *(pc - 2);  /* original arith. expression */
        TValue *imm = KB(i);
        TMS tm = (TMS)GETARG_C(i);
        int flip = GETARG_k(i);
        StkId result = RA(pi);
    ad08:	f854 3c08 	ldr.w	r3, [r4, #-8]
        Protect(luaT_trybinassocTM(L, s2v(ra), imm, flip, result, tm));
    ad0c:	6872      	ldr	r2, [r6, #4]
        StkId result = RA(pi);
    ad0e:	f3c3 13c7 	ubfx	r3, r3, #7, #8
    ad12:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
        Protect(luaT_trybinassocTM(L, s2v(ra), imm, flip, result, tm));
    ad16:	ea4f 611b 	mov.w	r1, fp, lsr #24
    ad1a:	6134      	str	r4, [r6, #16]
    ad1c:	e9cd 3100 	strd	r3, r1, [sp]
    ad20:	9905      	ldr	r1, [sp, #20]
    ad22:	60fa      	str	r2, [r7, #12]
        TValue *imm = KB(i);
    ad24:	f3cb 4207 	ubfx	r2, fp, #16, #8
        Protect(luaT_trybinassocTM(L, s2v(ra), imm, flip, result, tm));
    ad28:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    ad2c:	4638      	mov	r0, r7
    ad2e:	4629      	mov	r1, r5
    ad30:	f3cb 33c0 	ubfx	r3, fp, #15, #1
    ad34:	f00b f98e 	bl	16054 <luaT_trybinassocTM>
    ad38:	f8d6 9014 	ldr.w	r9, [r6, #20]
        vmbreak;
    ad3c:	f1b9 0f00 	cmp.w	r9, #0
    ad40:	d007      	beq.n	ad52 <luaV_execute+0x1abe>
    ad42:	4621      	mov	r1, r4
    ad44:	4638      	mov	r0, r7
    ad46:	f7fa faeb 	bl	5320 <luaG_traceexec>
    ad4a:	4681      	mov	r9, r0
    ad4c:	6833      	ldr	r3, [r6, #0]
    ad4e:	f103 0a10 	add.w	sl, r3, #16
    ad52:	4621      	mov	r1, r4
    ad54:	f851 bb04 	ldr.w	fp, [r1], #4
    ad58:	4abd      	ldr	r2, [pc, #756]	; (b050 <luaV_execute+0x1dbc>)
    ad5a:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    ad5e:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    ad62:	460c      	mov	r4, r1
    ad64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad68:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    ad6c:	f7fe bac7 	b.w	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_UNM) {
        TValue *rb = vRB(i);
    ad70:	f3cb 4207 	ubfx	r2, fp, #16, #8
    ad74:	0113      	lsls	r3, r2, #4
    ad76:	eb0a 1202 	add.w	r2, sl, r2, lsl #4
        lua_Number nb;
        if (ttisinteger(rb)) {
    ad7a:	f892 c008 	ldrb.w	ip, [r2, #8]
    ad7e:	f1bc 0f03 	cmp.w	ip, #3
    ad82:	d123      	bne.n	adcc <luaV_execute+0x1b38>
          lua_Integer ib = ivalue(rb);
          setivalue(s2v(ra), intop(-, 0, ib));
    ad84:	f85a 3003 	ldr.w	r3, [sl, r3]
    ad88:	6852      	ldr	r2, [r2, #4]
    ad8a:	425b      	negs	r3, r3
    ad8c:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    ad90:	e9c5 3200 	strd	r3, r2, [r5]
        }
        else if (tonumberns(rb, nb)) {
          setfltvalue(s2v(ra), luai_numunm(L, nb));
    ad94:	f885 c008 	strb.w	ip, [r5, #8]
        }
        else
          Protect(luaT_trybinTM(L, rb, rb, ra, TM_UNM));
        vmbreak;
    ad98:	f1b9 0f00 	cmp.w	r9, #0
    ad9c:	d007      	beq.n	adae <luaV_execute+0x1b1a>
    ad9e:	4621      	mov	r1, r4
    ada0:	4638      	mov	r0, r7
    ada2:	f7fa fabd 	bl	5320 <luaG_traceexec>
    ada6:	4681      	mov	r9, r0
    ada8:	6833      	ldr	r3, [r6, #0]
    adaa:	f103 0a10 	add.w	sl, r3, #16
    adae:	4621      	mov	r1, r4
    adb0:	f851 bb04 	ldr.w	fp, [r1], #4
    adb4:	4aa6      	ldr	r2, [pc, #664]	; (b050 <luaV_execute+0x1dbc>)
    adb6:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    adba:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    adbe:	460c      	mov	r4, r1
    adc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adc4:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    adc8:	f7fe ba99 	b.w	92fe <luaV_execute+0x6a>
        else if (tonumberns(rb, nb)) {
    adcc:	f1bc 0f13 	cmp.w	ip, #19
    add0:	d106      	bne.n	ade0 <luaV_execute+0x1b4c>
          setfltvalue(s2v(ra), luai_numunm(L, nb));
    add2:	e9d2 0300 	ldrd	r0, r3, [r2]
    add6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
    adda:	e9c5 0100 	strd	r0, r1, [r5]
    adde:	e7d9      	b.n	ad94 <luaV_execute+0x1b00>
          Protect(luaT_trybinTM(L, rb, rb, ra, TM_UNM));
    ade0:	6873      	ldr	r3, [r6, #4]
    ade2:	6134      	str	r4, [r6, #16]
    ade4:	60fb      	str	r3, [r7, #12]
    ade6:	2312      	movs	r3, #18
    ade8:	4611      	mov	r1, r2
    adea:	9300      	str	r3, [sp, #0]
    adec:	4638      	mov	r0, r7
    adee:	462b      	mov	r3, r5
    adf0:	f7fd fdda 	bl	89a8 <luaT_trybinTM>
    adf4:	f8d6 9014 	ldr.w	r9, [r6, #20]
    adf8:	e7ce      	b.n	ad98 <luaV_execute+0x1b04>
      }
      vmcase(OP_BNOT) {
        TValue *rb = vRB(i);
    adfa:	f3cb 4b07 	ubfx	fp, fp, #16, #8
    adfe:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
        lua_Integer ib;
        if (tointegerns(rb, &ib)) {
    ae02:	f89b 3008 	ldrb.w	r3, [fp, #8]
    ae06:	2b03      	cmp	r3, #3
    ae08:	d125      	bne.n	ae56 <luaV_execute+0x1bc2>
    ae0a:	e9db 2300 	ldrd	r2, r3, [fp]
    ae0e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
          setivalue(s2v(ra), intop(^, ~l_castS2U(0), ib));
    ae12:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ae14:	43da      	mvns	r2, r3
    ae16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ae18:	43db      	mvns	r3, r3
    ae1a:	e9c5 2300 	strd	r2, r3, [r5]
    ae1e:	2303      	movs	r3, #3
    ae20:	722b      	strb	r3, [r5, #8]
        }
        else
          Protect(luaT_trybinTM(L, rb, rb, ra, TM_BNOT));
        vmbreak;
    ae22:	f1b9 0f00 	cmp.w	r9, #0
    ae26:	d007      	beq.n	ae38 <luaV_execute+0x1ba4>
    ae28:	4621      	mov	r1, r4
    ae2a:	4638      	mov	r0, r7
    ae2c:	f7fa fa78 	bl	5320 <luaG_traceexec>
    ae30:	4681      	mov	r9, r0
    ae32:	6833      	ldr	r3, [r6, #0]
    ae34:	f103 0a10 	add.w	sl, r3, #16
    ae38:	4621      	mov	r1, r4
    ae3a:	f851 bb04 	ldr.w	fp, [r1], #4
    ae3e:	4a84      	ldr	r2, [pc, #528]	; (b050 <luaV_execute+0x1dbc>)
    ae40:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    ae44:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    ae48:	460c      	mov	r4, r1
    ae4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae4e:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    ae52:	f7fe ba54 	b.w	92fe <luaV_execute+0x6a>
        if (tointegerns(rb, &ib)) {
    ae56:	2200      	movs	r2, #0
    ae58:	4658      	mov	r0, fp
    ae5a:	a912      	add	r1, sp, #72	; 0x48
    ae5c:	f00b fbb8 	bl	165d0 <luaV_tointegerns>
    ae60:	2800      	cmp	r0, #0
    ae62:	d1d6      	bne.n	ae12 <luaV_execute+0x1b7e>
          Protect(luaT_trybinTM(L, rb, rb, ra, TM_BNOT));
    ae64:	6873      	ldr	r3, [r6, #4]
    ae66:	6134      	str	r4, [r6, #16]
    ae68:	60fb      	str	r3, [r7, #12]
    ae6a:	2313      	movs	r3, #19
    ae6c:	465a      	mov	r2, fp
    ae6e:	9300      	str	r3, [sp, #0]
    ae70:	4659      	mov	r1, fp
    ae72:	462b      	mov	r3, r5
    ae74:	4638      	mov	r0, r7
    ae76:	f7fd fd97 	bl	89a8 <luaT_trybinTM>
    ae7a:	f8d6 9014 	ldr.w	r9, [r6, #20]
    ae7e:	e7d0      	b.n	ae22 <luaV_execute+0x1b8e>
      }
      vmcase(OP_NOT) {
        TValue *rb = vRB(i);
    ae80:	f3cb 4b07 	ubfx	fp, fp, #16, #8
        if (l_isfalse(rb))
    ae84:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
    ae88:	f89b 3008 	ldrb.w	r3, [fp, #8]
    ae8c:	2b01      	cmp	r3, #1
    ae8e:	d01f      	beq.n	aed0 <luaV_execute+0x1c3c>
          setbtvalue(s2v(ra));
        else
          setbfvalue(s2v(ra));
    ae90:	f013 0f0f 	tst.w	r3, #15
    ae94:	bf0c      	ite	eq
    ae96:	2311      	moveq	r3, #17
    ae98:	2301      	movne	r3, #1
    ae9a:	722b      	strb	r3, [r5, #8]
        vmbreak;
    ae9c:	f1b9 0f00 	cmp.w	r9, #0
    aea0:	d007      	beq.n	aeb2 <luaV_execute+0x1c1e>
    aea2:	4621      	mov	r1, r4
    aea4:	4638      	mov	r0, r7
    aea6:	f7fa fa3b 	bl	5320 <luaG_traceexec>
    aeaa:	4681      	mov	r9, r0
    aeac:	6833      	ldr	r3, [r6, #0]
    aeae:	f103 0a10 	add.w	sl, r3, #16
    aeb2:	4621      	mov	r1, r4
    aeb4:	f851 bb04 	ldr.w	fp, [r1], #4
    aeb8:	4a65      	ldr	r2, [pc, #404]	; (b050 <luaV_execute+0x1dbc>)
    aeba:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    aebe:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    aec2:	460c      	mov	r4, r1
    aec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aec8:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    aecc:	f7fe ba17 	b.w	92fe <luaV_execute+0x6a>
          setbtvalue(s2v(ra));
    aed0:	2311      	movs	r3, #17
    aed2:	e7e2      	b.n	ae9a <luaV_execute+0x1c06>
      }
      vmcase(OP_LEN) {
        Protect(luaV_objlen(L, ra, vRB(i)));
    aed4:	6873      	ldr	r3, [r6, #4]
    aed6:	f3cb 4207 	ubfx	r2, fp, #16, #8
    aeda:	6134      	str	r4, [r6, #16]
    aedc:	4629      	mov	r1, r5
    aede:	4638      	mov	r0, r7
    aee0:	60fb      	str	r3, [r7, #12]
    aee2:	eb0a 1202 	add.w	r2, sl, r2, lsl #4
    aee6:	f7fe f941 	bl	916c <luaV_objlen>
    aeea:	f8d6 9014 	ldr.w	r9, [r6, #20]
        vmbreak;
    aeee:	f1b9 0f00 	cmp.w	r9, #0
    aef2:	d007      	beq.n	af04 <luaV_execute+0x1c70>
    aef4:	4621      	mov	r1, r4
    aef6:	4638      	mov	r0, r7
    aef8:	f7fa fa12 	bl	5320 <luaG_traceexec>
    aefc:	4681      	mov	r9, r0
    aefe:	6833      	ldr	r3, [r6, #0]
    af00:	f103 0a10 	add.w	sl, r3, #16
    af04:	4621      	mov	r1, r4
    af06:	f851 bb04 	ldr.w	fp, [r1], #4
    af0a:	4a51      	ldr	r2, [pc, #324]	; (b050 <luaV_execute+0x1dbc>)
    af0c:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    af10:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    af14:	460c      	mov	r4, r1
    af16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af1a:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    af1e:	f7fe b9ee 	b.w	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_CONCAT) {
        int n = GETARG_B(i);  /* number of elements to concatenate */
    af22:	f3cb 4107 	ubfx	r1, fp, #16, #8
        L->top = ra + n;  /* mark the end of concat operands */
    af26:	eb05 1501 	add.w	r5, r5, r1, lsl #4
    af2a:	60fd      	str	r5, [r7, #12]
        ProtectNT(luaV_concat(L, n));
    af2c:	4638      	mov	r0, r7
    af2e:	6134      	str	r4, [r6, #16]
    af30:	f7fe f87c 	bl	902c <luaV_concat>
        checkGC(L, L->top); /* 'luaV_concat' ensures correct top */
    af34:	693b      	ldr	r3, [r7, #16]
        ProtectNT(luaV_concat(L, n));
    af36:	f8d6 9014 	ldr.w	r9, [r6, #20]
        checkGC(L, L->top); /* 'luaV_concat' ensures correct top */
    af3a:	68db      	ldr	r3, [r3, #12]
    af3c:	2b00      	cmp	r3, #0
    af3e:	dd05      	ble.n	af4c <luaV_execute+0x1cb8>
    af40:	4638      	mov	r0, r7
    af42:	6134      	str	r4, [r6, #16]
    af44:	f009 fb97 	bl	14676 <luaC_step>
    af48:	f8d6 9014 	ldr.w	r9, [r6, #20]
        vmbreak;
    af4c:	f1b9 0f00 	cmp.w	r9, #0
    af50:	d007      	beq.n	af62 <luaV_execute+0x1cce>
    af52:	4621      	mov	r1, r4
    af54:	4638      	mov	r0, r7
    af56:	f7fa f9e3 	bl	5320 <luaG_traceexec>
    af5a:	4681      	mov	r9, r0
    af5c:	6833      	ldr	r3, [r6, #0]
    af5e:	f103 0a10 	add.w	sl, r3, #16
    af62:	4621      	mov	r1, r4
    af64:	f851 bb04 	ldr.w	fp, [r1], #4
    af68:	4a39      	ldr	r2, [pc, #228]	; (b050 <luaV_execute+0x1dbc>)
    af6a:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    af6e:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    af72:	460c      	mov	r4, r1
    af74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af78:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    af7c:	f7fe b9bf 	b.w	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_CLOSE) {
        Protect(luaF_close(L, ra, LUA_OK, 1));
    af80:	6873      	ldr	r3, [r6, #4]
    af82:	6134      	str	r4, [r6, #16]
    af84:	2200      	movs	r2, #0
    af86:	60fb      	str	r3, [r7, #12]
    af88:	4629      	mov	r1, r5
    af8a:	2301      	movs	r3, #1
    af8c:	4638      	mov	r0, r7
    af8e:	f008 fb0f 	bl	135b0 <luaF_close>
    af92:	f8d6 9014 	ldr.w	r9, [r6, #20]
        vmbreak;
    af96:	f1b9 0f00 	cmp.w	r9, #0
    af9a:	d007      	beq.n	afac <luaV_execute+0x1d18>
    af9c:	4621      	mov	r1, r4
    af9e:	4638      	mov	r0, r7
    afa0:	f7fa f9be 	bl	5320 <luaG_traceexec>
    afa4:	4681      	mov	r9, r0
    afa6:	6833      	ldr	r3, [r6, #0]
    afa8:	f103 0a10 	add.w	sl, r3, #16
    afac:	4621      	mov	r1, r4
    afae:	f851 bb04 	ldr.w	fp, [r1], #4
    afb2:	4a27      	ldr	r2, [pc, #156]	; (b050 <luaV_execute+0x1dbc>)
    afb4:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    afb8:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    afbc:	460c      	mov	r4, r1
    afbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afc2:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    afc6:	f7fe b99a 	b.w	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_TBC) {
        /* create new to-be-closed upvalue */
        halfProtect(luaF_newtbcupval(L, ra));
    afca:	6873      	ldr	r3, [r6, #4]
    afcc:	6134      	str	r4, [r6, #16]
    afce:	4629      	mov	r1, r5
    afd0:	4638      	mov	r0, r7
    afd2:	60fb      	str	r3, [r7, #12]
    afd4:	f7fa fb6a 	bl	56ac <luaF_newtbcupval>
        vmbreak;
    afd8:	f1b9 0f00 	cmp.w	r9, #0
    afdc:	d007      	beq.n	afee <luaV_execute+0x1d5a>
    afde:	4621      	mov	r1, r4
    afe0:	4638      	mov	r0, r7
    afe2:	f7fa f99d 	bl	5320 <luaG_traceexec>
    afe6:	4681      	mov	r9, r0
    afe8:	6833      	ldr	r3, [r6, #0]
    afea:	f103 0a10 	add.w	sl, r3, #16
    afee:	4621      	mov	r1, r4
    aff0:	f851 bb04 	ldr.w	fp, [r1], #4
    aff4:	4a16      	ldr	r2, [pc, #88]	; (b050 <luaV_execute+0x1dbc>)
    aff6:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    affa:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    affe:	460c      	mov	r4, r1
    b000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b004:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    b008:	f7fe b979 	b.w	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_JMP) {
        dojump(ci, i, 0);
    b00c:	ea4f 11db 	mov.w	r1, fp, lsr #7
    b010:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    b014:	f8d6 9014 	ldr.w	r9, [r6, #20]
    b018:	3101      	adds	r1, #1
    b01a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
        vmbreak;
    b01e:	f1b9 0f00 	cmp.w	r9, #0
    b022:	d007      	beq.n	b034 <luaV_execute+0x1da0>
    b024:	4621      	mov	r1, r4
    b026:	4638      	mov	r0, r7
    b028:	f7fa f97a 	bl	5320 <luaG_traceexec>
    b02c:	4681      	mov	r9, r0
    b02e:	6833      	ldr	r3, [r6, #0]
    b030:	f103 0a10 	add.w	sl, r3, #16
    b034:	f854 bb04 	ldr.w	fp, [r4], #4
    b038:	4a05      	ldr	r2, [pc, #20]	; (b050 <luaV_execute+0x1dbc>)
    b03a:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    b03e:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    b042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b046:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    b04a:	f7fe b958 	b.w	92fe <luaV_execute+0x6a>
    b04e:	bf00      	nop
    b050:	00017ae8 	.word	0x00017ae8
      }
      vmcase(OP_EQ) {
        int cond;
        TValue *rb = vRB(i);
        Protect(cond = luaV_equalobj(L, s2v(ra), rb));
    b054:	6873      	ldr	r3, [r6, #4]
        TValue *rb = vRB(i);
    b056:	f3cb 4207 	ubfx	r2, fp, #16, #8
        Protect(cond = luaV_equalobj(L, s2v(ra), rb));
    b05a:	4629      	mov	r1, r5
    b05c:	6134      	str	r4, [r6, #16]
    b05e:	4638      	mov	r0, r7
    b060:	60fb      	str	r3, [r7, #12]
    b062:	eb0a 1202 	add.w	r2, sl, r2, lsl #4
    b066:	f00b fad8 	bl	1661a <luaV_equalobj>
        docondjump();
    b06a:	f3cb 3bc0 	ubfx	fp, fp, #15, #1
    b06e:	4583      	cmp	fp, r0
    b070:	bf08      	it	eq
    b072:	6821      	ldreq	r1, [r4, #0]
        Protect(cond = luaV_equalobj(L, s2v(ra), rb));
    b074:	f8d6 9014 	ldr.w	r9, [r6, #20]
        docondjump();
    b078:	bf01      	itttt	eq
    b07a:	09c9      	lsreq	r1, r1, #7
    b07c:	f101 417f 	addeq.w	r1, r1, #4278190080	; 0xff000000
    b080:	f8d6 9014 	ldreq.w	r9, [r6, #20]
    b084:	3102      	addeq	r1, #2
    b086:	bf14      	ite	ne
    b088:	3404      	addne	r4, #4
    b08a:	eb04 0481 	addeq.w	r4, r4, r1, lsl #2
        vmbreak;
    b08e:	f1b9 0f00 	cmp.w	r9, #0
    b092:	d007      	beq.n	b0a4 <luaV_execute+0x1e10>
    b094:	4621      	mov	r1, r4
    b096:	4638      	mov	r0, r7
    b098:	f7fa f942 	bl	5320 <luaG_traceexec>
    b09c:	4681      	mov	r9, r0
    b09e:	6833      	ldr	r3, [r6, #0]
    b0a0:	f103 0a10 	add.w	sl, r3, #16
    b0a4:	f854 bb04 	ldr.w	fp, [r4], #4
    b0a8:	4ab6      	ldr	r2, [pc, #728]	; (b384 <luaV_execute+0x20f0>)
    b0aa:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    b0ae:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    b0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0b6:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    b0ba:	f7fe b920 	b.w	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_LT) {
        op_order(L, l_lti, LTnum, lessthanothers);
    b0be:	7a2b      	ldrb	r3, [r5, #8]
    b0c0:	f3cb 4207 	ubfx	r2, fp, #16, #8
    b0c4:	2b03      	cmp	r3, #3
    b0c6:	eb0a 1202 	add.w	r2, sl, r2, lsl #4
    b0ca:	d133      	bne.n	b134 <luaV_execute+0x1ea0>
    b0cc:	7a13      	ldrb	r3, [r2, #8]
    b0ce:	2b03      	cmp	r3, #3
    b0d0:	d134      	bne.n	b13c <luaV_execute+0x1ea8>
    b0d2:	e9d2 0300 	ldrd	r0, r3, [r2]
    b0d6:	e9d5 c100 	ldrd	ip, r1, [r5]
    b0da:	4584      	cmp	ip, r0
    b0dc:	eb71 0303 	sbcs.w	r3, r1, r3
    b0e0:	bfb4      	ite	lt
    b0e2:	2001      	movlt	r0, #1
    b0e4:	2000      	movge	r0, #0
    b0e6:	f3cb 3bc0 	ubfx	fp, fp, #15, #1
    b0ea:	4583      	cmp	fp, r0
    b0ec:	bf01      	itttt	eq
    b0ee:	6821      	ldreq	r1, [r4, #0]
    b0f0:	f8d6 9014 	ldreq.w	r9, [r6, #20]
    b0f4:	09c9      	lsreq	r1, r1, #7
    b0f6:	f101 417f 	addeq.w	r1, r1, #4278190080	; 0xff000000
    b0fa:	bf0a      	itet	eq
    b0fc:	3102      	addeq	r1, #2
    b0fe:	3404      	addne	r4, #4
    b100:	eb04 0481 	addeq.w	r4, r4, r1, lsl #2
        vmbreak;
    b104:	f1b9 0f00 	cmp.w	r9, #0
    b108:	d007      	beq.n	b11a <luaV_execute+0x1e86>
    b10a:	4621      	mov	r1, r4
    b10c:	4638      	mov	r0, r7
    b10e:	f7fa f907 	bl	5320 <luaG_traceexec>
    b112:	4681      	mov	r9, r0
    b114:	6833      	ldr	r3, [r6, #0]
    b116:	f103 0a10 	add.w	sl, r3, #16
    b11a:	f854 bb04 	ldr.w	fp, [r4], #4
    b11e:	4a99      	ldr	r2, [pc, #612]	; (b384 <luaV_execute+0x20f0>)
    b120:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    b124:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    b128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b12c:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    b130:	f7fe b8e5 	b.w	92fe <luaV_execute+0x6a>
        op_order(L, l_lti, LTnum, lessthanothers);
    b134:	f003 030f 	and.w	r3, r3, #15
    b138:	2b03      	cmp	r3, #3
    b13a:	d109      	bne.n	b150 <luaV_execute+0x1ebc>
    b13c:	7a13      	ldrb	r3, [r2, #8]
    b13e:	f003 030f 	and.w	r3, r3, #15
    b142:	2b03      	cmp	r3, #3
    b144:	d104      	bne.n	b150 <luaV_execute+0x1ebc>
    b146:	4611      	mov	r1, r2
    b148:	4628      	mov	r0, r5
    b14a:	f00b f971 	bl	16430 <LTnum>
    b14e:	e7ca      	b.n	b0e6 <luaV_execute+0x1e52>
    b150:	6873      	ldr	r3, [r6, #4]
    b152:	6134      	str	r4, [r6, #16]
    b154:	4629      	mov	r1, r5
    b156:	4638      	mov	r0, r7
    b158:	60fb      	str	r3, [r7, #12]
    b15a:	f00b f935 	bl	163c8 <lessthanothers>
    b15e:	f8d6 9014 	ldr.w	r9, [r6, #20]
    b162:	e7c0      	b.n	b0e6 <luaV_execute+0x1e52>
      }
      vmcase(OP_LE) {
        op_order(L, l_lei, LEnum, lessequalothers);
    b164:	7a2b      	ldrb	r3, [r5, #8]
    b166:	f3cb 4207 	ubfx	r2, fp, #16, #8
    b16a:	2b03      	cmp	r3, #3
    b16c:	eb0a 1202 	add.w	r2, sl, r2, lsl #4
    b170:	d133      	bne.n	b1da <luaV_execute+0x1f46>
    b172:	7a13      	ldrb	r3, [r2, #8]
    b174:	2b03      	cmp	r3, #3
    b176:	d134      	bne.n	b1e2 <luaV_execute+0x1f4e>
    b178:	e9d2 0200 	ldrd	r0, r2, [r2]
    b17c:	e9d5 1300 	ldrd	r1, r3, [r5]
    b180:	4288      	cmp	r0, r1
    b182:	eb72 0303 	sbcs.w	r3, r2, r3
    b186:	bfac      	ite	ge
    b188:	2001      	movge	r0, #1
    b18a:	2000      	movlt	r0, #0
    b18c:	f3cb 3bc0 	ubfx	fp, fp, #15, #1
    b190:	4583      	cmp	fp, r0
    b192:	bf01      	itttt	eq
    b194:	6821      	ldreq	r1, [r4, #0]
    b196:	f8d6 9014 	ldreq.w	r9, [r6, #20]
    b19a:	09c9      	lsreq	r1, r1, #7
    b19c:	f101 417f 	addeq.w	r1, r1, #4278190080	; 0xff000000
    b1a0:	bf0a      	itet	eq
    b1a2:	3102      	addeq	r1, #2
    b1a4:	3404      	addne	r4, #4
    b1a6:	eb04 0481 	addeq.w	r4, r4, r1, lsl #2
        vmbreak;
    b1aa:	f1b9 0f00 	cmp.w	r9, #0
    b1ae:	d007      	beq.n	b1c0 <luaV_execute+0x1f2c>
    b1b0:	4621      	mov	r1, r4
    b1b2:	4638      	mov	r0, r7
    b1b4:	f7fa f8b4 	bl	5320 <luaG_traceexec>
    b1b8:	4681      	mov	r9, r0
    b1ba:	6833      	ldr	r3, [r6, #0]
    b1bc:	f103 0a10 	add.w	sl, r3, #16
    b1c0:	f854 bb04 	ldr.w	fp, [r4], #4
    b1c4:	4a6f      	ldr	r2, [pc, #444]	; (b384 <luaV_execute+0x20f0>)
    b1c6:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    b1ca:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    b1ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1d2:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    b1d6:	f7fe b892 	b.w	92fe <luaV_execute+0x6a>
        op_order(L, l_lei, LEnum, lessequalothers);
    b1da:	f003 030f 	and.w	r3, r3, #15
    b1de:	2b03      	cmp	r3, #3
    b1e0:	d109      	bne.n	b1f6 <luaV_execute+0x1f62>
    b1e2:	7a13      	ldrb	r3, [r2, #8]
    b1e4:	f003 030f 	and.w	r3, r3, #15
    b1e8:	2b03      	cmp	r3, #3
    b1ea:	d104      	bne.n	b1f6 <luaV_execute+0x1f62>
    b1ec:	4611      	mov	r1, r2
    b1ee:	4628      	mov	r0, r5
    b1f0:	f00b f982 	bl	164f8 <LEnum>
    b1f4:	e7ca      	b.n	b18c <luaV_execute+0x1ef8>
    b1f6:	6873      	ldr	r3, [r6, #4]
    b1f8:	6134      	str	r4, [r6, #16]
    b1fa:	4629      	mov	r1, r5
    b1fc:	4638      	mov	r0, r7
    b1fe:	60fb      	str	r3, [r7, #12]
    b200:	f00b f8c7 	bl	16392 <lessequalothers>
    b204:	f8d6 9014 	ldr.w	r9, [r6, #20]
    b208:	e7c0      	b.n	b18c <luaV_execute+0x1ef8>
      }
      vmcase(OP_EQK) {
        TValue *rb = KB(i);
        /* basic types do not use '__eq'; we can use raw equality */
        int cond = luaV_rawequalobj(s2v(ra), rb);
    b20a:	9b05      	ldr	r3, [sp, #20]
        TValue *rb = KB(i);
    b20c:	f3cb 4207 	ubfx	r2, fp, #16, #8
        int cond = luaV_rawequalobj(s2v(ra), rb);
    b210:	4629      	mov	r1, r5
    b212:	2000      	movs	r0, #0
    b214:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    b218:	f00b f9ff 	bl	1661a <luaV_equalobj>
        docondjump();
    b21c:	f3cb 3bc0 	ubfx	fp, fp, #15, #1
    b220:	4583      	cmp	fp, r0
    b222:	bf01      	itttt	eq
    b224:	6821      	ldreq	r1, [r4, #0]
    b226:	f8d6 9014 	ldreq.w	r9, [r6, #20]
    b22a:	09c9      	lsreq	r1, r1, #7
    b22c:	f101 417f 	addeq.w	r1, r1, #4278190080	; 0xff000000
    b230:	bf0a      	itet	eq
    b232:	3102      	addeq	r1, #2
    b234:	3404      	addne	r4, #4
    b236:	eb04 0481 	addeq.w	r4, r4, r1, lsl #2
        vmbreak;
    b23a:	f1b9 0f00 	cmp.w	r9, #0
    b23e:	d007      	beq.n	b250 <luaV_execute+0x1fbc>
    b240:	4621      	mov	r1, r4
    b242:	4638      	mov	r0, r7
    b244:	f7fa f86c 	bl	5320 <luaG_traceexec>
    b248:	4681      	mov	r9, r0
    b24a:	6833      	ldr	r3, [r6, #0]
    b24c:	f103 0a10 	add.w	sl, r3, #16
    b250:	f854 bb04 	ldr.w	fp, [r4], #4
    b254:	4a4b      	ldr	r2, [pc, #300]	; (b384 <luaV_execute+0x20f0>)
    b256:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    b25a:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    b25e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b262:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    b266:	f7fe b84a 	b.w	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_EQI) {
        int cond;
        int im = GETARG_sB(i);
        if (ttisinteger(s2v(ra)))
    b26a:	7a2b      	ldrb	r3, [r5, #8]
        int im = GETARG_sB(i);
    b26c:	f3cb 4007 	ubfx	r0, fp, #16, #8
        if (ttisinteger(s2v(ra)))
    b270:	2b03      	cmp	r3, #3
        int im = GETARG_sB(i);
    b272:	f1a0 007f 	sub.w	r0, r0, #127	; 0x7f
        if (ttisinteger(s2v(ra)))
    b276:	d12f      	bne.n	b2d8 <luaV_execute+0x2044>
          cond = (ivalue(s2v(ra)) == im);
    b278:	e9d5 1200 	ldrd	r1, r2, [r5]
    b27c:	17c3      	asrs	r3, r0, #31
    b27e:	429a      	cmp	r2, r3
    b280:	bf08      	it	eq
    b282:	4281      	cmpeq	r1, r0
    b284:	bf0c      	ite	eq
    b286:	2001      	moveq	r0, #1
    b288:	2000      	movne	r0, #0
        else if (ttisfloat(s2v(ra)))
          cond = luai_numeq(fltvalue(s2v(ra)), cast_num(im));
        else
          cond = 0;  /* other types cannot be equal to a number */
        docondjump();
    b28a:	f3cb 3bc0 	ubfx	fp, fp, #15, #1
    b28e:	4583      	cmp	fp, r0
    b290:	bf01      	itttt	eq
    b292:	6821      	ldreq	r1, [r4, #0]
    b294:	f8d6 9014 	ldreq.w	r9, [r6, #20]
    b298:	09c9      	lsreq	r1, r1, #7
    b29a:	f101 417f 	addeq.w	r1, r1, #4278190080	; 0xff000000
    b29e:	bf0a      	itet	eq
    b2a0:	3102      	addeq	r1, #2
    b2a2:	3404      	addne	r4, #4
    b2a4:	eb04 0481 	addeq.w	r4, r4, r1, lsl #2
        vmbreak;
    b2a8:	f1b9 0f00 	cmp.w	r9, #0
    b2ac:	d007      	beq.n	b2be <luaV_execute+0x202a>
    b2ae:	4621      	mov	r1, r4
    b2b0:	4638      	mov	r0, r7
    b2b2:	f7fa f835 	bl	5320 <luaG_traceexec>
    b2b6:	4681      	mov	r9, r0
    b2b8:	6833      	ldr	r3, [r6, #0]
    b2ba:	f103 0a10 	add.w	sl, r3, #16
    b2be:	f854 bb04 	ldr.w	fp, [r4], #4
    b2c2:	4a30      	ldr	r2, [pc, #192]	; (b384 <luaV_execute+0x20f0>)
    b2c4:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    b2c8:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    b2cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2d0:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    b2d4:	f7fe b813 	b.w	92fe <luaV_execute+0x6a>
        else if (ttisfloat(s2v(ra)))
    b2d8:	2b13      	cmp	r3, #19
    b2da:	d10b      	bne.n	b2f4 <luaV_execute+0x2060>
          cond = luai_numeq(fltvalue(s2v(ra)), cast_num(im));
    b2dc:	f7f5 f85a 	bl	394 <__aeabi_i2d>
    b2e0:	4602      	mov	r2, r0
    b2e2:	460b      	mov	r3, r1
    b2e4:	e9d5 0100 	ldrd	r0, r1, [r5]
    b2e8:	f7f5 fb26 	bl	938 <__aeabi_dcmpeq>
    b2ec:	3800      	subs	r0, #0
    b2ee:	bf18      	it	ne
    b2f0:	2001      	movne	r0, #1
    b2f2:	e7ca      	b.n	b28a <luaV_execute+0x1ff6>
          cond = 0;  /* other types cannot be equal to a number */
    b2f4:	2000      	movs	r0, #0
    b2f6:	e7c8      	b.n	b28a <luaV_execute+0x1ff6>
      }
      vmcase(OP_LTI) {
        op_orderI(L, l_lti, luai_numlt, 0, TM_LT);
    b2f8:	7a2b      	ldrb	r3, [r5, #8]
    b2fa:	f3cb 4207 	ubfx	r2, fp, #16, #8
    b2fe:	2b03      	cmp	r3, #3
    b300:	f1a2 027f 	sub.w	r2, r2, #127	; 0x7f
    b304:	d12f      	bne.n	b366 <luaV_execute+0x20d2>
    b306:	e9d5 0100 	ldrd	r0, r1, [r5]
    b30a:	17d3      	asrs	r3, r2, #31
    b30c:	4290      	cmp	r0, r2
    b30e:	eb71 0303 	sbcs.w	r3, r1, r3
    b312:	bfb4      	ite	lt
    b314:	2001      	movlt	r0, #1
    b316:	2000      	movge	r0, #0
    b318:	f3cb 3bc0 	ubfx	fp, fp, #15, #1
    b31c:	4583      	cmp	fp, r0
    b31e:	bf01      	itttt	eq
    b320:	6821      	ldreq	r1, [r4, #0]
    b322:	f8d6 9014 	ldreq.w	r9, [r6, #20]
    b326:	09c9      	lsreq	r1, r1, #7
    b328:	f101 417f 	addeq.w	r1, r1, #4278190080	; 0xff000000
    b32c:	bf0a      	itet	eq
    b32e:	3102      	addeq	r1, #2
    b330:	3404      	addne	r4, #4
    b332:	eb04 0481 	addeq.w	r4, r4, r1, lsl #2
        vmbreak;
    b336:	f1b9 0f00 	cmp.w	r9, #0
    b33a:	d007      	beq.n	b34c <luaV_execute+0x20b8>
    b33c:	4621      	mov	r1, r4
    b33e:	4638      	mov	r0, r7
    b340:	f7f9 ffee 	bl	5320 <luaG_traceexec>
    b344:	4681      	mov	r9, r0
    b346:	6833      	ldr	r3, [r6, #0]
    b348:	f103 0a10 	add.w	sl, r3, #16
    b34c:	f854 bb04 	ldr.w	fp, [r4], #4
    b350:	4a0c      	ldr	r2, [pc, #48]	; (b384 <luaV_execute+0x20f0>)
    b352:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    b356:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    b35a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b35e:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    b362:	f7fd bfcc 	b.w	92fe <luaV_execute+0x6a>
        op_orderI(L, l_lti, luai_numlt, 0, TM_LT);
    b366:	2b13      	cmp	r3, #19
    b368:	d10e      	bne.n	b388 <luaV_execute+0x20f4>
    b36a:	4610      	mov	r0, r2
    b36c:	f7f5 f812 	bl	394 <__aeabi_i2d>
    b370:	4602      	mov	r2, r0
    b372:	460b      	mov	r3, r1
    b374:	e9d5 0100 	ldrd	r0, r1, [r5]
    b378:	f7f5 fae8 	bl	94c <__aeabi_dcmplt>
    b37c:	3800      	subs	r0, #0
    b37e:	bf18      	it	ne
    b380:	2001      	movne	r0, #1
    b382:	e7c9      	b.n	b318 <luaV_execute+0x2084>
    b384:	00017ae8 	.word	0x00017ae8
    b388:	6873      	ldr	r3, [r6, #4]
    b38a:	6134      	str	r4, [r6, #16]
    b38c:	60fb      	str	r3, [r7, #12]
    b38e:	2314      	movs	r3, #20
    b390:	9301      	str	r3, [sp, #4]
    b392:	ea4f 631b 	mov.w	r3, fp, lsr #24
    b396:	9300      	str	r3, [sp, #0]
    b398:	4629      	mov	r1, r5
    b39a:	2300      	movs	r3, #0
    b39c:	4638      	mov	r0, r7
    b39e:	f00a fe92 	bl	160c6 <luaT_callorderiTM>
    b3a2:	f8d6 9014 	ldr.w	r9, [r6, #20]
    b3a6:	e7b7      	b.n	b318 <luaV_execute+0x2084>
      }
      vmcase(OP_LEI) {
        op_orderI(L, l_lei, luai_numle, 0, TM_LE);
    b3a8:	7a2b      	ldrb	r3, [r5, #8]
    b3aa:	f3cb 4207 	ubfx	r2, fp, #16, #8
    b3ae:	2b03      	cmp	r3, #3
    b3b0:	f1a2 027f 	sub.w	r2, r2, #127	; 0x7f
    b3b4:	d12f      	bne.n	b416 <luaV_execute+0x2182>
    b3b6:	e9d5 0300 	ldrd	r0, r3, [r5]
    b3ba:	17d1      	asrs	r1, r2, #31
    b3bc:	4282      	cmp	r2, r0
    b3be:	eb71 0303 	sbcs.w	r3, r1, r3
    b3c2:	bfac      	ite	ge
    b3c4:	2001      	movge	r0, #1
    b3c6:	2000      	movlt	r0, #0
    b3c8:	f3cb 3bc0 	ubfx	fp, fp, #15, #1
    b3cc:	4583      	cmp	fp, r0
    b3ce:	bf01      	itttt	eq
    b3d0:	6821      	ldreq	r1, [r4, #0]
    b3d2:	f8d6 9014 	ldreq.w	r9, [r6, #20]
    b3d6:	09c9      	lsreq	r1, r1, #7
    b3d8:	f101 417f 	addeq.w	r1, r1, #4278190080	; 0xff000000
    b3dc:	bf0a      	itet	eq
    b3de:	3102      	addeq	r1, #2
    b3e0:	3404      	addne	r4, #4
    b3e2:	eb04 0481 	addeq.w	r4, r4, r1, lsl #2
        vmbreak;
    b3e6:	f1b9 0f00 	cmp.w	r9, #0
    b3ea:	d007      	beq.n	b3fc <luaV_execute+0x2168>
    b3ec:	4621      	mov	r1, r4
    b3ee:	4638      	mov	r0, r7
    b3f0:	f7f9 ff96 	bl	5320 <luaG_traceexec>
    b3f4:	4681      	mov	r9, r0
    b3f6:	6833      	ldr	r3, [r6, #0]
    b3f8:	f103 0a10 	add.w	sl, r3, #16
    b3fc:	f854 bb04 	ldr.w	fp, [r4], #4
    b400:	4aba      	ldr	r2, [pc, #744]	; (b6ec <luaV_execute+0x2458>)
    b402:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    b406:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    b40a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b40e:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    b412:	f7fd bf74 	b.w	92fe <luaV_execute+0x6a>
        op_orderI(L, l_lei, luai_numle, 0, TM_LE);
    b416:	2b13      	cmp	r3, #19
    b418:	d10c      	bne.n	b434 <luaV_execute+0x21a0>
    b41a:	4610      	mov	r0, r2
    b41c:	f7f4 ffba 	bl	394 <__aeabi_i2d>
    b420:	4602      	mov	r2, r0
    b422:	460b      	mov	r3, r1
    b424:	e9d5 0100 	ldrd	r0, r1, [r5]
    b428:	f7f5 fa9a 	bl	960 <__aeabi_dcmple>
    b42c:	3800      	subs	r0, #0
    b42e:	bf18      	it	ne
    b430:	2001      	movne	r0, #1
    b432:	e7c9      	b.n	b3c8 <luaV_execute+0x2134>
    b434:	6873      	ldr	r3, [r6, #4]
    b436:	6134      	str	r4, [r6, #16]
    b438:	60fb      	str	r3, [r7, #12]
    b43a:	2315      	movs	r3, #21
    b43c:	9301      	str	r3, [sp, #4]
    b43e:	ea4f 631b 	mov.w	r3, fp, lsr #24
    b442:	9300      	str	r3, [sp, #0]
    b444:	4629      	mov	r1, r5
    b446:	2300      	movs	r3, #0
    b448:	4638      	mov	r0, r7
    b44a:	f00a fe3c 	bl	160c6 <luaT_callorderiTM>
    b44e:	f8d6 9014 	ldr.w	r9, [r6, #20]
    b452:	e7b9      	b.n	b3c8 <luaV_execute+0x2134>
      }
      vmcase(OP_GTI) {
        op_orderI(L, l_gti, luai_numgt, 1, TM_LT);
    b454:	7a2b      	ldrb	r3, [r5, #8]
    b456:	f3cb 4207 	ubfx	r2, fp, #16, #8
    b45a:	2b03      	cmp	r3, #3
    b45c:	f1a2 027f 	sub.w	r2, r2, #127	; 0x7f
    b460:	d12f      	bne.n	b4c2 <luaV_execute+0x222e>
    b462:	e9d5 0300 	ldrd	r0, r3, [r5]
    b466:	17d1      	asrs	r1, r2, #31
    b468:	4282      	cmp	r2, r0
    b46a:	eb71 0303 	sbcs.w	r3, r1, r3
    b46e:	bfb4      	ite	lt
    b470:	2001      	movlt	r0, #1
    b472:	2000      	movge	r0, #0
    b474:	f3cb 3bc0 	ubfx	fp, fp, #15, #1
    b478:	4583      	cmp	fp, r0
    b47a:	bf01      	itttt	eq
    b47c:	6821      	ldreq	r1, [r4, #0]
    b47e:	f8d6 9014 	ldreq.w	r9, [r6, #20]
    b482:	09c9      	lsreq	r1, r1, #7
    b484:	f101 417f 	addeq.w	r1, r1, #4278190080	; 0xff000000
    b488:	bf0a      	itet	eq
    b48a:	3102      	addeq	r1, #2
    b48c:	3404      	addne	r4, #4
    b48e:	eb04 0481 	addeq.w	r4, r4, r1, lsl #2
        vmbreak;
    b492:	f1b9 0f00 	cmp.w	r9, #0
    b496:	d007      	beq.n	b4a8 <luaV_execute+0x2214>
    b498:	4621      	mov	r1, r4
    b49a:	4638      	mov	r0, r7
    b49c:	f7f9 ff40 	bl	5320 <luaG_traceexec>
    b4a0:	4681      	mov	r9, r0
    b4a2:	6833      	ldr	r3, [r6, #0]
    b4a4:	f103 0a10 	add.w	sl, r3, #16
    b4a8:	f854 bb04 	ldr.w	fp, [r4], #4
    b4ac:	4a8f      	ldr	r2, [pc, #572]	; (b6ec <luaV_execute+0x2458>)
    b4ae:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    b4b2:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    b4b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4ba:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    b4be:	f7fd bf1e 	b.w	92fe <luaV_execute+0x6a>
        op_orderI(L, l_gti, luai_numgt, 1, TM_LT);
    b4c2:	2b13      	cmp	r3, #19
    b4c4:	d10c      	bne.n	b4e0 <luaV_execute+0x224c>
    b4c6:	4610      	mov	r0, r2
    b4c8:	f7f4 ff64 	bl	394 <__aeabi_i2d>
    b4cc:	4602      	mov	r2, r0
    b4ce:	460b      	mov	r3, r1
    b4d0:	e9d5 0100 	ldrd	r0, r1, [r5]
    b4d4:	f7f5 fa58 	bl	988 <__aeabi_dcmpgt>
    b4d8:	3800      	subs	r0, #0
    b4da:	bf18      	it	ne
    b4dc:	2001      	movne	r0, #1
    b4de:	e7c9      	b.n	b474 <luaV_execute+0x21e0>
    b4e0:	6873      	ldr	r3, [r6, #4]
    b4e2:	6134      	str	r4, [r6, #16]
    b4e4:	60fb      	str	r3, [r7, #12]
    b4e6:	2314      	movs	r3, #20
    b4e8:	9301      	str	r3, [sp, #4]
    b4ea:	ea4f 631b 	mov.w	r3, fp, lsr #24
    b4ee:	9300      	str	r3, [sp, #0]
    b4f0:	4629      	mov	r1, r5
    b4f2:	2301      	movs	r3, #1
    b4f4:	4638      	mov	r0, r7
    b4f6:	f00a fde6 	bl	160c6 <luaT_callorderiTM>
    b4fa:	f8d6 9014 	ldr.w	r9, [r6, #20]
    b4fe:	e7b9      	b.n	b474 <luaV_execute+0x21e0>
      }
      vmcase(OP_GEI) {
        op_orderI(L, l_gei, luai_numge, 1, TM_LE);
    b500:	7a2b      	ldrb	r3, [r5, #8]
    b502:	f3cb 4207 	ubfx	r2, fp, #16, #8
    b506:	2b03      	cmp	r3, #3
    b508:	f1a2 027f 	sub.w	r2, r2, #127	; 0x7f
    b50c:	d12f      	bne.n	b56e <luaV_execute+0x22da>
    b50e:	e9d5 0100 	ldrd	r0, r1, [r5]
    b512:	17d3      	asrs	r3, r2, #31
    b514:	4290      	cmp	r0, r2
    b516:	eb71 0303 	sbcs.w	r3, r1, r3
    b51a:	bfac      	ite	ge
    b51c:	2001      	movge	r0, #1
    b51e:	2000      	movlt	r0, #0
    b520:	f3cb 3bc0 	ubfx	fp, fp, #15, #1
    b524:	4583      	cmp	fp, r0
    b526:	bf01      	itttt	eq
    b528:	6821      	ldreq	r1, [r4, #0]
    b52a:	f8d6 9014 	ldreq.w	r9, [r6, #20]
    b52e:	09c9      	lsreq	r1, r1, #7
    b530:	f101 417f 	addeq.w	r1, r1, #4278190080	; 0xff000000
    b534:	bf0a      	itet	eq
    b536:	3102      	addeq	r1, #2
    b538:	3404      	addne	r4, #4
    b53a:	eb04 0481 	addeq.w	r4, r4, r1, lsl #2
        vmbreak;
    b53e:	f1b9 0f00 	cmp.w	r9, #0
    b542:	d007      	beq.n	b554 <luaV_execute+0x22c0>
    b544:	4621      	mov	r1, r4
    b546:	4638      	mov	r0, r7
    b548:	f7f9 feea 	bl	5320 <luaG_traceexec>
    b54c:	4681      	mov	r9, r0
    b54e:	6833      	ldr	r3, [r6, #0]
    b550:	f103 0a10 	add.w	sl, r3, #16
    b554:	f854 bb04 	ldr.w	fp, [r4], #4
    b558:	4a64      	ldr	r2, [pc, #400]	; (b6ec <luaV_execute+0x2458>)
    b55a:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    b55e:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    b562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b566:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    b56a:	f7fd bec8 	b.w	92fe <luaV_execute+0x6a>
        op_orderI(L, l_gei, luai_numge, 1, TM_LE);
    b56e:	2b13      	cmp	r3, #19
    b570:	d10c      	bne.n	b58c <luaV_execute+0x22f8>
    b572:	4610      	mov	r0, r2
    b574:	f7f4 ff0e 	bl	394 <__aeabi_i2d>
    b578:	4602      	mov	r2, r0
    b57a:	460b      	mov	r3, r1
    b57c:	e9d5 0100 	ldrd	r0, r1, [r5]
    b580:	f7f5 f9f8 	bl	974 <__aeabi_dcmpge>
    b584:	3800      	subs	r0, #0
    b586:	bf18      	it	ne
    b588:	2001      	movne	r0, #1
    b58a:	e7c9      	b.n	b520 <luaV_execute+0x228c>
    b58c:	6873      	ldr	r3, [r6, #4]
    b58e:	6134      	str	r4, [r6, #16]
    b590:	60fb      	str	r3, [r7, #12]
    b592:	2315      	movs	r3, #21
    b594:	9301      	str	r3, [sp, #4]
    b596:	ea4f 631b 	mov.w	r3, fp, lsr #24
    b59a:	9300      	str	r3, [sp, #0]
    b59c:	4629      	mov	r1, r5
    b59e:	2301      	movs	r3, #1
    b5a0:	4638      	mov	r0, r7
    b5a2:	f00a fd90 	bl	160c6 <luaT_callorderiTM>
    b5a6:	f8d6 9014 	ldr.w	r9, [r6, #20]
    b5aa:	e7b9      	b.n	b520 <luaV_execute+0x228c>
      }
      vmcase(OP_TEST) {
        int cond = !l_isfalse(s2v(ra));
    b5ac:	7a2d      	ldrb	r5, [r5, #8]
    b5ae:	2d01      	cmp	r5, #1
    b5b0:	d02a      	beq.n	b608 <luaV_execute+0x2374>
    b5b2:	f015 050f 	ands.w	r5, r5, #15
    b5b6:	bf18      	it	ne
    b5b8:	2501      	movne	r5, #1
        docondjump();
    b5ba:	f3cb 3bc0 	ubfx	fp, fp, #15, #1
    b5be:	45ab      	cmp	fp, r5
    b5c0:	bf01      	itttt	eq
    b5c2:	6821      	ldreq	r1, [r4, #0]
    b5c4:	f8d6 9014 	ldreq.w	r9, [r6, #20]
    b5c8:	09c9      	lsreq	r1, r1, #7
    b5ca:	f101 417f 	addeq.w	r1, r1, #4278190080	; 0xff000000
    b5ce:	bf0a      	itet	eq
    b5d0:	3102      	addeq	r1, #2
    b5d2:	3404      	addne	r4, #4
    b5d4:	eb04 0481 	addeq.w	r4, r4, r1, lsl #2
        vmbreak;
    b5d8:	f1b9 0f00 	cmp.w	r9, #0
    b5dc:	d007      	beq.n	b5ee <luaV_execute+0x235a>
    b5de:	4621      	mov	r1, r4
    b5e0:	4638      	mov	r0, r7
    b5e2:	f7f9 fe9d 	bl	5320 <luaG_traceexec>
    b5e6:	4681      	mov	r9, r0
    b5e8:	6833      	ldr	r3, [r6, #0]
    b5ea:	f103 0a10 	add.w	sl, r3, #16
    b5ee:	f854 bb04 	ldr.w	fp, [r4], #4
    b5f2:	4a3e      	ldr	r2, [pc, #248]	; (b6ec <luaV_execute+0x2458>)
    b5f4:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    b5f8:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    b5fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b600:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    b604:	f7fd be7b 	b.w	92fe <luaV_execute+0x6a>
        int cond = !l_isfalse(s2v(ra));
    b608:	2500      	movs	r5, #0
    b60a:	e7d6      	b.n	b5ba <luaV_execute+0x2326>
      }
      vmcase(OP_TESTSET) {
        TValue *rb = vRB(i);
    b60c:	f3cb 4e07 	ubfx	lr, fp, #16, #8
    b610:	eb0a 1e0e 	add.w	lr, sl, lr, lsl #4
        if (l_isfalse(rb) == GETARG_k(i))
    b614:	f89e c008 	ldrb.w	ip, [lr, #8]
    b618:	f1bc 0f01 	cmp.w	ip, #1
    b61c:	d023      	beq.n	b666 <luaV_execute+0x23d2>
    b61e:	f01c 0f0f 	tst.w	ip, #15
    b622:	bf0c      	ite	eq
    b624:	f04f 0801 	moveq.w	r8, #1
    b628:	f04f 0800 	movne.w	r8, #0
    b62c:	f3cb 3bc0 	ubfx	fp, fp, #15, #1
    b630:	45d8      	cmp	r8, fp
    b632:	d11a      	bne.n	b66a <luaV_execute+0x23d6>
          pc++;
    b634:	3404      	adds	r4, #4
        else {
          setobj2s(L, ra, rb);
          donextjump(ci);
        }
        vmbreak;
    b636:	f1b9 0f00 	cmp.w	r9, #0
    b63a:	d007      	beq.n	b64c <luaV_execute+0x23b8>
    b63c:	4621      	mov	r1, r4
    b63e:	4638      	mov	r0, r7
    b640:	f7f9 fe6e 	bl	5320 <luaG_traceexec>
    b644:	4681      	mov	r9, r0
    b646:	6833      	ldr	r3, [r6, #0]
    b648:	f103 0a10 	add.w	sl, r3, #16
    b64c:	f854 bb04 	ldr.w	fp, [r4], #4
    b650:	4a26      	ldr	r2, [pc, #152]	; (b6ec <luaV_execute+0x2458>)
    b652:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    b656:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    b65a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b65e:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    b662:	f7fd be4c 	b.w	92fe <luaV_execute+0x6a>
        if (l_isfalse(rb) == GETARG_k(i))
    b666:	46e0      	mov	r8, ip
    b668:	e7e0      	b.n	b62c <luaV_execute+0x2398>
          setobj2s(L, ra, rb);
    b66a:	e9de 2300 	ldrd	r2, r3, [lr]
    b66e:	f885 c008 	strb.w	ip, [r5, #8]
          donextjump(ci);
    b672:	6821      	ldr	r1, [r4, #0]
          setobj2s(L, ra, rb);
    b674:	e9c5 2300 	strd	r2, r3, [r5]
          donextjump(ci);
    b678:	09c9      	lsrs	r1, r1, #7
    b67a:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    b67e:	3102      	adds	r1, #2
    b680:	f8d6 9014 	ldr.w	r9, [r6, #20]
    b684:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    b688:	e7d5      	b.n	b636 <luaV_execute+0x23a2>
      }
      vmcase(OP_CALL) {
        CallInfo *newci;
        int b = GETARG_B(i);
        int nresults = GETARG_C(i) - 1;
        if (b != 0)  /* fixed number of arguments? */
    b68a:	f41b 0f7f 	tst.w	fp, #16711680	; 0xff0000
        int b = GETARG_B(i);
    b68e:	f3cb 4307 	ubfx	r3, fp, #16, #8
          L->top = ra + b;  /* top signals number of arguments */
    b692:	bf18      	it	ne
    b694:	eb05 1303 	addne.w	r3, r5, r3, lsl #4
        int nresults = GETARG_C(i) - 1;
    b698:	ea4f 621b 	mov.w	r2, fp, lsr #24
          L->top = ra + b;  /* top signals number of arguments */
    b69c:	bf18      	it	ne
    b69e:	60fb      	strne	r3, [r7, #12]
        /* else previous instruction set top */
        savepc(L);  /* in case of errors */
        if ((newci = luaD_precall(L, ra, nresults)) == NULL)
    b6a0:	4629      	mov	r1, r5
    b6a2:	4638      	mov	r0, r7
        int nresults = GETARG_C(i) - 1;
    b6a4:	3a01      	subs	r2, #1
        savepc(L);  /* in case of errors */
    b6a6:	6134      	str	r4, [r6, #16]
        if ((newci = luaD_precall(L, ra, nresults)) == NULL)
    b6a8:	f007 fe46 	bl	13338 <luaD_precall>
    b6ac:	2800      	cmp	r0, #0
    b6ae:	f47d ae2a 	bne.w	9306 <luaV_execute+0x72>
          updatetrap(ci);  /* C call; nothing else to be done */
    b6b2:	f8d6 9014 	ldr.w	r9, [r6, #20]
        else {  /* Lua call: run function in this same C frame */
          ci = newci;
          goto startfunc;
        }
        vmbreak;
    b6b6:	f1b9 0f00 	cmp.w	r9, #0
    b6ba:	d007      	beq.n	b6cc <luaV_execute+0x2438>
    b6bc:	4621      	mov	r1, r4
    b6be:	4638      	mov	r0, r7
    b6c0:	f7f9 fe2e 	bl	5320 <luaG_traceexec>
    b6c4:	4681      	mov	r9, r0
    b6c6:	6833      	ldr	r3, [r6, #0]
    b6c8:	f103 0a10 	add.w	sl, r3, #16
    b6cc:	4621      	mov	r1, r4
    b6ce:	f851 bb04 	ldr.w	fp, [r1], #4
    b6d2:	4a06      	ldr	r2, [pc, #24]	; (b6ec <luaV_execute+0x2458>)
    b6d4:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    b6d8:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    b6dc:	460c      	mov	r4, r1
    b6de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6e2:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    b6e6:	f7fd be0a 	b.w	92fe <luaV_execute+0x6a>
    b6ea:	bf00      	nop
    b6ec:	00017ae8 	.word	0x00017ae8
      vmcase(OP_TAILCALL) {
        int b = GETARG_B(i);  /* number of arguments + 1 (function) */
        int n;  /* number of results when calling a C function */
        int nparams1 = GETARG_C(i);
        /* delta is virtual 'func' - real 'func' (vararg functions) */
        int delta = (nparams1) ? ci->u.l.nextraargs + nparams1 : 0;
    b6f0:	ea5f 681b 	movs.w	r8, fp, lsr #24
    b6f4:	bf18      	it	ne
    b6f6:	69b3      	ldrne	r3, [r6, #24]
        int b = GETARG_B(i);  /* number of arguments + 1 (function) */
    b6f8:	f3cb 4907 	ubfx	r9, fp, #16, #8
        int delta = (nparams1) ? ci->u.l.nextraargs + nparams1 : 0;
    b6fc:	bf18      	it	ne
    b6fe:	4498      	addne	r8, r3
        if (b != 0)
    b700:	f1b9 0f00 	cmp.w	r9, #0
    b704:	d026      	beq.n	b754 <luaV_execute+0x24c0>
          L->top = ra + b;
    b706:	eb05 1309 	add.w	r3, r5, r9, lsl #4
    b70a:	60fb      	str	r3, [r7, #12]
        else  /* previous instruction set top */
          b = cast_int(L->top - ra);
        savepc(ci);  /* several calls here can raise errors */
        if (TESTARG_k(i)) {
    b70c:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
        savepc(ci);  /* several calls here can raise errors */
    b710:	6134      	str	r4, [r6, #16]
        if (TESTARG_k(i)) {
    b712:	d003      	beq.n	b71c <luaV_execute+0x2488>
          luaF_closeupval(L, base);  /* close upvalues from current call */
    b714:	4651      	mov	r1, sl
    b716:	4638      	mov	r0, r7
    b718:	f007 ff22 	bl	13560 <luaF_closeupval>
          lua_assert(L->tbclist < base);  /* no pending tbc variables */
          lua_assert(base == ci->func + 1);
        }
        if ((n = luaD_pretailcall(L, ci, ra, b, delta)) < 0)  /* Lua function? */
    b71c:	462a      	mov	r2, r5
    b71e:	464b      	mov	r3, r9
    b720:	4631      	mov	r1, r6
    b722:	4638      	mov	r0, r7
    b724:	f8cd 8000 	str.w	r8, [sp]
    b728:	f007 fd83 	bl	13232 <luaD_pretailcall>
    b72c:	1e02      	subs	r2, r0, #0
    b72e:	f6fd ade9 	blt.w	9304 <luaV_execute+0x70>
          goto startfunc;  /* execute the callee */
        else {  /* C function? */
          ci->func -= delta;  /* restore 'func' (if vararg) */
    b732:	6833      	ldr	r3, [r6, #0]
    b734:	eba3 1308 	sub.w	r3, r3, r8, lsl #4
    b738:	6033      	str	r3, [r6, #0]
          updatestack(ci);
        }
        if (nparams1)  /* vararg function? */
          ci->func -= ci->u.l.nextraargs + nparams1;
        L->top = ra + n;  /* set call for 'luaD_poscall' */
        luaD_poscall(L, ci, n);
    b73a:	4631      	mov	r1, r6
    b73c:	4638      	mov	r0, r7
    b73e:	f007 fcb8 	bl	130b2 <luaD_poscall>
        updatetrap(ci);  /* 'luaD_poscall' can change hooks */
    b742:	f8d6 9014 	ldr.w	r9, [r6, #20]
            for (; l_unlikely(nres > 1); nres--)
              setnilvalue(s2v(L->top++));  /* complete missing results */
          }
        }
       ret:  /* return from a Lua function */
        if (ci->callstatus & CIST_FRESH)
    b746:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    b748:	0759      	lsls	r1, r3, #29
    b74a:	f100 84c8 	bmi.w	c0de <luaV_execute+0x2e4a>
          return;  /* end this frame */
        else {
          ci = ci->previous;
    b74e:	68b6      	ldr	r6, [r6, #8]
          goto returning;  /* continue running caller in this frame */
    b750:	f7fd bda7 	b.w	92a2 <luaV_execute+0xe>
          b = cast_int(L->top - ra);
    b754:	68fb      	ldr	r3, [r7, #12]
    b756:	1b5b      	subs	r3, r3, r5
    b758:	ea4f 1923 	mov.w	r9, r3, asr #4
    b75c:	e7d6      	b.n	b70c <luaV_execute+0x2478>
        int n = GETARG_B(i) - 1;  /* number of results */
    b75e:	f3cb 4307 	ubfx	r3, fp, #16, #8
    b762:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
        int nparams1 = GETARG_C(i);
    b766:	ea4f 691b 	mov.w	r9, fp, lsr #24
        if (n < 0)  /* not fixed? */
    b76a:	b91b      	cbnz	r3, b774 <luaV_execute+0x24e0>
          n = cast_int(L->top - ra);  /* get what is available */
    b76c:	68fb      	ldr	r3, [r7, #12]
    b76e:	1b5b      	subs	r3, r3, r5
    b770:	ea4f 1823 	mov.w	r8, r3, asr #4
        if (TESTARG_k(i)) {  /* may there be open upvalues? */
    b774:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
        savepc(ci);
    b778:	6134      	str	r4, [r6, #16]
        if (TESTARG_k(i)) {  /* may there be open upvalues? */
    b77a:	d016      	beq.n	b7aa <luaV_execute+0x2516>
          if (L->top < ci->top)
    b77c:	6873      	ldr	r3, [r6, #4]
    b77e:	68fa      	ldr	r2, [r7, #12]
          ci->u2.nres = n;  /* save number of returns */
    b780:	f8c6 801c 	str.w	r8, [r6, #28]
          if (L->top < ci->top)
    b784:	429a      	cmp	r2, r3
            L->top = ci->top;
    b786:	bf38      	it	cc
    b788:	60fb      	strcc	r3, [r7, #12]
          luaF_close(L, base, CLOSEKTOP, 1);
    b78a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b78e:	2301      	movs	r3, #1
    b790:	4651      	mov	r1, sl
    b792:	4638      	mov	r0, r7
    b794:	f007 ff0c 	bl	135b0 <luaF_close>
          updatetrap(ci);
    b798:	6973      	ldr	r3, [r6, #20]
          updatestack(ci);
    b79a:	b133      	cbz	r3, b7aa <luaV_execute+0x2516>
    b79c:	6835      	ldr	r5, [r6, #0]
    b79e:	f3cb 1bc7 	ubfx	fp, fp, #7, #8
    b7a2:	f10b 0b01 	add.w	fp, fp, #1
    b7a6:	eb05 150b 	add.w	r5, r5, fp, lsl #4
        if (nparams1)  /* vararg function? */
    b7aa:	f1b9 0f00 	cmp.w	r9, #0
    b7ae:	d005      	beq.n	b7bc <luaV_execute+0x2528>
          ci->func -= ci->u.l.nextraargs + nparams1;
    b7b0:	69b3      	ldr	r3, [r6, #24]
    b7b2:	4499      	add	r9, r3
    b7b4:	6833      	ldr	r3, [r6, #0]
    b7b6:	eba3 1309 	sub.w	r3, r3, r9, lsl #4
    b7ba:	6033      	str	r3, [r6, #0]
        L->top = ra + n;  /* set call for 'luaD_poscall' */
    b7bc:	eb05 1508 	add.w	r5, r5, r8, lsl #4
        luaD_poscall(L, ci, n);
    b7c0:	4642      	mov	r2, r8
        L->top = ra + n;  /* set call for 'luaD_poscall' */
    b7c2:	60fd      	str	r5, [r7, #12]
        luaD_poscall(L, ci, n);
    b7c4:	e7b9      	b.n	b73a <luaV_execute+0x24a6>
        if (l_unlikely(L->hookmask)) {
    b7c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    b7c8:	b14a      	cbz	r2, b7de <luaV_execute+0x254a>
          luaD_poscall(L, ci, 0);  /* no hurry... */
    b7ca:	2200      	movs	r2, #0
          L->top = ra;
    b7cc:	60fd      	str	r5, [r7, #12]
          savepc(ci);
    b7ce:	6134      	str	r4, [r6, #16]
          luaD_poscall(L, ci, 1);  /* no hurry... */
    b7d0:	4631      	mov	r1, r6
    b7d2:	4638      	mov	r0, r7
    b7d4:	f007 fc6d 	bl	130b2 <luaD_poscall>
          trap = 1;
    b7d8:	f04f 0901 	mov.w	r9, #1
    b7dc:	e7b3      	b.n	b746 <luaV_execute+0x24b2>
          L->ci = ci->previous;  /* back to caller */
    b7de:	68b3      	ldr	r3, [r6, #8]
    b7e0:	617b      	str	r3, [r7, #20]
          L->top = base - 1;
    b7e2:	f1aa 0310 	sub.w	r3, sl, #16
    b7e6:	60fb      	str	r3, [r7, #12]
          for (nres = ci->nresults; l_unlikely(nres > 0); nres--)
    b7e8:	f9b6 3020 	ldrsh.w	r3, [r6, #32]
    b7ec:	2b00      	cmp	r3, #0
    b7ee:	ddaa      	ble.n	b746 <luaV_execute+0x24b2>
            setnilvalue(s2v(L->top++));  /* all results are nil */
    b7f0:	68f9      	ldr	r1, [r7, #12]
          for (nres = ci->nresults; l_unlikely(nres > 0); nres--)
    b7f2:	3b01      	subs	r3, #1
            setnilvalue(s2v(L->top++));  /* all results are nil */
    b7f4:	f101 0010 	add.w	r0, r1, #16
    b7f8:	60f8      	str	r0, [r7, #12]
    b7fa:	720a      	strb	r2, [r1, #8]
          for (nres = ci->nresults; l_unlikely(nres > 0); nres--)
    b7fc:	e7f6      	b.n	b7ec <luaV_execute+0x2558>
        if (l_unlikely(L->hookmask)) {
    b7fe:	f8d7 c070 	ldr.w	ip, [r7, #112]	; 0x70
    b802:	f1bc 0f00 	cmp.w	ip, #0
    b806:	d004      	beq.n	b812 <luaV_execute+0x257e>
          L->top = ra + 1;
    b808:	3510      	adds	r5, #16
    b80a:	60fd      	str	r5, [r7, #12]
          luaD_poscall(L, ci, 1);  /* no hurry... */
    b80c:	2201      	movs	r2, #1
          savepc(ci);
    b80e:	6134      	str	r4, [r6, #16]
          luaD_poscall(L, ci, 1);  /* no hurry... */
    b810:	e7de      	b.n	b7d0 <luaV_execute+0x253c>
          int nres = ci->nresults;
    b812:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
          L->ci = ci->previous;  /* back to caller */
    b816:	68b3      	ldr	r3, [r6, #8]
            L->top = base - 1;  /* asked for no results */
    b818:	f1aa 0110 	sub.w	r1, sl, #16
          L->ci = ci->previous;  /* back to caller */
    b81c:	617b      	str	r3, [r7, #20]
          if (nres == 0)
    b81e:	b908      	cbnz	r0, b824 <luaV_execute+0x2590>
            L->top = base - 1;  /* asked for no results */
    b820:	60f9      	str	r1, [r7, #12]
    b822:	e790      	b.n	b746 <luaV_execute+0x24b2>
            setobjs2s(L, base - 1, ra);  /* at least this result */
    b824:	e9d5 2300 	ldrd	r2, r3, [r5]
    b828:	e94a 2304 	strd	r2, r3, [sl, #-16]
    b82c:	7a2b      	ldrb	r3, [r5, #8]
    b82e:	720b      	strb	r3, [r1, #8]
            L->top = base;
    b830:	f8c7 a00c 	str.w	sl, [r7, #12]
            for (; l_unlikely(nres > 1); nres--)
    b834:	2801      	cmp	r0, #1
    b836:	dd86      	ble.n	b746 <luaV_execute+0x24b2>
              setnilvalue(s2v(L->top++));  /* complete missing results */
    b838:	68fb      	ldr	r3, [r7, #12]
            for (; l_unlikely(nres > 1); nres--)
    b83a:	3801      	subs	r0, #1
              setnilvalue(s2v(L->top++));  /* complete missing results */
    b83c:	f103 0210 	add.w	r2, r3, #16
    b840:	60fa      	str	r2, [r7, #12]
    b842:	f883 c008 	strb.w	ip, [r3, #8]
            for (; l_unlikely(nres > 1); nres--)
    b846:	e7f5      	b.n	b834 <luaV_execute+0x25a0>
        }
      }
      vmcase(OP_FORLOOP) {
        if (ttisinteger(s2v(ra + 2))) {  /* integer loop? */
    b848:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
    b84c:	f1bc 0f03 	cmp.w	ip, #3
    b850:	d11e      	bne.n	b890 <luaV_execute+0x25fc>
          lua_Unsigned count = l_castS2U(ivalue(s2v(ra + 1)));
    b852:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
          if (count > 0) {  /* still more iterations? */
    b856:	ea52 0100 	orrs.w	r1, r2, r0
          lua_Unsigned count = l_castS2U(ivalue(s2v(ra + 1)));
    b85a:	f105 0810 	add.w	r8, r5, #16
          if (count > 0) {  /* still more iterations? */
    b85e:	d038      	beq.n	b8d2 <luaV_execute+0x263e>
            lua_Integer step = ivalue(s2v(ra + 2));
            lua_Integer idx = ivalue(s2v(ra));  /* internal index */
    b860:	e9d5 3900 	ldrd	r3, r9, [r5]
            lua_Integer step = ivalue(s2v(ra + 2));
    b864:	e9d5 e108 	ldrd	lr, r1, [r5, #32]
            chgivalue(s2v(ra + 1), count - 1);  /* update counter */
    b868:	3a01      	subs	r2, #1
    b86a:	f140 30ff 	adc.w	r0, r0, #4294967295	; 0xffffffff
            idx = intop(+, idx, step);  /* add step to index */
    b86e:	eb13 030e 	adds.w	r3, r3, lr
    b872:	eb41 0109 	adc.w	r1, r1, r9
            chgivalue(s2v(ra + 1), count - 1);  /* update counter */
    b876:	e9c5 2004 	strd	r2, r0, [r5, #16]
            chgivalue(s2v(ra), idx);  /* update internal index */
    b87a:	e9c5 3100 	strd	r3, r1, [r5]
            setivalue(s2v(ra + 3), idx);  /* and control variable */
    b87e:	e9c5 310c 	strd	r3, r1, [r5, #48]	; 0x30
    b882:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
            pc -= GETARG_Bx(i);  /* jump back */
          }
        }
        else if (floatforloop(ra))  /* float loop */
          pc -= GETARG_Bx(i);  /* jump back */
    b886:	ea4f 3bdb 	mov.w	fp, fp, lsr #15
    b88a:	eba4 048b 	sub.w	r4, r4, fp, lsl #2
    b88e:	e020      	b.n	b8d2 <luaV_execute+0x263e>
  lua_Number step = fltvalue(s2v(ra + 2));
    b890:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
    b894:	e9cd 2306 	strd	r2, r3, [sp, #24]
  idx = luai_numadd(L, idx, step);  /* increment index */
    b898:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  lua_Number limit = fltvalue(s2v(ra + 1));
    b89c:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    b8a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  idx = luai_numadd(L, idx, step);  /* increment index */
    b8a4:	e9d5 2300 	ldrd	r2, r3, [r5]
    b8a8:	f7f4 fc28 	bl	fc <__adddf3>
  if (luai_numlt(0, step) ? luai_numle(idx, limit)
    b8ac:	2200      	movs	r2, #0
  idx = luai_numadd(L, idx, step);  /* increment index */
    b8ae:	4680      	mov	r8, r0
    b8b0:	4689      	mov	r9, r1
  if (luai_numlt(0, step) ? luai_numle(idx, limit)
    b8b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    b8b6:	2300      	movs	r3, #0
    b8b8:	f7f5 f866 	bl	988 <__aeabi_dcmpgt>
    b8bc:	4642      	mov	r2, r8
    b8be:	464b      	mov	r3, r9
    b8c0:	b318      	cbz	r0, b90a <luaV_execute+0x2676>
    b8c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    b8c6:	f7f5 f855 	bl	974 <__aeabi_dcmpge>
    b8ca:	3800      	subs	r0, #0
    b8cc:	bf18      	it	ne
    b8ce:	2001      	movne	r0, #1
    b8d0:	bb00      	cbnz	r0, b914 <luaV_execute+0x2680>
        updatetrap(ci);  /* allows a signal to break the loop */
    b8d2:	f8d6 9014 	ldr.w	r9, [r6, #20]
        vmbreak;
    b8d6:	f1b9 0f00 	cmp.w	r9, #0
    b8da:	d007      	beq.n	b8ec <luaV_execute+0x2658>
    b8dc:	4621      	mov	r1, r4
    b8de:	4638      	mov	r0, r7
    b8e0:	f7f9 fd1e 	bl	5320 <luaG_traceexec>
    b8e4:	4681      	mov	r9, r0
    b8e6:	6833      	ldr	r3, [r6, #0]
    b8e8:	f103 0a10 	add.w	sl, r3, #16
    b8ec:	4621      	mov	r1, r4
    b8ee:	f851 bb04 	ldr.w	fp, [r1], #4
    b8f2:	4a9e      	ldr	r2, [pc, #632]	; (bb6c <luaV_execute+0x28d8>)
    b8f4:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    b8f8:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    b8fc:	460c      	mov	r4, r1
    b8fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b902:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    b906:	f7fd bcfa 	b.w	92fe <luaV_execute+0x6a>
  if (luai_numlt(0, step) ? luai_numle(idx, limit)
    b90a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    b90e:	f7f5 f827 	bl	960 <__aeabi_dcmple>
    b912:	e7da      	b.n	b8ca <luaV_execute+0x2636>
    setfltvalue(s2v(ra + 3), idx);  /* and control variable */
    b914:	2313      	movs	r3, #19
    chgfltvalue(s2v(ra), idx);  /* update internal index */
    b916:	e9c5 8900 	strd	r8, r9, [r5]
    setfltvalue(s2v(ra + 3), idx);  /* and control variable */
    b91a:	e9c5 890c 	strd	r8, r9, [r5, #48]	; 0x30
    b91e:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    b922:	e7b0      	b.n	b886 <luaV_execute+0x25f2>
      }
      vmcase(OP_FORPREP) {
        savestate(L, ci);  /* in case of errors */
    b924:	6873      	ldr	r3, [r6, #4]
    b926:	6134      	str	r4, [r6, #16]
    b928:	60fb      	str	r3, [r7, #12]
  if (ttisinteger(pinit) && ttisinteger(pstep)) { /* integer loop? */
    b92a:	7a2a      	ldrb	r2, [r5, #8]
  TValue *plimit = s2v(ra + 1);
    b92c:	f105 0310 	add.w	r3, r5, #16
  if (ttisinteger(pinit) && ttisinteger(pstep)) { /* integer loop? */
    b930:	2a03      	cmp	r2, #3
  TValue *pstep = s2v(ra + 2);
    b932:	f105 0820 	add.w	r8, r5, #32
  if (ttisinteger(pinit) && ttisinteger(pstep)) { /* integer loop? */
    b936:	f040 80a3 	bne.w	ba80 <luaV_execute+0x27ec>
    b93a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    b93e:	2a03      	cmp	r2, #3
    b940:	f040 809e 	bne.w	ba80 <luaV_execute+0x27ec>
    lua_Integer init = ivalue(pinit);
    b944:	6829      	ldr	r1, [r5, #0]
    lua_Integer step = ivalue(pstep);
    b946:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
    lua_Integer init = ivalue(pinit);
    b94a:	9108      	str	r1, [sp, #32]
    b94c:	6869      	ldr	r1, [r5, #4]
    b94e:	910a      	str	r1, [sp, #40]	; 0x28
    lua_Integer step = ivalue(pstep);
    b950:	6a29      	ldr	r1, [r5, #32]
    b952:	9106      	str	r1, [sp, #24]
    if (step == 0)
    b954:	ea51 0108 	orrs.w	r1, r1, r8
    b958:	d103      	bne.n	b962 <luaV_execute+0x26ce>
      luaG_runerror(L, "'for' step is zero");
    b95a:	4638      	mov	r0, r7
    b95c:	4984      	ldr	r1, [pc, #528]	; (bb70 <luaV_execute+0x28dc>)
    b95e:	f007 f9e7 	bl	12d30 <luaG_runerror>
    setivalue(s2v(ra + 3), init);  /* control variable */
    b962:	9908      	ldr	r1, [sp, #32]
  if (!luaV_tointeger(lim, p, (step < 0 ? F2Iceil : F2Ifloor))) {
    b964:	f1b8 0f00 	cmp.w	r8, #0
    setivalue(s2v(ra + 3), init);  /* control variable */
    b968:	6329      	str	r1, [r5, #48]	; 0x30
    b96a:	990a      	ldr	r1, [sp, #40]	; 0x28
    b96c:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
    b970:	6369      	str	r1, [r5, #52]	; 0x34
  if (!luaV_tointeger(lim, p, (step < 0 ? F2Iceil : F2Ifloor))) {
    b972:	bfb4      	ite	lt
    b974:	2202      	movlt	r2, #2
    b976:	2201      	movge	r2, #1
    b978:	4618      	mov	r0, r3
    b97a:	a916      	add	r1, sp, #88	; 0x58
    b97c:	930d      	str	r3, [sp, #52]	; 0x34
    b97e:	f00a fe39 	bl	165f4 <luaV_tointeger>
    b982:	b9b8      	cbnz	r0, b9b4 <luaV_execute+0x2720>
    if (!tonumber(lim, &flim)) /* cannot convert to float? */
    b984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b986:	7a1a      	ldrb	r2, [r3, #8]
    b988:	2a13      	cmp	r2, #19
    b98a:	d12a      	bne.n	b9e2 <luaV_execute+0x274e>
    b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
    b990:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    if (luai_numlt(0, flim)) {  /* if it is positive, it is too large */
    b994:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    b998:	2200      	movs	r2, #0
    b99a:	2300      	movs	r3, #0
    b99c:	f7f4 fff4 	bl	988 <__aeabi_dcmpgt>
    b9a0:	b360      	cbz	r0, b9fc <luaV_execute+0x2768>
      if (step < 0) return 1;  /* initial value must be less than it */
    b9a2:	f1b8 0f00 	cmp.w	r8, #0
    b9a6:	db15      	blt.n	b9d4 <luaV_execute+0x2740>
      *p = LUA_MAXINTEGER;  /* truncate */
    b9a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b9ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      *p = LUA_MININTEGER;  /* truncate */
    b9b0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  return (step > 0 ? init > *p : init < *p);  /* not to run? */
    b9b4:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    b9b8:	9b06      	ldr	r3, [sp, #24]
    b9ba:	2b01      	cmp	r3, #1
    b9bc:	f178 0300 	sbcs.w	r3, r8, #0
    b9c0:	9b08      	ldr	r3, [sp, #32]
    b9c2:	db24      	blt.n	ba0e <luaV_execute+0x277a>
    b9c4:	4298      	cmp	r0, r3
    b9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b9c8:	eb71 0303 	sbcs.w	r3, r1, r3
    b9cc:	bfb4      	ite	lt
    b9ce:	2301      	movlt	r3, #1
    b9d0:	2300      	movge	r3, #0
    if (forlimit(L, init, plimit, &limit, step))
    b9d2:	b303      	cbz	r3, ba16 <luaV_execute+0x2782>
        if (forprep(L, ra))
          pc += GETARG_Bx(i) + 1;  /* skip the loop */
    b9d4:	ea4f 3bdb 	mov.w	fp, fp, lsr #15
    b9d8:	f10b 0b01 	add.w	fp, fp, #1
    b9dc:	eb04 048b 	add.w	r4, r4, fp, lsl #2
    b9e0:	e02b      	b.n	ba3a <luaV_execute+0x27a6>
    if (!tonumber(lim, &flim)) /* cannot convert to float? */
    b9e2:	4618      	mov	r0, r3
    b9e4:	a918      	add	r1, sp, #96	; 0x60
    b9e6:	930d      	str	r3, [sp, #52]	; 0x34
    b9e8:	f00a fd06 	bl	163f8 <luaV_tonumber_>
    b9ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b9ee:	2800      	cmp	r0, #0
    b9f0:	d1d0      	bne.n	b994 <luaV_execute+0x2700>
      luaG_forerror(L, plimit, "limit");
    b9f2:	4619      	mov	r1, r3
    b9f4:	4a5f      	ldr	r2, [pc, #380]	; (bb74 <luaV_execute+0x28e0>)
      luaG_forerror(L, pinit, "initial value");
    b9f6:	4638      	mov	r0, r7
    b9f8:	f7f9 fc24 	bl	5244 <luaG_forerror>
      if (step > 0) return 1;  /* initial value must be greater than it */
    b9fc:	9b06      	ldr	r3, [sp, #24]
    b9fe:	2b01      	cmp	r3, #1
    ba00:	f178 0300 	sbcs.w	r3, r8, #0
    ba04:	dae6      	bge.n	b9d4 <luaV_execute+0x2740>
      *p = LUA_MININTEGER;  /* truncate */
    ba06:	2200      	movs	r2, #0
    ba08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    ba0c:	e7d0      	b.n	b9b0 <luaV_execute+0x271c>
  return (step > 0 ? init > *p : init < *p);  /* not to run? */
    ba0e:	4283      	cmp	r3, r0
    ba10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ba12:	418b      	sbcs	r3, r1
    ba14:	e7da      	b.n	b9cc <luaV_execute+0x2738>
      if (step > 0) {  /* ascending loop? */
    ba16:	9b06      	ldr	r3, [sp, #24]
    ba18:	2b01      	cmp	r3, #1
    ba1a:	f178 0300 	sbcs.w	r3, r8, #0
        count = l_castS2U(limit) - l_castS2U(init);
    ba1e:	9b08      	ldr	r3, [sp, #32]
      if (step > 0) {  /* ascending loop? */
    ba20:	db25      	blt.n	ba6e <luaV_execute+0x27da>
        count = l_castS2U(limit) - l_castS2U(init);
    ba22:	1ac0      	subs	r0, r0, r3
    ba24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          count /= l_castS2U(step);
    ba26:	9a06      	ldr	r2, [sp, #24]
        count = l_castS2U(limit) - l_castS2U(init);
    ba28:	eb61 0103 	sbc.w	r1, r1, r3
          count /= l_castS2U(step);
    ba2c:	4643      	mov	r3, r8
        count /= l_castS2U(-(step + 1)) + 1u;
    ba2e:	f7f5 f805 	bl	a3c <__aeabi_uldivmod>
      setivalue(plimit, l_castU2S(count));
    ba32:	2303      	movs	r3, #3
    ba34:	e9c5 0104 	strd	r0, r1, [r5, #16]
    ba38:	762b      	strb	r3, [r5, #24]
        vmbreak;
    ba3a:	f1b9 0f00 	cmp.w	r9, #0
    ba3e:	d007      	beq.n	ba50 <luaV_execute+0x27bc>
    ba40:	4621      	mov	r1, r4
    ba42:	4638      	mov	r0, r7
    ba44:	f7f9 fc6c 	bl	5320 <luaG_traceexec>
    ba48:	4681      	mov	r9, r0
    ba4a:	6833      	ldr	r3, [r6, #0]
    ba4c:	f103 0a10 	add.w	sl, r3, #16
    ba50:	4621      	mov	r1, r4
    ba52:	f851 bb04 	ldr.w	fp, [r1], #4
    ba56:	4a45      	ldr	r2, [pc, #276]	; (bb6c <luaV_execute+0x28d8>)
    ba58:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    ba5c:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    ba60:	460c      	mov	r4, r1
    ba62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba66:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    ba6a:	f7fd bc48 	b.w	92fe <luaV_execute+0x6a>
        count = l_castS2U(init) - l_castS2U(limit);
    ba6e:	1a18      	subs	r0, r3, r0
    ba70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ba72:	eb63 0101 	sbc.w	r1, r3, r1
        count /= l_castS2U(-(step + 1)) + 1u;
    ba76:	9b06      	ldr	r3, [sp, #24]
    ba78:	425a      	negs	r2, r3
    ba7a:	eb68 0348 	sbc.w	r3, r8, r8, lsl #1
    ba7e:	e7d6      	b.n	ba2e <luaV_execute+0x279a>
    if (l_unlikely(!tonumber(plimit, &limit)))
    ba80:	7e2a      	ldrb	r2, [r5, #24]
    ba82:	2a13      	cmp	r2, #19
    ba84:	d151      	bne.n	bb2a <luaV_execute+0x2896>
    ba86:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    ba8a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    if (l_unlikely(!tonumber(pstep, &step)))
    ba8e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    ba92:	2b13      	cmp	r3, #19
    ba94:	d152      	bne.n	bb3c <luaV_execute+0x28a8>
    ba96:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
    ba9a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    if (l_unlikely(!tonumber(pinit, &init)))
    ba9e:	7a2b      	ldrb	r3, [r5, #8]
    baa0:	2b13      	cmp	r3, #19
    baa2:	d154      	bne.n	bb4e <luaV_execute+0x28ba>
    baa4:	e9d5 2300 	ldrd	r2, r3, [r5]
    baa8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    if (step == 0)
    baac:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    bab0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    bab4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    bab8:	2200      	movs	r2, #0
    baba:	2300      	movs	r3, #0
    babc:	f7f4 ff3c 	bl	938 <__aeabi_dcmpeq>
    bac0:	2800      	cmp	r0, #0
    bac2:	f47f af4a 	bne.w	b95a <luaV_execute+0x26c6>
    if (luai_numlt(0, step) ? luai_numlt(limit, init)
    bac6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    baca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    bace:	e9cd 2306 	strd	r2, r3, [sp, #24]
    bad2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    bad6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    bada:	2200      	movs	r2, #0
    badc:	2300      	movs	r3, #0
    bade:	f7f4 ff53 	bl	988 <__aeabi_dcmpgt>
    bae2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    bae6:	2800      	cmp	r0, #0
    bae8:	d03a      	beq.n	bb60 <luaV_execute+0x28cc>
    baea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    baee:	f7f4 ff2d 	bl	94c <__aeabi_dcmplt>
    baf2:	3800      	subs	r0, #0
    baf4:	bf18      	it	ne
    baf6:	2001      	movne	r0, #1
    baf8:	2800      	cmp	r0, #0
    bafa:	f47f af6b 	bne.w	b9d4 <luaV_execute+0x2740>
      setfltvalue(plimit, limit);
    bafe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    bb02:	e9c5 2304 	strd	r2, r3, [r5, #16]
      setfltvalue(pstep, step);
    bb06:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
      setfltvalue(plimit, limit);
    bb0a:	2313      	movs	r3, #19
      setfltvalue(pstep, step);
    bb0c:	e9c5 1208 	strd	r1, r2, [r5, #32]
      setfltvalue(s2v(ra), init);  /* internal index */
    bb10:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
      setfltvalue(plimit, limit);
    bb14:	762b      	strb	r3, [r5, #24]
      setfltvalue(s2v(ra), init);  /* internal index */
    bb16:	e9c5 1200 	strd	r1, r2, [r5]
      setfltvalue(s2v(ra + 3), init);  /* control variable */
    bb1a:	e9c5 120c 	strd	r1, r2, [r5, #48]	; 0x30
      setfltvalue(pstep, step);
    bb1e:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
      setfltvalue(s2v(ra), init);  /* internal index */
    bb22:	722b      	strb	r3, [r5, #8]
      setfltvalue(s2v(ra + 3), init);  /* control variable */
    bb24:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    bb28:	e787      	b.n	ba3a <luaV_execute+0x27a6>
    if (l_unlikely(!tonumber(plimit, &limit)))
    bb2a:	4618      	mov	r0, r3
    bb2c:	a916      	add	r1, sp, #88	; 0x58
    bb2e:	9306      	str	r3, [sp, #24]
    bb30:	f00a fc62 	bl	163f8 <luaV_tonumber_>
    bb34:	9b06      	ldr	r3, [sp, #24]
    bb36:	2800      	cmp	r0, #0
    bb38:	d1a9      	bne.n	ba8e <luaV_execute+0x27fa>
    bb3a:	e75a      	b.n	b9f2 <luaV_execute+0x275e>
    if (l_unlikely(!tonumber(pstep, &step)))
    bb3c:	4640      	mov	r0, r8
    bb3e:	a918      	add	r1, sp, #96	; 0x60
    bb40:	f00a fc5a 	bl	163f8 <luaV_tonumber_>
    bb44:	2800      	cmp	r0, #0
    bb46:	d1aa      	bne.n	ba9e <luaV_execute+0x280a>
      luaG_forerror(L, pstep, "step");
    bb48:	4641      	mov	r1, r8
    bb4a:	4a0b      	ldr	r2, [pc, #44]	; (bb78 <luaV_execute+0x28e4>)
    bb4c:	e753      	b.n	b9f6 <luaV_execute+0x2762>
    if (l_unlikely(!tonumber(pinit, &init)))
    bb4e:	4628      	mov	r0, r5
    bb50:	a914      	add	r1, sp, #80	; 0x50
    bb52:	f00a fc51 	bl	163f8 <luaV_tonumber_>
    bb56:	2800      	cmp	r0, #0
    bb58:	d1a8      	bne.n	baac <luaV_execute+0x2818>
      luaG_forerror(L, pinit, "initial value");
    bb5a:	4629      	mov	r1, r5
    bb5c:	4a07      	ldr	r2, [pc, #28]	; (bb7c <luaV_execute+0x28e8>)
    bb5e:	e74a      	b.n	b9f6 <luaV_execute+0x2762>
    if (luai_numlt(0, step) ? luai_numlt(limit, init)
    bb60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    bb64:	f7f4 ff10 	bl	988 <__aeabi_dcmpgt>
    bb68:	e7c3      	b.n	baf2 <luaV_execute+0x285e>
    bb6a:	bf00      	nop
    bb6c:	00017ae8 	.word	0x00017ae8
    bb70:	00018a85 	.word	0x00018a85
    bb74:	00018a98 	.word	0x00018a98
    bb78:	00018a9e 	.word	0x00018a9e
    bb7c:	00018aa3 	.word	0x00018aa3
      }
      vmcase(OP_TFORPREP) {
        /* create to-be-closed upvalue (if needed) */
        halfProtect(luaF_newtbcupval(L, ra + 3));
    bb80:	6873      	ldr	r3, [r6, #4]
        pc += GETARG_Bx(i);
    bb82:	ea4f 3bdb 	mov.w	fp, fp, lsr #15
        halfProtect(luaF_newtbcupval(L, ra + 3));
    bb86:	6134      	str	r4, [r6, #16]
    bb88:	4638      	mov	r0, r7
    bb8a:	60fb      	str	r3, [r7, #12]
    bb8c:	f105 0130 	add.w	r1, r5, #48	; 0x30
        i = *(pc++);  /* go to next instruction */
    bb90:	eb04 048b 	add.w	r4, r4, fp, lsl #2
        halfProtect(luaF_newtbcupval(L, ra + 3));
    bb94:	f7f9 fd8a 	bl	56ac <luaF_newtbcupval>
        i = *(pc++);  /* go to next instruction */
    bb98:	f854 bb04 	ldr.w	fp, [r4], #4
           'ra + 2' has the control variable, and 'ra + 3' has the
           to-be-closed variable. The call will use the stack after
           these values (starting at 'ra + 4')
        */
        /* push function, state, and control variable */
        memcpy(ra + 4, ra, 3 * sizeof(*ra));
    bb9c:	f105 0140 	add.w	r1, r5, #64	; 0x40
    bba0:	462b      	mov	r3, r5
    bba2:	460a      	mov	r2, r1
    bba4:	f105 0030 	add.w	r0, r5, #48	; 0x30
    bba8:	f853 cb04 	ldr.w	ip, [r3], #4
    bbac:	4283      	cmp	r3, r0
    bbae:	f842 cb04 	str.w	ip, [r2], #4
    bbb2:	d1f9      	bne.n	bba8 <luaV_execute+0x2914>
        L->top = ra + 4 + 3;
    bbb4:	f105 0370 	add.w	r3, r5, #112	; 0x70
    bbb8:	60fb      	str	r3, [r7, #12]
        ProtectNT(luaD_call(L, ra + 4, GETARG_C(i)));  /* do the call */
    bbba:	4638      	mov	r0, r7
    bbbc:	6134      	str	r4, [r6, #16]
    bbbe:	ea4f 621b 	mov.w	r2, fp, lsr #24
    bbc2:	f007 fc36 	bl	13432 <luaD_call>
    bbc6:	f8d6 9014 	ldr.w	r9, [r6, #20]
        updatestack(ci);  /* stack may have changed */
    bbca:	f1b9 0f00 	cmp.w	r9, #0
    bbce:	d006      	beq.n	bbde <luaV_execute+0x294a>
    bbd0:	6833      	ldr	r3, [r6, #0]
    bbd2:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    bbd6:	f103 0a10 	add.w	sl, r3, #16
    bbda:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
        i = *(pc++);  /* go to next instruction */
    bbde:	4621      	mov	r1, r4
    bbe0:	f851 bb04 	ldr.w	fp, [r1], #4
    bbe4:	460c      	mov	r4, r1
        lua_assert(GET_OPCODE(i) == OP_TFORLOOP && ra == RA(i));
        goto l_tforloop;
      }
      vmcase(OP_TFORLOOP) {
        l_tforloop:
        if (!ttisnil(s2v(ra + 4))) {  /* continue loop? */
    bbe6:	f895 1048 	ldrb.w	r1, [r5, #72]	; 0x48
    bbea:	070a      	lsls	r2, r1, #28
    bbec:	d009      	beq.n	bc02 <luaV_execute+0x296e>
          setobjs2s(L, ra + 2, ra + 4);  /* save control variable */
    bbee:	e9d5 2310 	ldrd	r2, r3, [r5, #64]	; 0x40
    bbf2:	e9c5 2308 	strd	r2, r3, [r5, #32]
          pc -= GETARG_Bx(i);  /* jump back */
    bbf6:	ea4f 3bdb 	mov.w	fp, fp, lsr #15
          setobjs2s(L, ra + 2, ra + 4);  /* save control variable */
    bbfa:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
          pc -= GETARG_Bx(i);  /* jump back */
    bbfe:	eba4 048b 	sub.w	r4, r4, fp, lsl #2
        }
        vmbreak;
    bc02:	f1b9 0f00 	cmp.w	r9, #0
    bc06:	d007      	beq.n	bc18 <luaV_execute+0x2984>
    bc08:	4621      	mov	r1, r4
    bc0a:	4638      	mov	r0, r7
    bc0c:	f7f9 fb88 	bl	5320 <luaG_traceexec>
    bc10:	4681      	mov	r9, r0
    bc12:	6833      	ldr	r3, [r6, #0]
    bc14:	f103 0a10 	add.w	sl, r3, #16
    bc18:	4621      	mov	r1, r4
    bc1a:	f851 bb04 	ldr.w	fp, [r1], #4
    bc1e:	4abd      	ldr	r2, [pc, #756]	; (bf14 <luaV_execute+0x2c80>)
    bc20:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    bc24:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    bc28:	460c      	mov	r4, r1
    bc2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc2e:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    bc32:	f7fd bb64 	b.w	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_SETLIST) {
        int n = GETARG_B(i);
        unsigned int last = GETARG_C(i);
        Table *h = hvalue(s2v(ra));
        if (n == 0)
    bc36:	f41b 0f7f 	tst.w	fp, #16711680	; 0xff0000
          n = cast_int(L->top - ra) - 1;  /* get up to the top */
    bc3a:	bf0c      	ite	eq
    bc3c:	68fb      	ldreq	r3, [r7, #12]
        else
          L->top = ci->top;  /* correct top in case of emergency GC */
    bc3e:	6873      	ldrne	r3, [r6, #4]
        int n = GETARG_B(i);
    bc40:	f3cb 4807 	ubfx	r8, fp, #16, #8
          n = cast_int(L->top - ra) - 1;  /* get up to the top */
    bc44:	bf04      	itt	eq
    bc46:	eba3 0805 	subeq.w	r8, r3, r5
    bc4a:	ea4f 1828 	moveq.w	r8, r8, asr #4
        Table *h = hvalue(s2v(ra));
    bc4e:	6829      	ldr	r1, [r5, #0]
          n = cast_int(L->top - ra) - 1;  /* get up to the top */
    bc50:	bf0c      	ite	eq
    bc52:	f108 38ff 	addeq.w	r8, r8, #4294967295	; 0xffffffff
          L->top = ci->top;  /* correct top in case of emergency GC */
    bc56:	60fb      	strne	r3, [r7, #12]
        last += n;
        if (TESTARG_k(i)) {
    bc58:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
          last += GETARG_Ax(*pc) * (MAXARG_C + 1);
    bc5c:	bf18      	it	ne
    bc5e:	6823      	ldrne	r3, [r4, #0]
        unsigned int last = GETARG_C(i);
    bc60:	ea4f 621b 	mov.w	r2, fp, lsr #24
        last += n;
    bc64:	4442      	add	r2, r8
          last += GETARG_Ax(*pc) * (MAXARG_C + 1);
    bc66:	bf18      	it	ne
    bc68:	09db      	lsrne	r3, r3, #7
        rb = k + GETARG_Ax(*pc); pc++;
    bc6a:	f104 0004 	add.w	r0, r4, #4
          last += GETARG_Ax(*pc) * (MAXARG_C + 1);
    bc6e:	bf1c      	itt	ne
    bc70:	eb02 2203 	addne.w	r2, r2, r3, lsl #8
          pc++;
    bc74:	4604      	movne	r4, r0
        }
        if (last > luaH_realasize(h))  /* needs more space? */
    bc76:	4608      	mov	r0, r1
    bc78:	9208      	str	r2, [sp, #32]
    bc7a:	9106      	str	r1, [sp, #24]
    bc7c:	f009 ffb7 	bl	15bee <luaH_realasize>
    bc80:	9a08      	ldr	r2, [sp, #32]
    bc82:	9906      	ldr	r1, [sp, #24]
    bc84:	4290      	cmp	r0, r2
    bc86:	d204      	bcs.n	bc92 <luaV_execute+0x29fe>
          luaH_resizearray(L, h, last);  /* preallocate it at once */
    bc88:	4638      	mov	r0, r7
    bc8a:	f00a f810 	bl	15cae <luaH_resizearray>
    bc8e:	9906      	ldr	r1, [sp, #24]
    bc90:	9a08      	ldr	r2, [sp, #32]
    bc92:	1e53      	subs	r3, r2, #1
    bc94:	e01f      	b.n	bcd6 <luaV_execute+0x2a42>
        for (; n > 0; n--) {
          TValue *val = s2v(ra + n);
          setobj2t(L, &h->array[last - 1], val);
    bc96:	68cb      	ldr	r3, [r1, #12]
    bc98:	9806      	ldr	r0, [sp, #24]
          TValue *val = s2v(ra + n);
    bc9a:	eb05 1208 	add.w	r2, r5, r8, lsl #4
          setobj2t(L, &h->array[last - 1], val);
    bc9e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    bca2:	e9d2 bc00 	ldrd	fp, ip, [r2]
    bca6:	e9c3 bc00 	strd	fp, ip, [r3]
    bcaa:	7a10      	ldrb	r0, [r2, #8]
    bcac:	7218      	strb	r0, [r3, #8]
          last--;
          luaC_barrierback(L, obj2gco(h), val);
    bcae:	7a13      	ldrb	r3, [r2, #8]
    bcb0:	065b      	lsls	r3, r3, #25
    bcb2:	d50c      	bpl.n	bcce <luaV_execute+0x2a3a>
    bcb4:	794b      	ldrb	r3, [r1, #5]
    bcb6:	0698      	lsls	r0, r3, #26
    bcb8:	d509      	bpl.n	bcce <luaV_execute+0x2a3a>
    bcba:	6813      	ldr	r3, [r2, #0]
    bcbc:	795b      	ldrb	r3, [r3, #5]
    bcbe:	f013 0f18 	tst.w	r3, #24
    bcc2:	d004      	beq.n	bcce <luaV_execute+0x2a3a>
    bcc4:	4638      	mov	r0, r7
    bcc6:	9108      	str	r1, [sp, #32]
    bcc8:	f008 fc3d 	bl	14546 <luaC_barrierback_>
    bccc:	9908      	ldr	r1, [sp, #32]
        for (; n > 0; n--) {
    bcce:	9b06      	ldr	r3, [sp, #24]
    bcd0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    bcd4:	3b01      	subs	r3, #1
    bcd6:	f1b8 0f00 	cmp.w	r8, #0
    bcda:	9306      	str	r3, [sp, #24]
    bcdc:	dcdb      	bgt.n	bc96 <luaV_execute+0x2a02>
        }
        vmbreak;
    bcde:	f1b9 0f00 	cmp.w	r9, #0
    bce2:	d007      	beq.n	bcf4 <luaV_execute+0x2a60>
    bce4:	4621      	mov	r1, r4
    bce6:	4638      	mov	r0, r7
    bce8:	f7f9 fb1a 	bl	5320 <luaG_traceexec>
    bcec:	4681      	mov	r9, r0
    bcee:	6833      	ldr	r3, [r6, #0]
    bcf0:	f103 0a10 	add.w	sl, r3, #16
    bcf4:	4621      	mov	r1, r4
    bcf6:	f851 bb04 	ldr.w	fp, [r1], #4
    bcfa:	4a86      	ldr	r2, [pc, #536]	; (bf14 <luaV_execute+0x2c80>)
    bcfc:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    bd00:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    bd04:	460c      	mov	r4, r1
    bd06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd0a:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    bd0e:	f7fd baf6 	b.w	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_CLOSURE) {
        Proto *p = cl->p->p[GETARG_Bx(i)];
    bd12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bd14:	ea4f 3bdb 	mov.w	fp, fp, lsr #15
    bd18:	68db      	ldr	r3, [r3, #12]
    bd1a:	6b98      	ldr	r0, [r3, #56]	; 0x38
        halfProtect(pushclosure(L, p, cl->upvals, base, ra));
    bd1c:	6873      	ldr	r3, [r6, #4]
        Proto *p = cl->p->p[GETARG_Bx(i)];
    bd1e:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
        halfProtect(pushclosure(L, p, cl->upvals, base, ra));
    bd22:	6134      	str	r4, [r6, #16]
    bd24:	60fb      	str	r3, [r7, #12]
    bd26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  Upvaldesc *uv = p->upvalues;
    bd28:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
        halfProtect(pushclosure(L, p, cl->upvals, base, ra));
    bd2c:	3310      	adds	r3, #16
    bd2e:	930a      	str	r3, [sp, #40]	; 0x28
  int nup = p->sizeupvalues;
    bd30:	f8db 300c 	ldr.w	r3, [fp, #12]
  LClosure *ncl = luaF_newLclosure(L, nup);
    bd34:	4638      	mov	r0, r7
    bd36:	4619      	mov	r1, r3
  int nup = p->sizeupvalues;
    bd38:	9308      	str	r3, [sp, #32]
  Upvaldesc *uv = p->upvalues;
    bd3a:	9206      	str	r2, [sp, #24]
  LClosure *ncl = luaF_newLclosure(L, nup);
    bd3c:	f007 fba6 	bl	1348c <luaF_newLclosure>
  setclLvalue2s(L, ra, ncl);  /* anchor new closure in stack */
    bd40:	2346      	movs	r3, #70	; 0x46
    bd42:	9a06      	ldr	r2, [sp, #24]
  ncl->p = p;
    bd44:	f8c0 b00c 	str.w	fp, [r0, #12]
  setclLvalue2s(L, ra, ncl);  /* anchor new closure in stack */
    bd48:	722b      	strb	r3, [r5, #8]
    bd4a:	4613      	mov	r3, r2
  for (i = 0; i < nup; i++) {  /* fill in its upvalues */
    bd4c:	2200      	movs	r2, #0
  LClosure *ncl = luaF_newLclosure(L, nup);
    bd4e:	4680      	mov	r8, r0
  setclLvalue2s(L, ra, ncl);  /* anchor new closure in stack */
    bd50:	6028      	str	r0, [r5, #0]
  for (i = 0; i < nup; i++) {  /* fill in its upvalues */
    bd52:	f100 0b10 	add.w	fp, r0, #16
    bd56:	9206      	str	r2, [sp, #24]
    bd58:	9a08      	ldr	r2, [sp, #32]
    bd5a:	9906      	ldr	r1, [sp, #24]
    bd5c:	428a      	cmp	r2, r1
    bd5e:	dc25      	bgt.n	bdac <luaV_execute+0x2b18>
        checkGC(L, ra + 1);
    bd60:	693b      	ldr	r3, [r7, #16]
    bd62:	68db      	ldr	r3, [r3, #12]
    bd64:	2b00      	cmp	r3, #0
    bd66:	dd07      	ble.n	bd78 <luaV_execute+0x2ae4>
    bd68:	3510      	adds	r5, #16
    bd6a:	6134      	str	r4, [r6, #16]
    bd6c:	4638      	mov	r0, r7
    bd6e:	60fd      	str	r5, [r7, #12]
    bd70:	f008 fc81 	bl	14676 <luaC_step>
    bd74:	f8d6 9014 	ldr.w	r9, [r6, #20]
        vmbreak;
    bd78:	f1b9 0f00 	cmp.w	r9, #0
    bd7c:	d007      	beq.n	bd8e <luaV_execute+0x2afa>
    bd7e:	4621      	mov	r1, r4
    bd80:	4638      	mov	r0, r7
    bd82:	f7f9 facd 	bl	5320 <luaG_traceexec>
    bd86:	4681      	mov	r9, r0
    bd88:	6833      	ldr	r3, [r6, #0]
    bd8a:	f103 0a10 	add.w	sl, r3, #16
    bd8e:	4621      	mov	r1, r4
    bd90:	f851 bb04 	ldr.w	fp, [r1], #4
    bd94:	4a5f      	ldr	r2, [pc, #380]	; (bf14 <luaV_execute+0x2c80>)
    bd96:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    bd9a:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    bd9e:	460c      	mov	r4, r1
    bda0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bda4:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    bda8:	f7fd baa9 	b.w	92fe <luaV_execute+0x6a>
    if (uv[i].instack)  /* upvalue refers to local variable? */
    bdac:	791a      	ldrb	r2, [r3, #4]
      ncl->upvals[i] = luaF_findupval(L, base + uv[i].idx);
    bdae:	7959      	ldrb	r1, [r3, #5]
    if (uv[i].instack)  /* upvalue refers to local variable? */
    bdb0:	b1fa      	cbz	r2, bdf2 <luaV_execute+0x2b5e>
      ncl->upvals[i] = luaF_findupval(L, base + uv[i].idx);
    bdb2:	4638      	mov	r0, r7
    bdb4:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
    bdb8:	930d      	str	r3, [sp, #52]	; 0x34
    bdba:	f007 fba0 	bl	134fe <luaF_findupval>
    bdbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bdc0:	f8cb 0000 	str.w	r0, [fp]
    luaC_objbarrier(L, ncl, ncl->upvals[i]);
    bdc4:	f898 2005 	ldrb.w	r2, [r8, #5]
    bdc8:	0692      	lsls	r2, r2, #26
    bdca:	d50b      	bpl.n	bde4 <luaV_execute+0x2b50>
    bdcc:	f8db 2000 	ldr.w	r2, [fp]
    bdd0:	7951      	ldrb	r1, [r2, #5]
    bdd2:	f011 0f18 	tst.w	r1, #24
    bdd6:	d005      	beq.n	bde4 <luaV_execute+0x2b50>
    bdd8:	4641      	mov	r1, r8
    bdda:	4638      	mov	r0, r7
    bddc:	930d      	str	r3, [sp, #52]	; 0x34
    bdde:	f008 fb8e 	bl	144fe <luaC_barrier_>
    bde2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  for (i = 0; i < nup; i++) {  /* fill in its upvalues */
    bde4:	9a06      	ldr	r2, [sp, #24]
    bde6:	f10b 0b04 	add.w	fp, fp, #4
    bdea:	3201      	adds	r2, #1
    bdec:	9206      	str	r2, [sp, #24]
    bdee:	3308      	adds	r3, #8
    bdf0:	e7b2      	b.n	bd58 <luaV_execute+0x2ac4>
      ncl->upvals[i] = encup[uv[i].idx];
    bdf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bdf4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    bdf8:	f8cb 2000 	str.w	r2, [fp]
    bdfc:	e7e2      	b.n	bdc4 <luaV_execute+0x2b30>
      }
      vmcase(OP_VARARG) {
        int n = GETARG_C(i) - 1;  /* required results */
        Protect(luaT_getvarargs(L, ci, ra, n));
    bdfe:	6873      	ldr	r3, [r6, #4]
    be00:	6134      	str	r4, [r6, #16]
    be02:	60fb      	str	r3, [r7, #12]
        int n = GETARG_C(i) - 1;  /* required results */
    be04:	ea4f 631b 	mov.w	r3, fp, lsr #24
        Protect(luaT_getvarargs(L, ci, ra, n));
    be08:	462a      	mov	r2, r5
    be0a:	4631      	mov	r1, r6
    be0c:	4638      	mov	r0, r7
    be0e:	3b01      	subs	r3, #1
    be10:	f00a f9be 	bl	16190 <luaT_getvarargs>
    be14:	f8d6 9014 	ldr.w	r9, [r6, #20]
        vmbreak;
    be18:	f1b9 0f00 	cmp.w	r9, #0
    be1c:	d007      	beq.n	be2e <luaV_execute+0x2b9a>
    be1e:	4621      	mov	r1, r4
    be20:	4638      	mov	r0, r7
    be22:	f7f9 fa7d 	bl	5320 <luaG_traceexec>
    be26:	4681      	mov	r9, r0
    be28:	6833      	ldr	r3, [r6, #0]
    be2a:	f103 0a10 	add.w	sl, r3, #16
    be2e:	4621      	mov	r1, r4
    be30:	f851 bb04 	ldr.w	fp, [r1], #4
    be34:	4a37      	ldr	r2, [pc, #220]	; (bf14 <luaV_execute+0x2c80>)
    be36:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    be3a:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    be3e:	460c      	mov	r4, r1
    be40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be44:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    be48:	f7fd ba59 	b.w	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_VARARGPREP) {
        ProtectNT(luaT_adjustvarargs(L, GETARG_A(i), ci, cl->p));
    be4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    be4e:	4632      	mov	r2, r6
    be50:	4638      	mov	r0, r7
    be52:	68db      	ldr	r3, [r3, #12]
    be54:	6134      	str	r4, [r6, #16]
    be56:	f3cb 11c7 	ubfx	r1, fp, #7, #8
    be5a:	f00a f954 	bl	16106 <luaT_adjustvarargs>
    be5e:	f8d6 9014 	ldr.w	r9, [r6, #20]
        if (l_unlikely(trap)) {  /* previous "Protect" updated trap */
    be62:	f1b9 0f00 	cmp.w	r9, #0
    be66:	d005      	beq.n	be74 <luaV_execute+0x2be0>
          luaD_hookcall(L, ci);
    be68:	4631      	mov	r1, r6
    be6a:	4638      	mov	r0, r7
    be6c:	f007 f8ca 	bl	13004 <luaD_hookcall>
          L->oldpc = 1;  /* next opcode will be seen as a "new" line */
    be70:	2301      	movs	r3, #1
    be72:	667b      	str	r3, [r7, #100]	; 0x64
        }
        updatebase(ci);  /* function has new base after adjustment */
    be74:	6833      	ldr	r3, [r6, #0]
    be76:	f103 0a10 	add.w	sl, r3, #16
        vmbreak;
    be7a:	f1b9 0f00 	cmp.w	r9, #0
    be7e:	d007      	beq.n	be90 <luaV_execute+0x2bfc>
    be80:	4621      	mov	r1, r4
    be82:	4638      	mov	r0, r7
    be84:	f7f9 fa4c 	bl	5320 <luaG_traceexec>
    be88:	4681      	mov	r9, r0
    be8a:	6833      	ldr	r3, [r6, #0]
    be8c:	f103 0a10 	add.w	sl, r3, #16
    be90:	4621      	mov	r1, r4
    be92:	f851 bb04 	ldr.w	fp, [r1], #4
    be96:	4a1f      	ldr	r2, [pc, #124]	; (bf14 <luaV_execute+0x2c80>)
    be98:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    be9c:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    bea0:	460c      	mov	r4, r1
    bea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bea6:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    beaa:	f7fd ba28 	b.w	92fe <luaV_execute+0x6a>
      }
      vmcase(OP_EXTRAARG) {
        lua_assert(0);
        vmbreak;
    beae:	f1b9 0f00 	cmp.w	r9, #0
    beb2:	d007      	beq.n	bec4 <luaV_execute+0x2c30>
    beb4:	4621      	mov	r1, r4
    beb6:	4638      	mov	r0, r7
    beb8:	f7f9 fa32 	bl	5320 <luaG_traceexec>
    bebc:	4681      	mov	r9, r0
    bebe:	6833      	ldr	r3, [r6, #0]
    bec0:	f103 0a10 	add.w	sl, r3, #16
    bec4:	4621      	mov	r1, r4
    bec6:	f851 bb04 	ldr.w	fp, [r1], #4
    beca:	4a12      	ldr	r2, [pc, #72]	; (bf14 <luaV_execute+0x2c80>)
    becc:	f3cb 15c7 	ubfx	r5, fp, #7, #8
    bed0:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
    bed4:	460c      	mov	r4, r1
    bed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    beda:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
    bede:	f7fd ba0e 	b.w	92fe <luaV_execute+0x6a>
        op_arithK(L, l_addi, luai_numadd);
    bee2:	2b13      	cmp	r3, #19
    bee4:	f47d af9e 	bne.w	9e24 <luaV_execute+0xb90>
    bee8:	e9dc 2300 	ldrd	r2, r3, [ip]
    beec:	e9cd 2306 	strd	r2, r3, [sp, #24]
    bef0:	f89b 3008 	ldrb.w	r3, [fp, #8]
    bef4:	2b13      	cmp	r3, #19
    bef6:	f47d afb5 	bne.w	9e64 <luaV_execute+0xbd0>
    befa:	e9db 2300 	ldrd	r2, r3, [fp]
    befe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    bf02:	f7f4 f8fb 	bl	fc <__adddf3>
    bf06:	2313      	movs	r3, #19
    bf08:	4644      	mov	r4, r8
    bf0a:	e9c5 0100 	strd	r0, r1, [r5]
    bf0e:	722b      	strb	r3, [r5, #8]
    bf10:	f7fd bf88 	b.w	9e24 <luaV_execute+0xb90>
    bf14:	00017ae8 	.word	0x00017ae8
        op_arithK(L, l_subi, luai_numsub);
    bf18:	2b13      	cmp	r3, #19
    bf1a:	f47d afd7 	bne.w	9ecc <luaV_execute+0xc38>
    bf1e:	e9dc 2300 	ldrd	r2, r3, [ip]
    bf22:	e9cd 2306 	strd	r2, r3, [sp, #24]
    bf26:	f89b 3008 	ldrb.w	r3, [fp, #8]
    bf2a:	2b13      	cmp	r3, #19
    bf2c:	f47d afee 	bne.w	9f0c <luaV_execute+0xc78>
    bf30:	e9db 2300 	ldrd	r2, r3, [fp]
    bf34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    bf38:	f7f4 f8de 	bl	f8 <__aeabi_dsub>
    bf3c:	2313      	movs	r3, #19
    bf3e:	4644      	mov	r4, r8
    bf40:	e9c5 0100 	strd	r0, r1, [r5]
    bf44:	722b      	strb	r3, [r5, #8]
    bf46:	f7fd bfc1 	b.w	9ecc <luaV_execute+0xc38>
        op_arithK(L, l_muli, luai_nummul);
    bf4a:	2b13      	cmp	r3, #19
    bf4c:	f47e a813 	bne.w	9f76 <luaV_execute+0xce2>
    bf50:	e9de 2300 	ldrd	r2, r3, [lr]
    bf54:	e9cd 2306 	strd	r2, r3, [sp, #24]
    bf58:	f89b 3008 	ldrb.w	r3, [fp, #8]
    bf5c:	2b13      	cmp	r3, #19
    bf5e:	f47e a82a 	bne.w	9fb6 <luaV_execute+0xd22>
    bf62:	e9db 2300 	ldrd	r2, r3, [fp]
    bf66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    bf6a:	f7f4 fa7d 	bl	468 <__aeabi_dmul>
    bf6e:	2313      	movs	r3, #19
    bf70:	4644      	mov	r4, r8
    bf72:	e9c5 0100 	strd	r0, r1, [r5]
    bf76:	722b      	strb	r3, [r5, #8]
    bf78:	f7fd bffd 	b.w	9f76 <luaV_execute+0xce2>
        op_arithK(L, luaV_mod, luaV_modf);
    bf7c:	2b13      	cmp	r3, #19
    bf7e:	f47e a847 	bne.w	a010 <luaV_execute+0xd7c>
    bf82:	e9dc 2300 	ldrd	r2, r3, [ip]
    bf86:	f89b 1008 	ldrb.w	r1, [fp, #8]
    bf8a:	2913      	cmp	r1, #19
    bf8c:	f47e a862 	bne.w	a054 <luaV_execute+0xdc0>
    bf90:	e9db 0100 	ldrd	r0, r1, [fp]
    bf94:	e9cd 0100 	strd	r0, r1, [sp]
    bf98:	4638      	mov	r0, r7
    bf9a:	f00a fbe3 	bl	16764 <luaV_modf>
    bf9e:	2313      	movs	r3, #19
    bfa0:	4644      	mov	r4, r8
    bfa2:	e9c5 0100 	strd	r0, r1, [r5]
    bfa6:	722b      	strb	r3, [r5, #8]
    bfa8:	f7fe b832 	b.w	a010 <luaV_execute+0xd7c>
        op_arithK(L, luaV_idiv, luai_numidiv);
    bfac:	2b13      	cmp	r3, #19
    bfae:	f47e a92c 	bne.w	a20a <luaV_execute+0xf76>
    bfb2:	e9dc 2300 	ldrd	r2, r3, [ip]
    bfb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    bfba:	f89b 3008 	ldrb.w	r3, [fp, #8]
    bfbe:	2b13      	cmp	r3, #19
    bfc0:	f47e a945 	bne.w	a24e <luaV_execute+0xfba>
    bfc4:	e9db 2300 	ldrd	r2, r3, [fp]
    bfc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    bfcc:	f7f4 fb76 	bl	6bc <__aeabi_ddiv>
    bfd0:	f7f4 fff2 	bl	fb8 <floor>
    bfd4:	2313      	movs	r3, #19
    bfd6:	4644      	mov	r4, r8
    bfd8:	e9c5 0100 	strd	r0, r1, [r5]
    bfdc:	722b      	strb	r3, [r5, #8]
    bfde:	f7fe b914 	b.w	a20a <luaV_execute+0xf76>
        op_arith(L, l_addi, luai_numadd);
    bfe2:	2b13      	cmp	r3, #19
    bfe4:	f47e aa9d 	bne.w	a522 <luaV_execute+0x128e>
    bfe8:	e9dc 2300 	ldrd	r2, r3, [ip]
    bfec:	e9cd 2306 	strd	r2, r3, [sp, #24]
    bff0:	f89b 3008 	ldrb.w	r3, [fp, #8]
    bff4:	2b13      	cmp	r3, #19
    bff6:	f47e aab4 	bne.w	a562 <luaV_execute+0x12ce>
    bffa:	e9db 2300 	ldrd	r2, r3, [fp]
    bffe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    c002:	f7f4 f87b 	bl	fc <__adddf3>
    c006:	2313      	movs	r3, #19
    c008:	4644      	mov	r4, r8
    c00a:	e9c5 0100 	strd	r0, r1, [r5]
    c00e:	722b      	strb	r3, [r5, #8]
    c010:	f7fe ba87 	b.w	a522 <luaV_execute+0x128e>
        op_arith(L, l_subi, luai_numsub);
    c014:	2b13      	cmp	r3, #19
    c016:	f47e aad0 	bne.w	a5ba <luaV_execute+0x1326>
    c01a:	e9dc 2300 	ldrd	r2, r3, [ip]
    c01e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c022:	f89b 3008 	ldrb.w	r3, [fp, #8]
    c026:	2b13      	cmp	r3, #19
    c028:	f47e aae7 	bne.w	a5fa <luaV_execute+0x1366>
    c02c:	e9db 2300 	ldrd	r2, r3, [fp]
    c030:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    c034:	f7f4 f860 	bl	f8 <__aeabi_dsub>
    c038:	2313      	movs	r3, #19
    c03a:	4644      	mov	r4, r8
    c03c:	e9c5 0100 	strd	r0, r1, [r5]
    c040:	722b      	strb	r3, [r5, #8]
    c042:	f7fe baba 	b.w	a5ba <luaV_execute+0x1326>
        op_arith(L, l_muli, luai_nummul);
    c046:	2b13      	cmp	r3, #19
    c048:	f47e ab06 	bne.w	a658 <luaV_execute+0x13c4>
    c04c:	e9dc 2300 	ldrd	r2, r3, [ip]
    c050:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c054:	f89b 3008 	ldrb.w	r3, [fp, #8]
    c058:	2b13      	cmp	r3, #19
    c05a:	f47e ab1d 	bne.w	a698 <luaV_execute+0x1404>
    c05e:	e9db 2300 	ldrd	r2, r3, [fp]
    c062:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    c066:	f7f4 f9ff 	bl	468 <__aeabi_dmul>
    c06a:	2313      	movs	r3, #19
    c06c:	4644      	mov	r4, r8
    c06e:	e9c5 0100 	strd	r0, r1, [r5]
    c072:	722b      	strb	r3, [r5, #8]
    c074:	f7fe baf0 	b.w	a658 <luaV_execute+0x13c4>
        op_arith(L, luaV_mod, luaV_modf);
    c078:	2b13      	cmp	r3, #19
    c07a:	f47e ab3b 	bne.w	a6f4 <luaV_execute+0x1460>
    c07e:	e9dc 2300 	ldrd	r2, r3, [ip]
    c082:	f89b 1008 	ldrb.w	r1, [fp, #8]
    c086:	2913      	cmp	r1, #19
    c088:	f47e ab56 	bne.w	a738 <luaV_execute+0x14a4>
    c08c:	e9db 0100 	ldrd	r0, r1, [fp]
    c090:	e9cd 0100 	strd	r0, r1, [sp]
    c094:	4638      	mov	r0, r7
    c096:	f00a fb65 	bl	16764 <luaV_modf>
    c09a:	2313      	movs	r3, #19
    c09c:	4644      	mov	r4, r8
    c09e:	e9c5 0100 	strd	r0, r1, [r5]
    c0a2:	722b      	strb	r3, [r5, #8]
    c0a4:	f7fe bb26 	b.w	a6f4 <luaV_execute+0x1460>
        op_arith(L, luaV_idiv, luai_numidiv);
    c0a8:	2b13      	cmp	r3, #19
    c0aa:	f47e ac1d 	bne.w	a8e8 <luaV_execute+0x1654>
    c0ae:	e9dc 2300 	ldrd	r2, r3, [ip]
    c0b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c0b6:	f89b 3008 	ldrb.w	r3, [fp, #8]
    c0ba:	2b13      	cmp	r3, #19
    c0bc:	f47e ac36 	bne.w	a92c <luaV_execute+0x1698>
    c0c0:	e9db 2300 	ldrd	r2, r3, [fp]
    c0c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    c0c8:	f7f4 faf8 	bl	6bc <__aeabi_ddiv>
    c0cc:	f7f4 ff74 	bl	fb8 <floor>
    c0d0:	2313      	movs	r3, #19
    c0d2:	4644      	mov	r4, r8
    c0d4:	e9c5 0100 	strd	r0, r1, [r5]
    c0d8:	722b      	strb	r3, [r5, #8]
    c0da:	f7fe bc05 	b.w	a8e8 <luaV_execute+0x1654>
      }
    }
  }
}
    c0de:	b01d      	add	sp, #116	; 0x74
    c0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c0e4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    c0e4:	4b0e      	ldr	r3, [pc, #56]	; (c120 <z_sys_init_run_level+0x3c>)
{
    c0e6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    c0e8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    c0ec:	3001      	adds	r0, #1
    c0ee:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    c0f2:	42a6      	cmp	r6, r4
    c0f4:	d800      	bhi.n	c0f8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    c0f6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    c0f8:	e9d4 3500 	ldrd	r3, r5, [r4]
    c0fc:	4628      	mov	r0, r5
    c0fe:	4798      	blx	r3
		if (dev != NULL) {
    c100:	b165      	cbz	r5, c11c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    c102:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    c104:	b130      	cbz	r0, c114 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    c106:	2800      	cmp	r0, #0
    c108:	bfb8      	it	lt
    c10a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    c10c:	28ff      	cmp	r0, #255	; 0xff
    c10e:	bfa8      	it	ge
    c110:	20ff      	movge	r0, #255	; 0xff
    c112:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    c114:	785a      	ldrb	r2, [r3, #1]
    c116:	f042 0201 	orr.w	r2, r2, #1
    c11a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    c11c:	3408      	adds	r4, #8
    c11e:	e7e8      	b.n	c0f2 <z_sys_init_run_level+0xe>
    c120:	00017c34 	.word	0x00017c34

0000c124 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    c124:	4b01      	ldr	r3, [pc, #4]	; (c12c <z_impl_z_errno+0x8>)
    c126:	6898      	ldr	r0, [r3, #8]
}
    c128:	3060      	adds	r0, #96	; 0x60
    c12a:	4770      	bx	lr
    c12c:	20000348 	.word	0x20000348

0000c130 <init_idle_thread>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
    c130:	2370      	movs	r3, #112	; 0x70
{
    c132:	b510      	push	{r4, lr}
	struct k_thread *thread = &z_idle_threads[i];
    c134:	4c0f      	ldr	r4, [pc, #60]	; (c174 <init_idle_thread+0x44>)
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    c136:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
    c138:	fb03 4400 	mla	r4, r3, r0, r4
	z_setup_new_thread(thread, stack,
    c13c:	2300      	movs	r3, #0
{
    c13e:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    c140:	e9cd 2304 	strd	r2, r3, [sp, #16]
    c144:	220f      	movs	r2, #15
    c146:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    c14a:	2218      	movs	r2, #24
	z_setup_new_thread(thread, stack,
    c14c:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    c14e:	4b0a      	ldr	r3, [pc, #40]	; (c178 <init_idle_thread+0x48>)
	z_setup_new_thread(thread, stack,
    c150:	490a      	ldr	r1, [pc, #40]	; (c17c <init_idle_thread+0x4c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    c152:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
    c156:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    c15a:	9300      	str	r3, [sp, #0]
    c15c:	f44f 7280 	mov.w	r2, #256	; 0x100
    c160:	4620      	mov	r0, r4
    c162:	4b07      	ldr	r3, [pc, #28]	; (c180 <init_idle_thread+0x50>)
    c164:	f000 f89c 	bl	c2a0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c168:	7b63      	ldrb	r3, [r4, #13]
    c16a:	f023 0304 	bic.w	r3, r3, #4
    c16e:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    c170:	b006      	add	sp, #24
    c172:	bd10      	pop	{r4, pc}
    c174:	20000248 	.word	0x20000248
    c178:	20000348 	.word	0x20000348
    c17c:	20002428 	.word	0x20002428
    c180:	000168fb 	.word	0x000168fb

0000c184 <bg_thread_main>:
	z_sys_post_kernel = true;
    c184:	2201      	movs	r2, #1
{
    c186:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    c188:	4b09      	ldr	r3, [pc, #36]	; (c1b0 <bg_thread_main+0x2c>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    c18a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    c18c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    c18e:	f7ff ffa9 	bl	c0e4 <z_sys_init_run_level>
	boot_banner();
    c192:	f000 fda7 	bl	cce4 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    c196:	2003      	movs	r0, #3
    c198:	f7ff ffa4 	bl	c0e4 <z_sys_init_run_level>
	z_init_static_threads();
    c19c:	f000 f8aa 	bl	c2f4 <z_init_static_threads>
	main();
    c1a0:	f7f7 f8f8 	bl	3394 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    c1a4:	4a03      	ldr	r2, [pc, #12]	; (c1b4 <bg_thread_main+0x30>)
    c1a6:	7b13      	ldrb	r3, [r2, #12]
    c1a8:	f023 0301 	bic.w	r3, r3, #1
    c1ac:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    c1ae:	bd08      	pop	{r3, pc}
    c1b0:	20000484 	.word	0x20000484
    c1b4:	200002b8 	.word	0x200002b8

0000c1b8 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    c1b8:	4802      	ldr	r0, [pc, #8]	; (c1c4 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    c1ba:	4a03      	ldr	r2, [pc, #12]	; (c1c8 <z_bss_zero+0x10>)
    c1bc:	2100      	movs	r1, #0
    c1be:	1a12      	subs	r2, r2, r0
    c1c0:	f00a bd6a 	b.w	16c98 <memset>
    c1c4:	20000248 	.word	0x20000248
    c1c8:	20000488 	.word	0x20000488

0000c1cc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    c1cc:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    c1ce:	f8df 80b0 	ldr.w	r8, [pc, #176]	; c280 <z_cstart+0xb4>
    c1d2:	b0a2      	sub	sp, #136	; 0x88
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    c1d4:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    c1d8:	4d2a      	ldr	r5, [pc, #168]	; (c284 <z_cstart+0xb8>)
    c1da:	2400      	movs	r4, #0
    c1dc:	696b      	ldr	r3, [r5, #20]
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    c1de:	4e2a      	ldr	r6, [pc, #168]	; (c288 <z_cstart+0xbc>)
    c1e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c1e4:	616b      	str	r3, [r5, #20]
    c1e6:	23e0      	movs	r3, #224	; 0xe0
    c1e8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    c1ec:	77ec      	strb	r4, [r5, #31]
    c1ee:	762c      	strb	r4, [r5, #24]
    c1f0:	766c      	strb	r4, [r5, #25]
    c1f2:	76ac      	strb	r4, [r5, #26]
    c1f4:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    c1f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    c1fa:	f8df 9090 	ldr.w	r9, [pc, #144]	; c28c <z_cstart+0xc0>
    c1fe:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    c202:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    c204:	f7f7 fea2 	bl	3f4c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    c208:	f7f7 fcfe 	bl	3c08 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    c20c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c210:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    c212:	62eb      	str	r3, [r5, #44]	; 0x2c
	dummy_thread->base.user_options = K_ESSENTIAL;
    c214:	f240 1301 	movw	r3, #257	; 0x101
    c218:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    c21c:	ab06      	add	r3, sp, #24
    c21e:	60b3      	str	r3, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    c220:	f00a fb39 	bl	16896 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    c224:	4620      	mov	r0, r4
    c226:	f7ff ff5d 	bl	c0e4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    c22a:	2001      	movs	r0, #1
    c22c:	f7ff ff5a 	bl	c0e4 <z_sys_init_run_level>
	z_sched_init();
    c230:	f000 fb9c 	bl	c96c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    c234:	4b16      	ldr	r3, [pc, #88]	; (c290 <z_cstart+0xc4>)
	_kernel.ready_q.cache = &z_main_thread;
    c236:	4d17      	ldr	r5, [pc, #92]	; (c294 <z_cstart+0xc8>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    c238:	9305      	str	r3, [sp, #20]
    c23a:	2301      	movs	r3, #1
    c23c:	4916      	ldr	r1, [pc, #88]	; (c298 <z_cstart+0xcc>)
    c23e:	f44f 52fd 	mov.w	r2, #8096	; 0x1fa0
    c242:	e9cd 4303 	strd	r4, r3, [sp, #12]
    c246:	4628      	mov	r0, r5
    c248:	464b      	mov	r3, r9
    c24a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    c24e:	9400      	str	r4, [sp, #0]
	_kernel.ready_q.cache = &z_main_thread;
    c250:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    c252:	f000 f825 	bl	c2a0 <z_setup_new_thread>
    c256:	4607      	mov	r7, r0
    c258:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    c25a:	4628      	mov	r0, r5
    c25c:	f022 0204 	bic.w	r2, r2, #4
    c260:	736a      	strb	r2, [r5, #13]
    c262:	f00a fbbb 	bl	169dc <z_ready_thread>
		init_idle_thread(i);
    c266:	4620      	mov	r0, r4
    c268:	f7ff ff62 	bl	c130 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    c26c:	4b0b      	ldr	r3, [pc, #44]	; (c29c <z_cstart+0xd0>)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    c26e:	464a      	mov	r2, r9
    c270:	4639      	mov	r1, r7
    c272:	4628      	mov	r0, r5
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    c274:	60f3      	str	r3, [r6, #12]
		_kernel.cpus[i].id = i;
    c276:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    c278:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    c27c:	f7f7 fd5e 	bl	3d3c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    c280:	20002d28 	.word	0x20002d28
    c284:	e000ed00 	.word	0xe000ed00
    c288:	20000348 	.word	0x20000348
    c28c:	0000c185 	.word	0x0000c185
    c290:	00018ab1 	.word	0x00018ab1
    c294:	200002b8 	.word	0x200002b8
    c298:	20000488 	.word	0x20000488
    c29c:	20000248 	.word	0x20000248

0000c2a0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    c2a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    c2a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    c2a4:	f100 0558 	add.w	r5, r0, #88	; 0x58
    c2a8:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    c2aa:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    c2ac:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    c2b0:	2500      	movs	r5, #0
{
    c2b2:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    c2b4:	7346      	strb	r6, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    c2b6:	3207      	adds	r2, #7

	thread_base->prio = priority;
    c2b8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    c2ba:	f022 0207 	bic.w	r2, r2, #7
	thread_base->prio = priority;
    c2be:	7386      	strb	r6, [r0, #14]
	stack_ptr = (char *)stack + stack_obj_size;
    c2c0:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    c2c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    c2c4:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->pended_on = NULL;
    c2c8:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    c2ca:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    c2cc:	9202      	str	r2, [sp, #8]
    c2ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c2d0:	9201      	str	r2, [sp, #4]
    c2d2:	9a08      	ldr	r2, [sp, #32]
    c2d4:	9200      	str	r2, [sp, #0]
    c2d6:	4632      	mov	r2, r6
    c2d8:	f7f7 fd14 	bl	3d04 <arch_new_thread>
	if (!_current) {
    c2dc:	4b04      	ldr	r3, [pc, #16]	; (c2f0 <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
    c2de:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    c2e0:	689b      	ldr	r3, [r3, #8]
    c2e2:	b103      	cbz	r3, c2e6 <z_setup_new_thread+0x46>
	new_thread->resource_pool = _current->resource_pool;
    c2e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    c2e6:	4630      	mov	r0, r6
    c2e8:	6663      	str	r3, [r4, #100]	; 0x64
    c2ea:	b004      	add	sp, #16
    c2ec:	bd70      	pop	{r4, r5, r6, pc}
    c2ee:	bf00      	nop
    c2f0:	20000348 	.word	0x20000348

0000c2f4 <z_init_static_threads>:
{
    c2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c2f6:	4c26      	ldr	r4, [pc, #152]	; (c390 <z_init_static_threads+0x9c>)
	_FOREACH_STATIC_THREAD(thread_data) {
    c2f8:	4d26      	ldr	r5, [pc, #152]	; (c394 <z_init_static_threads+0xa0>)
{
    c2fa:	b087      	sub	sp, #28
    c2fc:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    c2fe:	42ae      	cmp	r6, r5
    c300:	f104 0430 	add.w	r4, r4, #48	; 0x30
    c304:	d30a      	bcc.n	c31c <z_init_static_threads+0x28>
	k_sched_lock();
    c306:	f000 f961 	bl	c5cc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    c30a:	4c21      	ldr	r4, [pc, #132]	; (c390 <z_init_static_threads+0x9c>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    c30c:	4f22      	ldr	r7, [pc, #136]	; (c398 <z_init_static_threads+0xa4>)
    c30e:	42ac      	cmp	r4, r5
    c310:	d320      	bcc.n	c354 <z_init_static_threads+0x60>
}
    c312:	b007      	add	sp, #28
    c314:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    c318:	f000 b98c 	b.w	c634 <k_sched_unlock>
		z_setup_new_thread(
    c31c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    c320:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    c324:	9305      	str	r3, [sp, #20]
    c326:	f854 3c10 	ldr.w	r3, [r4, #-16]
    c32a:	9304      	str	r3, [sp, #16]
    c32c:	f854 3c14 	ldr.w	r3, [r4, #-20]
    c330:	9303      	str	r3, [sp, #12]
    c332:	f854 3c18 	ldr.w	r3, [r4, #-24]
    c336:	9302      	str	r3, [sp, #8]
    c338:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    c33c:	9301      	str	r3, [sp, #4]
    c33e:	f854 3c20 	ldr.w	r3, [r4, #-32]
    c342:	9300      	str	r3, [sp, #0]
    c344:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    c348:	f7ff ffaa 	bl	c2a0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    c34c:	f854 3c30 	ldr.w	r3, [r4, #-48]
    c350:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    c352:	e7d3      	b.n	c2fc <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    c354:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c356:	1c5a      	adds	r2, r3, #1
    c358:	d00c      	beq.n	c374 <z_init_static_threads+0x80>
					    K_MSEC(thread_data->init_delay));
    c35a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    c35e:	17d9      	asrs	r1, r3, #31
	 * the same mathematical relationship, each expressed with and
	 * without truncation to 32 bits (I couldn't find a way to make
	 * the compiler correctly guess at the 32 bit result otherwise).
	 */
	if (div_ratio) {
		t += off;
    c360:	f113 0009 	adds.w	r0, r3, #9
    c364:	f141 0100 	adc.w	r1, r1, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    c368:	430b      	orrs	r3, r1
			schedule_new_thread(thread_data->init_thread,
    c36a:	6826      	ldr	r6, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    c36c:	d104      	bne.n	c378 <z_init_static_threads+0x84>
	z_sched_start(thread);
    c36e:	4630      	mov	r0, r6
    c370:	f000 f9a6 	bl	c6c0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    c374:	3430      	adds	r4, #48	; 0x30
    c376:	e7ca      	b.n	c30e <z_init_static_threads+0x1a>
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
    c378:	220a      	movs	r2, #10
    c37a:	2300      	movs	r3, #0
    c37c:	f7f4 fb5e 	bl	a3c <__aeabi_uldivmod>
    c380:	4602      	mov	r2, r0
    c382:	460b      	mov	r3, r1
    c384:	f106 0018 	add.w	r0, r6, #24
    c388:	4639      	mov	r1, r7
    c38a:	f000 fbd5 	bl	cb38 <z_add_timeout>
    c38e:	e7f1      	b.n	c374 <z_init_static_threads+0x80>
    c390:	2000020c 	.word	0x2000020c
    c394:	2000020c 	.word	0x2000020c
    c398:	000169fd 	.word	0x000169fd

0000c39c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    c39c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c3a0:	4604      	mov	r4, r0
    c3a2:	4617      	mov	r7, r2
    c3a4:	461e      	mov	r6, r3
	__asm__ volatile(
    c3a6:	f04f 0320 	mov.w	r3, #32
    c3aa:	f3ef 8811 	mrs	r8, BASEPRI
    c3ae:	f383 8812 	msr	BASEPRI_MAX, r3
    c3b2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    c3b6:	68c3      	ldr	r3, [r0, #12]
    c3b8:	4a32      	ldr	r2, [pc, #200]	; (c484 <z_impl_k_mutex_lock+0xe8>)
    c3ba:	b16b      	cbz	r3, c3d8 <z_impl_k_mutex_lock+0x3c>
    c3bc:	6880      	ldr	r0, [r0, #8]
    c3be:	6891      	ldr	r1, [r2, #8]
    c3c0:	4288      	cmp	r0, r1
    c3c2:	d019      	beq.n	c3f8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    c3c4:	ea57 0306 	orrs.w	r3, r7, r6
    c3c8:	d118      	bne.n	c3fc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    c3ca:	f388 8811 	msr	BASEPRI, r8
    c3ce:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    c3d2:	f06f 000f 	mvn.w	r0, #15
    c3d6:	e00c      	b.n	c3f2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    c3d8:	6891      	ldr	r1, [r2, #8]
    c3da:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    c3de:	3301      	adds	r3, #1
    c3e0:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    c3e2:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    c3e4:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    c3e6:	60a3      	str	r3, [r4, #8]
    c3e8:	f388 8811 	msr	BASEPRI, r8
    c3ec:	f3bf 8f6f 	isb	sy
		return 0;
    c3f0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    c3f2:	b002      	add	sp, #8
    c3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    c3f8:	6921      	ldr	r1, [r4, #16]
    c3fa:	e7f0      	b.n	c3de <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    c3fc:	f991 100e 	ldrsb.w	r1, [r1, #14]
    c400:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    c404:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    c408:	4299      	cmp	r1, r3
    c40a:	bfa8      	it	ge
    c40c:	4619      	movge	r1, r3
    c40e:	4291      	cmp	r1, r2
    c410:	bfb8      	it	lt
    c412:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    c414:	428b      	cmp	r3, r1
    c416:	dd2e      	ble.n	c476 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    c418:	f00a fa7b 	bl	16912 <adjust_owner_prio.isra.0>
    c41c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    c41e:	4622      	mov	r2, r4
    c420:	4641      	mov	r1, r8
    c422:	e9cd 7600 	strd	r7, r6, [sp]
    c426:	4818      	ldr	r0, [pc, #96]	; (c488 <z_impl_k_mutex_lock+0xec>)
    c428:	f000 fa3c 	bl	c8a4 <z_pend_curr>
	if (got_mutex == 0) {
    c42c:	2800      	cmp	r0, #0
    c42e:	d0e0      	beq.n	c3f2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    c430:	f04f 0320 	mov.w	r3, #32
    c434:	f3ef 8611 	mrs	r6, BASEPRI
    c438:	f383 8812 	msr	BASEPRI_MAX, r3
    c43c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    c440:	6823      	ldr	r3, [r4, #0]
    c442:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c444:	429c      	cmp	r4, r3
    c446:	d00a      	beq.n	c45e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    c448:	b14b      	cbz	r3, c45e <z_impl_k_mutex_lock+0xc2>
    c44a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    c44e:	4299      	cmp	r1, r3
    c450:	bfa8      	it	ge
    c452:	4619      	movge	r1, r3
    c454:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    c458:	4299      	cmp	r1, r3
    c45a:	bfb8      	it	lt
    c45c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    c45e:	68a0      	ldr	r0, [r4, #8]
    c460:	f00a fa57 	bl	16912 <adjust_owner_prio.isra.0>
    c464:	b900      	cbnz	r0, c468 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    c466:	b145      	cbz	r5, c47a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    c468:	4631      	mov	r1, r6
    c46a:	4807      	ldr	r0, [pc, #28]	; (c488 <z_impl_k_mutex_lock+0xec>)
    c46c:	f000 f89c 	bl	c5a8 <z_reschedule>
	return -EAGAIN;
    c470:	f06f 000a 	mvn.w	r0, #10
    c474:	e7bd      	b.n	c3f2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    c476:	2500      	movs	r5, #0
    c478:	e7d1      	b.n	c41e <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    c47a:	f386 8811 	msr	BASEPRI, r6
    c47e:	f3bf 8f6f 	isb	sy
    c482:	e7f5      	b.n	c470 <z_impl_k_mutex_lock+0xd4>
    c484:	20000348 	.word	0x20000348
    c488:	20000485 	.word	0x20000485

0000c48c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    c48c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    c48e:	6883      	ldr	r3, [r0, #8]
{
    c490:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    c492:	2b00      	cmp	r3, #0
    c494:	d032      	beq.n	c4fc <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    c496:	4a1c      	ldr	r2, [pc, #112]	; (c508 <z_impl_k_mutex_unlock+0x7c>)
    c498:	6892      	ldr	r2, [r2, #8]
    c49a:	4293      	cmp	r3, r2
    c49c:	d131      	bne.n	c502 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    c49e:	7bda      	ldrb	r2, [r3, #15]
    c4a0:	3a01      	subs	r2, #1
    c4a2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    c4a4:	68c3      	ldr	r3, [r0, #12]
    c4a6:	2b01      	cmp	r3, #1
    c4a8:	d905      	bls.n	c4b6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    c4aa:	3b01      	subs	r3, #1
    c4ac:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    c4ae:	f000 f8c1 	bl	c634 <k_sched_unlock>

	return 0;
    c4b2:	2000      	movs	r0, #0
}
    c4b4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    c4b6:	f04f 0320 	mov.w	r3, #32
    c4ba:	f3ef 8511 	mrs	r5, BASEPRI
    c4be:	f383 8812 	msr	BASEPRI_MAX, r3
    c4c2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    c4c6:	6901      	ldr	r1, [r0, #16]
    c4c8:	6880      	ldr	r0, [r0, #8]
    c4ca:	f00a fa22 	bl	16912 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    c4ce:	4620      	mov	r0, r4
    c4d0:	f00a fa5c 	bl	1698c <z_unpend_first_thread>
	mutex->owner = new_owner;
    c4d4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    c4d6:	b158      	cbz	r0, c4f0 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    c4d8:	f990 200e 	ldrsb.w	r2, [r0, #14]
    c4dc:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    c4de:	2200      	movs	r2, #0
    c4e0:	66c2      	str	r2, [r0, #108]	; 0x6c
		z_ready_thread(new_owner);
    c4e2:	f00a fa7b 	bl	169dc <z_ready_thread>
		z_reschedule(&lock, key);
    c4e6:	4629      	mov	r1, r5
    c4e8:	4808      	ldr	r0, [pc, #32]	; (c50c <z_impl_k_mutex_unlock+0x80>)
    c4ea:	f000 f85d 	bl	c5a8 <z_reschedule>
    c4ee:	e7de      	b.n	c4ae <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    c4f0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    c4f2:	f385 8811 	msr	BASEPRI, r5
    c4f6:	f3bf 8f6f 	isb	sy
    c4fa:	e7d8      	b.n	c4ae <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    c4fc:	f06f 0015 	mvn.w	r0, #21
    c500:	e7d8      	b.n	c4b4 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    c502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c506:	e7d5      	b.n	c4b4 <z_impl_k_mutex_unlock+0x28>
    c508:	20000348 	.word	0x20000348
    c50c:	20000485 	.word	0x20000485

0000c510 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    c510:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    c512:	4c08      	ldr	r4, [pc, #32]	; (c534 <z_reset_time_slice+0x24>)
    c514:	6823      	ldr	r3, [r4, #0]
    c516:	b15b      	cbz	r3, c530 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    c518:	f7f7 fec8 	bl	42ac <sys_clock_elapsed>
    c51c:	4603      	mov	r3, r0
    c51e:	6820      	ldr	r0, [r4, #0]
    c520:	4a05      	ldr	r2, [pc, #20]	; (c538 <z_reset_time_slice+0x28>)
    c522:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    c524:	2100      	movs	r1, #0
	}
}
    c526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    c52a:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    c52c:	f00a bac8 	b.w	16ac0 <z_set_timeout_expiry>
}
    c530:	bd10      	pop	{r4, pc}
    c532:	bf00      	nop
    c534:	20000470 	.word	0x20000470
    c538:	20000348 	.word	0x20000348

0000c53c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    c53c:	b570      	push	{r4, r5, r6, lr}
    c53e:	4604      	mov	r4, r0
    c540:	460d      	mov	r5, r1
	__asm__ volatile(
    c542:	f04f 0320 	mov.w	r3, #32
    c546:	f3ef 8611 	mrs	r6, BASEPRI
    c54a:	f383 8812 	msr	BASEPRI_MAX, r3
    c54e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    c552:	2300      	movs	r3, #0
    c554:	4a11      	ldr	r2, [pc, #68]	; (c59c <k_sched_time_slice_set+0x60>)
		t += off;
    c556:	3009      	adds	r0, #9
    c558:	6113      	str	r3, [r2, #16]
		if (result32 && (t < BIT64(32))) {
    c55a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		t += off;
    c55e:	f143 0100 	adc.w	r1, r3, #0
		if (result32 && (t < BIT64(32))) {
    c562:	4282      	cmp	r2, r0
    c564:	418b      	sbcs	r3, r1
    c566:	d30f      	bcc.n	c588 <k_sched_time_slice_set+0x4c>
			return ((uint32_t)t) / (from_hz / to_hz);
    c568:	230a      	movs	r3, #10
    c56a:	fbb0 f0f3 	udiv	r0, r0, r3
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    c56e:	2c00      	cmp	r4, #0
    c570:	4b0b      	ldr	r3, [pc, #44]	; (c5a0 <k_sched_time_slice_set+0x64>)
    c572:	dc0e      	bgt.n	c592 <k_sched_time_slice_set+0x56>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    c574:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    c576:	4b0b      	ldr	r3, [pc, #44]	; (c5a4 <k_sched_time_slice_set+0x68>)
    c578:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    c57a:	f7ff ffc9 	bl	c510 <z_reset_time_slice>
	__asm__ volatile(
    c57e:	f386 8811 	msr	BASEPRI, r6
    c582:	f3bf 8f6f 	isb	sy
	}
}
    c586:	bd70      	pop	{r4, r5, r6, pc}
			return t / ((uint64_t)from_hz / to_hz);
    c588:	220a      	movs	r2, #10
    c58a:	2300      	movs	r3, #0
    c58c:	f7f4 fa56 	bl	a3c <__aeabi_uldivmod>
    c590:	e7ed      	b.n	c56e <k_sched_time_slice_set+0x32>
			slice_time = MAX(2, slice_time);
    c592:	2802      	cmp	r0, #2
    c594:	bfb8      	it	lt
    c596:	2002      	movlt	r0, #2
    c598:	e7ec      	b.n	c574 <k_sched_time_slice_set+0x38>
    c59a:	bf00      	nop
    c59c:	20000348 	.word	0x20000348
    c5a0:	20000470 	.word	0x20000470
    c5a4:	2000046c 	.word	0x2000046c

0000c5a8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    c5a8:	b949      	cbnz	r1, c5be <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c5aa:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    c5ae:	b930      	cbnz	r0, c5be <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    c5b0:	4b05      	ldr	r3, [pc, #20]	; (c5c8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    c5b2:	699a      	ldr	r2, [r3, #24]
    c5b4:	689b      	ldr	r3, [r3, #8]
    c5b6:	429a      	cmp	r2, r3
    c5b8:	d001      	beq.n	c5be <z_reschedule+0x16>
	ret = arch_swap(key);
    c5ba:	f7f7 bb55 	b.w	3c68 <arch_swap>
    c5be:	f381 8811 	msr	BASEPRI, r1
    c5c2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    c5c6:	4770      	bx	lr
    c5c8:	20000348 	.word	0x20000348

0000c5cc <k_sched_lock>:
	__asm__ volatile(
    c5cc:	f04f 0320 	mov.w	r3, #32
    c5d0:	f3ef 8111 	mrs	r1, BASEPRI
    c5d4:	f383 8812 	msr	BASEPRI_MAX, r3
    c5d8:	f3bf 8f6f 	isb	sy
    c5dc:	4b04      	ldr	r3, [pc, #16]	; (c5f0 <k_sched_lock+0x24>)
    c5de:	689a      	ldr	r2, [r3, #8]
    c5e0:	7bd3      	ldrb	r3, [r2, #15]
    c5e2:	3b01      	subs	r3, #1
    c5e4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    c5e6:	f381 8811 	msr	BASEPRI, r1
    c5ea:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    c5ee:	4770      	bx	lr
    c5f0:	20000348 	.word	0x20000348

0000c5f4 <update_cache>:
{
    c5f4:	b538      	push	{r3, r4, r5, lr}
    c5f6:	4601      	mov	r1, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    c5f8:	480c      	ldr	r0, [pc, #48]	; (c62c <update_cache+0x38>)
    c5fa:	f00a f9df 	bl	169bc <z_priq_mq_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    c5fe:	4d0c      	ldr	r5, [pc, #48]	; (c630 <update_cache+0x3c>)
    c600:	4604      	mov	r4, r0
    c602:	b900      	cbnz	r0, c606 <update_cache+0x12>
    c604:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    c606:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    c608:	b949      	cbnz	r1, c61e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    c60a:	7b5a      	ldrb	r2, [r3, #13]
    c60c:	06d2      	lsls	r2, r2, #27
    c60e:	d106      	bne.n	c61e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    c610:	69a2      	ldr	r2, [r4, #24]
    c612:	b922      	cbnz	r2, c61e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    c614:	89da      	ldrh	r2, [r3, #14]
    c616:	2a7f      	cmp	r2, #127	; 0x7f
    c618:	d901      	bls.n	c61e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    c61a:	61ab      	str	r3, [r5, #24]
}
    c61c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    c61e:	429c      	cmp	r4, r3
    c620:	d001      	beq.n	c626 <update_cache+0x32>
			z_reset_time_slice();
    c622:	f7ff ff75 	bl	c510 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    c626:	61ac      	str	r4, [r5, #24]
}
    c628:	e7f8      	b.n	c61c <update_cache+0x28>
    c62a:	bf00      	nop
    c62c:	20000364 	.word	0x20000364
    c630:	20000348 	.word	0x20000348

0000c634 <k_sched_unlock>:

void k_sched_unlock(void)
{
    c634:	b510      	push	{r4, lr}
	__asm__ volatile(
    c636:	f04f 0320 	mov.w	r3, #32
    c63a:	f3ef 8411 	mrs	r4, BASEPRI
    c63e:	f383 8812 	msr	BASEPRI_MAX, r3
    c642:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    c646:	4b08      	ldr	r3, [pc, #32]	; (c668 <k_sched_unlock+0x34>)
		update_cache(0);
    c648:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    c64a:	689a      	ldr	r2, [r3, #8]
    c64c:	7bd3      	ldrb	r3, [r2, #15]
    c64e:	3301      	adds	r3, #1
    c650:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    c652:	f7ff ffcf 	bl	c5f4 <update_cache>
	__asm__ volatile(
    c656:	f384 8811 	msr	BASEPRI, r4
    c65a:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    c65e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    c662:	f00a b983 	b.w	1696c <z_reschedule_unlocked>
    c666:	bf00      	nop
    c668:	20000348 	.word	0x20000348

0000c66c <ready_thread>:
{
    c66c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    c66e:	f990 100d 	ldrsb.w	r1, [r0, #13]
{
    c672:	4603      	mov	r3, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    c674:	2900      	cmp	r1, #0
	return (thread->base.thread_state & state) != 0U;
    c676:	7b42      	ldrb	r2, [r0, #13]
    c678:	db1e      	blt.n	c6b8 <ready_thread+0x4c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    c67a:	06d1      	lsls	r1, r2, #27
    c67c:	d11c      	bne.n	c6b8 <ready_thread+0x4c>
    c67e:	6980      	ldr	r0, [r0, #24]
    c680:	b9d0      	cbnz	r0, c6b8 <ready_thread+0x4c>
	thread->base.thread_state |= _THREAD_QUEUED;
    c682:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c686:	735a      	strb	r2, [r3, #13]
# endif
#endif

ALWAYS_INLINE void z_priq_mq_add(struct _priq_mq *pq, struct k_thread *thread)
{
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    c688:	f993 200e 	ldrsb.w	r2, [r3, #14]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    c68c:	490b      	ldr	r1, [pc, #44]	; (c6bc <ready_thread+0x50>)
    c68e:	3210      	adds	r2, #16
    c690:	eb01 05c2 	add.w	r5, r1, r2, lsl #3

	sys_dlist_append(&pq->queues[priority_bit], &thread->base.qnode_dlist);
    c694:	462c      	mov	r4, r5
    c696:	6a2e      	ldr	r6, [r5, #32]
    c698:	341c      	adds	r4, #28

	node->next = list;
	node->prev = tail;
    c69a:	e9c3 4600 	strd	r4, r6, [r3]

	tail->next = node;
    c69e:	6033      	str	r3, [r6, #0]
	list->tail = node;
    c6a0:	622b      	str	r3, [r5, #32]
	pq->bitmask |= BIT(priority_bit);
    c6a2:	2301      	movs	r3, #1
}
    c6a4:	bc70      	pop	{r4, r5, r6}
	pq->bitmask |= BIT(priority_bit);
    c6a6:	fa03 f202 	lsl.w	r2, r3, r2
    c6aa:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
    c6ae:	4313      	orrs	r3, r2
    c6b0:	f8c1 311c 	str.w	r3, [r1, #284]	; 0x11c
		update_cache(0);
    c6b4:	f7ff bf9e 	b.w	c5f4 <update_cache>
}
    c6b8:	bc70      	pop	{r4, r5, r6}
    c6ba:	4770      	bx	lr
    c6bc:	20000348 	.word	0x20000348

0000c6c0 <z_sched_start>:
{
    c6c0:	b510      	push	{r4, lr}
	__asm__ volatile(
    c6c2:	f04f 0220 	mov.w	r2, #32
    c6c6:	f3ef 8411 	mrs	r4, BASEPRI
    c6ca:	f382 8812 	msr	BASEPRI_MAX, r2
    c6ce:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    c6d2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    c6d4:	0751      	lsls	r1, r2, #29
    c6d6:	d404      	bmi.n	c6e2 <z_sched_start+0x22>
	__asm__ volatile(
    c6d8:	f384 8811 	msr	BASEPRI, r4
    c6dc:	f3bf 8f6f 	isb	sy
}
    c6e0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c6e2:	f022 0204 	bic.w	r2, r2, #4
    c6e6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    c6e8:	f7ff ffc0 	bl	c66c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    c6ec:	4621      	mov	r1, r4
}
    c6ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    c6f2:	4801      	ldr	r0, [pc, #4]	; (c6f8 <z_sched_start+0x38>)
    c6f4:	f7ff bf58 	b.w	c5a8 <z_reschedule>
    c6f8:	20000485 	.word	0x20000485

0000c6fc <move_thread_to_end_of_prio_q>:
{
    c6fc:	b538      	push	{r3, r4, r5, lr}
	if (z_is_thread_queued(thread)) {
    c6fe:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    c702:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    c704:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    c706:	7b43      	ldrb	r3, [r0, #13]
    c708:	4c1c      	ldr	r4, [pc, #112]	; (c77c <move_thread_to_end_of_prio_q+0x80>)
    c70a:	da17      	bge.n	c73c <move_thread_to_end_of_prio_q+0x40>
}

ALWAYS_INLINE void z_priq_mq_remove(struct _priq_mq *pq, struct k_thread *thread)
{
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    c70c:	f990 500e 	ldrsb.w	r5, [r0, #14]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c714:	7343      	strb	r3, [r0, #13]
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    c716:	3510      	adds	r5, #16

	sys_dlist_remove(&thread->base.qnode_dlist);
    c718:	f00a f90a 	bl	16930 <sys_dlist_remove>
	return list->head == list;
    c71c:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
	if (sys_dlist_is_empty(&pq->queues[priority_bit])) {
    c720:	4613      	mov	r3, r2
    c722:	69d2      	ldr	r2, [r2, #28]
    c724:	331c      	adds	r3, #28
    c726:	429a      	cmp	r2, r3
    c728:	d108      	bne.n	c73c <move_thread_to_end_of_prio_q+0x40>
		pq->bitmask &= ~BIT(priority_bit);
    c72a:	2301      	movs	r3, #1
    c72c:	fa03 f505 	lsl.w	r5, r3, r5
    c730:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    c734:	ea23 0305 	bic.w	r3, r3, r5
    c738:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	thread->base.thread_state |= _THREAD_QUEUED;
    c73c:	7b4b      	ldrb	r3, [r1, #13]
    c73e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c742:	734b      	strb	r3, [r1, #13]
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    c744:	f991 300e 	ldrsb.w	r3, [r1, #14]
    c748:	3310      	adds	r3, #16
	sys_dnode_t *const tail = list->tail;
    c74a:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
	sys_dlist_append(&pq->queues[priority_bit], &thread->base.qnode_dlist);
    c74e:	4602      	mov	r2, r0
    c750:	6a05      	ldr	r5, [r0, #32]
    c752:	321c      	adds	r2, #28
	node->prev = tail;
    c754:	e9c1 2500 	strd	r2, r5, [r1]
	pq->bitmask |= BIT(priority_bit);
    c758:	2201      	movs	r2, #1
	tail->next = node;
    c75a:	6029      	str	r1, [r5, #0]
    c75c:	fa02 f303 	lsl.w	r3, r2, r3
	list->tail = node;
    c760:	6201      	str	r1, [r0, #32]
    c762:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
	update_cache(thread == _current);
    c766:	68a0      	ldr	r0, [r4, #8]
	pq->bitmask |= BIT(priority_bit);
    c768:	431a      	orrs	r2, r3
	update_cache(thread == _current);
    c76a:	1a43      	subs	r3, r0, r1
    c76c:	4258      	negs	r0, r3
	pq->bitmask |= BIT(priority_bit);
    c76e:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
	update_cache(thread == _current);
    c772:	4158      	adcs	r0, r3
}
    c774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	update_cache(thread == _current);
    c778:	f7ff bf3c 	b.w	c5f4 <update_cache>
    c77c:	20000348 	.word	0x20000348

0000c780 <z_time_slice>:
{
    c780:	4601      	mov	r1, r0
    c782:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c784:	f04f 0320 	mov.w	r3, #32
    c788:	f3ef 8411 	mrs	r4, BASEPRI
    c78c:	f383 8812 	msr	BASEPRI_MAX, r3
    c790:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    c794:	4b15      	ldr	r3, [pc, #84]	; (c7ec <z_time_slice+0x6c>)
    c796:	4a16      	ldr	r2, [pc, #88]	; (c7f0 <z_time_slice+0x70>)
    c798:	6898      	ldr	r0, [r3, #8]
    c79a:	6815      	ldr	r5, [r2, #0]
    c79c:	42a8      	cmp	r0, r5
    c79e:	d106      	bne.n	c7ae <z_time_slice+0x2e>
			z_reset_time_slice();
    c7a0:	f7ff feb6 	bl	c510 <z_reset_time_slice>
	__asm__ volatile(
    c7a4:	f384 8811 	msr	BASEPRI, r4
    c7a8:	f3bf 8f6f 	isb	sy
}
    c7ac:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    c7ae:	2500      	movs	r5, #0
    c7b0:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    c7b2:	4a10      	ldr	r2, [pc, #64]	; (c7f4 <z_time_slice+0x74>)
    c7b4:	6812      	ldr	r2, [r2, #0]
    c7b6:	b1ba      	cbz	r2, c7e8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    c7b8:	89c2      	ldrh	r2, [r0, #14]
    c7ba:	2a7f      	cmp	r2, #127	; 0x7f
    c7bc:	d814      	bhi.n	c7e8 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    c7be:	7b42      	ldrb	r2, [r0, #13]
    c7c0:	06d2      	lsls	r2, r2, #27
    c7c2:	d111      	bne.n	c7e8 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    c7c4:	4a0c      	ldr	r2, [pc, #48]	; (c7f8 <z_time_slice+0x78>)
    c7c6:	f990 500e 	ldrsb.w	r5, [r0, #14]
    c7ca:	6812      	ldr	r2, [r2, #0]
    c7cc:	4295      	cmp	r5, r2
    c7ce:	db0b      	blt.n	c7e8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    c7d0:	4a0a      	ldr	r2, [pc, #40]	; (c7fc <z_time_slice+0x7c>)
    c7d2:	4290      	cmp	r0, r2
    c7d4:	d008      	beq.n	c7e8 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    c7d6:	691a      	ldr	r2, [r3, #16]
    c7d8:	428a      	cmp	r2, r1
    c7da:	dc02      	bgt.n	c7e2 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    c7dc:	f7ff ff8e 	bl	c6fc <move_thread_to_end_of_prio_q>
    c7e0:	e7de      	b.n	c7a0 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    c7e2:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    c7e4:	611a      	str	r2, [r3, #16]
    c7e6:	e7dd      	b.n	c7a4 <z_time_slice+0x24>
    c7e8:	2200      	movs	r2, #0
    c7ea:	e7fb      	b.n	c7e4 <z_time_slice+0x64>
    c7ec:	20000348 	.word	0x20000348
    c7f0:	20000468 	.word	0x20000468
    c7f4:	20000470 	.word	0x20000470
    c7f8:	2000046c 	.word	0x2000046c
    c7fc:	20000248 	.word	0x20000248

0000c800 <unready_thread>:
{
    c800:	b538      	push	{r3, r4, r5, lr}
	if (z_is_thread_queued(thread)) {
    c802:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    c806:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    c808:	2a00      	cmp	r2, #0
    c80a:	7b43      	ldrb	r3, [r0, #13]
    c80c:	4c11      	ldr	r4, [pc, #68]	; (c854 <unready_thread+0x54>)
    c80e:	da18      	bge.n	c842 <unready_thread+0x42>
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    c810:	f990 500e 	ldrsb.w	r5, [r0, #14]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c818:	7343      	strb	r3, [r0, #13]
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    c81a:	3510      	adds	r5, #16
	sys_dlist_remove(&thread->base.qnode_dlist);
    c81c:	f00a f888 	bl	16930 <sys_dlist_remove>
	if (sys_dlist_is_empty(&pq->queues[priority_bit])) {
    c820:	00eb      	lsls	r3, r5, #3
    c822:	f103 021c 	add.w	r2, r3, #28
	return list->head == list;
    c826:	4423      	add	r3, r4
    c828:	69db      	ldr	r3, [r3, #28]
    c82a:	4422      	add	r2, r4
    c82c:	4293      	cmp	r3, r2
    c82e:	d108      	bne.n	c842 <unready_thread+0x42>
		pq->bitmask &= ~BIT(priority_bit);
    c830:	2301      	movs	r3, #1
    c832:	fa03 f505 	lsl.w	r5, r3, r5
    c836:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    c83a:	ea23 0305 	bic.w	r3, r3, r5
    c83e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	update_cache(thread == _current);
    c842:	68a0      	ldr	r0, [r4, #8]
    c844:	1a43      	subs	r3, r0, r1
    c846:	4258      	negs	r0, r3
    c848:	4158      	adcs	r0, r3
}
    c84a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	update_cache(thread == _current);
    c84e:	f7ff bed1 	b.w	c5f4 <update_cache>
    c852:	bf00      	nop
    c854:	20000348 	.word	0x20000348

0000c858 <pend>:
{
    c858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c85c:	4606      	mov	r6, r0
    c85e:	4615      	mov	r5, r2
    c860:	461c      	mov	r4, r3
	__asm__ volatile(
    c862:	f04f 0320 	mov.w	r3, #32
    c866:	f3ef 8711 	mrs	r7, BASEPRI
    c86a:	f383 8812 	msr	BASEPRI_MAX, r3
    c86e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    c872:	f00a f8e5 	bl	16a40 <add_to_waitq_locked>
	__asm__ volatile(
    c876:	f387 8811 	msr	BASEPRI, r7
    c87a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c87e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    c882:	bf08      	it	eq
    c884:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    c888:	d008      	beq.n	c89c <pend+0x44>
    c88a:	462a      	mov	r2, r5
    c88c:	4623      	mov	r3, r4
    c88e:	f106 0018 	add.w	r0, r6, #24
    c892:	4903      	ldr	r1, [pc, #12]	; (c8a0 <pend+0x48>)
}
    c894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c898:	f000 b94e 	b.w	cb38 <z_add_timeout>
    c89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c8a0:	000169fd 	.word	0x000169fd

0000c8a4 <z_pend_curr>:
{
    c8a4:	b510      	push	{r4, lr}
    c8a6:	460c      	mov	r4, r1
	pending_current = _current;
    c8a8:	4b06      	ldr	r3, [pc, #24]	; (c8c4 <z_pend_curr+0x20>)
{
    c8aa:	4611      	mov	r1, r2
	pending_current = _current;
    c8ac:	6898      	ldr	r0, [r3, #8]
    c8ae:	4b06      	ldr	r3, [pc, #24]	; (c8c8 <z_pend_curr+0x24>)
    c8b0:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    c8b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c8b6:	f7ff ffcf 	bl	c858 <pend>
    c8ba:	4620      	mov	r0, r4
}
    c8bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c8c0:	f7f7 b9d2 	b.w	3c68 <arch_swap>
    c8c4:	20000348 	.word	0x20000348
    c8c8:	20000468 	.word	0x20000468

0000c8cc <z_set_prio>:
{
    c8cc:	b570      	push	{r4, r5, r6, lr}
    c8ce:	4604      	mov	r4, r0
	__asm__ volatile(
    c8d0:	f04f 0320 	mov.w	r3, #32
    c8d4:	f3ef 8511 	mrs	r5, BASEPRI
    c8d8:	f383 8812 	msr	BASEPRI_MAX, r3
    c8dc:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    c8e0:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    c8e2:	06da      	lsls	r2, r3, #27
    c8e4:	d13d      	bne.n	c962 <z_set_prio+0x96>
		if (need_sched) {
    c8e6:	6982      	ldr	r2, [r0, #24]
    c8e8:	2a00      	cmp	r2, #0
    c8ea:	d13a      	bne.n	c962 <z_set_prio+0x96>
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    c8ec:	f990 600e 	ldrsb.w	r6, [r0, #14]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c8f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c8f4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    c8f6:	f00a f81b 	bl	16930 <sys_dlist_remove>
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    c8fa:	3610      	adds	r6, #16
	if (sys_dlist_is_empty(&pq->queues[priority_bit])) {
    c8fc:	4b1a      	ldr	r3, [pc, #104]	; (c968 <z_set_prio+0x9c>)
    c8fe:	00f2      	lsls	r2, r6, #3
    c900:	f102 001c 	add.w	r0, r2, #28
    c904:	441a      	add	r2, r3
    c906:	69d2      	ldr	r2, [r2, #28]
    c908:	4418      	add	r0, r3
    c90a:	4282      	cmp	r2, r0
    c90c:	d108      	bne.n	c920 <z_set_prio+0x54>
		pq->bitmask &= ~BIT(priority_bit);
    c90e:	2201      	movs	r2, #1
    c910:	fa02 f606 	lsl.w	r6, r2, r6
    c914:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    c918:	ea22 0206 	bic.w	r2, r2, r6
    c91c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	thread->base.thread_state |= _THREAD_QUEUED;
    c920:	7b62      	ldrb	r2, [r4, #13]
				thread->base.prio = prio;
    c922:	b249      	sxtb	r1, r1
    c924:	73a1      	strb	r1, [r4, #14]
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    c926:	3110      	adds	r1, #16
	sys_dnode_t *const tail = list->tail;
    c928:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
	thread->base.thread_state |= _THREAD_QUEUED;
    c92c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c930:	7362      	strb	r2, [r4, #13]
	sys_dlist_append(&pq->queues[priority_bit], &thread->base.qnode_dlist);
    c932:	4602      	mov	r2, r0
    c934:	6a06      	ldr	r6, [r0, #32]
    c936:	321c      	adds	r2, #28
	node->prev = tail;
    c938:	e9c4 2600 	strd	r2, r6, [r4]
	tail->next = node;
    c93c:	6034      	str	r4, [r6, #0]
	list->tail = node;
    c93e:	6204      	str	r4, [r0, #32]
	pq->bitmask |= BIT(priority_bit);
    c940:	2401      	movs	r4, #1
    c942:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    c946:	fa04 f101 	lsl.w	r1, r4, r1
    c94a:	4311      	orrs	r1, r2
			update_cache(1);
    c94c:	4620      	mov	r0, r4
	pq->bitmask |= BIT(priority_bit);
    c94e:	f8c3 111c 	str.w	r1, [r3, #284]	; 0x11c
			update_cache(1);
    c952:	f7ff fe4f 	bl	c5f4 <update_cache>
    c956:	4620      	mov	r0, r4
	__asm__ volatile(
    c958:	f385 8811 	msr	BASEPRI, r5
    c95c:	f3bf 8f6f 	isb	sy
}
    c960:	bd70      	pop	{r4, r5, r6, pc}
			thread->base.prio = prio;
    c962:	2000      	movs	r0, #0
    c964:	73a1      	strb	r1, [r4, #14]
    c966:	e7f7      	b.n	c958 <z_set_prio+0x8c>
    c968:	20000348 	.word	0x20000348

0000c96c <z_sched_init>:
		}
	};
#endif

#ifdef CONFIG_SCHED_MULTIQ
	for (int i = 0; i < ARRAY_SIZE(_kernel.ready_q.runq.queues); i++) {
    c96c:	2200      	movs	r2, #0
    c96e:	4b07      	ldr	r3, [pc, #28]	; (c98c <z_sched_init+0x20>)
    c970:	3201      	adds	r2, #1
    c972:	f103 011c 	add.w	r1, r3, #28
    c976:	2a20      	cmp	r2, #32
	list->tail = (sys_dnode_t *)list;
    c978:	e9c3 1107 	strd	r1, r1, [r3, #28]
    c97c:	f103 0308 	add.w	r3, r3, #8
    c980:	d1f6      	bne.n	c970 <z_sched_init+0x4>
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    c982:	2100      	movs	r1, #0
    c984:	4608      	mov	r0, r1
    c986:	f7ff bdd9 	b.w	c53c <k_sched_time_slice_set>
    c98a:	bf00      	nop
    c98c:	20000348 	.word	0x20000348

0000c990 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    c990:	4b01      	ldr	r3, [pc, #4]	; (c998 <z_impl_z_current_get+0x8>)
    c992:	6898      	ldr	r0, [r3, #8]
    c994:	4770      	bx	lr
    c996:	bf00      	nop
    c998:	20000348 	.word	0x20000348

0000c99c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    c99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9a0:	4604      	mov	r4, r0
	__asm__ volatile(
    c9a2:	f04f 0320 	mov.w	r3, #32
    c9a6:	f3ef 8611 	mrs	r6, BASEPRI
    c9aa:	f383 8812 	msr	BASEPRI_MAX, r3
    c9ae:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    c9b2:	7b43      	ldrb	r3, [r0, #13]
    c9b4:	071a      	lsls	r2, r3, #28
    c9b6:	d505      	bpl.n	c9c4 <z_thread_abort+0x28>
	__asm__ volatile(
    c9b8:	f386 8811 	msr	BASEPRI, r6
    c9bc:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    c9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    c9c4:	f023 0220 	bic.w	r2, r3, #32
    c9c8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    c9cc:	09d2      	lsrs	r2, r2, #7
    c9ce:	d120      	bne.n	ca12 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    c9d0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    c9d2:	68a3      	ldr	r3, [r4, #8]
    c9d4:	b113      	cbz	r3, c9dc <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    c9d6:	4620      	mov	r0, r4
    c9d8:	f009 ffb2 	bl	16940 <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    c9dc:	f104 0018 	add.w	r0, r4, #24
    c9e0:	f00a f858 	bl	16a94 <z_abort_timeout>
    c9e4:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    c9e8:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    c9ec:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c9ee:	42bd      	cmp	r5, r7
    c9f0:	d000      	beq.n	c9f4 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    c9f2:	bb5d      	cbnz	r5, ca4c <z_thread_abort+0xb0>
		update_cache(1);
    c9f4:	2001      	movs	r0, #1
    c9f6:	f7ff fdfd 	bl	c5f4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    c9fa:	4b1b      	ldr	r3, [pc, #108]	; (ca68 <z_thread_abort+0xcc>)
    c9fc:	689b      	ldr	r3, [r3, #8]
    c9fe:	42a3      	cmp	r3, r4
    ca00:	d1da      	bne.n	c9b8 <z_thread_abort+0x1c>
    ca02:	f3ef 8305 	mrs	r3, IPSR
    ca06:	2b00      	cmp	r3, #0
    ca08:	d1d6      	bne.n	c9b8 <z_thread_abort+0x1c>
    ca0a:	4630      	mov	r0, r6
    ca0c:	f7f7 f92c 	bl	3c68 <arch_swap>
	return ret;
    ca10:	e7d2      	b.n	c9b8 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ca12:	f003 035f 	and.w	r3, r3, #95	; 0x5f
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    ca16:	f990 100e 	ldrsb.w	r1, [r0, #14]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ca1a:	f043 0308 	orr.w	r3, r3, #8
    ca1e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    ca20:	f009 ff86 	bl	16930 <sys_dlist_remove>
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    ca24:	3110      	adds	r1, #16
	if (sys_dlist_is_empty(&pq->queues[priority_bit])) {
    ca26:	4b10      	ldr	r3, [pc, #64]	; (ca68 <z_thread_abort+0xcc>)
    ca28:	00ca      	lsls	r2, r1, #3
    ca2a:	f102 001c 	add.w	r0, r2, #28
	return list->head == list;
    ca2e:	441a      	add	r2, r3
    ca30:	69d2      	ldr	r2, [r2, #28]
    ca32:	4418      	add	r0, r3
    ca34:	4282      	cmp	r2, r0
    ca36:	d1cc      	bne.n	c9d2 <z_thread_abort+0x36>
		pq->bitmask &= ~BIT(priority_bit);
    ca38:	2201      	movs	r2, #1
    ca3a:	fa02 f101 	lsl.w	r1, r2, r1
    ca3e:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    ca42:	ea22 0201 	bic.w	r2, r2, r1
    ca46:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    ca4a:	e7c2      	b.n	c9d2 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    ca4c:	4628      	mov	r0, r5
    ca4e:	f009 ff77 	bl	16940 <unpend_thread_no_timeout>
    ca52:	f105 0018 	add.w	r0, r5, #24
    ca56:	f00a f81d 	bl	16a94 <z_abort_timeout>
		ready_thread(thread);
    ca5a:	4628      	mov	r0, r5
    ca5c:	f8c5 806c 	str.w	r8, [r5, #108]	; 0x6c
    ca60:	f7ff fe04 	bl	c66c <ready_thread>
    ca64:	e7c2      	b.n	c9ec <z_thread_abort+0x50>
    ca66:	bf00      	nop
    ca68:	20000348 	.word	0x20000348

0000ca6c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    ca6c:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ca6e:	4806      	ldr	r0, [pc, #24]	; (ca88 <z_data_copy+0x1c>)
    ca70:	4a06      	ldr	r2, [pc, #24]	; (ca8c <z_data_copy+0x20>)
    ca72:	4907      	ldr	r1, [pc, #28]	; (ca90 <z_data_copy+0x24>)
    ca74:	1a12      	subs	r2, r2, r0
    ca76:	f00a f901 	bl	16c7c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    ca7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ca7e:	4a05      	ldr	r2, [pc, #20]	; (ca94 <z_data_copy+0x28>)
    ca80:	4905      	ldr	r1, [pc, #20]	; (ca98 <z_data_copy+0x2c>)
    ca82:	4806      	ldr	r0, [pc, #24]	; (ca9c <z_data_copy+0x30>)
    ca84:	f00a b8fa 	b.w	16c7c <memcpy>
    ca88:	20000000 	.word	0x20000000
    ca8c:	20000248 	.word	0x20000248
    ca90:	00018e10 	.word	0x00018e10
    ca94:	00000000 	.word	0x00000000
    ca98:	00018e10 	.word	0x00018e10
    ca9c:	20000000 	.word	0x20000000

0000caa0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    caa0:	4b03      	ldr	r3, [pc, #12]	; (cab0 <elapsed+0x10>)
    caa2:	681b      	ldr	r3, [r3, #0]
    caa4:	b90b      	cbnz	r3, caaa <elapsed+0xa>
    caa6:	f7f7 bc01 	b.w	42ac <sys_clock_elapsed>
}
    caaa:	2000      	movs	r0, #0
    caac:	4770      	bx	lr
    caae:	bf00      	nop
    cab0:	20000474 	.word	0x20000474

0000cab4 <next_timeout>:
    cab4:	4b11      	ldr	r3, [pc, #68]	; (cafc <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    cab6:	b510      	push	{r4, lr}
    cab8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    caba:	429c      	cmp	r4, r3
    cabc:	bf08      	it	eq
    cabe:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    cac0:	f7ff ffee 	bl	caa0 <elapsed>
    cac4:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
    cac6:	b16c      	cbz	r4, cae4 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    cac8:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    cacc:	1ac0      	subs	r0, r0, r3
    cace:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    cad2:	2801      	cmp	r0, #1
    cad4:	f173 0200 	sbcs.w	r2, r3, #0
    cad8:	db0d      	blt.n	caf6 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    cada:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    cade:	f173 0300 	sbcs.w	r3, r3, #0
    cae2:	db01      	blt.n	cae8 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
    cae4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    cae8:	4b05      	ldr	r3, [pc, #20]	; (cb00 <next_timeout+0x4c>)
    caea:	691b      	ldr	r3, [r3, #16]
    caec:	b113      	cbz	r3, caf4 <next_timeout+0x40>
    caee:	4298      	cmp	r0, r3
    caf0:	bfa8      	it	ge
    caf2:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    caf4:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    caf6:	2000      	movs	r0, #0
    caf8:	e7f6      	b.n	cae8 <next_timeout+0x34>
    cafa:	bf00      	nop
    cafc:	20000020 	.word	0x20000020
    cb00:	20000348 	.word	0x20000348

0000cb04 <remove_timeout>:
{
    cb04:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    cb06:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    cb08:	b168      	cbz	r0, cb26 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    cb0a:	4a0a      	ldr	r2, [pc, #40]	; (cb34 <remove_timeout+0x30>)
    cb0c:	6852      	ldr	r2, [r2, #4]
    cb0e:	4290      	cmp	r0, r2
    cb10:	d009      	beq.n	cb26 <remove_timeout+0x22>
	if (next(t) != NULL) {
    cb12:	b143      	cbz	r3, cb26 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    cb14:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    cb18:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    cb1c:	1912      	adds	r2, r2, r4
    cb1e:	eb41 0105 	adc.w	r1, r1, r5
    cb22:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    cb26:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    cb28:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    cb2a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    cb2c:	2300      	movs	r3, #0
	node->prev = NULL;
    cb2e:	e9c0 3300 	strd	r3, r3, [r0]
}
    cb32:	bd30      	pop	{r4, r5, pc}
    cb34:	20000020 	.word	0x20000020

0000cb38 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    cb38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cb3c:	bf08      	it	eq
    cb3e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    cb42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb44:	4604      	mov	r4, r0
    cb46:	461f      	mov	r7, r3
    cb48:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    cb4a:	d067      	beq.n	cc1c <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    cb4c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    cb4e:	f04f 0320 	mov.w	r3, #32
    cb52:	f3ef 8611 	mrs	r6, BASEPRI
    cb56:	f383 8812 	msr	BASEPRI_MAX, r3
    cb5a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    cb5e:	f06f 0201 	mvn.w	r2, #1
    cb62:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    cb66:	1b53      	subs	r3, r2, r5
    cb68:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    cb6c:	2b00      	cmp	r3, #0
    cb6e:	db1b      	blt.n	cba8 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    cb70:	4b2b      	ldr	r3, [pc, #172]	; (cc20 <z_add_timeout+0xe8>)
    cb72:	e9d3 1300 	ldrd	r1, r3, [r3]
    cb76:	1a52      	subs	r2, r2, r1
    cb78:	eb6c 0303 	sbc.w	r3, ip, r3
    cb7c:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    cb7e:	eb63 0307 	sbc.w	r3, r3, r7
    cb82:	2d01      	cmp	r5, #1
    cb84:	f173 0200 	sbcs.w	r2, r3, #0
    cb88:	bfbc      	itt	lt
    cb8a:	2501      	movlt	r5, #1
    cb8c:	2300      	movlt	r3, #0
    cb8e:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    cb92:	4824      	ldr	r0, [pc, #144]	; (cc24 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    cb94:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cb98:	4283      	cmp	r3, r0
    cb9a:	d118      	bne.n	cbce <z_add_timeout+0x96>
	node->prev = tail;
    cb9c:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    cba0:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    cba4:	6044      	str	r4, [r0, #4]
}
    cba6:	e026      	b.n	cbf6 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    cba8:	f7ff ff7a 	bl	caa0 <elapsed>
    cbac:	3501      	adds	r5, #1
    cbae:	f147 0700 	adc.w	r7, r7, #0
    cbb2:	182d      	adds	r5, r5, r0
    cbb4:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    cbb8:	e9c4 5704 	strd	r5, r7, [r4, #16]
    cbbc:	e7e9      	b.n	cb92 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    cbbe:	1a52      	subs	r2, r2, r1
    cbc0:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    cbc4:	459c      	cmp	ip, r3
    cbc6:	e9c4 2504 	strd	r2, r5, [r4, #16]
    cbca:	d0e7      	beq.n	cb9c <z_add_timeout+0x64>
    cbcc:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    cbce:	2b00      	cmp	r3, #0
    cbd0:	d0e4      	beq.n	cb9c <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    cbd2:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    cbd6:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    cbda:	428a      	cmp	r2, r1
    cbdc:	eb75 0e07 	sbcs.w	lr, r5, r7
    cbe0:	daed      	bge.n	cbbe <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    cbe2:	1a8a      	subs	r2, r1, r2
    cbe4:	eb67 0505 	sbc.w	r5, r7, r5
    cbe8:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    cbec:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    cbee:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    cbf2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    cbf4:	605c      	str	r4, [r3, #4]
	return list->head == list;
    cbf6:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cbf8:	4283      	cmp	r3, r0
    cbfa:	d00b      	beq.n	cc14 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    cbfc:	429c      	cmp	r4, r3
    cbfe:	d109      	bne.n	cc14 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    cc00:	f7ff ff58 	bl	cab4 <next_timeout>

			if (next_time == 0 ||
    cc04:	b118      	cbz	r0, cc0e <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    cc06:	4b08      	ldr	r3, [pc, #32]	; (cc28 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    cc08:	691b      	ldr	r3, [r3, #16]
    cc0a:	4283      	cmp	r3, r0
    cc0c:	d002      	beq.n	cc14 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    cc0e:	2100      	movs	r1, #0
    cc10:	f7f7 fade 	bl	41d0 <sys_clock_set_timeout>
	__asm__ volatile(
    cc14:	f386 8811 	msr	BASEPRI, r6
    cc18:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    cc1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cc1e:	bf00      	nop
    cc20:	20000328 	.word	0x20000328
    cc24:	20000020 	.word	0x20000020
    cc28:	20000348 	.word	0x20000348

0000cc2c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    cc2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cc30:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    cc32:	f7ff fda5 	bl	c780 <z_time_slice>
	__asm__ volatile(
    cc36:	f04f 0320 	mov.w	r3, #32
    cc3a:	f3ef 8411 	mrs	r4, BASEPRI
    cc3e:	f383 8812 	msr	BASEPRI_MAX, r3
    cc42:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    cc46:	4e24      	ldr	r6, [pc, #144]	; (ccd8 <sys_clock_announce+0xac>)
	return list->head == list;
    cc48:	f8df 8090 	ldr.w	r8, [pc, #144]	; ccdc <sys_clock_announce+0xb0>
    cc4c:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    cc4e:	4d24      	ldr	r5, [pc, #144]	; (cce0 <sys_clock_announce+0xb4>)
    cc50:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    cc54:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cc56:	4540      	cmp	r0, r8
    cc58:	ea4f 77e2 	mov.w	r7, r2, asr #31
		curr_tick += dt;
    cc5c:	e9d5 1e00 	ldrd	r1, lr, [r5]
    cc60:	d00b      	beq.n	cc7a <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    cc62:	b150      	cbz	r0, cc7a <sys_clock_announce+0x4e>
    cc64:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    cc68:	429a      	cmp	r2, r3
    cc6a:	eb77 090c 	sbcs.w	r9, r7, ip
    cc6e:	da16      	bge.n	cc9e <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    cc70:	1a9b      	subs	r3, r3, r2
    cc72:	eb6c 0c07 	sbc.w	ip, ip, r7
    cc76:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    cc7a:	1852      	adds	r2, r2, r1
    cc7c:	eb4e 0707 	adc.w	r7, lr, r7
    cc80:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    cc84:	2500      	movs	r5, #0
    cc86:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    cc88:	f7ff ff14 	bl	cab4 <next_timeout>
    cc8c:	4629      	mov	r1, r5
    cc8e:	f7f7 fa9f 	bl	41d0 <sys_clock_set_timeout>
	__asm__ volatile(
    cc92:	f384 8811 	msr	BASEPRI, r4
    cc96:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    cc9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    cc9e:	1859      	adds	r1, r3, r1
    cca0:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    cca4:	1ad3      	subs	r3, r2, r3
    cca6:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    cca8:	2200      	movs	r2, #0
    ccaa:	2300      	movs	r3, #0
    ccac:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    ccb0:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    ccb4:	f7ff ff26 	bl	cb04 <remove_timeout>
    ccb8:	f384 8811 	msr	BASEPRI, r4
    ccbc:	f3bf 8f6f 	isb	sy
		t->fn(t);
    ccc0:	6883      	ldr	r3, [r0, #8]
    ccc2:	4798      	blx	r3
	__asm__ volatile(
    ccc4:	f04f 0320 	mov.w	r3, #32
    ccc8:	f3ef 8411 	mrs	r4, BASEPRI
    cccc:	f383 8812 	msr	BASEPRI_MAX, r3
    ccd0:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    ccd4:	e7bc      	b.n	cc50 <sys_clock_announce+0x24>
    ccd6:	bf00      	nop
    ccd8:	20000474 	.word	0x20000474
    ccdc:	20000020 	.word	0x20000020
    cce0:	20000328 	.word	0x20000328

0000cce4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    cce4:	4a02      	ldr	r2, [pc, #8]	; (ccf0 <boot_banner+0xc>)
    cce6:	4903      	ldr	r1, [pc, #12]	; (ccf4 <boot_banner+0x10>)
    cce8:	4803      	ldr	r0, [pc, #12]	; (ccf8 <boot_banner+0x14>)
    ccea:	f004 be4a 	b.w	11982 <printk>
    ccee:	bf00      	nop
    ccf0:	00018987 	.word	0x00018987
    ccf4:	00018ab6 	.word	0x00018ab6
    ccf8:	00018ac4 	.word	0x00018ac4

0000ccfc <frexp>:
    ccfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ccfe:	4617      	mov	r7, r2
    cd00:	2200      	movs	r2, #0
    cd02:	603a      	str	r2, [r7, #0]
    cd04:	4a14      	ldr	r2, [pc, #80]	; (cd58 <frexp+0x5c>)
    cd06:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    cd0a:	4296      	cmp	r6, r2
    cd0c:	4604      	mov	r4, r0
    cd0e:	460d      	mov	r5, r1
    cd10:	460b      	mov	r3, r1
    cd12:	dc1e      	bgt.n	cd52 <frexp+0x56>
    cd14:	4602      	mov	r2, r0
    cd16:	4332      	orrs	r2, r6
    cd18:	d01b      	beq.n	cd52 <frexp+0x56>
    cd1a:	4a10      	ldr	r2, [pc, #64]	; (cd5c <frexp+0x60>)
    cd1c:	400a      	ands	r2, r1
    cd1e:	b952      	cbnz	r2, cd36 <frexp+0x3a>
    cd20:	2200      	movs	r2, #0
    cd22:	4b0f      	ldr	r3, [pc, #60]	; (cd60 <frexp+0x64>)
    cd24:	f7f3 fba0 	bl	468 <__aeabi_dmul>
    cd28:	f06f 0235 	mvn.w	r2, #53	; 0x35
    cd2c:	4604      	mov	r4, r0
    cd2e:	460b      	mov	r3, r1
    cd30:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    cd34:	603a      	str	r2, [r7, #0]
    cd36:	683a      	ldr	r2, [r7, #0]
    cd38:	1536      	asrs	r6, r6, #20
    cd3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    cd3e:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
    cd42:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    cd46:	4416      	add	r6, r2
    cd48:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
    cd4c:	603e      	str	r6, [r7, #0]
    cd4e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    cd52:	4620      	mov	r0, r4
    cd54:	4629      	mov	r1, r5
    cd56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cd58:	7fefffff 	.word	0x7fefffff
    cd5c:	7ff00000 	.word	0x7ff00000
    cd60:	43500000 	.word	0x43500000

0000cd64 <fmod>:
    cd64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd68:	461f      	mov	r7, r3
    cd6a:	4680      	mov	r8, r0
    cd6c:	4689      	mov	r9, r1
    cd6e:	4616      	mov	r6, r2
    cd70:	f000 f8d4 	bl	cf1c <__ieee754_fmod>
    cd74:	4b12      	ldr	r3, [pc, #72]	; (cdc0 <fmod+0x5c>)
    cd76:	4604      	mov	r4, r0
    cd78:	f993 3000 	ldrsb.w	r3, [r3]
    cd7c:	460d      	mov	r5, r1
    cd7e:	3301      	adds	r3, #1
    cd80:	d019      	beq.n	cdb6 <fmod+0x52>
    cd82:	4632      	mov	r2, r6
    cd84:	463b      	mov	r3, r7
    cd86:	4640      	mov	r0, r8
    cd88:	4649      	mov	r1, r9
    cd8a:	f7f3 febd 	bl	b08 <__aeabi_dcmpun>
    cd8e:	b990      	cbnz	r0, cdb6 <fmod+0x52>
    cd90:	2200      	movs	r2, #0
    cd92:	2300      	movs	r3, #0
    cd94:	4630      	mov	r0, r6
    cd96:	4639      	mov	r1, r7
    cd98:	f7f3 fdce 	bl	938 <__aeabi_dcmpeq>
    cd9c:	b158      	cbz	r0, cdb6 <fmod+0x52>
    cd9e:	f004 fe63 	bl	11a68 <__errno>
    cda2:	2321      	movs	r3, #33	; 0x21
    cda4:	2200      	movs	r2, #0
    cda6:	6003      	str	r3, [r0, #0]
    cda8:	2300      	movs	r3, #0
    cdaa:	4610      	mov	r0, r2
    cdac:	4619      	mov	r1, r3
    cdae:	f7f3 fc85 	bl	6bc <__aeabi_ddiv>
    cdb2:	4604      	mov	r4, r0
    cdb4:	460d      	mov	r5, r1
    cdb6:	4620      	mov	r0, r4
    cdb8:	4629      	mov	r1, r5
    cdba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cdbe:	bf00      	nop
    cdc0:	200001f8 	.word	0x200001f8

0000cdc4 <pow>:
    cdc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cdc8:	461f      	mov	r7, r3
    cdca:	4680      	mov	r8, r0
    cdcc:	4689      	mov	r9, r1
    cdce:	4616      	mov	r6, r2
    cdd0:	f7f4 f9f2 	bl	11b8 <__ieee754_pow>
    cdd4:	4b4d      	ldr	r3, [pc, #308]	; (cf0c <pow+0x148>)
    cdd6:	4604      	mov	r4, r0
    cdd8:	f993 3000 	ldrsb.w	r3, [r3]
    cddc:	460d      	mov	r5, r1
    cdde:	3301      	adds	r3, #1
    cde0:	d015      	beq.n	ce0e <pow+0x4a>
    cde2:	4632      	mov	r2, r6
    cde4:	463b      	mov	r3, r7
    cde6:	4630      	mov	r0, r6
    cde8:	4639      	mov	r1, r7
    cdea:	f7f3 fe8d 	bl	b08 <__aeabi_dcmpun>
    cdee:	b970      	cbnz	r0, ce0e <pow+0x4a>
    cdf0:	4642      	mov	r2, r8
    cdf2:	464b      	mov	r3, r9
    cdf4:	4640      	mov	r0, r8
    cdf6:	4649      	mov	r1, r9
    cdf8:	f7f3 fe86 	bl	b08 <__aeabi_dcmpun>
    cdfc:	2200      	movs	r2, #0
    cdfe:	2300      	movs	r3, #0
    ce00:	b148      	cbz	r0, ce16 <pow+0x52>
    ce02:	4630      	mov	r0, r6
    ce04:	4639      	mov	r1, r7
    ce06:	f7f3 fd97 	bl	938 <__aeabi_dcmpeq>
    ce0a:	2800      	cmp	r0, #0
    ce0c:	d17b      	bne.n	cf06 <pow+0x142>
    ce0e:	4620      	mov	r0, r4
    ce10:	4629      	mov	r1, r5
    ce12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ce16:	4640      	mov	r0, r8
    ce18:	4649      	mov	r1, r9
    ce1a:	f7f3 fd8d 	bl	938 <__aeabi_dcmpeq>
    ce1e:	b1e0      	cbz	r0, ce5a <pow+0x96>
    ce20:	2200      	movs	r2, #0
    ce22:	2300      	movs	r3, #0
    ce24:	4630      	mov	r0, r6
    ce26:	4639      	mov	r1, r7
    ce28:	f7f3 fd86 	bl	938 <__aeabi_dcmpeq>
    ce2c:	2800      	cmp	r0, #0
    ce2e:	d16a      	bne.n	cf06 <pow+0x142>
    ce30:	4630      	mov	r0, r6
    ce32:	4639      	mov	r1, r7
    ce34:	f009 fe87 	bl	16b46 <finite>
    ce38:	2800      	cmp	r0, #0
    ce3a:	d0e8      	beq.n	ce0e <pow+0x4a>
    ce3c:	2200      	movs	r2, #0
    ce3e:	2300      	movs	r3, #0
    ce40:	4630      	mov	r0, r6
    ce42:	4639      	mov	r1, r7
    ce44:	f7f3 fd82 	bl	94c <__aeabi_dcmplt>
    ce48:	2800      	cmp	r0, #0
    ce4a:	d0e0      	beq.n	ce0e <pow+0x4a>
    ce4c:	f004 fe0c 	bl	11a68 <__errno>
    ce50:	2321      	movs	r3, #33	; 0x21
    ce52:	2400      	movs	r4, #0
    ce54:	6003      	str	r3, [r0, #0]
    ce56:	4d2e      	ldr	r5, [pc, #184]	; (cf10 <pow+0x14c>)
    ce58:	e7d9      	b.n	ce0e <pow+0x4a>
    ce5a:	4620      	mov	r0, r4
    ce5c:	4629      	mov	r1, r5
    ce5e:	f009 fe72 	bl	16b46 <finite>
    ce62:	bba8      	cbnz	r0, ced0 <pow+0x10c>
    ce64:	4640      	mov	r0, r8
    ce66:	4649      	mov	r1, r9
    ce68:	f009 fe6d 	bl	16b46 <finite>
    ce6c:	b380      	cbz	r0, ced0 <pow+0x10c>
    ce6e:	4630      	mov	r0, r6
    ce70:	4639      	mov	r1, r7
    ce72:	f009 fe68 	bl	16b46 <finite>
    ce76:	b358      	cbz	r0, ced0 <pow+0x10c>
    ce78:	4622      	mov	r2, r4
    ce7a:	462b      	mov	r3, r5
    ce7c:	4620      	mov	r0, r4
    ce7e:	4629      	mov	r1, r5
    ce80:	f7f3 fe42 	bl	b08 <__aeabi_dcmpun>
    ce84:	b160      	cbz	r0, cea0 <pow+0xdc>
    ce86:	f004 fdef 	bl	11a68 <__errno>
    ce8a:	2321      	movs	r3, #33	; 0x21
    ce8c:	2200      	movs	r2, #0
    ce8e:	6003      	str	r3, [r0, #0]
    ce90:	2300      	movs	r3, #0
    ce92:	4610      	mov	r0, r2
    ce94:	4619      	mov	r1, r3
    ce96:	f7f3 fc11 	bl	6bc <__aeabi_ddiv>
    ce9a:	4604      	mov	r4, r0
    ce9c:	460d      	mov	r5, r1
    ce9e:	e7b6      	b.n	ce0e <pow+0x4a>
    cea0:	f004 fde2 	bl	11a68 <__errno>
    cea4:	2322      	movs	r3, #34	; 0x22
    cea6:	2200      	movs	r2, #0
    cea8:	6003      	str	r3, [r0, #0]
    ceaa:	4649      	mov	r1, r9
    ceac:	2300      	movs	r3, #0
    ceae:	4640      	mov	r0, r8
    ceb0:	f7f3 fd4c 	bl	94c <__aeabi_dcmplt>
    ceb4:	2400      	movs	r4, #0
    ceb6:	b148      	cbz	r0, cecc <pow+0x108>
    ceb8:	4630      	mov	r0, r6
    ceba:	4639      	mov	r1, r7
    cebc:	f000 f9f4 	bl	d2a8 <rint>
    cec0:	4632      	mov	r2, r6
    cec2:	463b      	mov	r3, r7
    cec4:	f7f3 fd38 	bl	938 <__aeabi_dcmpeq>
    cec8:	2800      	cmp	r0, #0
    ceca:	d0c4      	beq.n	ce56 <pow+0x92>
    cecc:	4d11      	ldr	r5, [pc, #68]	; (cf14 <pow+0x150>)
    cece:	e79e      	b.n	ce0e <pow+0x4a>
    ced0:	2200      	movs	r2, #0
    ced2:	2300      	movs	r3, #0
    ced4:	4620      	mov	r0, r4
    ced6:	4629      	mov	r1, r5
    ced8:	f7f3 fd2e 	bl	938 <__aeabi_dcmpeq>
    cedc:	2800      	cmp	r0, #0
    cede:	d096      	beq.n	ce0e <pow+0x4a>
    cee0:	4640      	mov	r0, r8
    cee2:	4649      	mov	r1, r9
    cee4:	f009 fe2f 	bl	16b46 <finite>
    cee8:	2800      	cmp	r0, #0
    ceea:	d090      	beq.n	ce0e <pow+0x4a>
    ceec:	4630      	mov	r0, r6
    ceee:	4639      	mov	r1, r7
    cef0:	f009 fe29 	bl	16b46 <finite>
    cef4:	2800      	cmp	r0, #0
    cef6:	d08a      	beq.n	ce0e <pow+0x4a>
    cef8:	f004 fdb6 	bl	11a68 <__errno>
    cefc:	2322      	movs	r3, #34	; 0x22
    cefe:	2400      	movs	r4, #0
    cf00:	2500      	movs	r5, #0
    cf02:	6003      	str	r3, [r0, #0]
    cf04:	e783      	b.n	ce0e <pow+0x4a>
    cf06:	2400      	movs	r4, #0
    cf08:	4d03      	ldr	r5, [pc, #12]	; (cf18 <pow+0x154>)
    cf0a:	e780      	b.n	ce0e <pow+0x4a>
    cf0c:	200001f8 	.word	0x200001f8
    cf10:	fff00000 	.word	0xfff00000
    cf14:	7ff00000 	.word	0x7ff00000
    cf18:	3ff00000 	.word	0x3ff00000

0000cf1c <__ieee754_fmod>:
    cf1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cf20:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
    cf24:	460e      	mov	r6, r1
    cf26:	461d      	mov	r5, r3
    cf28:	4619      	mov	r1, r3
    cf2a:	ea58 0302 	orrs.w	r3, r8, r2
    cf2e:	4607      	mov	r7, r0
    cf30:	4614      	mov	r4, r2
    cf32:	4694      	mov	ip, r2
    cf34:	4696      	mov	lr, r2
    cf36:	d00c      	beq.n	cf52 <__ieee754_fmod+0x36>
    cf38:	4a7a      	ldr	r2, [pc, #488]	; (d124 <__ieee754_fmod+0x208>)
    cf3a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
    cf3e:	4293      	cmp	r3, r2
    cf40:	46b2      	mov	sl, r6
    cf42:	dc06      	bgt.n	cf52 <__ieee754_fmod+0x36>
    cf44:	4262      	negs	r2, r4
    cf46:	4878      	ldr	r0, [pc, #480]	; (d128 <__ieee754_fmod+0x20c>)
    cf48:	4322      	orrs	r2, r4
    cf4a:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
    cf4e:	4282      	cmp	r2, r0
    cf50:	d90c      	bls.n	cf6c <__ieee754_fmod+0x50>
    cf52:	460b      	mov	r3, r1
    cf54:	4622      	mov	r2, r4
    cf56:	4638      	mov	r0, r7
    cf58:	4631      	mov	r1, r6
    cf5a:	f7f3 fa85 	bl	468 <__aeabi_dmul>
    cf5e:	4602      	mov	r2, r0
    cf60:	460b      	mov	r3, r1
    cf62:	f7f3 fbab 	bl	6bc <__aeabi_ddiv>
    cf66:	4607      	mov	r7, r0
    cf68:	460e      	mov	r6, r1
    cf6a:	e00e      	b.n	cf8a <__ieee754_fmod+0x6e>
    cf6c:	4543      	cmp	r3, r8
    cf6e:	46b9      	mov	r9, r7
    cf70:	4639      	mov	r1, r7
    cf72:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
    cf76:	dc0c      	bgt.n	cf92 <__ieee754_fmod+0x76>
    cf78:	db07      	blt.n	cf8a <__ieee754_fmod+0x6e>
    cf7a:	4567      	cmp	r7, ip
    cf7c:	d305      	bcc.n	cf8a <__ieee754_fmod+0x6e>
    cf7e:	d108      	bne.n	cf92 <__ieee754_fmod+0x76>
    cf80:	4b6a      	ldr	r3, [pc, #424]	; (d12c <__ieee754_fmod+0x210>)
    cf82:	eb03 7414 	add.w	r4, r3, r4, lsr #28
    cf86:	e9d4 7600 	ldrd	r7, r6, [r4]
    cf8a:	4638      	mov	r0, r7
    cf8c:	4631      	mov	r1, r6
    cf8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cf92:	ea1a 0f00 	tst.w	sl, r0
    cf96:	d14a      	bne.n	d02e <__ieee754_fmod+0x112>
    cf98:	2b00      	cmp	r3, #0
    cf9a:	d141      	bne.n	d020 <__ieee754_fmod+0x104>
    cf9c:	464a      	mov	r2, r9
    cf9e:	4864      	ldr	r0, [pc, #400]	; (d130 <__ieee754_fmod+0x214>)
    cfa0:	2a00      	cmp	r2, #0
    cfa2:	dc3a      	bgt.n	d01a <__ieee754_fmod+0xfe>
    cfa4:	4a60      	ldr	r2, [pc, #384]	; (d128 <__ieee754_fmod+0x20c>)
    cfa6:	402a      	ands	r2, r5
    cfa8:	2a00      	cmp	r2, #0
    cfaa:	d14f      	bne.n	d04c <__ieee754_fmod+0x130>
    cfac:	f1b8 0f00 	cmp.w	r8, #0
    cfb0:	d144      	bne.n	d03c <__ieee754_fmod+0x120>
    cfb2:	4666      	mov	r6, ip
    cfb4:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
    cfb8:	2e00      	cmp	r6, #0
    cfba:	dc3c      	bgt.n	d036 <__ieee754_fmod+0x11a>
    cfbc:	4e5d      	ldr	r6, [pc, #372]	; (d134 <__ieee754_fmod+0x218>)
    cfbe:	42b0      	cmp	r0, r6
    cfc0:	db49      	blt.n	d056 <__ieee754_fmod+0x13a>
    cfc2:	f3ca 0313 	ubfx	r3, sl, #0, #20
    cfc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    cfca:	4e5a      	ldr	r6, [pc, #360]	; (d134 <__ieee754_fmod+0x218>)
    cfcc:	42b2      	cmp	r2, r6
    cfce:	db54      	blt.n	d07a <__ieee754_fmod+0x15e>
    cfd0:	f3c5 0513 	ubfx	r5, r5, #0, #20
    cfd4:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
    cfd8:	1a80      	subs	r0, r0, r2
    cfda:	1b5e      	subs	r6, r3, r5
    cfdc:	eba1 070e 	sub.w	r7, r1, lr
    cfe0:	2800      	cmp	r0, #0
    cfe2:	d161      	bne.n	d0a8 <__ieee754_fmod+0x18c>
    cfe4:	4571      	cmp	r1, lr
    cfe6:	bf38      	it	cc
    cfe8:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
    cfec:	2e00      	cmp	r6, #0
    cfee:	bfa4      	itt	ge
    cff0:	4639      	movge	r1, r7
    cff2:	4633      	movge	r3, r6
    cff4:	ea53 0001 	orrs.w	r0, r3, r1
    cff8:	d0c2      	beq.n	cf80 <__ieee754_fmod+0x64>
    cffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    cffe:	db68      	blt.n	d0d2 <__ieee754_fmod+0x1b6>
    d000:	484c      	ldr	r0, [pc, #304]	; (d134 <__ieee754_fmod+0x218>)
    d002:	4282      	cmp	r2, r0
    d004:	db6b      	blt.n	d0de <__ieee754_fmod+0x1c2>
    d006:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    d00a:	431c      	orrs	r4, r3
    d00c:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
    d010:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
    d014:	460f      	mov	r7, r1
    d016:	464e      	mov	r6, r9
    d018:	e7b7      	b.n	cf8a <__ieee754_fmod+0x6e>
    d01a:	3801      	subs	r0, #1
    d01c:	0052      	lsls	r2, r2, #1
    d01e:	e7bf      	b.n	cfa0 <__ieee754_fmod+0x84>
    d020:	4844      	ldr	r0, [pc, #272]	; (d134 <__ieee754_fmod+0x218>)
    d022:	02da      	lsls	r2, r3, #11
    d024:	2a00      	cmp	r2, #0
    d026:	ddbd      	ble.n	cfa4 <__ieee754_fmod+0x88>
    d028:	3801      	subs	r0, #1
    d02a:	0052      	lsls	r2, r2, #1
    d02c:	e7fa      	b.n	d024 <__ieee754_fmod+0x108>
    d02e:	1518      	asrs	r0, r3, #20
    d030:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
    d034:	e7b6      	b.n	cfa4 <__ieee754_fmod+0x88>
    d036:	3a01      	subs	r2, #1
    d038:	0076      	lsls	r6, r6, #1
    d03a:	e7bd      	b.n	cfb8 <__ieee754_fmod+0x9c>
    d03c:	4a3d      	ldr	r2, [pc, #244]	; (d134 <__ieee754_fmod+0x218>)
    d03e:	ea4f 26c8 	mov.w	r6, r8, lsl #11
    d042:	2e00      	cmp	r6, #0
    d044:	ddba      	ble.n	cfbc <__ieee754_fmod+0xa0>
    d046:	3a01      	subs	r2, #1
    d048:	0076      	lsls	r6, r6, #1
    d04a:	e7fa      	b.n	d042 <__ieee754_fmod+0x126>
    d04c:	ea4f 5228 	mov.w	r2, r8, asr #20
    d050:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    d054:	e7b2      	b.n	cfbc <__ieee754_fmod+0xa0>
    d056:	1a31      	subs	r1, r6, r0
    d058:	291f      	cmp	r1, #31
    d05a:	dc08      	bgt.n	d06e <__ieee754_fmod+0x152>
    d05c:	f200 461e 	addw	r6, r0, #1054	; 0x41e
    d060:	408b      	lsls	r3, r1
    d062:	fa29 f606 	lsr.w	r6, r9, r6
    d066:	4333      	orrs	r3, r6
    d068:	fa09 f101 	lsl.w	r1, r9, r1
    d06c:	e7ad      	b.n	cfca <__ieee754_fmod+0xae>
    d06e:	4b32      	ldr	r3, [pc, #200]	; (d138 <__ieee754_fmod+0x21c>)
    d070:	2100      	movs	r1, #0
    d072:	1a1b      	subs	r3, r3, r0
    d074:	fa09 f303 	lsl.w	r3, r9, r3
    d078:	e7a7      	b.n	cfca <__ieee754_fmod+0xae>
    d07a:	eba6 0e02 	sub.w	lr, r6, r2
    d07e:	f1be 0f1f 	cmp.w	lr, #31
    d082:	dc0a      	bgt.n	d09a <__ieee754_fmod+0x17e>
    d084:	f202 451e 	addw	r5, r2, #1054	; 0x41e
    d088:	fa08 f80e 	lsl.w	r8, r8, lr
    d08c:	fa2c f505 	lsr.w	r5, ip, r5
    d090:	ea45 0508 	orr.w	r5, r5, r8
    d094:	fa0c fe0e 	lsl.w	lr, ip, lr
    d098:	e79e      	b.n	cfd8 <__ieee754_fmod+0xbc>
    d09a:	4d27      	ldr	r5, [pc, #156]	; (d138 <__ieee754_fmod+0x21c>)
    d09c:	f04f 0e00 	mov.w	lr, #0
    d0a0:	1aad      	subs	r5, r5, r2
    d0a2:	fa0c f505 	lsl.w	r5, ip, r5
    d0a6:	e797      	b.n	cfd8 <__ieee754_fmod+0xbc>
    d0a8:	4571      	cmp	r1, lr
    d0aa:	bf38      	it	cc
    d0ac:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
    d0b0:	2e00      	cmp	r6, #0
    d0b2:	da05      	bge.n	d0c0 <__ieee754_fmod+0x1a4>
    d0b4:	0fce      	lsrs	r6, r1, #31
    d0b6:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    d0ba:	0049      	lsls	r1, r1, #1
    d0bc:	3801      	subs	r0, #1
    d0be:	e78c      	b.n	cfda <__ieee754_fmod+0xbe>
    d0c0:	ea56 0307 	orrs.w	r3, r6, r7
    d0c4:	f43f af5c 	beq.w	cf80 <__ieee754_fmod+0x64>
    d0c8:	0ffb      	lsrs	r3, r7, #31
    d0ca:	eb03 0346 	add.w	r3, r3, r6, lsl #1
    d0ce:	0079      	lsls	r1, r7, #1
    d0d0:	e7f4      	b.n	d0bc <__ieee754_fmod+0x1a0>
    d0d2:	0fc8      	lsrs	r0, r1, #31
    d0d4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d0d8:	0049      	lsls	r1, r1, #1
    d0da:	3a01      	subs	r2, #1
    d0dc:	e78d      	b.n	cffa <__ieee754_fmod+0xde>
    d0de:	1a80      	subs	r0, r0, r2
    d0e0:	2814      	cmp	r0, #20
    d0e2:	dc0a      	bgt.n	d0fa <__ieee754_fmod+0x1de>
    d0e4:	f202 421e 	addw	r2, r2, #1054	; 0x41e
    d0e8:	fa03 f202 	lsl.w	r2, r3, r2
    d0ec:	40c1      	lsrs	r1, r0
    d0ee:	430a      	orrs	r2, r1
    d0f0:	4103      	asrs	r3, r0
    d0f2:	4610      	mov	r0, r2
    d0f4:	ea43 0104 	orr.w	r1, r3, r4
    d0f8:	e735      	b.n	cf66 <__ieee754_fmod+0x4a>
    d0fa:	281f      	cmp	r0, #31
    d0fc:	dc07      	bgt.n	d10e <__ieee754_fmod+0x1f2>
    d0fe:	f202 421e 	addw	r2, r2, #1054	; 0x41e
    d102:	40c1      	lsrs	r1, r0
    d104:	fa03 f202 	lsl.w	r2, r3, r2
    d108:	430a      	orrs	r2, r1
    d10a:	4623      	mov	r3, r4
    d10c:	e7f1      	b.n	d0f2 <__ieee754_fmod+0x1d6>
    d10e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    d112:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    d116:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    d11a:	32e2      	adds	r2, #226	; 0xe2
    d11c:	fa43 f202 	asr.w	r2, r3, r2
    d120:	e7f3      	b.n	d10a <__ieee754_fmod+0x1ee>
    d122:	bf00      	nop
    d124:	7fefffff 	.word	0x7fefffff
    d128:	7ff00000 	.word	0x7ff00000
    d12c:	00017830 	.word	0x00017830
    d130:	fffffbed 	.word	0xfffffbed
    d134:	fffffc02 	.word	0xfffffc02
    d138:	fffffbe2 	.word	0xfffffbe2

0000d13c <__ieee754_sqrt>:
    d13c:	f8df c158 	ldr.w	ip, [pc, #344]	; d298 <__ieee754_sqrt+0x15c>
    d140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d144:	ea3c 0c01 	bics.w	ip, ip, r1
    d148:	4606      	mov	r6, r0
    d14a:	460d      	mov	r5, r1
    d14c:	460c      	mov	r4, r1
    d14e:	460a      	mov	r2, r1
    d150:	4607      	mov	r7, r0
    d152:	4603      	mov	r3, r0
    d154:	d10f      	bne.n	d176 <__ieee754_sqrt+0x3a>
    d156:	4602      	mov	r2, r0
    d158:	460b      	mov	r3, r1
    d15a:	f7f3 f985 	bl	468 <__aeabi_dmul>
    d15e:	4602      	mov	r2, r0
    d160:	460b      	mov	r3, r1
    d162:	4630      	mov	r0, r6
    d164:	4629      	mov	r1, r5
    d166:	f7f2 ffc9 	bl	fc <__adddf3>
    d16a:	4606      	mov	r6, r0
    d16c:	460d      	mov	r5, r1
    d16e:	4630      	mov	r0, r6
    d170:	4629      	mov	r1, r5
    d172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d176:	2900      	cmp	r1, #0
    d178:	dc0e      	bgt.n	d198 <__ieee754_sqrt+0x5c>
    d17a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
    d17e:	ea5c 0707 	orrs.w	r7, ip, r7
    d182:	d0f4      	beq.n	d16e <__ieee754_sqrt+0x32>
    d184:	b141      	cbz	r1, d198 <__ieee754_sqrt+0x5c>
    d186:	4602      	mov	r2, r0
    d188:	460b      	mov	r3, r1
    d18a:	f7f2 ffb5 	bl	f8 <__aeabi_dsub>
    d18e:	4602      	mov	r2, r0
    d190:	460b      	mov	r3, r1
    d192:	f7f3 fa93 	bl	6bc <__aeabi_ddiv>
    d196:	e7e8      	b.n	d16a <__ieee754_sqrt+0x2e>
    d198:	1521      	asrs	r1, r4, #20
    d19a:	d075      	beq.n	d288 <__ieee754_sqrt+0x14c>
    d19c:	07cc      	lsls	r4, r1, #31
    d19e:	f04f 0400 	mov.w	r4, #0
    d1a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
    d1a6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
    d1aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    d1ae:	bf5e      	ittt	pl
    d1b0:	0fd9      	lsrpl	r1, r3, #31
    d1b2:	005b      	lslpl	r3, r3, #1
    d1b4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
    d1b8:	0fd9      	lsrs	r1, r3, #31
    d1ba:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    d1be:	2516      	movs	r5, #22
    d1c0:	4620      	mov	r0, r4
    d1c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    d1c6:	107f      	asrs	r7, r7, #1
    d1c8:	005b      	lsls	r3, r3, #1
    d1ca:	1846      	adds	r6, r0, r1
    d1cc:	4296      	cmp	r6, r2
    d1ce:	bfde      	ittt	le
    d1d0:	1b92      	suble	r2, r2, r6
    d1d2:	1870      	addle	r0, r6, r1
    d1d4:	1864      	addle	r4, r4, r1
    d1d6:	0052      	lsls	r2, r2, #1
    d1d8:	3d01      	subs	r5, #1
    d1da:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
    d1de:	ea4f 0151 	mov.w	r1, r1, lsr #1
    d1e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d1e6:	d1f0      	bne.n	d1ca <__ieee754_sqrt+0x8e>
    d1e8:	4629      	mov	r1, r5
    d1ea:	f04f 0e20 	mov.w	lr, #32
    d1ee:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    d1f2:	4282      	cmp	r2, r0
    d1f4:	eb06 0c05 	add.w	ip, r6, r5
    d1f8:	dc02      	bgt.n	d200 <__ieee754_sqrt+0xc4>
    d1fa:	d113      	bne.n	d224 <__ieee754_sqrt+0xe8>
    d1fc:	459c      	cmp	ip, r3
    d1fe:	d811      	bhi.n	d224 <__ieee754_sqrt+0xe8>
    d200:	f1bc 0f00 	cmp.w	ip, #0
    d204:	eb0c 0506 	add.w	r5, ip, r6
    d208:	da43      	bge.n	d292 <__ieee754_sqrt+0x156>
    d20a:	2d00      	cmp	r5, #0
    d20c:	db41      	blt.n	d292 <__ieee754_sqrt+0x156>
    d20e:	f100 0801 	add.w	r8, r0, #1
    d212:	1a12      	subs	r2, r2, r0
    d214:	4640      	mov	r0, r8
    d216:	459c      	cmp	ip, r3
    d218:	bf88      	it	hi
    d21a:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
    d21e:	eba3 030c 	sub.w	r3, r3, ip
    d222:	4431      	add	r1, r6
    d224:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
    d228:	f1be 0e01 	subs.w	lr, lr, #1
    d22c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
    d230:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d234:	ea4f 0656 	mov.w	r6, r6, lsr #1
    d238:	d1db      	bne.n	d1f2 <__ieee754_sqrt+0xb6>
    d23a:	4313      	orrs	r3, r2
    d23c:	d006      	beq.n	d24c <__ieee754_sqrt+0x110>
    d23e:	1c48      	adds	r0, r1, #1
    d240:	bf0b      	itete	eq
    d242:	4671      	moveq	r1, lr
    d244:	3101      	addne	r1, #1
    d246:	3401      	addeq	r4, #1
    d248:	f021 0101 	bicne.w	r1, r1, #1
    d24c:	1063      	asrs	r3, r4, #1
    d24e:	0849      	lsrs	r1, r1, #1
    d250:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    d254:	07e2      	lsls	r2, r4, #31
    d256:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    d25a:	bf48      	it	mi
    d25c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
    d260:	460e      	mov	r6, r1
    d262:	eb03 5507 	add.w	r5, r3, r7, lsl #20
    d266:	e782      	b.n	d16e <__ieee754_sqrt+0x32>
    d268:	0ada      	lsrs	r2, r3, #11
    d26a:	3815      	subs	r0, #21
    d26c:	055b      	lsls	r3, r3, #21
    d26e:	2a00      	cmp	r2, #0
    d270:	d0fa      	beq.n	d268 <__ieee754_sqrt+0x12c>
    d272:	02d5      	lsls	r5, r2, #11
    d274:	d50a      	bpl.n	d28c <__ieee754_sqrt+0x150>
    d276:	f1c1 0420 	rsb	r4, r1, #32
    d27a:	fa23 f404 	lsr.w	r4, r3, r4
    d27e:	1e4d      	subs	r5, r1, #1
    d280:	408b      	lsls	r3, r1
    d282:	4322      	orrs	r2, r4
    d284:	1b41      	subs	r1, r0, r5
    d286:	e789      	b.n	d19c <__ieee754_sqrt+0x60>
    d288:	4608      	mov	r0, r1
    d28a:	e7f0      	b.n	d26e <__ieee754_sqrt+0x132>
    d28c:	0052      	lsls	r2, r2, #1
    d28e:	3101      	adds	r1, #1
    d290:	e7ef      	b.n	d272 <__ieee754_sqrt+0x136>
    d292:	4680      	mov	r8, r0
    d294:	e7bd      	b.n	d212 <__ieee754_sqrt+0xd6>
    d296:	bf00      	nop
    d298:	7ff00000 	.word	0x7ff00000

0000d29c <nan>:
    d29c:	2000      	movs	r0, #0
    d29e:	4901      	ldr	r1, [pc, #4]	; (d2a4 <nan+0x8>)
    d2a0:	4770      	bx	lr
    d2a2:	bf00      	nop
    d2a4:	7ff80000 	.word	0x7ff80000

0000d2a8 <rint>:
    d2a8:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
    d2ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d2ae:	f2ac 36ff 	subw	r6, ip, #1023	; 0x3ff
    d2b2:	2e13      	cmp	r6, #19
    d2b4:	4602      	mov	r2, r0
    d2b6:	460b      	mov	r3, r1
    d2b8:	460c      	mov	r4, r1
    d2ba:	4605      	mov	r5, r0
    d2bc:	ea4f 77d1 	mov.w	r7, r1, lsr #31
    d2c0:	dc5a      	bgt.n	d378 <rint+0xd0>
    d2c2:	2e00      	cmp	r6, #0
    d2c4:	da2c      	bge.n	d320 <rint+0x78>
    d2c6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d2ca:	4301      	orrs	r1, r0
    d2cc:	d024      	beq.n	d318 <rint+0x70>
    d2ce:	f3c3 0113 	ubfx	r1, r3, #0, #20
    d2d2:	4301      	orrs	r1, r0
    d2d4:	424d      	negs	r5, r1
    d2d6:	430d      	orrs	r5, r1
    d2d8:	0b2d      	lsrs	r5, r5, #12
    d2da:	0c59      	lsrs	r1, r3, #17
    d2dc:	0449      	lsls	r1, r1, #17
    d2de:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    d2e2:	ea45 0301 	orr.w	r3, r5, r1
    d2e6:	4935      	ldr	r1, [pc, #212]	; (d3bc <rint+0x114>)
    d2e8:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
    d2ec:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
    d2f0:	e9d7 6700 	ldrd	r6, r7, [r7]
    d2f4:	4639      	mov	r1, r7
    d2f6:	4630      	mov	r0, r6
    d2f8:	f7f2 ff00 	bl	fc <__adddf3>
    d2fc:	e9cd 0100 	strd	r0, r1, [sp]
    d300:	e9dd 0100 	ldrd	r0, r1, [sp]
    d304:	463b      	mov	r3, r7
    d306:	4632      	mov	r2, r6
    d308:	f7f2 fef6 	bl	f8 <__aeabi_dsub>
    d30c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    d310:	ea43 0704 	orr.w	r7, r3, r4
    d314:	4602      	mov	r2, r0
    d316:	463b      	mov	r3, r7
    d318:	4610      	mov	r0, r2
    d31a:	4619      	mov	r1, r3
    d31c:	b003      	add	sp, #12
    d31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d320:	4927      	ldr	r1, [pc, #156]	; (d3c0 <rint+0x118>)
    d322:	4131      	asrs	r1, r6
    d324:	ea03 0001 	and.w	r0, r3, r1
    d328:	4310      	orrs	r0, r2
    d32a:	d0f5      	beq.n	d318 <rint+0x70>
    d32c:	084b      	lsrs	r3, r1, #1
    d32e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
    d332:	430d      	orrs	r5, r1
    d334:	d00c      	beq.n	d350 <rint+0xa8>
    d336:	ea24 0303 	bic.w	r3, r4, r3
    d33a:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    d33e:	2e13      	cmp	r6, #19
    d340:	bf0c      	ite	eq
    d342:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    d346:	2500      	movne	r5, #0
    d348:	fa44 f606 	asr.w	r6, r4, r6
    d34c:	ea43 0406 	orr.w	r4, r3, r6
    d350:	491a      	ldr	r1, [pc, #104]	; (d3bc <rint+0x114>)
    d352:	4623      	mov	r3, r4
    d354:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
    d358:	462a      	mov	r2, r5
    d35a:	e9d7 4500 	ldrd	r4, r5, [r7]
    d35e:	4620      	mov	r0, r4
    d360:	4629      	mov	r1, r5
    d362:	f7f2 fecb 	bl	fc <__adddf3>
    d366:	e9cd 0100 	strd	r0, r1, [sp]
    d36a:	e9dd 0100 	ldrd	r0, r1, [sp]
    d36e:	4622      	mov	r2, r4
    d370:	462b      	mov	r3, r5
    d372:	f7f2 fec1 	bl	f8 <__aeabi_dsub>
    d376:	e006      	b.n	d386 <rint+0xde>
    d378:	2e33      	cmp	r6, #51	; 0x33
    d37a:	dd07      	ble.n	d38c <rint+0xe4>
    d37c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    d380:	d1ca      	bne.n	d318 <rint+0x70>
    d382:	f7f2 febb 	bl	fc <__adddf3>
    d386:	4602      	mov	r2, r0
    d388:	460b      	mov	r3, r1
    d38a:	e7c5      	b.n	d318 <rint+0x70>
    d38c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d390:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
    d394:	fa21 f10c 	lsr.w	r1, r1, ip
    d398:	4208      	tst	r0, r1
    d39a:	d0bd      	beq.n	d318 <rint+0x70>
    d39c:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
    d3a0:	bf18      	it	ne
    d3a2:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
    d3a6:	ea4f 0351 	mov.w	r3, r1, lsr #1
    d3aa:	bf1e      	ittt	ne
    d3ac:	ea20 0303 	bicne.w	r3, r0, r3
    d3b0:	fa45 fc0c 	asrne.w	ip, r5, ip
    d3b4:	ea43 050c 	orrne.w	r5, r3, ip
    d3b8:	e7ca      	b.n	d350 <rint+0xa8>
    d3ba:	bf00      	nop
    d3bc:	00017870 	.word	0x00017870
    d3c0:	000fffff 	.word	0x000fffff

0000d3c4 <__sflush_r>:
    d3c4:	898a      	ldrh	r2, [r1, #12]
    d3c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3c8:	4605      	mov	r5, r0
    d3ca:	0710      	lsls	r0, r2, #28
    d3cc:	460c      	mov	r4, r1
    d3ce:	d457      	bmi.n	d480 <__sflush_r+0xbc>
    d3d0:	684b      	ldr	r3, [r1, #4]
    d3d2:	2b00      	cmp	r3, #0
    d3d4:	dc04      	bgt.n	d3e0 <__sflush_r+0x1c>
    d3d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    d3d8:	2b00      	cmp	r3, #0
    d3da:	dc01      	bgt.n	d3e0 <__sflush_r+0x1c>
    d3dc:	2000      	movs	r0, #0
    d3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d3e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    d3e2:	2e00      	cmp	r6, #0
    d3e4:	d0fa      	beq.n	d3dc <__sflush_r+0x18>
    d3e6:	2300      	movs	r3, #0
    d3e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    d3ec:	682f      	ldr	r7, [r5, #0]
    d3ee:	602b      	str	r3, [r5, #0]
    d3f0:	d032      	beq.n	d458 <__sflush_r+0x94>
    d3f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    d3f4:	89a3      	ldrh	r3, [r4, #12]
    d3f6:	075a      	lsls	r2, r3, #29
    d3f8:	d505      	bpl.n	d406 <__sflush_r+0x42>
    d3fa:	6863      	ldr	r3, [r4, #4]
    d3fc:	1ac0      	subs	r0, r0, r3
    d3fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
    d400:	b10b      	cbz	r3, d406 <__sflush_r+0x42>
    d402:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d404:	1ac0      	subs	r0, r0, r3
    d406:	2300      	movs	r3, #0
    d408:	4602      	mov	r2, r0
    d40a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    d40c:	4628      	mov	r0, r5
    d40e:	6a21      	ldr	r1, [r4, #32]
    d410:	47b0      	blx	r6
    d412:	1c43      	adds	r3, r0, #1
    d414:	89a3      	ldrh	r3, [r4, #12]
    d416:	d106      	bne.n	d426 <__sflush_r+0x62>
    d418:	6829      	ldr	r1, [r5, #0]
    d41a:	291d      	cmp	r1, #29
    d41c:	d82c      	bhi.n	d478 <__sflush_r+0xb4>
    d41e:	4a29      	ldr	r2, [pc, #164]	; (d4c4 <__sflush_r+0x100>)
    d420:	40ca      	lsrs	r2, r1
    d422:	07d6      	lsls	r6, r2, #31
    d424:	d528      	bpl.n	d478 <__sflush_r+0xb4>
    d426:	2200      	movs	r2, #0
    d428:	6062      	str	r2, [r4, #4]
    d42a:	6922      	ldr	r2, [r4, #16]
    d42c:	04d9      	lsls	r1, r3, #19
    d42e:	6022      	str	r2, [r4, #0]
    d430:	d504      	bpl.n	d43c <__sflush_r+0x78>
    d432:	1c42      	adds	r2, r0, #1
    d434:	d101      	bne.n	d43a <__sflush_r+0x76>
    d436:	682b      	ldr	r3, [r5, #0]
    d438:	b903      	cbnz	r3, d43c <__sflush_r+0x78>
    d43a:	6560      	str	r0, [r4, #84]	; 0x54
    d43c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d43e:	602f      	str	r7, [r5, #0]
    d440:	2900      	cmp	r1, #0
    d442:	d0cb      	beq.n	d3dc <__sflush_r+0x18>
    d444:	f104 0344 	add.w	r3, r4, #68	; 0x44
    d448:	4299      	cmp	r1, r3
    d44a:	d002      	beq.n	d452 <__sflush_r+0x8e>
    d44c:	4628      	mov	r0, r5
    d44e:	f000 f9b3 	bl	d7b8 <_free_r>
    d452:	2000      	movs	r0, #0
    d454:	6360      	str	r0, [r4, #52]	; 0x34
    d456:	e7c2      	b.n	d3de <__sflush_r+0x1a>
    d458:	6a21      	ldr	r1, [r4, #32]
    d45a:	2301      	movs	r3, #1
    d45c:	4628      	mov	r0, r5
    d45e:	47b0      	blx	r6
    d460:	1c41      	adds	r1, r0, #1
    d462:	d1c7      	bne.n	d3f4 <__sflush_r+0x30>
    d464:	682b      	ldr	r3, [r5, #0]
    d466:	2b00      	cmp	r3, #0
    d468:	d0c4      	beq.n	d3f4 <__sflush_r+0x30>
    d46a:	2b1d      	cmp	r3, #29
    d46c:	d001      	beq.n	d472 <__sflush_r+0xae>
    d46e:	2b16      	cmp	r3, #22
    d470:	d101      	bne.n	d476 <__sflush_r+0xb2>
    d472:	602f      	str	r7, [r5, #0]
    d474:	e7b2      	b.n	d3dc <__sflush_r+0x18>
    d476:	89a3      	ldrh	r3, [r4, #12]
    d478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d47c:	81a3      	strh	r3, [r4, #12]
    d47e:	e7ae      	b.n	d3de <__sflush_r+0x1a>
    d480:	690f      	ldr	r7, [r1, #16]
    d482:	2f00      	cmp	r7, #0
    d484:	d0aa      	beq.n	d3dc <__sflush_r+0x18>
    d486:	0793      	lsls	r3, r2, #30
    d488:	bf18      	it	ne
    d48a:	2300      	movne	r3, #0
    d48c:	680e      	ldr	r6, [r1, #0]
    d48e:	bf08      	it	eq
    d490:	694b      	ldreq	r3, [r1, #20]
    d492:	1bf6      	subs	r6, r6, r7
    d494:	600f      	str	r7, [r1, #0]
    d496:	608b      	str	r3, [r1, #8]
    d498:	2e00      	cmp	r6, #0
    d49a:	dd9f      	ble.n	d3dc <__sflush_r+0x18>
    d49c:	4633      	mov	r3, r6
    d49e:	463a      	mov	r2, r7
    d4a0:	4628      	mov	r0, r5
    d4a2:	6a21      	ldr	r1, [r4, #32]
    d4a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
    d4a8:	47e0      	blx	ip
    d4aa:	2800      	cmp	r0, #0
    d4ac:	dc06      	bgt.n	d4bc <__sflush_r+0xf8>
    d4ae:	89a3      	ldrh	r3, [r4, #12]
    d4b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d4b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d4b8:	81a3      	strh	r3, [r4, #12]
    d4ba:	e790      	b.n	d3de <__sflush_r+0x1a>
    d4bc:	4407      	add	r7, r0
    d4be:	1a36      	subs	r6, r6, r0
    d4c0:	e7ea      	b.n	d498 <__sflush_r+0xd4>
    d4c2:	bf00      	nop
    d4c4:	20400001 	.word	0x20400001

0000d4c8 <_fflush_r>:
    d4c8:	b538      	push	{r3, r4, r5, lr}
    d4ca:	690b      	ldr	r3, [r1, #16]
    d4cc:	4605      	mov	r5, r0
    d4ce:	460c      	mov	r4, r1
    d4d0:	b913      	cbnz	r3, d4d8 <_fflush_r+0x10>
    d4d2:	2500      	movs	r5, #0
    d4d4:	4628      	mov	r0, r5
    d4d6:	bd38      	pop	{r3, r4, r5, pc}
    d4d8:	b118      	cbz	r0, d4e2 <_fflush_r+0x1a>
    d4da:	6983      	ldr	r3, [r0, #24]
    d4dc:	b90b      	cbnz	r3, d4e2 <_fflush_r+0x1a>
    d4de:	f000 f883 	bl	d5e8 <__sinit>
    d4e2:	4b14      	ldr	r3, [pc, #80]	; (d534 <_fflush_r+0x6c>)
    d4e4:	429c      	cmp	r4, r3
    d4e6:	d11b      	bne.n	d520 <_fflush_r+0x58>
    d4e8:	686c      	ldr	r4, [r5, #4]
    d4ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d4ee:	2b00      	cmp	r3, #0
    d4f0:	d0ef      	beq.n	d4d2 <_fflush_r+0xa>
    d4f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d4f4:	07d0      	lsls	r0, r2, #31
    d4f6:	d404      	bmi.n	d502 <_fflush_r+0x3a>
    d4f8:	0599      	lsls	r1, r3, #22
    d4fa:	d402      	bmi.n	d502 <_fflush_r+0x3a>
    d4fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d4fe:	f004 faab 	bl	11a58 <__retarget_lock_acquire_recursive>
    d502:	4628      	mov	r0, r5
    d504:	4621      	mov	r1, r4
    d506:	f7ff ff5d 	bl	d3c4 <__sflush_r>
    d50a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d50c:	4605      	mov	r5, r0
    d50e:	07da      	lsls	r2, r3, #31
    d510:	d4e0      	bmi.n	d4d4 <_fflush_r+0xc>
    d512:	89a3      	ldrh	r3, [r4, #12]
    d514:	059b      	lsls	r3, r3, #22
    d516:	d4dd      	bmi.n	d4d4 <_fflush_r+0xc>
    d518:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d51a:	f004 faa3 	bl	11a64 <__retarget_lock_release_recursive>
    d51e:	e7d9      	b.n	d4d4 <_fflush_r+0xc>
    d520:	4b05      	ldr	r3, [pc, #20]	; (d538 <_fflush_r+0x70>)
    d522:	429c      	cmp	r4, r3
    d524:	d101      	bne.n	d52a <_fflush_r+0x62>
    d526:	68ac      	ldr	r4, [r5, #8]
    d528:	e7df      	b.n	d4ea <_fflush_r+0x22>
    d52a:	4b04      	ldr	r3, [pc, #16]	; (d53c <_fflush_r+0x74>)
    d52c:	429c      	cmp	r4, r3
    d52e:	bf08      	it	eq
    d530:	68ec      	ldreq	r4, [r5, #12]
    d532:	e7da      	b.n	d4ea <_fflush_r+0x22>
    d534:	00017c6c 	.word	0x00017c6c
    d538:	00017c8c 	.word	0x00017c8c
    d53c:	00017c4c 	.word	0x00017c4c

0000d540 <fflush>:
    d540:	4601      	mov	r1, r0
    d542:	b920      	cbnz	r0, d54e <fflush+0xe>
    d544:	4b04      	ldr	r3, [pc, #16]	; (d558 <fflush+0x18>)
    d546:	4905      	ldr	r1, [pc, #20]	; (d55c <fflush+0x1c>)
    d548:	6818      	ldr	r0, [r3, #0]
    d54a:	f009 bb23 	b.w	16b94 <_fwalk_reent>
    d54e:	4b04      	ldr	r3, [pc, #16]	; (d560 <fflush+0x20>)
    d550:	6818      	ldr	r0, [r3, #0]
    d552:	f7ff bfb9 	b.w	d4c8 <_fflush_r>
    d556:	bf00      	nop
    d558:	00017cac 	.word	0x00017cac
    d55c:	0000d4c9 	.word	0x0000d4c9
    d560:	20000028 	.word	0x20000028

0000d564 <std>:
    d564:	2300      	movs	r3, #0
    d566:	b510      	push	{r4, lr}
    d568:	4604      	mov	r4, r0
    d56a:	e9c0 3300 	strd	r3, r3, [r0]
    d56e:	e9c0 3304 	strd	r3, r3, [r0, #16]
    d572:	6083      	str	r3, [r0, #8]
    d574:	8181      	strh	r1, [r0, #12]
    d576:	6643      	str	r3, [r0, #100]	; 0x64
    d578:	81c2      	strh	r2, [r0, #14]
    d57a:	6183      	str	r3, [r0, #24]
    d57c:	4619      	mov	r1, r3
    d57e:	2208      	movs	r2, #8
    d580:	305c      	adds	r0, #92	; 0x5c
    d582:	f009 fb89 	bl	16c98 <memset>
    d586:	4b05      	ldr	r3, [pc, #20]	; (d59c <std+0x38>)
    d588:	6224      	str	r4, [r4, #32]
    d58a:	6263      	str	r3, [r4, #36]	; 0x24
    d58c:	4b04      	ldr	r3, [pc, #16]	; (d5a0 <std+0x3c>)
    d58e:	62a3      	str	r3, [r4, #40]	; 0x28
    d590:	4b04      	ldr	r3, [pc, #16]	; (d5a4 <std+0x40>)
    d592:	62e3      	str	r3, [r4, #44]	; 0x2c
    d594:	4b04      	ldr	r3, [pc, #16]	; (d5a8 <std+0x44>)
    d596:	6323      	str	r3, [r4, #48]	; 0x30
    d598:	bd10      	pop	{r4, pc}
    d59a:	bf00      	nop
    d59c:	00016cfd 	.word	0x00016cfd
    d5a0:	00016d1f 	.word	0x00016d1f
    d5a4:	00016d57 	.word	0x00016d57
    d5a8:	00016d7b 	.word	0x00016d7b

0000d5ac <_cleanup_r>:
    d5ac:	4901      	ldr	r1, [pc, #4]	; (d5b4 <_cleanup_r+0x8>)
    d5ae:	f009 baf1 	b.w	16b94 <_fwalk_reent>
    d5b2:	bf00      	nop
    d5b4:	0000d4c9 	.word	0x0000d4c9

0000d5b8 <__sfp_lock_acquire>:
    d5b8:	4801      	ldr	r0, [pc, #4]	; (d5c0 <__sfp_lock_acquire+0x8>)
    d5ba:	f004 ba4d 	b.w	11a58 <__retarget_lock_acquire_recursive>
    d5be:	bf00      	nop
    d5c0:	20000220 	.word	0x20000220

0000d5c4 <__sfp_lock_release>:
    d5c4:	4801      	ldr	r0, [pc, #4]	; (d5cc <__sfp_lock_release+0x8>)
    d5c6:	f004 ba4d 	b.w	11a64 <__retarget_lock_release_recursive>
    d5ca:	bf00      	nop
    d5cc:	20000220 	.word	0x20000220

0000d5d0 <__sinit_lock_acquire>:
    d5d0:	4801      	ldr	r0, [pc, #4]	; (d5d8 <__sinit_lock_acquire+0x8>)
    d5d2:	f004 ba41 	b.w	11a58 <__retarget_lock_acquire_recursive>
    d5d6:	bf00      	nop
    d5d8:	20000234 	.word	0x20000234

0000d5dc <__sinit_lock_release>:
    d5dc:	4801      	ldr	r0, [pc, #4]	; (d5e4 <__sinit_lock_release+0x8>)
    d5de:	f004 ba41 	b.w	11a64 <__retarget_lock_release_recursive>
    d5e2:	bf00      	nop
    d5e4:	20000234 	.word	0x20000234

0000d5e8 <__sinit>:
    d5e8:	b510      	push	{r4, lr}
    d5ea:	4604      	mov	r4, r0
    d5ec:	f7ff fff0 	bl	d5d0 <__sinit_lock_acquire>
    d5f0:	69a3      	ldr	r3, [r4, #24]
    d5f2:	b11b      	cbz	r3, d5fc <__sinit+0x14>
    d5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d5f8:	f7ff bff0 	b.w	d5dc <__sinit_lock_release>
    d5fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    d600:	6523      	str	r3, [r4, #80]	; 0x50
    d602:	4b13      	ldr	r3, [pc, #76]	; (d650 <__sinit+0x68>)
    d604:	4a13      	ldr	r2, [pc, #76]	; (d654 <__sinit+0x6c>)
    d606:	681b      	ldr	r3, [r3, #0]
    d608:	62a2      	str	r2, [r4, #40]	; 0x28
    d60a:	42a3      	cmp	r3, r4
    d60c:	bf08      	it	eq
    d60e:	2301      	moveq	r3, #1
    d610:	4620      	mov	r0, r4
    d612:	bf08      	it	eq
    d614:	61a3      	streq	r3, [r4, #24]
    d616:	f000 f81f 	bl	d658 <__sfp>
    d61a:	6060      	str	r0, [r4, #4]
    d61c:	4620      	mov	r0, r4
    d61e:	f000 f81b 	bl	d658 <__sfp>
    d622:	60a0      	str	r0, [r4, #8]
    d624:	4620      	mov	r0, r4
    d626:	f000 f817 	bl	d658 <__sfp>
    d62a:	2200      	movs	r2, #0
    d62c:	2104      	movs	r1, #4
    d62e:	60e0      	str	r0, [r4, #12]
    d630:	6860      	ldr	r0, [r4, #4]
    d632:	f7ff ff97 	bl	d564 <std>
    d636:	2201      	movs	r2, #1
    d638:	2109      	movs	r1, #9
    d63a:	68a0      	ldr	r0, [r4, #8]
    d63c:	f7ff ff92 	bl	d564 <std>
    d640:	2202      	movs	r2, #2
    d642:	2112      	movs	r1, #18
    d644:	68e0      	ldr	r0, [r4, #12]
    d646:	f7ff ff8d 	bl	d564 <std>
    d64a:	2301      	movs	r3, #1
    d64c:	61a3      	str	r3, [r4, #24]
    d64e:	e7d1      	b.n	d5f4 <__sinit+0xc>
    d650:	00017cac 	.word	0x00017cac
    d654:	0000d5ad 	.word	0x0000d5ad

0000d658 <__sfp>:
    d658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d65a:	4607      	mov	r7, r0
    d65c:	f7ff ffac 	bl	d5b8 <__sfp_lock_acquire>
    d660:	4b1e      	ldr	r3, [pc, #120]	; (d6dc <__sfp+0x84>)
    d662:	681e      	ldr	r6, [r3, #0]
    d664:	69b3      	ldr	r3, [r6, #24]
    d666:	b913      	cbnz	r3, d66e <__sfp+0x16>
    d668:	4630      	mov	r0, r6
    d66a:	f7ff ffbd 	bl	d5e8 <__sinit>
    d66e:	3648      	adds	r6, #72	; 0x48
    d670:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    d674:	3b01      	subs	r3, #1
    d676:	d503      	bpl.n	d680 <__sfp+0x28>
    d678:	6833      	ldr	r3, [r6, #0]
    d67a:	b30b      	cbz	r3, d6c0 <__sfp+0x68>
    d67c:	6836      	ldr	r6, [r6, #0]
    d67e:	e7f7      	b.n	d670 <__sfp+0x18>
    d680:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    d684:	b9d5      	cbnz	r5, d6bc <__sfp+0x64>
    d686:	4b16      	ldr	r3, [pc, #88]	; (d6e0 <__sfp+0x88>)
    d688:	f104 0058 	add.w	r0, r4, #88	; 0x58
    d68c:	60e3      	str	r3, [r4, #12]
    d68e:	6665      	str	r5, [r4, #100]	; 0x64
    d690:	f004 f9d8 	bl	11a44 <__retarget_lock_init_recursive>
    d694:	f7ff ff96 	bl	d5c4 <__sfp_lock_release>
    d698:	2208      	movs	r2, #8
    d69a:	4629      	mov	r1, r5
    d69c:	e9c4 5501 	strd	r5, r5, [r4, #4]
    d6a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
    d6a4:	6025      	str	r5, [r4, #0]
    d6a6:	61a5      	str	r5, [r4, #24]
    d6a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    d6ac:	f009 faf4 	bl	16c98 <memset>
    d6b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    d6b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    d6b8:	4620      	mov	r0, r4
    d6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d6bc:	3468      	adds	r4, #104	; 0x68
    d6be:	e7d9      	b.n	d674 <__sfp+0x1c>
    d6c0:	2104      	movs	r1, #4
    d6c2:	4638      	mov	r0, r7
    d6c4:	f009 fa50 	bl	16b68 <__sfmoreglue>
    d6c8:	4604      	mov	r4, r0
    d6ca:	6030      	str	r0, [r6, #0]
    d6cc:	2800      	cmp	r0, #0
    d6ce:	d1d5      	bne.n	d67c <__sfp+0x24>
    d6d0:	f7ff ff78 	bl	d5c4 <__sfp_lock_release>
    d6d4:	230c      	movs	r3, #12
    d6d6:	603b      	str	r3, [r7, #0]
    d6d8:	e7ee      	b.n	d6b8 <__sfp+0x60>
    d6da:	bf00      	nop
    d6dc:	00017cac 	.word	0x00017cac
    d6e0:	ffff0001 	.word	0xffff0001

0000d6e4 <fprintf>:
    d6e4:	b40e      	push	{r1, r2, r3}
    d6e6:	b503      	push	{r0, r1, lr}
    d6e8:	4601      	mov	r1, r0
    d6ea:	ab03      	add	r3, sp, #12
    d6ec:	4805      	ldr	r0, [pc, #20]	; (d704 <fprintf+0x20>)
    d6ee:	f853 2b04 	ldr.w	r2, [r3], #4
    d6f2:	6800      	ldr	r0, [r0, #0]
    d6f4:	9301      	str	r3, [sp, #4]
    d6f6:	f001 fafb 	bl	ecf0 <_vfprintf_r>
    d6fa:	b002      	add	sp, #8
    d6fc:	f85d eb04 	ldr.w	lr, [sp], #4
    d700:	b003      	add	sp, #12
    d702:	4770      	bx	lr
    d704:	20000028 	.word	0x20000028

0000d708 <_localeconv_r>:
    d708:	4800      	ldr	r0, [pc, #0]	; (d70c <_localeconv_r+0x4>)
    d70a:	4770      	bx	lr
    d70c:	2000017c 	.word	0x2000017c

0000d710 <localeconv>:
    d710:	4800      	ldr	r0, [pc, #0]	; (d714 <localeconv+0x4>)
    d712:	4770      	bx	lr
    d714:	2000017c 	.word	0x2000017c

0000d718 <__smakebuf_r>:
    d718:	898b      	ldrh	r3, [r1, #12]
    d71a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d71c:	079d      	lsls	r5, r3, #30
    d71e:	4606      	mov	r6, r0
    d720:	460c      	mov	r4, r1
    d722:	d507      	bpl.n	d734 <__smakebuf_r+0x1c>
    d724:	f104 0347 	add.w	r3, r4, #71	; 0x47
    d728:	6023      	str	r3, [r4, #0]
    d72a:	6123      	str	r3, [r4, #16]
    d72c:	2301      	movs	r3, #1
    d72e:	6163      	str	r3, [r4, #20]
    d730:	b002      	add	sp, #8
    d732:	bd70      	pop	{r4, r5, r6, pc}
    d734:	466a      	mov	r2, sp
    d736:	ab01      	add	r3, sp, #4
    d738:	f009 fa4b 	bl	16bd2 <__swhatbuf_r>
    d73c:	9900      	ldr	r1, [sp, #0]
    d73e:	4605      	mov	r5, r0
    d740:	4630      	mov	r0, r6
    d742:	f000 f881 	bl	d848 <_malloc_r>
    d746:	b948      	cbnz	r0, d75c <__smakebuf_r+0x44>
    d748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d74c:	059a      	lsls	r2, r3, #22
    d74e:	d4ef      	bmi.n	d730 <__smakebuf_r+0x18>
    d750:	f023 0303 	bic.w	r3, r3, #3
    d754:	f043 0302 	orr.w	r3, r3, #2
    d758:	81a3      	strh	r3, [r4, #12]
    d75a:	e7e3      	b.n	d724 <__smakebuf_r+0xc>
    d75c:	4b0d      	ldr	r3, [pc, #52]	; (d794 <__smakebuf_r+0x7c>)
    d75e:	62b3      	str	r3, [r6, #40]	; 0x28
    d760:	89a3      	ldrh	r3, [r4, #12]
    d762:	6020      	str	r0, [r4, #0]
    d764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d768:	81a3      	strh	r3, [r4, #12]
    d76a:	9b00      	ldr	r3, [sp, #0]
    d76c:	6120      	str	r0, [r4, #16]
    d76e:	6163      	str	r3, [r4, #20]
    d770:	9b01      	ldr	r3, [sp, #4]
    d772:	b15b      	cbz	r3, d78c <__smakebuf_r+0x74>
    d774:	4630      	mov	r0, r6
    d776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d77a:	f003 f8c3 	bl	10904 <_isatty_r>
    d77e:	b128      	cbz	r0, d78c <__smakebuf_r+0x74>
    d780:	89a3      	ldrh	r3, [r4, #12]
    d782:	f023 0303 	bic.w	r3, r3, #3
    d786:	f043 0301 	orr.w	r3, r3, #1
    d78a:	81a3      	strh	r3, [r4, #12]
    d78c:	89a0      	ldrh	r0, [r4, #12]
    d78e:	4305      	orrs	r5, r0
    d790:	81a5      	strh	r5, [r4, #12]
    d792:	e7cd      	b.n	d730 <__smakebuf_r+0x18>
    d794:	0000d5ad 	.word	0x0000d5ad

0000d798 <malloc>:
    d798:	4b02      	ldr	r3, [pc, #8]	; (d7a4 <malloc+0xc>)
    d79a:	4601      	mov	r1, r0
    d79c:	6818      	ldr	r0, [r3, #0]
    d79e:	f000 b853 	b.w	d848 <_malloc_r>
    d7a2:	bf00      	nop
    d7a4:	20000028 	.word	0x20000028

0000d7a8 <free>:
    d7a8:	4b02      	ldr	r3, [pc, #8]	; (d7b4 <free+0xc>)
    d7aa:	4601      	mov	r1, r0
    d7ac:	6818      	ldr	r0, [r3, #0]
    d7ae:	f000 b803 	b.w	d7b8 <_free_r>
    d7b2:	bf00      	nop
    d7b4:	20000028 	.word	0x20000028

0000d7b8 <_free_r>:
    d7b8:	b538      	push	{r3, r4, r5, lr}
    d7ba:	4605      	mov	r5, r0
    d7bc:	2900      	cmp	r1, #0
    d7be:	d040      	beq.n	d842 <_free_r+0x8a>
    d7c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    d7c4:	1f0c      	subs	r4, r1, #4
    d7c6:	2b00      	cmp	r3, #0
    d7c8:	bfb8      	it	lt
    d7ca:	18e4      	addlt	r4, r4, r3
    d7cc:	f003 f8bc 	bl	10948 <__malloc_lock>
    d7d0:	4a1c      	ldr	r2, [pc, #112]	; (d844 <_free_r+0x8c>)
    d7d2:	6813      	ldr	r3, [r2, #0]
    d7d4:	b933      	cbnz	r3, d7e4 <_free_r+0x2c>
    d7d6:	6063      	str	r3, [r4, #4]
    d7d8:	6014      	str	r4, [r2, #0]
    d7da:	4628      	mov	r0, r5
    d7dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d7e0:	f003 b8b8 	b.w	10954 <__malloc_unlock>
    d7e4:	42a3      	cmp	r3, r4
    d7e6:	d908      	bls.n	d7fa <_free_r+0x42>
    d7e8:	6820      	ldr	r0, [r4, #0]
    d7ea:	1821      	adds	r1, r4, r0
    d7ec:	428b      	cmp	r3, r1
    d7ee:	bf01      	itttt	eq
    d7f0:	6819      	ldreq	r1, [r3, #0]
    d7f2:	685b      	ldreq	r3, [r3, #4]
    d7f4:	1809      	addeq	r1, r1, r0
    d7f6:	6021      	streq	r1, [r4, #0]
    d7f8:	e7ed      	b.n	d7d6 <_free_r+0x1e>
    d7fa:	461a      	mov	r2, r3
    d7fc:	685b      	ldr	r3, [r3, #4]
    d7fe:	b10b      	cbz	r3, d804 <_free_r+0x4c>
    d800:	42a3      	cmp	r3, r4
    d802:	d9fa      	bls.n	d7fa <_free_r+0x42>
    d804:	6811      	ldr	r1, [r2, #0]
    d806:	1850      	adds	r0, r2, r1
    d808:	42a0      	cmp	r0, r4
    d80a:	d10b      	bne.n	d824 <_free_r+0x6c>
    d80c:	6820      	ldr	r0, [r4, #0]
    d80e:	4401      	add	r1, r0
    d810:	1850      	adds	r0, r2, r1
    d812:	4283      	cmp	r3, r0
    d814:	6011      	str	r1, [r2, #0]
    d816:	d1e0      	bne.n	d7da <_free_r+0x22>
    d818:	6818      	ldr	r0, [r3, #0]
    d81a:	685b      	ldr	r3, [r3, #4]
    d81c:	4401      	add	r1, r0
    d81e:	6011      	str	r1, [r2, #0]
    d820:	6053      	str	r3, [r2, #4]
    d822:	e7da      	b.n	d7da <_free_r+0x22>
    d824:	d902      	bls.n	d82c <_free_r+0x74>
    d826:	230c      	movs	r3, #12
    d828:	602b      	str	r3, [r5, #0]
    d82a:	e7d6      	b.n	d7da <_free_r+0x22>
    d82c:	6820      	ldr	r0, [r4, #0]
    d82e:	1821      	adds	r1, r4, r0
    d830:	428b      	cmp	r3, r1
    d832:	bf01      	itttt	eq
    d834:	6819      	ldreq	r1, [r3, #0]
    d836:	685b      	ldreq	r3, [r3, #4]
    d838:	1809      	addeq	r1, r1, r0
    d83a:	6021      	streq	r1, [r4, #0]
    d83c:	6063      	str	r3, [r4, #4]
    d83e:	6054      	str	r4, [r2, #4]
    d840:	e7cb      	b.n	d7da <_free_r+0x22>
    d842:	bd38      	pop	{r3, r4, r5, pc}
    d844:	20000478 	.word	0x20000478

0000d848 <_malloc_r>:
    d848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d84a:	1ccd      	adds	r5, r1, #3
    d84c:	f025 0503 	bic.w	r5, r5, #3
    d850:	3508      	adds	r5, #8
    d852:	2d0c      	cmp	r5, #12
    d854:	bf38      	it	cc
    d856:	250c      	movcc	r5, #12
    d858:	2d00      	cmp	r5, #0
    d85a:	4606      	mov	r6, r0
    d85c:	db01      	blt.n	d862 <_malloc_r+0x1a>
    d85e:	42a9      	cmp	r1, r5
    d860:	d903      	bls.n	d86a <_malloc_r+0x22>
    d862:	230c      	movs	r3, #12
    d864:	6033      	str	r3, [r6, #0]
    d866:	2000      	movs	r0, #0
    d868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d86a:	f003 f86d 	bl	10948 <__malloc_lock>
    d86e:	4921      	ldr	r1, [pc, #132]	; (d8f4 <_malloc_r+0xac>)
    d870:	680a      	ldr	r2, [r1, #0]
    d872:	4614      	mov	r4, r2
    d874:	b99c      	cbnz	r4, d89e <_malloc_r+0x56>
    d876:	4f20      	ldr	r7, [pc, #128]	; (d8f8 <_malloc_r+0xb0>)
    d878:	683b      	ldr	r3, [r7, #0]
    d87a:	b923      	cbnz	r3, d886 <_malloc_r+0x3e>
    d87c:	4621      	mov	r1, r4
    d87e:	4630      	mov	r0, r6
    d880:	f000 f844 	bl	d90c <_sbrk_r>
    d884:	6038      	str	r0, [r7, #0]
    d886:	4629      	mov	r1, r5
    d888:	4630      	mov	r0, r6
    d88a:	f000 f83f 	bl	d90c <_sbrk_r>
    d88e:	1c43      	adds	r3, r0, #1
    d890:	d123      	bne.n	d8da <_malloc_r+0x92>
    d892:	230c      	movs	r3, #12
    d894:	4630      	mov	r0, r6
    d896:	6033      	str	r3, [r6, #0]
    d898:	f003 f85c 	bl	10954 <__malloc_unlock>
    d89c:	e7e3      	b.n	d866 <_malloc_r+0x1e>
    d89e:	6823      	ldr	r3, [r4, #0]
    d8a0:	1b5b      	subs	r3, r3, r5
    d8a2:	d417      	bmi.n	d8d4 <_malloc_r+0x8c>
    d8a4:	2b0b      	cmp	r3, #11
    d8a6:	d903      	bls.n	d8b0 <_malloc_r+0x68>
    d8a8:	6023      	str	r3, [r4, #0]
    d8aa:	441c      	add	r4, r3
    d8ac:	6025      	str	r5, [r4, #0]
    d8ae:	e004      	b.n	d8ba <_malloc_r+0x72>
    d8b0:	6863      	ldr	r3, [r4, #4]
    d8b2:	42a2      	cmp	r2, r4
    d8b4:	bf0c      	ite	eq
    d8b6:	600b      	streq	r3, [r1, #0]
    d8b8:	6053      	strne	r3, [r2, #4]
    d8ba:	4630      	mov	r0, r6
    d8bc:	f003 f84a 	bl	10954 <__malloc_unlock>
    d8c0:	f104 000b 	add.w	r0, r4, #11
    d8c4:	1d23      	adds	r3, r4, #4
    d8c6:	f020 0007 	bic.w	r0, r0, #7
    d8ca:	1ac2      	subs	r2, r0, r3
    d8cc:	d0cc      	beq.n	d868 <_malloc_r+0x20>
    d8ce:	1a1b      	subs	r3, r3, r0
    d8d0:	50a3      	str	r3, [r4, r2]
    d8d2:	e7c9      	b.n	d868 <_malloc_r+0x20>
    d8d4:	4622      	mov	r2, r4
    d8d6:	6864      	ldr	r4, [r4, #4]
    d8d8:	e7cc      	b.n	d874 <_malloc_r+0x2c>
    d8da:	1cc4      	adds	r4, r0, #3
    d8dc:	f024 0403 	bic.w	r4, r4, #3
    d8e0:	42a0      	cmp	r0, r4
    d8e2:	d0e3      	beq.n	d8ac <_malloc_r+0x64>
    d8e4:	1a21      	subs	r1, r4, r0
    d8e6:	4630      	mov	r0, r6
    d8e8:	f000 f810 	bl	d90c <_sbrk_r>
    d8ec:	3001      	adds	r0, #1
    d8ee:	d1dd      	bne.n	d8ac <_malloc_r+0x64>
    d8f0:	e7cf      	b.n	d892 <_malloc_r+0x4a>
    d8f2:	bf00      	nop
    d8f4:	20000478 	.word	0x20000478
    d8f8:	2000047c 	.word	0x2000047c

0000d8fc <realloc>:
    d8fc:	4b02      	ldr	r3, [pc, #8]	; (d908 <realloc+0xc>)
    d8fe:	460a      	mov	r2, r1
    d900:	4601      	mov	r1, r0
    d902:	6818      	ldr	r0, [r3, #0]
    d904:	f009 bd96 	b.w	17434 <_realloc_r>
    d908:	20000028 	.word	0x20000028

0000d90c <_sbrk_r>:
    d90c:	b538      	push	{r3, r4, r5, lr}
    d90e:	2300      	movs	r3, #0
    d910:	4d05      	ldr	r5, [pc, #20]	; (d928 <_sbrk_r+0x1c>)
    d912:	4604      	mov	r4, r0
    d914:	4608      	mov	r0, r1
    d916:	602b      	str	r3, [r5, #0]
    d918:	f7f6 fb98 	bl	404c <_sbrk>
    d91c:	1c43      	adds	r3, r0, #1
    d91e:	d102      	bne.n	d926 <_sbrk_r+0x1a>
    d920:	682b      	ldr	r3, [r5, #0]
    d922:	b103      	cbz	r3, d926 <_sbrk_r+0x1a>
    d924:	6023      	str	r3, [r4, #0]
    d926:	bd38      	pop	{r3, r4, r5, pc}
    d928:	20000480 	.word	0x20000480

0000d92c <raise>:
    d92c:	4b02      	ldr	r3, [pc, #8]	; (d938 <raise+0xc>)
    d92e:	4601      	mov	r1, r0
    d930:	6818      	ldr	r0, [r3, #0]
    d932:	f009 b9b9 	b.w	16ca8 <_raise_r>
    d936:	bf00      	nop
    d938:	20000028 	.word	0x20000028

0000d93c <_kill_r>:
    d93c:	b538      	push	{r3, r4, r5, lr}
    d93e:	2300      	movs	r3, #0
    d940:	4d06      	ldr	r5, [pc, #24]	; (d95c <_kill_r+0x20>)
    d942:	4604      	mov	r4, r0
    d944:	4608      	mov	r0, r1
    d946:	4611      	mov	r1, r2
    d948:	602b      	str	r3, [r5, #0]
    d94a:	f004 f872 	bl	11a32 <_kill>
    d94e:	1c43      	adds	r3, r0, #1
    d950:	d102      	bne.n	d958 <_kill_r+0x1c>
    d952:	682b      	ldr	r3, [r5, #0]
    d954:	b103      	cbz	r3, d958 <_kill_r+0x1c>
    d956:	6023      	str	r3, [r4, #0]
    d958:	bd38      	pop	{r3, r4, r5, pc}
    d95a:	bf00      	nop
    d95c:	20000480 	.word	0x20000480

0000d960 <snprintf>:
    d960:	b40c      	push	{r2, r3}
    d962:	b530      	push	{r4, r5, lr}
    d964:	4b17      	ldr	r3, [pc, #92]	; (d9c4 <snprintf+0x64>)
    d966:	1e0c      	subs	r4, r1, #0
    d968:	681d      	ldr	r5, [r3, #0]
    d96a:	b09d      	sub	sp, #116	; 0x74
    d96c:	da08      	bge.n	d980 <snprintf+0x20>
    d96e:	238b      	movs	r3, #139	; 0x8b
    d970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d974:	602b      	str	r3, [r5, #0]
    d976:	b01d      	add	sp, #116	; 0x74
    d978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d97c:	b002      	add	sp, #8
    d97e:	4770      	bx	lr
    d980:	f44f 7302 	mov.w	r3, #520	; 0x208
    d984:	f8ad 3014 	strh.w	r3, [sp, #20]
    d988:	bf0c      	ite	eq
    d98a:	4623      	moveq	r3, r4
    d98c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
    d990:	9304      	str	r3, [sp, #16]
    d992:	9307      	str	r3, [sp, #28]
    d994:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d998:	9002      	str	r0, [sp, #8]
    d99a:	9006      	str	r0, [sp, #24]
    d99c:	f8ad 3016 	strh.w	r3, [sp, #22]
    d9a0:	4628      	mov	r0, r5
    d9a2:	ab21      	add	r3, sp, #132	; 0x84
    d9a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
    d9a6:	a902      	add	r1, sp, #8
    d9a8:	9301      	str	r3, [sp, #4]
    d9aa:	f000 f819 	bl	d9e0 <_svfprintf_r>
    d9ae:	1c43      	adds	r3, r0, #1
    d9b0:	bfbc      	itt	lt
    d9b2:	238b      	movlt	r3, #139	; 0x8b
    d9b4:	602b      	strlt	r3, [r5, #0]
    d9b6:	2c00      	cmp	r4, #0
    d9b8:	d0dd      	beq.n	d976 <snprintf+0x16>
    d9ba:	2200      	movs	r2, #0
    d9bc:	9b02      	ldr	r3, [sp, #8]
    d9be:	701a      	strb	r2, [r3, #0]
    d9c0:	e7d9      	b.n	d976 <snprintf+0x16>
    d9c2:	bf00      	nop
    d9c4:	20000028 	.word	0x20000028

0000d9c8 <strtod>:
    d9c8:	460a      	mov	r2, r1
    d9ca:	4601      	mov	r1, r0
    d9cc:	4802      	ldr	r0, [pc, #8]	; (d9d8 <strtod+0x10>)
    d9ce:	4b03      	ldr	r3, [pc, #12]	; (d9dc <strtod+0x14>)
    d9d0:	6800      	ldr	r0, [r0, #0]
    d9d2:	f7f4 b909 	b.w	1be8 <_strtod_l>
    d9d6:	bf00      	nop
    d9d8:	20000028 	.word	0x20000028
    d9dc:	2000008c 	.word	0x2000008c

0000d9e0 <_svfprintf_r>:
    d9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9e4:	b0d3      	sub	sp, #332	; 0x14c
    d9e6:	468b      	mov	fp, r1
    d9e8:	4691      	mov	r9, r2
    d9ea:	461e      	mov	r6, r3
    d9ec:	4682      	mov	sl, r0
    d9ee:	f7ff fe8b 	bl	d708 <_localeconv_r>
    d9f2:	6803      	ldr	r3, [r0, #0]
    d9f4:	4618      	mov	r0, r3
    d9f6:	9317      	str	r3, [sp, #92]	; 0x5c
    d9f8:	f7f3 fa3a 	bl	e70 <strlen>
    d9fc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    da00:	9011      	str	r0, [sp, #68]	; 0x44
    da02:	0618      	lsls	r0, r3, #24
    da04:	d518      	bpl.n	da38 <_svfprintf_r+0x58>
    da06:	f8db 3010 	ldr.w	r3, [fp, #16]
    da0a:	b9ab      	cbnz	r3, da38 <_svfprintf_r+0x58>
    da0c:	2140      	movs	r1, #64	; 0x40
    da0e:	4650      	mov	r0, sl
    da10:	f7ff ff1a 	bl	d848 <_malloc_r>
    da14:	f8cb 0000 	str.w	r0, [fp]
    da18:	f8cb 0010 	str.w	r0, [fp, #16]
    da1c:	b948      	cbnz	r0, da32 <_svfprintf_r+0x52>
    da1e:	230c      	movs	r3, #12
    da20:	f8ca 3000 	str.w	r3, [sl]
    da24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    da28:	9313      	str	r3, [sp, #76]	; 0x4c
    da2a:	9813      	ldr	r0, [sp, #76]	; 0x4c
    da2c:	b053      	add	sp, #332	; 0x14c
    da2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da32:	2340      	movs	r3, #64	; 0x40
    da34:	f8cb 3014 	str.w	r3, [fp, #20]
    da38:	2500      	movs	r5, #0
    da3a:	2200      	movs	r2, #0
    da3c:	2300      	movs	r3, #0
    da3e:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
    da42:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    da46:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
    da4a:	ac29      	add	r4, sp, #164	; 0xa4
    da4c:	9426      	str	r4, [sp, #152]	; 0x98
    da4e:	9509      	str	r5, [sp, #36]	; 0x24
    da50:	950d      	str	r5, [sp, #52]	; 0x34
    da52:	9515      	str	r5, [sp, #84]	; 0x54
    da54:	9518      	str	r5, [sp, #96]	; 0x60
    da56:	9513      	str	r5, [sp, #76]	; 0x4c
    da58:	464b      	mov	r3, r9
    da5a:	461d      	mov	r5, r3
    da5c:	f813 2b01 	ldrb.w	r2, [r3], #1
    da60:	b10a      	cbz	r2, da66 <_svfprintf_r+0x86>
    da62:	2a25      	cmp	r2, #37	; 0x25
    da64:	d1f9      	bne.n	da5a <_svfprintf_r+0x7a>
    da66:	ebb5 0709 	subs.w	r7, r5, r9
    da6a:	d00d      	beq.n	da88 <_svfprintf_r+0xa8>
    da6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    da6e:	e9c4 9700 	strd	r9, r7, [r4]
    da72:	443b      	add	r3, r7
    da74:	9328      	str	r3, [sp, #160]	; 0xa0
    da76:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    da78:	3301      	adds	r3, #1
    da7a:	2b07      	cmp	r3, #7
    da7c:	9327      	str	r3, [sp, #156]	; 0x9c
    da7e:	dc79      	bgt.n	db74 <_svfprintf_r+0x194>
    da80:	3408      	adds	r4, #8
    da82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    da84:	443b      	add	r3, r7
    da86:	9313      	str	r3, [sp, #76]	; 0x4c
    da88:	782b      	ldrb	r3, [r5, #0]
    da8a:	2b00      	cmp	r3, #0
    da8c:	f001 80da 	beq.w	ec44 <_svfprintf_r+0x1264>
    da90:	2300      	movs	r3, #0
    da92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    da96:	4698      	mov	r8, r3
    da98:	270a      	movs	r7, #10
    da9a:	212b      	movs	r1, #43	; 0x2b
    da9c:	3501      	adds	r5, #1
    da9e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    daa2:	9207      	str	r2, [sp, #28]
    daa4:	9312      	str	r3, [sp, #72]	; 0x48
    daa6:	462b      	mov	r3, r5
    daa8:	f813 2b01 	ldrb.w	r2, [r3], #1
    daac:	920a      	str	r2, [sp, #40]	; 0x28
    daae:	9310      	str	r3, [sp, #64]	; 0x40
    dab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dab2:	3b20      	subs	r3, #32
    dab4:	2b5a      	cmp	r3, #90	; 0x5a
    dab6:	f200 854b 	bhi.w	e550 <_svfprintf_r+0xb70>
    daba:	e8df f013 	tbh	[pc, r3, lsl #1]
    dabe:	007e      	.short	0x007e
    dac0:	05490549 	.word	0x05490549
    dac4:	05490086 	.word	0x05490086
    dac8:	05490549 	.word	0x05490549
    dacc:	05490065 	.word	0x05490065
    dad0:	00890549 	.word	0x00890549
    dad4:	05490093 	.word	0x05490093
    dad8:	00960090 	.word	0x00960090
    dadc:	00b30549 	.word	0x00b30549
    dae0:	00b600b6 	.word	0x00b600b6
    dae4:	00b600b6 	.word	0x00b600b6
    dae8:	00b600b6 	.word	0x00b600b6
    daec:	00b600b6 	.word	0x00b600b6
    daf0:	054900b6 	.word	0x054900b6
    daf4:	05490549 	.word	0x05490549
    daf8:	05490549 	.word	0x05490549
    dafc:	05490549 	.word	0x05490549
    db00:	05490111 	.word	0x05490111
    db04:	00f600e3 	.word	0x00f600e3
    db08:	01110111 	.word	0x01110111
    db0c:	05490111 	.word	0x05490111
    db10:	05490549 	.word	0x05490549
    db14:	00c60549 	.word	0x00c60549
    db18:	05490549 	.word	0x05490549
    db1c:	05490463 	.word	0x05490463
    db20:	05490549 	.word	0x05490549
    db24:	0549049e 	.word	0x0549049e
    db28:	054904bf 	.word	0x054904bf
    db2c:	04d30549 	.word	0x04d30549
    db30:	05490549 	.word	0x05490549
    db34:	05490549 	.word	0x05490549
    db38:	05490549 	.word	0x05490549
    db3c:	05490549 	.word	0x05490549
    db40:	05490111 	.word	0x05490111
    db44:	00f800e3 	.word	0x00f800e3
    db48:	01110111 	.word	0x01110111
    db4c:	00c90111 	.word	0x00c90111
    db50:	00e000f8 	.word	0x00e000f8
    db54:	00d60549 	.word	0x00d60549
    db58:	04490549 	.word	0x04490549
    db5c:	048d0465 	.word	0x048d0465
    db60:	054900e0 	.word	0x054900e0
    db64:	007c049e 	.word	0x007c049e
    db68:	054904c1 	.word	0x054904c1
    db6c:	04dd0549 	.word	0x04dd0549
    db70:	007c0549 	.word	0x007c0549
    db74:	4659      	mov	r1, fp
    db76:	4650      	mov	r0, sl
    db78:	aa26      	add	r2, sp, #152	; 0x98
    db7a:	f009 fc94 	bl	174a6 <__ssprint_r>
    db7e:	2800      	cmp	r0, #0
    db80:	f040 811b 	bne.w	ddba <_svfprintf_r+0x3da>
    db84:	ac29      	add	r4, sp, #164	; 0xa4
    db86:	e77c      	b.n	da82 <_svfprintf_r+0xa2>
    db88:	4650      	mov	r0, sl
    db8a:	f7ff fdbd 	bl	d708 <_localeconv_r>
    db8e:	6843      	ldr	r3, [r0, #4]
    db90:	4618      	mov	r0, r3
    db92:	9318      	str	r3, [sp, #96]	; 0x60
    db94:	f7f3 f96c 	bl	e70 <strlen>
    db98:	9015      	str	r0, [sp, #84]	; 0x54
    db9a:	4650      	mov	r0, sl
    db9c:	f7ff fdb4 	bl	d708 <_localeconv_r>
    dba0:	6883      	ldr	r3, [r0, #8]
    dba2:	212b      	movs	r1, #43	; 0x2b
    dba4:	930d      	str	r3, [sp, #52]	; 0x34
    dba6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    dba8:	b12b      	cbz	r3, dbb6 <_svfprintf_r+0x1d6>
    dbaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dbac:	b11b      	cbz	r3, dbb6 <_svfprintf_r+0x1d6>
    dbae:	781b      	ldrb	r3, [r3, #0]
    dbb0:	b10b      	cbz	r3, dbb6 <_svfprintf_r+0x1d6>
    dbb2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    dbb6:	9d10      	ldr	r5, [sp, #64]	; 0x40
    dbb8:	e775      	b.n	daa6 <_svfprintf_r+0xc6>
    dbba:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
    dbbe:	2b00      	cmp	r3, #0
    dbc0:	d1f9      	bne.n	dbb6 <_svfprintf_r+0x1d6>
    dbc2:	2320      	movs	r3, #32
    dbc4:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    dbc8:	e7f5      	b.n	dbb6 <_svfprintf_r+0x1d6>
    dbca:	f048 0801 	orr.w	r8, r8, #1
    dbce:	e7f2      	b.n	dbb6 <_svfprintf_r+0x1d6>
    dbd0:	f856 3b04 	ldr.w	r3, [r6], #4
    dbd4:	2b00      	cmp	r3, #0
    dbd6:	9312      	str	r3, [sp, #72]	; 0x48
    dbd8:	daed      	bge.n	dbb6 <_svfprintf_r+0x1d6>
    dbda:	425b      	negs	r3, r3
    dbdc:	9312      	str	r3, [sp, #72]	; 0x48
    dbde:	f048 0804 	orr.w	r8, r8, #4
    dbe2:	e7e8      	b.n	dbb6 <_svfprintf_r+0x1d6>
    dbe4:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
    dbe8:	e7e5      	b.n	dbb6 <_svfprintf_r+0x1d6>
    dbea:	9a10      	ldr	r2, [sp, #64]	; 0x40
    dbec:	f812 3b01 	ldrb.w	r3, [r2], #1
    dbf0:	2b2a      	cmp	r3, #42	; 0x2a
    dbf2:	930a      	str	r3, [sp, #40]	; 0x28
    dbf4:	d113      	bne.n	dc1e <_svfprintf_r+0x23e>
    dbf6:	f856 0b04 	ldr.w	r0, [r6], #4
    dbfa:	9210      	str	r2, [sp, #64]	; 0x40
    dbfc:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
    dc00:	9307      	str	r3, [sp, #28]
    dc02:	e7d8      	b.n	dbb6 <_svfprintf_r+0x1d6>
    dc04:	9807      	ldr	r0, [sp, #28]
    dc06:	fb07 3300 	mla	r3, r7, r0, r3
    dc0a:	9307      	str	r3, [sp, #28]
    dc0c:	f812 3b01 	ldrb.w	r3, [r2], #1
    dc10:	930a      	str	r3, [sp, #40]	; 0x28
    dc12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dc14:	3b30      	subs	r3, #48	; 0x30
    dc16:	2b09      	cmp	r3, #9
    dc18:	d9f4      	bls.n	dc04 <_svfprintf_r+0x224>
    dc1a:	9210      	str	r2, [sp, #64]	; 0x40
    dc1c:	e748      	b.n	dab0 <_svfprintf_r+0xd0>
    dc1e:	2300      	movs	r3, #0
    dc20:	9307      	str	r3, [sp, #28]
    dc22:	e7f6      	b.n	dc12 <_svfprintf_r+0x232>
    dc24:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    dc28:	e7c5      	b.n	dbb6 <_svfprintf_r+0x1d6>
    dc2a:	2300      	movs	r3, #0
    dc2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    dc2e:	9312      	str	r3, [sp, #72]	; 0x48
    dc30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dc32:	9812      	ldr	r0, [sp, #72]	; 0x48
    dc34:	3b30      	subs	r3, #48	; 0x30
    dc36:	fb07 3300 	mla	r3, r7, r0, r3
    dc3a:	9312      	str	r3, [sp, #72]	; 0x48
    dc3c:	f812 3b01 	ldrb.w	r3, [r2], #1
    dc40:	930a      	str	r3, [sp, #40]	; 0x28
    dc42:	3b30      	subs	r3, #48	; 0x30
    dc44:	2b09      	cmp	r3, #9
    dc46:	d9f3      	bls.n	dc30 <_svfprintf_r+0x250>
    dc48:	e7e7      	b.n	dc1a <_svfprintf_r+0x23a>
    dc4a:	f048 0808 	orr.w	r8, r8, #8
    dc4e:	e7b2      	b.n	dbb6 <_svfprintf_r+0x1d6>
    dc50:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dc52:	781b      	ldrb	r3, [r3, #0]
    dc54:	2b68      	cmp	r3, #104	; 0x68
    dc56:	bf01      	itttt	eq
    dc58:	9b10      	ldreq	r3, [sp, #64]	; 0x40
    dc5a:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    dc5e:	3301      	addeq	r3, #1
    dc60:	9310      	streq	r3, [sp, #64]	; 0x40
    dc62:	bf18      	it	ne
    dc64:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    dc68:	e7a5      	b.n	dbb6 <_svfprintf_r+0x1d6>
    dc6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dc6c:	f048 0810 	orr.w	r8, r8, #16
    dc70:	781b      	ldrb	r3, [r3, #0]
    dc72:	2b6c      	cmp	r3, #108	; 0x6c
    dc74:	d19f      	bne.n	dbb6 <_svfprintf_r+0x1d6>
    dc76:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dc78:	3301      	adds	r3, #1
    dc7a:	9310      	str	r3, [sp, #64]	; 0x40
    dc7c:	e79b      	b.n	dbb6 <_svfprintf_r+0x1d6>
    dc7e:	f048 0810 	orr.w	r8, r8, #16
    dc82:	e798      	b.n	dbb6 <_svfprintf_r+0x1d6>
    dc84:	4632      	mov	r2, r6
    dc86:	2000      	movs	r0, #0
    dc88:	f852 3b04 	ldr.w	r3, [r2], #4
    dc8c:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    dc90:	920b      	str	r2, [sp, #44]	; 0x2c
    dc92:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    dc96:	2301      	movs	r3, #1
    dc98:	4607      	mov	r7, r0
    dc9a:	4606      	mov	r6, r0
    dc9c:	4605      	mov	r5, r0
    dc9e:	9008      	str	r0, [sp, #32]
    dca0:	9307      	str	r3, [sp, #28]
    dca2:	900c      	str	r0, [sp, #48]	; 0x30
    dca4:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
    dca8:	e19c      	b.n	dfe4 <_svfprintf_r+0x604>
    dcaa:	f048 0810 	orr.w	r8, r8, #16
    dcae:	1d33      	adds	r3, r6, #4
    dcb0:	f018 0f10 	tst.w	r8, #16
    dcb4:	930b      	str	r3, [sp, #44]	; 0x2c
    dcb6:	d008      	beq.n	dcca <_svfprintf_r+0x2ea>
    dcb8:	6836      	ldr	r6, [r6, #0]
    dcba:	2e00      	cmp	r6, #0
    dcbc:	da03      	bge.n	dcc6 <_svfprintf_r+0x2e6>
    dcbe:	232d      	movs	r3, #45	; 0x2d
    dcc0:	4276      	negs	r6, r6
    dcc2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    dcc6:	2301      	movs	r3, #1
    dcc8:	e36f      	b.n	e3aa <_svfprintf_r+0x9ca>
    dcca:	f018 0f40 	tst.w	r8, #64	; 0x40
    dcce:	6836      	ldr	r6, [r6, #0]
    dcd0:	d001      	beq.n	dcd6 <_svfprintf_r+0x2f6>
    dcd2:	b236      	sxth	r6, r6
    dcd4:	e7f1      	b.n	dcba <_svfprintf_r+0x2da>
    dcd6:	f418 7f00 	tst.w	r8, #512	; 0x200
    dcda:	bf18      	it	ne
    dcdc:	b276      	sxtbne	r6, r6
    dcde:	e7ec      	b.n	dcba <_svfprintf_r+0x2da>
    dce0:	3607      	adds	r6, #7
    dce2:	f026 0307 	bic.w	r3, r6, #7
    dce6:	4619      	mov	r1, r3
    dce8:	e8f1 2302 	ldrd	r2, r3, [r1], #8
    dcec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    dcf0:	e9dd 630e 	ldrd	r6, r3, [sp, #56]	; 0x38
    dcf4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
    dcf8:	910b      	str	r1, [sp, #44]	; 0x2c
    dcfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dcfe:	4630      	mov	r0, r6
    dd00:	4629      	mov	r1, r5
    dd02:	4b3a      	ldr	r3, [pc, #232]	; (ddec <_svfprintf_r+0x40c>)
    dd04:	f7f2 ff00 	bl	b08 <__aeabi_dcmpun>
    dd08:	bb18      	cbnz	r0, dd52 <_svfprintf_r+0x372>
    dd0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dd0e:	4630      	mov	r0, r6
    dd10:	4629      	mov	r1, r5
    dd12:	4b36      	ldr	r3, [pc, #216]	; (ddec <_svfprintf_r+0x40c>)
    dd14:	f7f2 fe24 	bl	960 <__aeabi_dcmple>
    dd18:	b9d8      	cbnz	r0, dd52 <_svfprintf_r+0x372>
    dd1a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    dd1e:	2200      	movs	r2, #0
    dd20:	2300      	movs	r3, #0
    dd22:	f7f2 fe13 	bl	94c <__aeabi_dcmplt>
    dd26:	b110      	cbz	r0, dd2e <_svfprintf_r+0x34e>
    dd28:	232d      	movs	r3, #45	; 0x2d
    dd2a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    dd2e:	4a30      	ldr	r2, [pc, #192]	; (ddf0 <_svfprintf_r+0x410>)
    dd30:	4830      	ldr	r0, [pc, #192]	; (ddf4 <_svfprintf_r+0x414>)
    dd32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dd34:	2100      	movs	r1, #0
    dd36:	2b47      	cmp	r3, #71	; 0x47
    dd38:	bfd4      	ite	le
    dd3a:	4691      	movle	r9, r2
    dd3c:	4681      	movgt	r9, r0
    dd3e:	2303      	movs	r3, #3
    dd40:	e9cd 3107 	strd	r3, r1, [sp, #28]
    dd44:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    dd48:	2700      	movs	r7, #0
    dd4a:	463e      	mov	r6, r7
    dd4c:	463b      	mov	r3, r7
    dd4e:	f000 bfad 	b.w	ecac <_svfprintf_r+0x12cc>
    dd52:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    dd56:	4610      	mov	r0, r2
    dd58:	4619      	mov	r1, r3
    dd5a:	f7f2 fed5 	bl	b08 <__aeabi_dcmpun>
    dd5e:	b148      	cbz	r0, dd74 <_svfprintf_r+0x394>
    dd60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dd62:	4a25      	ldr	r2, [pc, #148]	; (ddf8 <_svfprintf_r+0x418>)
    dd64:	2b00      	cmp	r3, #0
    dd66:	bfb8      	it	lt
    dd68:	232d      	movlt	r3, #45	; 0x2d
    dd6a:	4824      	ldr	r0, [pc, #144]	; (ddfc <_svfprintf_r+0x41c>)
    dd6c:	bfb8      	it	lt
    dd6e:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
    dd72:	e7de      	b.n	dd32 <_svfprintf_r+0x352>
    dd74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dd76:	f023 0320 	bic.w	r3, r3, #32
    dd7a:	2b41      	cmp	r3, #65	; 0x41
    dd7c:	930c      	str	r3, [sp, #48]	; 0x30
    dd7e:	d125      	bne.n	ddcc <_svfprintf_r+0x3ec>
    dd80:	2330      	movs	r3, #48	; 0x30
    dd82:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    dd86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dd88:	f048 0802 	orr.w	r8, r8, #2
    dd8c:	2b61      	cmp	r3, #97	; 0x61
    dd8e:	bf0c      	ite	eq
    dd90:	2378      	moveq	r3, #120	; 0x78
    dd92:	2358      	movne	r3, #88	; 0x58
    dd94:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
    dd98:	9b07      	ldr	r3, [sp, #28]
    dd9a:	2b63      	cmp	r3, #99	; 0x63
    dd9c:	dd30      	ble.n	de00 <_svfprintf_r+0x420>
    dd9e:	4650      	mov	r0, sl
    dda0:	1c59      	adds	r1, r3, #1
    dda2:	f7ff fd51 	bl	d848 <_malloc_r>
    dda6:	4681      	mov	r9, r0
    dda8:	2800      	cmp	r0, #0
    ddaa:	f040 81f7 	bne.w	e19c <_svfprintf_r+0x7bc>
    ddae:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    ddb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ddb6:	f8ab 300c 	strh.w	r3, [fp, #12]
    ddba:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    ddbe:	f013 0f40 	tst.w	r3, #64	; 0x40
    ddc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ddc4:	bf18      	it	ne
    ddc6:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    ddca:	e62d      	b.n	da28 <_svfprintf_r+0x48>
    ddcc:	9b07      	ldr	r3, [sp, #28]
    ddce:	3301      	adds	r3, #1
    ddd0:	f000 81e6 	beq.w	e1a0 <_svfprintf_r+0x7c0>
    ddd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ddd6:	2b47      	cmp	r3, #71	; 0x47
    ddd8:	f040 81e5 	bne.w	e1a6 <_svfprintf_r+0x7c6>
    dddc:	9b07      	ldr	r3, [sp, #28]
    ddde:	2b00      	cmp	r3, #0
    dde0:	f040 81e1 	bne.w	e1a6 <_svfprintf_r+0x7c6>
    dde4:	9308      	str	r3, [sp, #32]
    dde6:	2301      	movs	r3, #1
    dde8:	9307      	str	r3, [sp, #28]
    ddea:	e00c      	b.n	de06 <_svfprintf_r+0x426>
    ddec:	7fefffff 	.word	0x7fefffff
    ddf0:	00018bf4 	.word	0x00018bf4
    ddf4:	00018bf8 	.word	0x00018bf8
    ddf8:	00018bfc 	.word	0x00018bfc
    ddfc:	00018c00 	.word	0x00018c00
    de00:	9008      	str	r0, [sp, #32]
    de02:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
    de06:	f448 7380 	orr.w	r3, r8, #256	; 0x100
    de0a:	9314      	str	r3, [sp, #80]	; 0x50
    de0c:	e9dd 730e 	ldrd	r7, r3, [sp, #56]	; 0x38
    de10:	1e1d      	subs	r5, r3, #0
    de12:	bfae      	itee	ge
    de14:	2300      	movge	r3, #0
    de16:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
    de1a:	232d      	movlt	r3, #45	; 0x2d
    de1c:	931c      	str	r3, [sp, #112]	; 0x70
    de1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    de20:	2b41      	cmp	r3, #65	; 0x41
    de22:	f040 81d8 	bne.w	e1d6 <_svfprintf_r+0x7f6>
    de26:	4638      	mov	r0, r7
    de28:	aa20      	add	r2, sp, #128	; 0x80
    de2a:	4629      	mov	r1, r5
    de2c:	f7fe ff66 	bl	ccfc <frexp>
    de30:	2200      	movs	r2, #0
    de32:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    de36:	f7f2 fb17 	bl	468 <__aeabi_dmul>
    de3a:	2200      	movs	r2, #0
    de3c:	2300      	movs	r3, #0
    de3e:	4606      	mov	r6, r0
    de40:	460f      	mov	r7, r1
    de42:	f7f2 fd79 	bl	938 <__aeabi_dcmpeq>
    de46:	b108      	cbz	r0, de4c <_svfprintf_r+0x46c>
    de48:	2301      	movs	r3, #1
    de4a:	9320      	str	r3, [sp, #128]	; 0x80
    de4c:	4bac      	ldr	r3, [pc, #688]	; (e100 <_svfprintf_r+0x720>)
    de4e:	4aad      	ldr	r2, [pc, #692]	; (e104 <_svfprintf_r+0x724>)
    de50:	990a      	ldr	r1, [sp, #40]	; 0x28
    de52:	464d      	mov	r5, r9
    de54:	2961      	cmp	r1, #97	; 0x61
    de56:	bf18      	it	ne
    de58:	461a      	movne	r2, r3
    de5a:	9b07      	ldr	r3, [sp, #28]
    de5c:	921b      	str	r2, [sp, #108]	; 0x6c
    de5e:	3b01      	subs	r3, #1
    de60:	9309      	str	r3, [sp, #36]	; 0x24
    de62:	2200      	movs	r2, #0
    de64:	4ba8      	ldr	r3, [pc, #672]	; (e108 <_svfprintf_r+0x728>)
    de66:	4630      	mov	r0, r6
    de68:	4639      	mov	r1, r7
    de6a:	f7f2 fafd 	bl	468 <__aeabi_dmul>
    de6e:	460f      	mov	r7, r1
    de70:	4606      	mov	r6, r0
    de72:	f7f2 fe5f 	bl	b34 <__aeabi_d2iz>
    de76:	901d      	str	r0, [sp, #116]	; 0x74
    de78:	f7f2 fa8c 	bl	394 <__aeabi_i2d>
    de7c:	4602      	mov	r2, r0
    de7e:	460b      	mov	r3, r1
    de80:	4630      	mov	r0, r6
    de82:	4639      	mov	r1, r7
    de84:	f7f2 f938 	bl	f8 <__aeabi_dsub>
    de88:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    de8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    de8c:	4606      	mov	r6, r0
    de8e:	5c9b      	ldrb	r3, [r3, r2]
    de90:	460f      	mov	r7, r1
    de92:	f805 3b01 	strb.w	r3, [r5], #1
    de96:	9b09      	ldr	r3, [sp, #36]	; 0x24
    de98:	1c5a      	adds	r2, r3, #1
    de9a:	9316      	str	r3, [sp, #88]	; 0x58
    de9c:	d007      	beq.n	deae <_svfprintf_r+0x4ce>
    de9e:	3b01      	subs	r3, #1
    dea0:	9309      	str	r3, [sp, #36]	; 0x24
    dea2:	2200      	movs	r2, #0
    dea4:	2300      	movs	r3, #0
    dea6:	f7f2 fd47 	bl	938 <__aeabi_dcmpeq>
    deaa:	2800      	cmp	r0, #0
    deac:	d0d9      	beq.n	de62 <_svfprintf_r+0x482>
    deae:	2200      	movs	r2, #0
    deb0:	4630      	mov	r0, r6
    deb2:	4639      	mov	r1, r7
    deb4:	4b95      	ldr	r3, [pc, #596]	; (e10c <_svfprintf_r+0x72c>)
    deb6:	f7f2 fd67 	bl	988 <__aeabi_dcmpgt>
    deba:	b960      	cbnz	r0, ded6 <_svfprintf_r+0x4f6>
    debc:	2200      	movs	r2, #0
    debe:	4630      	mov	r0, r6
    dec0:	4639      	mov	r1, r7
    dec2:	4b92      	ldr	r3, [pc, #584]	; (e10c <_svfprintf_r+0x72c>)
    dec4:	f7f2 fd38 	bl	938 <__aeabi_dcmpeq>
    dec8:	2800      	cmp	r0, #0
    deca:	f000 817f 	beq.w	e1cc <_svfprintf_r+0x7ec>
    dece:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ded0:	07db      	lsls	r3, r3, #31
    ded2:	f140 817b 	bpl.w	e1cc <_svfprintf_r+0x7ec>
    ded6:	2030      	movs	r0, #48	; 0x30
    ded8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    deda:	9524      	str	r5, [sp, #144]	; 0x90
    dedc:	7bd9      	ldrb	r1, [r3, #15]
    dede:	9a24      	ldr	r2, [sp, #144]	; 0x90
    dee0:	1e53      	subs	r3, r2, #1
    dee2:	9324      	str	r3, [sp, #144]	; 0x90
    dee4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    dee8:	428b      	cmp	r3, r1
    deea:	f000 815e 	beq.w	e1aa <_svfprintf_r+0x7ca>
    deee:	2b39      	cmp	r3, #57	; 0x39
    def0:	bf0b      	itete	eq
    def2:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
    def4:	3301      	addne	r3, #1
    def6:	7a9b      	ldrbeq	r3, [r3, #10]
    def8:	b2db      	uxtbne	r3, r3
    defa:	f802 3c01 	strb.w	r3, [r2, #-1]
    defe:	eba5 0309 	sub.w	r3, r5, r9
    df02:	9309      	str	r3, [sp, #36]	; 0x24
    df04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    df06:	9d20      	ldr	r5, [sp, #128]	; 0x80
    df08:	2b47      	cmp	r3, #71	; 0x47
    df0a:	f040 81b1 	bne.w	e270 <_svfprintf_r+0x890>
    df0e:	1cef      	adds	r7, r5, #3
    df10:	db03      	blt.n	df1a <_svfprintf_r+0x53a>
    df12:	9b07      	ldr	r3, [sp, #28]
    df14:	42ab      	cmp	r3, r5
    df16:	f280 81d6 	bge.w	e2c6 <_svfprintf_r+0x8e6>
    df1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    df1c:	3b02      	subs	r3, #2
    df1e:	930a      	str	r3, [sp, #40]	; 0x28
    df20:	990a      	ldr	r1, [sp, #40]	; 0x28
    df22:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    df26:	f021 0120 	bic.w	r1, r1, #32
    df2a:	2941      	cmp	r1, #65	; 0x41
    df2c:	bf08      	it	eq
    df2e:	320f      	addeq	r2, #15
    df30:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
    df34:	bf06      	itte	eq
    df36:	b2d2      	uxtbeq	r2, r2
    df38:	2101      	moveq	r1, #1
    df3a:	2100      	movne	r1, #0
    df3c:	2b00      	cmp	r3, #0
    df3e:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
    df42:	bfb4      	ite	lt
    df44:	222d      	movlt	r2, #45	; 0x2d
    df46:	222b      	movge	r2, #43	; 0x2b
    df48:	9320      	str	r3, [sp, #128]	; 0x80
    df4a:	bfb8      	it	lt
    df4c:	f1c5 0301 	rsblt	r3, r5, #1
    df50:	2b09      	cmp	r3, #9
    df52:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
    df56:	f340 81a4 	ble.w	e2a2 <_svfprintf_r+0x8c2>
    df5a:	260a      	movs	r6, #10
    df5c:	f10d 0297 	add.w	r2, sp, #151	; 0x97
    df60:	fb93 f5f6 	sdiv	r5, r3, r6
    df64:	4611      	mov	r1, r2
    df66:	fb06 3015 	mls	r0, r6, r5, r3
    df6a:	3030      	adds	r0, #48	; 0x30
    df6c:	f801 0c01 	strb.w	r0, [r1, #-1]
    df70:	4618      	mov	r0, r3
    df72:	2863      	cmp	r0, #99	; 0x63
    df74:	462b      	mov	r3, r5
    df76:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    df7a:	dcf1      	bgt.n	df60 <_svfprintf_r+0x580>
    df7c:	3330      	adds	r3, #48	; 0x30
    df7e:	1e88      	subs	r0, r1, #2
    df80:	f802 3c01 	strb.w	r3, [r2, #-1]
    df84:	4603      	mov	r3, r0
    df86:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
    df8a:	f10d 0597 	add.w	r5, sp, #151	; 0x97
    df8e:	42ab      	cmp	r3, r5
    df90:	f0c0 8182 	bcc.w	e298 <_svfprintf_r+0x8b8>
    df94:	f10d 0299 	add.w	r2, sp, #153	; 0x99
    df98:	1a52      	subs	r2, r2, r1
    df9a:	42a8      	cmp	r0, r5
    df9c:	bf88      	it	hi
    df9e:	2200      	movhi	r2, #0
    dfa0:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
    dfa4:	441a      	add	r2, r3
    dfa6:	ab22      	add	r3, sp, #136	; 0x88
    dfa8:	1ad3      	subs	r3, r2, r3
    dfaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    dfac:	9319      	str	r3, [sp, #100]	; 0x64
    dfae:	2a01      	cmp	r2, #1
    dfb0:	4413      	add	r3, r2
    dfb2:	9307      	str	r3, [sp, #28]
    dfb4:	dc02      	bgt.n	dfbc <_svfprintf_r+0x5dc>
    dfb6:	f018 0f01 	tst.w	r8, #1
    dfba:	d003      	beq.n	dfc4 <_svfprintf_r+0x5e4>
    dfbc:	9b07      	ldr	r3, [sp, #28]
    dfbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
    dfc0:	4413      	add	r3, r2
    dfc2:	9307      	str	r3, [sp, #28]
    dfc4:	2600      	movs	r6, #0
    dfc6:	4635      	mov	r5, r6
    dfc8:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    dfcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    dfd0:	9314      	str	r3, [sp, #80]	; 0x50
    dfd2:	960c      	str	r6, [sp, #48]	; 0x30
    dfd4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    dfd6:	b113      	cbz	r3, dfde <_svfprintf_r+0x5fe>
    dfd8:	232d      	movs	r3, #45	; 0x2d
    dfda:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    dfde:	2700      	movs	r7, #0
    dfe0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
    dfe4:	9b07      	ldr	r3, [sp, #28]
    dfe6:	42bb      	cmp	r3, r7
    dfe8:	bfb8      	it	lt
    dfea:	463b      	movlt	r3, r7
    dfec:	9314      	str	r3, [sp, #80]	; 0x50
    dfee:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
    dff2:	b113      	cbz	r3, dffa <_svfprintf_r+0x61a>
    dff4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    dff6:	3301      	adds	r3, #1
    dff8:	9314      	str	r3, [sp, #80]	; 0x50
    dffa:	f018 0302 	ands.w	r3, r8, #2
    dffe:	931b      	str	r3, [sp, #108]	; 0x6c
    e000:	bf1e      	ittt	ne
    e002:	9b14      	ldrne	r3, [sp, #80]	; 0x50
    e004:	3302      	addne	r3, #2
    e006:	9314      	strne	r3, [sp, #80]	; 0x50
    e008:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    e00c:	931c      	str	r3, [sp, #112]	; 0x70
    e00e:	d121      	bne.n	e054 <_svfprintf_r+0x674>
    e010:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e012:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e014:	1a9b      	subs	r3, r3, r2
    e016:	2b00      	cmp	r3, #0
    e018:	9316      	str	r3, [sp, #88]	; 0x58
    e01a:	dd1b      	ble.n	e054 <_svfprintf_r+0x674>
    e01c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
    e020:	9816      	ldr	r0, [sp, #88]	; 0x58
    e022:	3201      	adds	r2, #1
    e024:	2810      	cmp	r0, #16
    e026:	483a      	ldr	r0, [pc, #232]	; (e110 <_svfprintf_r+0x730>)
    e028:	f104 0108 	add.w	r1, r4, #8
    e02c:	6020      	str	r0, [r4, #0]
    e02e:	f300 829e 	bgt.w	e56e <_svfprintf_r+0xb8e>
    e032:	9816      	ldr	r0, [sp, #88]	; 0x58
    e034:	2a07      	cmp	r2, #7
    e036:	4403      	add	r3, r0
    e038:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
    e03c:	6060      	str	r0, [r4, #4]
    e03e:	f340 82ab 	ble.w	e598 <_svfprintf_r+0xbb8>
    e042:	4659      	mov	r1, fp
    e044:	4650      	mov	r0, sl
    e046:	aa26      	add	r2, sp, #152	; 0x98
    e048:	f009 fa2d 	bl	174a6 <__ssprint_r>
    e04c:	2800      	cmp	r0, #0
    e04e:	f040 85d7 	bne.w	ec00 <_svfprintf_r+0x1220>
    e052:	ac29      	add	r4, sp, #164	; 0xa4
    e054:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
    e058:	b173      	cbz	r3, e078 <_svfprintf_r+0x698>
    e05a:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
    e05e:	6023      	str	r3, [r4, #0]
    e060:	2301      	movs	r3, #1
    e062:	6063      	str	r3, [r4, #4]
    e064:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    e066:	3301      	adds	r3, #1
    e068:	9328      	str	r3, [sp, #160]	; 0xa0
    e06a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e06c:	3301      	adds	r3, #1
    e06e:	2b07      	cmp	r3, #7
    e070:	9327      	str	r3, [sp, #156]	; 0x9c
    e072:	f300 8293 	bgt.w	e59c <_svfprintf_r+0xbbc>
    e076:	3408      	adds	r4, #8
    e078:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e07a:	b16b      	cbz	r3, e098 <_svfprintf_r+0x6b8>
    e07c:	ab1f      	add	r3, sp, #124	; 0x7c
    e07e:	6023      	str	r3, [r4, #0]
    e080:	2302      	movs	r3, #2
    e082:	6063      	str	r3, [r4, #4]
    e084:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    e086:	3302      	adds	r3, #2
    e088:	9328      	str	r3, [sp, #160]	; 0xa0
    e08a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e08c:	3301      	adds	r3, #1
    e08e:	2b07      	cmp	r3, #7
    e090:	9327      	str	r3, [sp, #156]	; 0x9c
    e092:	f300 828d 	bgt.w	e5b0 <_svfprintf_r+0xbd0>
    e096:	3408      	adds	r4, #8
    e098:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e09a:	2b80      	cmp	r3, #128	; 0x80
    e09c:	d121      	bne.n	e0e2 <_svfprintf_r+0x702>
    e09e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e0a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e0a2:	1a9b      	subs	r3, r3, r2
    e0a4:	2b00      	cmp	r3, #0
    e0a6:	9316      	str	r3, [sp, #88]	; 0x58
    e0a8:	dd1b      	ble.n	e0e2 <_svfprintf_r+0x702>
    e0aa:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
    e0ae:	9816      	ldr	r0, [sp, #88]	; 0x58
    e0b0:	3201      	adds	r2, #1
    e0b2:	2810      	cmp	r0, #16
    e0b4:	4817      	ldr	r0, [pc, #92]	; (e114 <_svfprintf_r+0x734>)
    e0b6:	f104 0108 	add.w	r1, r4, #8
    e0ba:	6020      	str	r0, [r4, #0]
    e0bc:	f300 8282 	bgt.w	e5c4 <_svfprintf_r+0xbe4>
    e0c0:	9816      	ldr	r0, [sp, #88]	; 0x58
    e0c2:	2a07      	cmp	r2, #7
    e0c4:	4403      	add	r3, r0
    e0c6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
    e0ca:	6060      	str	r0, [r4, #4]
    e0cc:	f340 828f 	ble.w	e5ee <_svfprintf_r+0xc0e>
    e0d0:	4659      	mov	r1, fp
    e0d2:	4650      	mov	r0, sl
    e0d4:	aa26      	add	r2, sp, #152	; 0x98
    e0d6:	f009 f9e6 	bl	174a6 <__ssprint_r>
    e0da:	2800      	cmp	r0, #0
    e0dc:	f040 8590 	bne.w	ec00 <_svfprintf_r+0x1220>
    e0e0:	ac29      	add	r4, sp, #164	; 0xa4
    e0e2:	9b07      	ldr	r3, [sp, #28]
    e0e4:	1aff      	subs	r7, r7, r3
    e0e6:	2f00      	cmp	r7, #0
    e0e8:	dd28      	ble.n	e13c <_svfprintf_r+0x75c>
    e0ea:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    e0ee:	4809      	ldr	r0, [pc, #36]	; (e114 <_svfprintf_r+0x734>)
    e0f0:	2f10      	cmp	r7, #16
    e0f2:	f103 0301 	add.w	r3, r3, #1
    e0f6:	f104 0108 	add.w	r1, r4, #8
    e0fa:	6020      	str	r0, [r4, #0]
    e0fc:	e00c      	b.n	e118 <_svfprintf_r+0x738>
    e0fe:	bf00      	nop
    e100:	00018c15 	.word	0x00018c15
    e104:	00018c04 	.word	0x00018c04
    e108:	40300000 	.word	0x40300000
    e10c:	3fe00000 	.word	0x3fe00000
    e110:	00018c26 	.word	0x00018c26
    e114:	00018c36 	.word	0x00018c36
    e118:	f300 826b 	bgt.w	e5f2 <_svfprintf_r+0xc12>
    e11c:	6067      	str	r7, [r4, #4]
    e11e:	2b07      	cmp	r3, #7
    e120:	4417      	add	r7, r2
    e122:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
    e126:	f340 8277 	ble.w	e618 <_svfprintf_r+0xc38>
    e12a:	4659      	mov	r1, fp
    e12c:	4650      	mov	r0, sl
    e12e:	aa26      	add	r2, sp, #152	; 0x98
    e130:	f009 f9b9 	bl	174a6 <__ssprint_r>
    e134:	2800      	cmp	r0, #0
    e136:	f040 8563 	bne.w	ec00 <_svfprintf_r+0x1220>
    e13a:	ac29      	add	r4, sp, #164	; 0xa4
    e13c:	f418 7f80 	tst.w	r8, #256	; 0x100
    e140:	9f28      	ldr	r7, [sp, #160]	; 0xa0
    e142:	f040 826f 	bne.w	e624 <_svfprintf_r+0xc44>
    e146:	9b07      	ldr	r3, [sp, #28]
    e148:	f8c4 9000 	str.w	r9, [r4]
    e14c:	441f      	add	r7, r3
    e14e:	6063      	str	r3, [r4, #4]
    e150:	9728      	str	r7, [sp, #160]	; 0xa0
    e152:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e154:	3301      	adds	r3, #1
    e156:	2b07      	cmp	r3, #7
    e158:	9327      	str	r3, [sp, #156]	; 0x9c
    e15a:	f300 82a8 	bgt.w	e6ae <_svfprintf_r+0xcce>
    e15e:	3408      	adds	r4, #8
    e160:	f018 0f04 	tst.w	r8, #4
    e164:	f040 852e 	bne.w	ebc4 <_svfprintf_r+0x11e4>
    e168:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    e16c:	9914      	ldr	r1, [sp, #80]	; 0x50
    e16e:	428a      	cmp	r2, r1
    e170:	bfac      	ite	ge
    e172:	189b      	addge	r3, r3, r2
    e174:	185b      	addlt	r3, r3, r1
    e176:	9313      	str	r3, [sp, #76]	; 0x4c
    e178:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    e17a:	b13b      	cbz	r3, e18c <_svfprintf_r+0x7ac>
    e17c:	4659      	mov	r1, fp
    e17e:	4650      	mov	r0, sl
    e180:	aa26      	add	r2, sp, #152	; 0x98
    e182:	f009 f990 	bl	174a6 <__ssprint_r>
    e186:	2800      	cmp	r0, #0
    e188:	f040 853a 	bne.w	ec00 <_svfprintf_r+0x1220>
    e18c:	2300      	movs	r3, #0
    e18e:	9327      	str	r3, [sp, #156]	; 0x9c
    e190:	9b08      	ldr	r3, [sp, #32]
    e192:	2b00      	cmp	r3, #0
    e194:	f040 8550 	bne.w	ec38 <_svfprintf_r+0x1258>
    e198:	ac29      	add	r4, sp, #164	; 0xa4
    e19a:	e0e8      	b.n	e36e <_svfprintf_r+0x98e>
    e19c:	9008      	str	r0, [sp, #32]
    e19e:	e632      	b.n	de06 <_svfprintf_r+0x426>
    e1a0:	2306      	movs	r3, #6
    e1a2:	9008      	str	r0, [sp, #32]
    e1a4:	e620      	b.n	dde8 <_svfprintf_r+0x408>
    e1a6:	9008      	str	r0, [sp, #32]
    e1a8:	e62d      	b.n	de06 <_svfprintf_r+0x426>
    e1aa:	f802 0c01 	strb.w	r0, [r2, #-1]
    e1ae:	e696      	b.n	dede <_svfprintf_r+0x4fe>
    e1b0:	f803 0b01 	strb.w	r0, [r3], #1
    e1b4:	1aca      	subs	r2, r1, r3
    e1b6:	2a00      	cmp	r2, #0
    e1b8:	dafa      	bge.n	e1b0 <_svfprintf_r+0x7d0>
    e1ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
    e1bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e1be:	3201      	adds	r2, #1
    e1c0:	f103 0301 	add.w	r3, r3, #1
    e1c4:	bfb8      	it	lt
    e1c6:	2300      	movlt	r3, #0
    e1c8:	441d      	add	r5, r3
    e1ca:	e698      	b.n	defe <_svfprintf_r+0x51e>
    e1cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
    e1ce:	462b      	mov	r3, r5
    e1d0:	2030      	movs	r0, #48	; 0x30
    e1d2:	18a9      	adds	r1, r5, r2
    e1d4:	e7ee      	b.n	e1b4 <_svfprintf_r+0x7d4>
    e1d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e1d8:	2b46      	cmp	r3, #70	; 0x46
    e1da:	d005      	beq.n	e1e8 <_svfprintf_r+0x808>
    e1dc:	2b45      	cmp	r3, #69	; 0x45
    e1de:	d11b      	bne.n	e218 <_svfprintf_r+0x838>
    e1e0:	9b07      	ldr	r3, [sp, #28]
    e1e2:	1c5e      	adds	r6, r3, #1
    e1e4:	2302      	movs	r3, #2
    e1e6:	e001      	b.n	e1ec <_svfprintf_r+0x80c>
    e1e8:	2303      	movs	r3, #3
    e1ea:	9e07      	ldr	r6, [sp, #28]
    e1ec:	aa24      	add	r2, sp, #144	; 0x90
    e1ee:	9204      	str	r2, [sp, #16]
    e1f0:	aa21      	add	r2, sp, #132	; 0x84
    e1f2:	9203      	str	r2, [sp, #12]
    e1f4:	aa20      	add	r2, sp, #128	; 0x80
    e1f6:	e9cd 6201 	strd	r6, r2, [sp, #4]
    e1fa:	9300      	str	r3, [sp, #0]
    e1fc:	463a      	mov	r2, r7
    e1fe:	462b      	mov	r3, r5
    e200:	4650      	mov	r0, sl
    e202:	f7f4 fad9 	bl	27b8 <_dtoa_r>
    e206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e208:	4681      	mov	r9, r0
    e20a:	2b47      	cmp	r3, #71	; 0x47
    e20c:	d106      	bne.n	e21c <_svfprintf_r+0x83c>
    e20e:	f018 0f01 	tst.w	r8, #1
    e212:	d103      	bne.n	e21c <_svfprintf_r+0x83c>
    e214:	9d24      	ldr	r5, [sp, #144]	; 0x90
    e216:	e672      	b.n	defe <_svfprintf_r+0x51e>
    e218:	9e07      	ldr	r6, [sp, #28]
    e21a:	e7e3      	b.n	e1e4 <_svfprintf_r+0x804>
    e21c:	eb09 0306 	add.w	r3, r9, r6
    e220:	9309      	str	r3, [sp, #36]	; 0x24
    e222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e224:	2b46      	cmp	r3, #70	; 0x46
    e226:	d111      	bne.n	e24c <_svfprintf_r+0x86c>
    e228:	f899 3000 	ldrb.w	r3, [r9]
    e22c:	2b30      	cmp	r3, #48	; 0x30
    e22e:	d109      	bne.n	e244 <_svfprintf_r+0x864>
    e230:	2200      	movs	r2, #0
    e232:	2300      	movs	r3, #0
    e234:	4638      	mov	r0, r7
    e236:	4629      	mov	r1, r5
    e238:	f7f2 fb7e 	bl	938 <__aeabi_dcmpeq>
    e23c:	b910      	cbnz	r0, e244 <_svfprintf_r+0x864>
    e23e:	f1c6 0601 	rsb	r6, r6, #1
    e242:	9620      	str	r6, [sp, #128]	; 0x80
    e244:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e246:	9b20      	ldr	r3, [sp, #128]	; 0x80
    e248:	441a      	add	r2, r3
    e24a:	9209      	str	r2, [sp, #36]	; 0x24
    e24c:	2200      	movs	r2, #0
    e24e:	2300      	movs	r3, #0
    e250:	4638      	mov	r0, r7
    e252:	4629      	mov	r1, r5
    e254:	f7f2 fb70 	bl	938 <__aeabi_dcmpeq>
    e258:	b108      	cbz	r0, e25e <_svfprintf_r+0x87e>
    e25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e25c:	9324      	str	r3, [sp, #144]	; 0x90
    e25e:	2230      	movs	r2, #48	; 0x30
    e260:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e262:	9909      	ldr	r1, [sp, #36]	; 0x24
    e264:	4299      	cmp	r1, r3
    e266:	d9d5      	bls.n	e214 <_svfprintf_r+0x834>
    e268:	1c59      	adds	r1, r3, #1
    e26a:	9124      	str	r1, [sp, #144]	; 0x90
    e26c:	701a      	strb	r2, [r3, #0]
    e26e:	e7f7      	b.n	e260 <_svfprintf_r+0x880>
    e270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e272:	2b46      	cmp	r3, #70	; 0x46
    e274:	f47f ae54 	bne.w	df20 <_svfprintf_r+0x540>
    e278:	9a07      	ldr	r2, [sp, #28]
    e27a:	f008 0301 	and.w	r3, r8, #1
    e27e:	2d00      	cmp	r5, #0
    e280:	ea43 0302 	orr.w	r3, r3, r2
    e284:	dd1a      	ble.n	e2bc <_svfprintf_r+0x8dc>
    e286:	2b00      	cmp	r3, #0
    e288:	d034      	beq.n	e2f4 <_svfprintf_r+0x914>
    e28a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e28c:	18eb      	adds	r3, r5, r3
    e28e:	441a      	add	r2, r3
    e290:	9207      	str	r2, [sp, #28]
    e292:	2366      	movs	r3, #102	; 0x66
    e294:	930a      	str	r3, [sp, #40]	; 0x28
    e296:	e033      	b.n	e300 <_svfprintf_r+0x920>
    e298:	f813 6b01 	ldrb.w	r6, [r3], #1
    e29c:	f802 6b01 	strb.w	r6, [r2], #1
    e2a0:	e675      	b.n	df8e <_svfprintf_r+0x5ae>
    e2a2:	b941      	cbnz	r1, e2b6 <_svfprintf_r+0x8d6>
    e2a4:	2230      	movs	r2, #48	; 0x30
    e2a6:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
    e2aa:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
    e2ae:	3330      	adds	r3, #48	; 0x30
    e2b0:	f802 3b01 	strb.w	r3, [r2], #1
    e2b4:	e677      	b.n	dfa6 <_svfprintf_r+0x5c6>
    e2b6:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
    e2ba:	e7f8      	b.n	e2ae <_svfprintf_r+0x8ce>
    e2bc:	b1e3      	cbz	r3, e2f8 <_svfprintf_r+0x918>
    e2be:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e2c0:	9a07      	ldr	r2, [sp, #28]
    e2c2:	3301      	adds	r3, #1
    e2c4:	e7e3      	b.n	e28e <_svfprintf_r+0x8ae>
    e2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e2c8:	42ab      	cmp	r3, r5
    e2ca:	dc07      	bgt.n	e2dc <_svfprintf_r+0x8fc>
    e2cc:	f018 0f01 	tst.w	r8, #1
    e2d0:	d02b      	beq.n	e32a <_svfprintf_r+0x94a>
    e2d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e2d4:	18eb      	adds	r3, r5, r3
    e2d6:	9307      	str	r3, [sp, #28]
    e2d8:	2367      	movs	r3, #103	; 0x67
    e2da:	e7db      	b.n	e294 <_svfprintf_r+0x8b4>
    e2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e2de:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e2e0:	2d00      	cmp	r5, #0
    e2e2:	4413      	add	r3, r2
    e2e4:	9307      	str	r3, [sp, #28]
    e2e6:	dcf7      	bgt.n	e2d8 <_svfprintf_r+0x8f8>
    e2e8:	9a07      	ldr	r2, [sp, #28]
    e2ea:	f1c5 0301 	rsb	r3, r5, #1
    e2ee:	441a      	add	r2, r3
    e2f0:	9207      	str	r2, [sp, #28]
    e2f2:	e7f1      	b.n	e2d8 <_svfprintf_r+0x8f8>
    e2f4:	9507      	str	r5, [sp, #28]
    e2f6:	e7cc      	b.n	e292 <_svfprintf_r+0x8b2>
    e2f8:	2366      	movs	r3, #102	; 0x66
    e2fa:	930a      	str	r3, [sp, #40]	; 0x28
    e2fc:	2301      	movs	r3, #1
    e2fe:	9307      	str	r3, [sp, #28]
    e300:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
    e304:	930c      	str	r3, [sp, #48]	; 0x30
    e306:	d021      	beq.n	e34c <_svfprintf_r+0x96c>
    e308:	2600      	movs	r6, #0
    e30a:	2d00      	cmp	r5, #0
    e30c:	960c      	str	r6, [sp, #48]	; 0x30
    e30e:	f77f ae61 	ble.w	dfd4 <_svfprintf_r+0x5f4>
    e312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e314:	781b      	ldrb	r3, [r3, #0]
    e316:	2bff      	cmp	r3, #255	; 0xff
    e318:	d109      	bne.n	e32e <_svfprintf_r+0x94e>
    e31a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e31c:	9a07      	ldr	r2, [sp, #28]
    e31e:	9915      	ldr	r1, [sp, #84]	; 0x54
    e320:	4433      	add	r3, r6
    e322:	fb01 2303 	mla	r3, r1, r3, r2
    e326:	9307      	str	r3, [sp, #28]
    e328:	e654      	b.n	dfd4 <_svfprintf_r+0x5f4>
    e32a:	9507      	str	r5, [sp, #28]
    e32c:	e7d4      	b.n	e2d8 <_svfprintf_r+0x8f8>
    e32e:	42ab      	cmp	r3, r5
    e330:	daf3      	bge.n	e31a <_svfprintf_r+0x93a>
    e332:	1aed      	subs	r5, r5, r3
    e334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e336:	785b      	ldrb	r3, [r3, #1]
    e338:	b133      	cbz	r3, e348 <_svfprintf_r+0x968>
    e33a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e33c:	3301      	adds	r3, #1
    e33e:	930c      	str	r3, [sp, #48]	; 0x30
    e340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e342:	3301      	adds	r3, #1
    e344:	930d      	str	r3, [sp, #52]	; 0x34
    e346:	e7e4      	b.n	e312 <_svfprintf_r+0x932>
    e348:	3601      	adds	r6, #1
    e34a:	e7e2      	b.n	e312 <_svfprintf_r+0x932>
    e34c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    e34e:	e641      	b.n	dfd4 <_svfprintf_r+0x5f4>
    e350:	4632      	mov	r2, r6
    e352:	f852 3b04 	ldr.w	r3, [r2], #4
    e356:	f018 0f10 	tst.w	r8, #16
    e35a:	920b      	str	r2, [sp, #44]	; 0x2c
    e35c:	d002      	beq.n	e364 <_svfprintf_r+0x984>
    e35e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e360:	601a      	str	r2, [r3, #0]
    e362:	e004      	b.n	e36e <_svfprintf_r+0x98e>
    e364:	f018 0f40 	tst.w	r8, #64	; 0x40
    e368:	d006      	beq.n	e378 <_svfprintf_r+0x998>
    e36a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e36c:	801a      	strh	r2, [r3, #0]
    e36e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    e370:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    e374:	f7ff bb70 	b.w	da58 <_svfprintf_r+0x78>
    e378:	f418 7f00 	tst.w	r8, #512	; 0x200
    e37c:	d0ef      	beq.n	e35e <_svfprintf_r+0x97e>
    e37e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e380:	701a      	strb	r2, [r3, #0]
    e382:	e7f4      	b.n	e36e <_svfprintf_r+0x98e>
    e384:	f048 0810 	orr.w	r8, r8, #16
    e388:	1d33      	adds	r3, r6, #4
    e38a:	f018 0f10 	tst.w	r8, #16
    e38e:	930b      	str	r3, [sp, #44]	; 0x2c
    e390:	d001      	beq.n	e396 <_svfprintf_r+0x9b6>
    e392:	6836      	ldr	r6, [r6, #0]
    e394:	e003      	b.n	e39e <_svfprintf_r+0x9be>
    e396:	f018 0f40 	tst.w	r8, #64	; 0x40
    e39a:	d018      	beq.n	e3ce <_svfprintf_r+0x9ee>
    e39c:	8836      	ldrh	r6, [r6, #0]
    e39e:	2300      	movs	r3, #0
    e3a0:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
    e3a4:	2200      	movs	r2, #0
    e3a6:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
    e3aa:	9a07      	ldr	r2, [sp, #28]
    e3ac:	3201      	adds	r2, #1
    e3ae:	f000 8454 	beq.w	ec5a <_svfprintf_r+0x127a>
    e3b2:	f028 0280 	bic.w	r2, r8, #128	; 0x80
    e3b6:	9208      	str	r2, [sp, #32]
    e3b8:	2e00      	cmp	r6, #0
    e3ba:	f040 8453 	bne.w	ec64 <_svfprintf_r+0x1284>
    e3be:	9a07      	ldr	r2, [sp, #28]
    e3c0:	2a00      	cmp	r2, #0
    e3c2:	f000 80ba 	beq.w	e53a <_svfprintf_r+0xb5a>
    e3c6:	2b01      	cmp	r3, #1
    e3c8:	f040 844f 	bne.w	ec6a <_svfprintf_r+0x128a>
    e3cc:	e071      	b.n	e4b2 <_svfprintf_r+0xad2>
    e3ce:	f418 7f00 	tst.w	r8, #512	; 0x200
    e3d2:	d0de      	beq.n	e392 <_svfprintf_r+0x9b2>
    e3d4:	7836      	ldrb	r6, [r6, #0]
    e3d6:	e7e2      	b.n	e39e <_svfprintf_r+0x9be>
    e3d8:	4633      	mov	r3, r6
    e3da:	f853 6b04 	ldr.w	r6, [r3], #4
    e3de:	2278      	movs	r2, #120	; 0x78
    e3e0:	930b      	str	r3, [sp, #44]	; 0x2c
    e3e2:	2330      	movs	r3, #48	; 0x30
    e3e4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    e3e8:	4b8c      	ldr	r3, [pc, #560]	; (e61c <_svfprintf_r+0xc3c>)
    e3ea:	f048 0802 	orr.w	r8, r8, #2
    e3ee:	931a      	str	r3, [sp, #104]	; 0x68
    e3f0:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
    e3f4:	2302      	movs	r3, #2
    e3f6:	920a      	str	r2, [sp, #40]	; 0x28
    e3f8:	e7d4      	b.n	e3a4 <_svfprintf_r+0x9c4>
    e3fa:	4633      	mov	r3, r6
    e3fc:	2500      	movs	r5, #0
    e3fe:	f853 9b04 	ldr.w	r9, [r3], #4
    e402:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
    e406:	930b      	str	r3, [sp, #44]	; 0x2c
    e408:	9b07      	ldr	r3, [sp, #28]
    e40a:	1c58      	adds	r0, r3, #1
    e40c:	d010      	beq.n	e430 <_svfprintf_r+0xa50>
    e40e:	461a      	mov	r2, r3
    e410:	4629      	mov	r1, r5
    e412:	4648      	mov	r0, r9
    e414:	f008 fc14 	bl	16c40 <memchr>
    e418:	9008      	str	r0, [sp, #32]
    e41a:	2800      	cmp	r0, #0
    e41c:	f000 80a4 	beq.w	e568 <_svfprintf_r+0xb88>
    e420:	eba0 0309 	sub.w	r3, r0, r9
    e424:	462f      	mov	r7, r5
    e426:	462e      	mov	r6, r5
    e428:	e9cd 3507 	strd	r3, r5, [sp, #28]
    e42c:	950c      	str	r5, [sp, #48]	; 0x30
    e42e:	e5d9      	b.n	dfe4 <_svfprintf_r+0x604>
    e430:	4648      	mov	r0, r9
    e432:	f7f2 fd1d 	bl	e70 <strlen>
    e436:	e9cd 0507 	strd	r0, r5, [sp, #28]
    e43a:	e485      	b.n	dd48 <_svfprintf_r+0x368>
    e43c:	f048 0810 	orr.w	r8, r8, #16
    e440:	1d33      	adds	r3, r6, #4
    e442:	f018 0f10 	tst.w	r8, #16
    e446:	930b      	str	r3, [sp, #44]	; 0x2c
    e448:	d001      	beq.n	e44e <_svfprintf_r+0xa6e>
    e44a:	6836      	ldr	r6, [r6, #0]
    e44c:	e003      	b.n	e456 <_svfprintf_r+0xa76>
    e44e:	f018 0f40 	tst.w	r8, #64	; 0x40
    e452:	d002      	beq.n	e45a <_svfprintf_r+0xa7a>
    e454:	8836      	ldrh	r6, [r6, #0]
    e456:	2301      	movs	r3, #1
    e458:	e7a4      	b.n	e3a4 <_svfprintf_r+0x9c4>
    e45a:	f418 7f00 	tst.w	r8, #512	; 0x200
    e45e:	d0f4      	beq.n	e44a <_svfprintf_r+0xa6a>
    e460:	7836      	ldrb	r6, [r6, #0]
    e462:	e7f8      	b.n	e456 <_svfprintf_r+0xa76>
    e464:	4b6e      	ldr	r3, [pc, #440]	; (e620 <_svfprintf_r+0xc40>)
    e466:	931a      	str	r3, [sp, #104]	; 0x68
    e468:	f018 0f10 	tst.w	r8, #16
    e46c:	f106 0304 	add.w	r3, r6, #4
    e470:	930b      	str	r3, [sp, #44]	; 0x2c
    e472:	d003      	beq.n	e47c <_svfprintf_r+0xa9c>
    e474:	6836      	ldr	r6, [r6, #0]
    e476:	e005      	b.n	e484 <_svfprintf_r+0xaa4>
    e478:	4b68      	ldr	r3, [pc, #416]	; (e61c <_svfprintf_r+0xc3c>)
    e47a:	e7f4      	b.n	e466 <_svfprintf_r+0xa86>
    e47c:	f018 0f40 	tst.w	r8, #64	; 0x40
    e480:	d010      	beq.n	e4a4 <_svfprintf_r+0xac4>
    e482:	8836      	ldrh	r6, [r6, #0]
    e484:	f018 0f01 	tst.w	r8, #1
    e488:	d008      	beq.n	e49c <_svfprintf_r+0xabc>
    e48a:	b13e      	cbz	r6, e49c <_svfprintf_r+0xabc>
    e48c:	2330      	movs	r3, #48	; 0x30
    e48e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    e492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e494:	f048 0802 	orr.w	r8, r8, #2
    e498:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
    e49c:	2302      	movs	r3, #2
    e49e:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
    e4a2:	e77f      	b.n	e3a4 <_svfprintf_r+0x9c4>
    e4a4:	f418 7f00 	tst.w	r8, #512	; 0x200
    e4a8:	d0e4      	beq.n	e474 <_svfprintf_r+0xa94>
    e4aa:	7836      	ldrb	r6, [r6, #0]
    e4ac:	e7ea      	b.n	e484 <_svfprintf_r+0xaa4>
    e4ae:	2e09      	cmp	r6, #9
    e4b0:	d805      	bhi.n	e4be <_svfprintf_r+0xade>
    e4b2:	3630      	adds	r6, #48	; 0x30
    e4b4:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
    e4b8:	f20d 1947 	addw	r9, sp, #327	; 0x147
    e4bc:	e3ec      	b.n	ec98 <_svfprintf_r+0x12b8>
    e4be:	2300      	movs	r3, #0
    e4c0:	270a      	movs	r7, #10
    e4c2:	9309      	str	r3, [sp, #36]	; 0x24
    e4c4:	9b08      	ldr	r3, [sp, #32]
    e4c6:	aa52      	add	r2, sp, #328	; 0x148
    e4c8:	f403 6580 	and.w	r5, r3, #1024	; 0x400
    e4cc:	fbb6 f3f7 	udiv	r3, r6, r7
    e4d0:	fb07 6313 	mls	r3, r7, r3, r6
    e4d4:	3330      	adds	r3, #48	; 0x30
    e4d6:	f802 3c01 	strb.w	r3, [r2, #-1]
    e4da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e4dc:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
    e4e0:	3301      	adds	r3, #1
    e4e2:	9309      	str	r3, [sp, #36]	; 0x24
    e4e4:	b1c5      	cbz	r5, e518 <_svfprintf_r+0xb38>
    e4e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e4e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e4ea:	781b      	ldrb	r3, [r3, #0]
    e4ec:	429a      	cmp	r2, r3
    e4ee:	d113      	bne.n	e518 <_svfprintf_r+0xb38>
    e4f0:	2aff      	cmp	r2, #255	; 0xff
    e4f2:	d011      	beq.n	e518 <_svfprintf_r+0xb38>
    e4f4:	2e09      	cmp	r6, #9
    e4f6:	d90f      	bls.n	e518 <_svfprintf_r+0xb38>
    e4f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e4fa:	9918      	ldr	r1, [sp, #96]	; 0x60
    e4fc:	eba9 0903 	sub.w	r9, r9, r3
    e500:	461a      	mov	r2, r3
    e502:	4648      	mov	r0, r9
    e504:	f008 ffbc 	bl	17480 <strncpy>
    e508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e50a:	785b      	ldrb	r3, [r3, #1]
    e50c:	b11b      	cbz	r3, e516 <_svfprintf_r+0xb36>
    e50e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e510:	3301      	adds	r3, #1
    e512:	930d      	str	r3, [sp, #52]	; 0x34
    e514:	2300      	movs	r3, #0
    e516:	9309      	str	r3, [sp, #36]	; 0x24
    e518:	2e09      	cmp	r6, #9
    e51a:	fbb6 f3f7 	udiv	r3, r6, r7
    e51e:	f240 83bb 	bls.w	ec98 <_svfprintf_r+0x12b8>
    e522:	461e      	mov	r6, r3
    e524:	464a      	mov	r2, r9
    e526:	e7d1      	b.n	e4cc <_svfprintf_r+0xaec>
    e528:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    e52a:	f006 030f 	and.w	r3, r6, #15
    e52e:	5cd3      	ldrb	r3, [r2, r3]
    e530:	0936      	lsrs	r6, r6, #4
    e532:	f809 3d01 	strb.w	r3, [r9, #-1]!
    e536:	d1f7      	bne.n	e528 <_svfprintf_r+0xb48>
    e538:	e3ae      	b.n	ec98 <_svfprintf_r+0x12b8>
    e53a:	b933      	cbnz	r3, e54a <_svfprintf_r+0xb6a>
    e53c:	f018 0f01 	tst.w	r8, #1
    e540:	d003      	beq.n	e54a <_svfprintf_r+0xb6a>
    e542:	2330      	movs	r3, #48	; 0x30
    e544:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
    e548:	e7b6      	b.n	e4b8 <_svfprintf_r+0xad8>
    e54a:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
    e54e:	e3a3      	b.n	ec98 <_svfprintf_r+0x12b8>
    e550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e552:	2b00      	cmp	r3, #0
    e554:	f000 8376 	beq.w	ec44 <_svfprintf_r+0x1264>
    e558:	2000      	movs	r0, #0
    e55a:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    e55e:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    e562:	960b      	str	r6, [sp, #44]	; 0x2c
    e564:	f7ff bb97 	b.w	dc96 <_svfprintf_r+0x2b6>
    e568:	9f08      	ldr	r7, [sp, #32]
    e56a:	f7ff bbee 	b.w	dd4a <_svfprintf_r+0x36a>
    e56e:	2010      	movs	r0, #16
    e570:	2a07      	cmp	r2, #7
    e572:	4403      	add	r3, r0
    e574:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
    e578:	6060      	str	r0, [r4, #4]
    e57a:	dd08      	ble.n	e58e <_svfprintf_r+0xbae>
    e57c:	4659      	mov	r1, fp
    e57e:	4650      	mov	r0, sl
    e580:	aa26      	add	r2, sp, #152	; 0x98
    e582:	f008 ff90 	bl	174a6 <__ssprint_r>
    e586:	2800      	cmp	r0, #0
    e588:	f040 833a 	bne.w	ec00 <_svfprintf_r+0x1220>
    e58c:	a929      	add	r1, sp, #164	; 0xa4
    e58e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e590:	460c      	mov	r4, r1
    e592:	3b10      	subs	r3, #16
    e594:	9316      	str	r3, [sp, #88]	; 0x58
    e596:	e541      	b.n	e01c <_svfprintf_r+0x63c>
    e598:	460c      	mov	r4, r1
    e59a:	e55b      	b.n	e054 <_svfprintf_r+0x674>
    e59c:	4659      	mov	r1, fp
    e59e:	4650      	mov	r0, sl
    e5a0:	aa26      	add	r2, sp, #152	; 0x98
    e5a2:	f008 ff80 	bl	174a6 <__ssprint_r>
    e5a6:	2800      	cmp	r0, #0
    e5a8:	f040 832a 	bne.w	ec00 <_svfprintf_r+0x1220>
    e5ac:	ac29      	add	r4, sp, #164	; 0xa4
    e5ae:	e563      	b.n	e078 <_svfprintf_r+0x698>
    e5b0:	4659      	mov	r1, fp
    e5b2:	4650      	mov	r0, sl
    e5b4:	aa26      	add	r2, sp, #152	; 0x98
    e5b6:	f008 ff76 	bl	174a6 <__ssprint_r>
    e5ba:	2800      	cmp	r0, #0
    e5bc:	f040 8320 	bne.w	ec00 <_svfprintf_r+0x1220>
    e5c0:	ac29      	add	r4, sp, #164	; 0xa4
    e5c2:	e569      	b.n	e098 <_svfprintf_r+0x6b8>
    e5c4:	2010      	movs	r0, #16
    e5c6:	2a07      	cmp	r2, #7
    e5c8:	4403      	add	r3, r0
    e5ca:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
    e5ce:	6060      	str	r0, [r4, #4]
    e5d0:	dd08      	ble.n	e5e4 <_svfprintf_r+0xc04>
    e5d2:	4659      	mov	r1, fp
    e5d4:	4650      	mov	r0, sl
    e5d6:	aa26      	add	r2, sp, #152	; 0x98
    e5d8:	f008 ff65 	bl	174a6 <__ssprint_r>
    e5dc:	2800      	cmp	r0, #0
    e5de:	f040 830f 	bne.w	ec00 <_svfprintf_r+0x1220>
    e5e2:	a929      	add	r1, sp, #164	; 0xa4
    e5e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e5e6:	460c      	mov	r4, r1
    e5e8:	3b10      	subs	r3, #16
    e5ea:	9316      	str	r3, [sp, #88]	; 0x58
    e5ec:	e55d      	b.n	e0aa <_svfprintf_r+0x6ca>
    e5ee:	460c      	mov	r4, r1
    e5f0:	e577      	b.n	e0e2 <_svfprintf_r+0x702>
    e5f2:	2010      	movs	r0, #16
    e5f4:	2b07      	cmp	r3, #7
    e5f6:	4402      	add	r2, r0
    e5f8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    e5fc:	6060      	str	r0, [r4, #4]
    e5fe:	dd08      	ble.n	e612 <_svfprintf_r+0xc32>
    e600:	4659      	mov	r1, fp
    e602:	4650      	mov	r0, sl
    e604:	aa26      	add	r2, sp, #152	; 0x98
    e606:	f008 ff4e 	bl	174a6 <__ssprint_r>
    e60a:	2800      	cmp	r0, #0
    e60c:	f040 82f8 	bne.w	ec00 <_svfprintf_r+0x1220>
    e610:	a929      	add	r1, sp, #164	; 0xa4
    e612:	460c      	mov	r4, r1
    e614:	3f10      	subs	r7, #16
    e616:	e568      	b.n	e0ea <_svfprintf_r+0x70a>
    e618:	460c      	mov	r4, r1
    e61a:	e58f      	b.n	e13c <_svfprintf_r+0x75c>
    e61c:	00018c04 	.word	0x00018c04
    e620:	00018c15 	.word	0x00018c15
    e624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e626:	2b65      	cmp	r3, #101	; 0x65
    e628:	f340 8232 	ble.w	ea90 <_svfprintf_r+0x10b0>
    e62c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    e630:	2200      	movs	r2, #0
    e632:	2300      	movs	r3, #0
    e634:	f7f2 f980 	bl	938 <__aeabi_dcmpeq>
    e638:	2800      	cmp	r0, #0
    e63a:	d068      	beq.n	e70e <_svfprintf_r+0xd2e>
    e63c:	4b6d      	ldr	r3, [pc, #436]	; (e7f4 <_svfprintf_r+0xe14>)
    e63e:	6023      	str	r3, [r4, #0]
    e640:	2301      	movs	r3, #1
    e642:	441f      	add	r7, r3
    e644:	6063      	str	r3, [r4, #4]
    e646:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e648:	9728      	str	r7, [sp, #160]	; 0xa0
    e64a:	3301      	adds	r3, #1
    e64c:	2b07      	cmp	r3, #7
    e64e:	9327      	str	r3, [sp, #156]	; 0x9c
    e650:	dc37      	bgt.n	e6c2 <_svfprintf_r+0xce2>
    e652:	3408      	adds	r4, #8
    e654:	9b20      	ldr	r3, [sp, #128]	; 0x80
    e656:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e658:	4293      	cmp	r3, r2
    e65a:	db03      	blt.n	e664 <_svfprintf_r+0xc84>
    e65c:	f018 0f01 	tst.w	r8, #1
    e660:	f43f ad7e 	beq.w	e160 <_svfprintf_r+0x780>
    e664:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    e666:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e668:	6023      	str	r3, [r4, #0]
    e66a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e66c:	6063      	str	r3, [r4, #4]
    e66e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    e670:	4413      	add	r3, r2
    e672:	9328      	str	r3, [sp, #160]	; 0xa0
    e674:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e676:	3301      	adds	r3, #1
    e678:	2b07      	cmp	r3, #7
    e67a:	9327      	str	r3, [sp, #156]	; 0x9c
    e67c:	dc2b      	bgt.n	e6d6 <_svfprintf_r+0xcf6>
    e67e:	3408      	adds	r4, #8
    e680:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e682:	1e5d      	subs	r5, r3, #1
    e684:	2d00      	cmp	r5, #0
    e686:	f77f ad6b 	ble.w	e160 <_svfprintf_r+0x780>
    e68a:	2710      	movs	r7, #16
    e68c:	4e5a      	ldr	r6, [pc, #360]	; (e7f8 <_svfprintf_r+0xe18>)
    e68e:	2d10      	cmp	r5, #16
    e690:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    e694:	f104 0108 	add.w	r1, r4, #8
    e698:	f103 0301 	add.w	r3, r3, #1
    e69c:	6026      	str	r6, [r4, #0]
    e69e:	dc24      	bgt.n	e6ea <_svfprintf_r+0xd0a>
    e6a0:	442a      	add	r2, r5
    e6a2:	6065      	str	r5, [r4, #4]
    e6a4:	9228      	str	r2, [sp, #160]	; 0xa0
    e6a6:	2b07      	cmp	r3, #7
    e6a8:	9327      	str	r3, [sp, #156]	; 0x9c
    e6aa:	f340 8288 	ble.w	ebbe <_svfprintf_r+0x11de>
    e6ae:	4659      	mov	r1, fp
    e6b0:	4650      	mov	r0, sl
    e6b2:	aa26      	add	r2, sp, #152	; 0x98
    e6b4:	f008 fef7 	bl	174a6 <__ssprint_r>
    e6b8:	2800      	cmp	r0, #0
    e6ba:	f040 82a1 	bne.w	ec00 <_svfprintf_r+0x1220>
    e6be:	ac29      	add	r4, sp, #164	; 0xa4
    e6c0:	e54e      	b.n	e160 <_svfprintf_r+0x780>
    e6c2:	4659      	mov	r1, fp
    e6c4:	4650      	mov	r0, sl
    e6c6:	aa26      	add	r2, sp, #152	; 0x98
    e6c8:	f008 feed 	bl	174a6 <__ssprint_r>
    e6cc:	2800      	cmp	r0, #0
    e6ce:	f040 8297 	bne.w	ec00 <_svfprintf_r+0x1220>
    e6d2:	ac29      	add	r4, sp, #164	; 0xa4
    e6d4:	e7be      	b.n	e654 <_svfprintf_r+0xc74>
    e6d6:	4659      	mov	r1, fp
    e6d8:	4650      	mov	r0, sl
    e6da:	aa26      	add	r2, sp, #152	; 0x98
    e6dc:	f008 fee3 	bl	174a6 <__ssprint_r>
    e6e0:	2800      	cmp	r0, #0
    e6e2:	f040 828d 	bne.w	ec00 <_svfprintf_r+0x1220>
    e6e6:	ac29      	add	r4, sp, #164	; 0xa4
    e6e8:	e7ca      	b.n	e680 <_svfprintf_r+0xca0>
    e6ea:	3210      	adds	r2, #16
    e6ec:	2b07      	cmp	r3, #7
    e6ee:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    e6f2:	6067      	str	r7, [r4, #4]
    e6f4:	dd08      	ble.n	e708 <_svfprintf_r+0xd28>
    e6f6:	4659      	mov	r1, fp
    e6f8:	4650      	mov	r0, sl
    e6fa:	aa26      	add	r2, sp, #152	; 0x98
    e6fc:	f008 fed3 	bl	174a6 <__ssprint_r>
    e700:	2800      	cmp	r0, #0
    e702:	f040 827d 	bne.w	ec00 <_svfprintf_r+0x1220>
    e706:	a929      	add	r1, sp, #164	; 0xa4
    e708:	460c      	mov	r4, r1
    e70a:	3d10      	subs	r5, #16
    e70c:	e7bf      	b.n	e68e <_svfprintf_r+0xcae>
    e70e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    e710:	2b00      	cmp	r3, #0
    e712:	dc73      	bgt.n	e7fc <_svfprintf_r+0xe1c>
    e714:	4b37      	ldr	r3, [pc, #220]	; (e7f4 <_svfprintf_r+0xe14>)
    e716:	6023      	str	r3, [r4, #0]
    e718:	2301      	movs	r3, #1
    e71a:	441f      	add	r7, r3
    e71c:	6063      	str	r3, [r4, #4]
    e71e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e720:	9728      	str	r7, [sp, #160]	; 0xa0
    e722:	3301      	adds	r3, #1
    e724:	2b07      	cmp	r3, #7
    e726:	9327      	str	r3, [sp, #156]	; 0x9c
    e728:	dc3d      	bgt.n	e7a6 <_svfprintf_r+0xdc6>
    e72a:	3408      	adds	r4, #8
    e72c:	9909      	ldr	r1, [sp, #36]	; 0x24
    e72e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    e730:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    e732:	430a      	orrs	r2, r1
    e734:	f008 0101 	and.w	r1, r8, #1
    e738:	430a      	orrs	r2, r1
    e73a:	f43f ad11 	beq.w	e160 <_svfprintf_r+0x780>
    e73e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    e740:	6022      	str	r2, [r4, #0]
    e742:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e744:	4413      	add	r3, r2
    e746:	9328      	str	r3, [sp, #160]	; 0xa0
    e748:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e74a:	6062      	str	r2, [r4, #4]
    e74c:	3301      	adds	r3, #1
    e74e:	2b07      	cmp	r3, #7
    e750:	9327      	str	r3, [sp, #156]	; 0x9c
    e752:	dc32      	bgt.n	e7ba <_svfprintf_r+0xdda>
    e754:	3408      	adds	r4, #8
    e756:	9d20      	ldr	r5, [sp, #128]	; 0x80
    e758:	2d00      	cmp	r5, #0
    e75a:	da1b      	bge.n	e794 <_svfprintf_r+0xdb4>
    e75c:	4623      	mov	r3, r4
    e75e:	2710      	movs	r7, #16
    e760:	4e25      	ldr	r6, [pc, #148]	; (e7f8 <_svfprintf_r+0xe18>)
    e762:	426d      	negs	r5, r5
    e764:	2d10      	cmp	r5, #16
    e766:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
    e76a:	f104 0408 	add.w	r4, r4, #8
    e76e:	f102 0201 	add.w	r2, r2, #1
    e772:	601e      	str	r6, [r3, #0]
    e774:	dc2b      	bgt.n	e7ce <_svfprintf_r+0xdee>
    e776:	605d      	str	r5, [r3, #4]
    e778:	2a07      	cmp	r2, #7
    e77a:	440d      	add	r5, r1
    e77c:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
    e780:	dd08      	ble.n	e794 <_svfprintf_r+0xdb4>
    e782:	4659      	mov	r1, fp
    e784:	4650      	mov	r0, sl
    e786:	aa26      	add	r2, sp, #152	; 0x98
    e788:	f008 fe8d 	bl	174a6 <__ssprint_r>
    e78c:	2800      	cmp	r0, #0
    e78e:	f040 8237 	bne.w	ec00 <_svfprintf_r+0x1220>
    e792:	ac29      	add	r4, sp, #164	; 0xa4
    e794:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e796:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e798:	6063      	str	r3, [r4, #4]
    e79a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    e79c:	f8c4 9000 	str.w	r9, [r4]
    e7a0:	4413      	add	r3, r2
    e7a2:	9328      	str	r3, [sp, #160]	; 0xa0
    e7a4:	e4d5      	b.n	e152 <_svfprintf_r+0x772>
    e7a6:	4659      	mov	r1, fp
    e7a8:	4650      	mov	r0, sl
    e7aa:	aa26      	add	r2, sp, #152	; 0x98
    e7ac:	f008 fe7b 	bl	174a6 <__ssprint_r>
    e7b0:	2800      	cmp	r0, #0
    e7b2:	f040 8225 	bne.w	ec00 <_svfprintf_r+0x1220>
    e7b6:	ac29      	add	r4, sp, #164	; 0xa4
    e7b8:	e7b8      	b.n	e72c <_svfprintf_r+0xd4c>
    e7ba:	4659      	mov	r1, fp
    e7bc:	4650      	mov	r0, sl
    e7be:	aa26      	add	r2, sp, #152	; 0x98
    e7c0:	f008 fe71 	bl	174a6 <__ssprint_r>
    e7c4:	2800      	cmp	r0, #0
    e7c6:	f040 821b 	bne.w	ec00 <_svfprintf_r+0x1220>
    e7ca:	ac29      	add	r4, sp, #164	; 0xa4
    e7cc:	e7c3      	b.n	e756 <_svfprintf_r+0xd76>
    e7ce:	3110      	adds	r1, #16
    e7d0:	2a07      	cmp	r2, #7
    e7d2:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
    e7d6:	605f      	str	r7, [r3, #4]
    e7d8:	dd08      	ble.n	e7ec <_svfprintf_r+0xe0c>
    e7da:	4659      	mov	r1, fp
    e7dc:	4650      	mov	r0, sl
    e7de:	aa26      	add	r2, sp, #152	; 0x98
    e7e0:	f008 fe61 	bl	174a6 <__ssprint_r>
    e7e4:	2800      	cmp	r0, #0
    e7e6:	f040 820b 	bne.w	ec00 <_svfprintf_r+0x1220>
    e7ea:	ac29      	add	r4, sp, #164	; 0xa4
    e7ec:	4623      	mov	r3, r4
    e7ee:	3d10      	subs	r5, #16
    e7f0:	e7b8      	b.n	e764 <_svfprintf_r+0xd84>
    e7f2:	bf00      	nop
    e7f4:	00017d64 	.word	0x00017d64
    e7f8:	00018c36 	.word	0x00018c36
    e7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e7fe:	42ab      	cmp	r3, r5
    e800:	bfa8      	it	ge
    e802:	462b      	movge	r3, r5
    e804:	2b00      	cmp	r3, #0
    e806:	9307      	str	r3, [sp, #28]
    e808:	dd09      	ble.n	e81e <_svfprintf_r+0xe3e>
    e80a:	441f      	add	r7, r3
    e80c:	e9c4 9300 	strd	r9, r3, [r4]
    e810:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e812:	9728      	str	r7, [sp, #160]	; 0xa0
    e814:	3301      	adds	r3, #1
    e816:	2b07      	cmp	r3, #7
    e818:	9327      	str	r3, [sp, #156]	; 0x9c
    e81a:	dc75      	bgt.n	e908 <_svfprintf_r+0xf28>
    e81c:	3408      	adds	r4, #8
    e81e:	9b07      	ldr	r3, [sp, #28]
    e820:	2b00      	cmp	r3, #0
    e822:	bfb4      	ite	lt
    e824:	462f      	movlt	r7, r5
    e826:	1aef      	subge	r7, r5, r3
    e828:	2f00      	cmp	r7, #0
    e82a:	dd18      	ble.n	e85e <_svfprintf_r+0xe7e>
    e82c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    e830:	4896      	ldr	r0, [pc, #600]	; (ea8c <_svfprintf_r+0x10ac>)
    e832:	2f10      	cmp	r7, #16
    e834:	f103 0301 	add.w	r3, r3, #1
    e838:	f104 0108 	add.w	r1, r4, #8
    e83c:	6020      	str	r0, [r4, #0]
    e83e:	dc6d      	bgt.n	e91c <_svfprintf_r+0xf3c>
    e840:	6067      	str	r7, [r4, #4]
    e842:	2b07      	cmp	r3, #7
    e844:	4417      	add	r7, r2
    e846:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
    e84a:	dd7a      	ble.n	e942 <_svfprintf_r+0xf62>
    e84c:	4659      	mov	r1, fp
    e84e:	4650      	mov	r0, sl
    e850:	aa26      	add	r2, sp, #152	; 0x98
    e852:	f008 fe28 	bl	174a6 <__ssprint_r>
    e856:	2800      	cmp	r0, #0
    e858:	f040 81d2 	bne.w	ec00 <_svfprintf_r+0x1220>
    e85c:	ac29      	add	r4, sp, #164	; 0xa4
    e85e:	f418 6f80 	tst.w	r8, #1024	; 0x400
    e862:	444d      	add	r5, r9
    e864:	d009      	beq.n	e87a <_svfprintf_r+0xe9a>
    e866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e868:	2b00      	cmp	r3, #0
    e86a:	d16c      	bne.n	e946 <_svfprintf_r+0xf66>
    e86c:	2e00      	cmp	r6, #0
    e86e:	d16c      	bne.n	e94a <_svfprintf_r+0xf6a>
    e870:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e872:	444b      	add	r3, r9
    e874:	429d      	cmp	r5, r3
    e876:	bf28      	it	cs
    e878:	461d      	movcs	r5, r3
    e87a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    e87c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e87e:	4293      	cmp	r3, r2
    e880:	db02      	blt.n	e888 <_svfprintf_r+0xea8>
    e882:	f018 0f01 	tst.w	r8, #1
    e886:	d00e      	beq.n	e8a6 <_svfprintf_r+0xec6>
    e888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    e88a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e88c:	6023      	str	r3, [r4, #0]
    e88e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e890:	6063      	str	r3, [r4, #4]
    e892:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    e894:	4413      	add	r3, r2
    e896:	9328      	str	r3, [sp, #160]	; 0xa0
    e898:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e89a:	3301      	adds	r3, #1
    e89c:	2b07      	cmp	r3, #7
    e89e:	9327      	str	r3, [sp, #156]	; 0x9c
    e8a0:	f300 80cd 	bgt.w	ea3e <_svfprintf_r+0x105e>
    e8a4:	3408      	adds	r4, #8
    e8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e8a8:	9e20      	ldr	r6, [sp, #128]	; 0x80
    e8aa:	eb09 0203 	add.w	r2, r9, r3
    e8ae:	1b9e      	subs	r6, r3, r6
    e8b0:	1b52      	subs	r2, r2, r5
    e8b2:	4296      	cmp	r6, r2
    e8b4:	bfa8      	it	ge
    e8b6:	4616      	movge	r6, r2
    e8b8:	2e00      	cmp	r6, #0
    e8ba:	dd0b      	ble.n	e8d4 <_svfprintf_r+0xef4>
    e8bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    e8be:	e9c4 5600 	strd	r5, r6, [r4]
    e8c2:	4433      	add	r3, r6
    e8c4:	9328      	str	r3, [sp, #160]	; 0xa0
    e8c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e8c8:	3301      	adds	r3, #1
    e8ca:	2b07      	cmp	r3, #7
    e8cc:	9327      	str	r3, [sp, #156]	; 0x9c
    e8ce:	f300 80c0 	bgt.w	ea52 <_svfprintf_r+0x1072>
    e8d2:	3408      	adds	r4, #8
    e8d4:	9d20      	ldr	r5, [sp, #128]	; 0x80
    e8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e8d8:	2e00      	cmp	r6, #0
    e8da:	eba3 0505 	sub.w	r5, r3, r5
    e8de:	bfa8      	it	ge
    e8e0:	1bad      	subge	r5, r5, r6
    e8e2:	2d00      	cmp	r5, #0
    e8e4:	f77f ac3c 	ble.w	e160 <_svfprintf_r+0x780>
    e8e8:	2710      	movs	r7, #16
    e8ea:	4e68      	ldr	r6, [pc, #416]	; (ea8c <_svfprintf_r+0x10ac>)
    e8ec:	2d10      	cmp	r5, #16
    e8ee:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    e8f2:	f104 0108 	add.w	r1, r4, #8
    e8f6:	f103 0301 	add.w	r3, r3, #1
    e8fa:	6026      	str	r6, [r4, #0]
    e8fc:	f300 80b3 	bgt.w	ea66 <_svfprintf_r+0x1086>
    e900:	6065      	str	r5, [r4, #4]
    e902:	4415      	add	r5, r2
    e904:	9528      	str	r5, [sp, #160]	; 0xa0
    e906:	e6ce      	b.n	e6a6 <_svfprintf_r+0xcc6>
    e908:	4659      	mov	r1, fp
    e90a:	4650      	mov	r0, sl
    e90c:	aa26      	add	r2, sp, #152	; 0x98
    e90e:	f008 fdca 	bl	174a6 <__ssprint_r>
    e912:	2800      	cmp	r0, #0
    e914:	f040 8174 	bne.w	ec00 <_svfprintf_r+0x1220>
    e918:	ac29      	add	r4, sp, #164	; 0xa4
    e91a:	e780      	b.n	e81e <_svfprintf_r+0xe3e>
    e91c:	2010      	movs	r0, #16
    e91e:	2b07      	cmp	r3, #7
    e920:	4402      	add	r2, r0
    e922:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    e926:	6060      	str	r0, [r4, #4]
    e928:	dd08      	ble.n	e93c <_svfprintf_r+0xf5c>
    e92a:	4659      	mov	r1, fp
    e92c:	4650      	mov	r0, sl
    e92e:	aa26      	add	r2, sp, #152	; 0x98
    e930:	f008 fdb9 	bl	174a6 <__ssprint_r>
    e934:	2800      	cmp	r0, #0
    e936:	f040 8163 	bne.w	ec00 <_svfprintf_r+0x1220>
    e93a:	a929      	add	r1, sp, #164	; 0xa4
    e93c:	460c      	mov	r4, r1
    e93e:	3f10      	subs	r7, #16
    e940:	e774      	b.n	e82c <_svfprintf_r+0xe4c>
    e942:	460c      	mov	r4, r1
    e944:	e78b      	b.n	e85e <_svfprintf_r+0xe7e>
    e946:	2e00      	cmp	r6, #0
    e948:	d049      	beq.n	e9de <_svfprintf_r+0xffe>
    e94a:	3e01      	subs	r6, #1
    e94c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e94e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    e950:	6023      	str	r3, [r4, #0]
    e952:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e954:	6063      	str	r3, [r4, #4]
    e956:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    e958:	4413      	add	r3, r2
    e95a:	9328      	str	r3, [sp, #160]	; 0xa0
    e95c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e95e:	3301      	adds	r3, #1
    e960:	2b07      	cmp	r3, #7
    e962:	9327      	str	r3, [sp, #156]	; 0x9c
    e964:	dc42      	bgt.n	e9ec <_svfprintf_r+0x100c>
    e966:	3408      	adds	r4, #8
    e968:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e96a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e96c:	444b      	add	r3, r9
    e96e:	7812      	ldrb	r2, [r2, #0]
    e970:	1b5b      	subs	r3, r3, r5
    e972:	429a      	cmp	r2, r3
    e974:	bfa8      	it	ge
    e976:	461a      	movge	r2, r3
    e978:	2a00      	cmp	r2, #0
    e97a:	9207      	str	r2, [sp, #28]
    e97c:	dd0a      	ble.n	e994 <_svfprintf_r+0xfb4>
    e97e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    e980:	e9c4 5200 	strd	r5, r2, [r4]
    e984:	4413      	add	r3, r2
    e986:	9328      	str	r3, [sp, #160]	; 0xa0
    e988:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e98a:	3301      	adds	r3, #1
    e98c:	2b07      	cmp	r3, #7
    e98e:	9327      	str	r3, [sp, #156]	; 0x9c
    e990:	dc36      	bgt.n	ea00 <_svfprintf_r+0x1020>
    e992:	3408      	adds	r4, #8
    e994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e996:	781f      	ldrb	r7, [r3, #0]
    e998:	9b07      	ldr	r3, [sp, #28]
    e99a:	2b00      	cmp	r3, #0
    e99c:	bfa8      	it	ge
    e99e:	1aff      	subge	r7, r7, r3
    e9a0:	2f00      	cmp	r7, #0
    e9a2:	dd18      	ble.n	e9d6 <_svfprintf_r+0xff6>
    e9a4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    e9a8:	4838      	ldr	r0, [pc, #224]	; (ea8c <_svfprintf_r+0x10ac>)
    e9aa:	2f10      	cmp	r7, #16
    e9ac:	f103 0301 	add.w	r3, r3, #1
    e9b0:	f104 0108 	add.w	r1, r4, #8
    e9b4:	6020      	str	r0, [r4, #0]
    e9b6:	dc2d      	bgt.n	ea14 <_svfprintf_r+0x1034>
    e9b8:	6067      	str	r7, [r4, #4]
    e9ba:	2b07      	cmp	r3, #7
    e9bc:	4417      	add	r7, r2
    e9be:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
    e9c2:	dd3a      	ble.n	ea3a <_svfprintf_r+0x105a>
    e9c4:	4659      	mov	r1, fp
    e9c6:	4650      	mov	r0, sl
    e9c8:	aa26      	add	r2, sp, #152	; 0x98
    e9ca:	f008 fd6c 	bl	174a6 <__ssprint_r>
    e9ce:	2800      	cmp	r0, #0
    e9d0:	f040 8116 	bne.w	ec00 <_svfprintf_r+0x1220>
    e9d4:	ac29      	add	r4, sp, #164	; 0xa4
    e9d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e9d8:	781b      	ldrb	r3, [r3, #0]
    e9da:	441d      	add	r5, r3
    e9dc:	e743      	b.n	e866 <_svfprintf_r+0xe86>
    e9de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e9e0:	3b01      	subs	r3, #1
    e9e2:	930d      	str	r3, [sp, #52]	; 0x34
    e9e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e9e6:	3b01      	subs	r3, #1
    e9e8:	930c      	str	r3, [sp, #48]	; 0x30
    e9ea:	e7af      	b.n	e94c <_svfprintf_r+0xf6c>
    e9ec:	4659      	mov	r1, fp
    e9ee:	4650      	mov	r0, sl
    e9f0:	aa26      	add	r2, sp, #152	; 0x98
    e9f2:	f008 fd58 	bl	174a6 <__ssprint_r>
    e9f6:	2800      	cmp	r0, #0
    e9f8:	f040 8102 	bne.w	ec00 <_svfprintf_r+0x1220>
    e9fc:	ac29      	add	r4, sp, #164	; 0xa4
    e9fe:	e7b3      	b.n	e968 <_svfprintf_r+0xf88>
    ea00:	4659      	mov	r1, fp
    ea02:	4650      	mov	r0, sl
    ea04:	aa26      	add	r2, sp, #152	; 0x98
    ea06:	f008 fd4e 	bl	174a6 <__ssprint_r>
    ea0a:	2800      	cmp	r0, #0
    ea0c:	f040 80f8 	bne.w	ec00 <_svfprintf_r+0x1220>
    ea10:	ac29      	add	r4, sp, #164	; 0xa4
    ea12:	e7bf      	b.n	e994 <_svfprintf_r+0xfb4>
    ea14:	2010      	movs	r0, #16
    ea16:	2b07      	cmp	r3, #7
    ea18:	4402      	add	r2, r0
    ea1a:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    ea1e:	6060      	str	r0, [r4, #4]
    ea20:	dd08      	ble.n	ea34 <_svfprintf_r+0x1054>
    ea22:	4659      	mov	r1, fp
    ea24:	4650      	mov	r0, sl
    ea26:	aa26      	add	r2, sp, #152	; 0x98
    ea28:	f008 fd3d 	bl	174a6 <__ssprint_r>
    ea2c:	2800      	cmp	r0, #0
    ea2e:	f040 80e7 	bne.w	ec00 <_svfprintf_r+0x1220>
    ea32:	a929      	add	r1, sp, #164	; 0xa4
    ea34:	460c      	mov	r4, r1
    ea36:	3f10      	subs	r7, #16
    ea38:	e7b4      	b.n	e9a4 <_svfprintf_r+0xfc4>
    ea3a:	460c      	mov	r4, r1
    ea3c:	e7cb      	b.n	e9d6 <_svfprintf_r+0xff6>
    ea3e:	4659      	mov	r1, fp
    ea40:	4650      	mov	r0, sl
    ea42:	aa26      	add	r2, sp, #152	; 0x98
    ea44:	f008 fd2f 	bl	174a6 <__ssprint_r>
    ea48:	2800      	cmp	r0, #0
    ea4a:	f040 80d9 	bne.w	ec00 <_svfprintf_r+0x1220>
    ea4e:	ac29      	add	r4, sp, #164	; 0xa4
    ea50:	e729      	b.n	e8a6 <_svfprintf_r+0xec6>
    ea52:	4659      	mov	r1, fp
    ea54:	4650      	mov	r0, sl
    ea56:	aa26      	add	r2, sp, #152	; 0x98
    ea58:	f008 fd25 	bl	174a6 <__ssprint_r>
    ea5c:	2800      	cmp	r0, #0
    ea5e:	f040 80cf 	bne.w	ec00 <_svfprintf_r+0x1220>
    ea62:	ac29      	add	r4, sp, #164	; 0xa4
    ea64:	e736      	b.n	e8d4 <_svfprintf_r+0xef4>
    ea66:	3210      	adds	r2, #16
    ea68:	2b07      	cmp	r3, #7
    ea6a:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    ea6e:	6067      	str	r7, [r4, #4]
    ea70:	dd08      	ble.n	ea84 <_svfprintf_r+0x10a4>
    ea72:	4659      	mov	r1, fp
    ea74:	4650      	mov	r0, sl
    ea76:	aa26      	add	r2, sp, #152	; 0x98
    ea78:	f008 fd15 	bl	174a6 <__ssprint_r>
    ea7c:	2800      	cmp	r0, #0
    ea7e:	f040 80bf 	bne.w	ec00 <_svfprintf_r+0x1220>
    ea82:	a929      	add	r1, sp, #164	; 0xa4
    ea84:	460c      	mov	r4, r1
    ea86:	3d10      	subs	r5, #16
    ea88:	e730      	b.n	e8ec <_svfprintf_r+0xf0c>
    ea8a:	bf00      	nop
    ea8c:	00018c36 	.word	0x00018c36
    ea90:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ea92:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    ea94:	2a01      	cmp	r2, #1
    ea96:	f107 0701 	add.w	r7, r7, #1
    ea9a:	f103 0301 	add.w	r3, r3, #1
    ea9e:	f104 0508 	add.w	r5, r4, #8
    eaa2:	dc02      	bgt.n	eaaa <_svfprintf_r+0x10ca>
    eaa4:	f018 0f01 	tst.w	r8, #1
    eaa8:	d07e      	beq.n	eba8 <_svfprintf_r+0x11c8>
    eaaa:	2201      	movs	r2, #1
    eaac:	2b07      	cmp	r3, #7
    eaae:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
    eab2:	f8c4 9000 	str.w	r9, [r4]
    eab6:	6062      	str	r2, [r4, #4]
    eab8:	dd08      	ble.n	eacc <_svfprintf_r+0x10ec>
    eaba:	4659      	mov	r1, fp
    eabc:	4650      	mov	r0, sl
    eabe:	aa26      	add	r2, sp, #152	; 0x98
    eac0:	f008 fcf1 	bl	174a6 <__ssprint_r>
    eac4:	2800      	cmp	r0, #0
    eac6:	f040 809b 	bne.w	ec00 <_svfprintf_r+0x1220>
    eaca:	ad29      	add	r5, sp, #164	; 0xa4
    eacc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    eace:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ead0:	602b      	str	r3, [r5, #0]
    ead2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ead4:	606b      	str	r3, [r5, #4]
    ead6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    ead8:	4413      	add	r3, r2
    eada:	9328      	str	r3, [sp, #160]	; 0xa0
    eadc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    eade:	3301      	adds	r3, #1
    eae0:	2b07      	cmp	r3, #7
    eae2:	9327      	str	r3, [sp, #156]	; 0x9c
    eae4:	dc32      	bgt.n	eb4c <_svfprintf_r+0x116c>
    eae6:	3508      	adds	r5, #8
    eae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eaea:	2200      	movs	r2, #0
    eaec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    eaf0:	1e5c      	subs	r4, r3, #1
    eaf2:	2300      	movs	r3, #0
    eaf4:	f7f1 ff20 	bl	938 <__aeabi_dcmpeq>
    eaf8:	2800      	cmp	r0, #0
    eafa:	d130      	bne.n	eb5e <_svfprintf_r+0x117e>
    eafc:	9927      	ldr	r1, [sp, #156]	; 0x9c
    eafe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    eb00:	9a09      	ldr	r2, [sp, #36]	; 0x24
    eb02:	3101      	adds	r1, #1
    eb04:	3b01      	subs	r3, #1
    eb06:	f109 0001 	add.w	r0, r9, #1
    eb0a:	4413      	add	r3, r2
    eb0c:	2907      	cmp	r1, #7
    eb0e:	e9c5 0400 	strd	r0, r4, [r5]
    eb12:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
    eb16:	dd50      	ble.n	ebba <_svfprintf_r+0x11da>
    eb18:	4659      	mov	r1, fp
    eb1a:	4650      	mov	r0, sl
    eb1c:	aa26      	add	r2, sp, #152	; 0x98
    eb1e:	f008 fcc2 	bl	174a6 <__ssprint_r>
    eb22:	2800      	cmp	r0, #0
    eb24:	d16c      	bne.n	ec00 <_svfprintf_r+0x1220>
    eb26:	ad29      	add	r5, sp, #164	; 0xa4
    eb28:	ab22      	add	r3, sp, #136	; 0x88
    eb2a:	602b      	str	r3, [r5, #0]
    eb2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    eb2e:	9a19      	ldr	r2, [sp, #100]	; 0x64
    eb30:	606b      	str	r3, [r5, #4]
    eb32:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    eb34:	4413      	add	r3, r2
    eb36:	9328      	str	r3, [sp, #160]	; 0xa0
    eb38:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    eb3a:	3301      	adds	r3, #1
    eb3c:	2b07      	cmp	r3, #7
    eb3e:	9327      	str	r3, [sp, #156]	; 0x9c
    eb40:	f73f adb5 	bgt.w	e6ae <_svfprintf_r+0xcce>
    eb44:	f105 0408 	add.w	r4, r5, #8
    eb48:	f7ff bb0a 	b.w	e160 <_svfprintf_r+0x780>
    eb4c:	4659      	mov	r1, fp
    eb4e:	4650      	mov	r0, sl
    eb50:	aa26      	add	r2, sp, #152	; 0x98
    eb52:	f008 fca8 	bl	174a6 <__ssprint_r>
    eb56:	2800      	cmp	r0, #0
    eb58:	d152      	bne.n	ec00 <_svfprintf_r+0x1220>
    eb5a:	ad29      	add	r5, sp, #164	; 0xa4
    eb5c:	e7c4      	b.n	eae8 <_svfprintf_r+0x1108>
    eb5e:	2c00      	cmp	r4, #0
    eb60:	dde2      	ble.n	eb28 <_svfprintf_r+0x1148>
    eb62:	2710      	movs	r7, #16
    eb64:	4e53      	ldr	r6, [pc, #332]	; (ecb4 <_svfprintf_r+0x12d4>)
    eb66:	2c10      	cmp	r4, #16
    eb68:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    eb6c:	f105 0108 	add.w	r1, r5, #8
    eb70:	f103 0301 	add.w	r3, r3, #1
    eb74:	602e      	str	r6, [r5, #0]
    eb76:	dc07      	bgt.n	eb88 <_svfprintf_r+0x11a8>
    eb78:	606c      	str	r4, [r5, #4]
    eb7a:	2b07      	cmp	r3, #7
    eb7c:	4414      	add	r4, r2
    eb7e:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
    eb82:	dcc9      	bgt.n	eb18 <_svfprintf_r+0x1138>
    eb84:	460d      	mov	r5, r1
    eb86:	e7cf      	b.n	eb28 <_svfprintf_r+0x1148>
    eb88:	3210      	adds	r2, #16
    eb8a:	2b07      	cmp	r3, #7
    eb8c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    eb90:	606f      	str	r7, [r5, #4]
    eb92:	dd06      	ble.n	eba2 <_svfprintf_r+0x11c2>
    eb94:	4659      	mov	r1, fp
    eb96:	4650      	mov	r0, sl
    eb98:	aa26      	add	r2, sp, #152	; 0x98
    eb9a:	f008 fc84 	bl	174a6 <__ssprint_r>
    eb9e:	bb78      	cbnz	r0, ec00 <_svfprintf_r+0x1220>
    eba0:	a929      	add	r1, sp, #164	; 0xa4
    eba2:	460d      	mov	r5, r1
    eba4:	3c10      	subs	r4, #16
    eba6:	e7de      	b.n	eb66 <_svfprintf_r+0x1186>
    eba8:	2201      	movs	r2, #1
    ebaa:	2b07      	cmp	r3, #7
    ebac:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
    ebb0:	f8c4 9000 	str.w	r9, [r4]
    ebb4:	6062      	str	r2, [r4, #4]
    ebb6:	ddb7      	ble.n	eb28 <_svfprintf_r+0x1148>
    ebb8:	e7ae      	b.n	eb18 <_svfprintf_r+0x1138>
    ebba:	3508      	adds	r5, #8
    ebbc:	e7b4      	b.n	eb28 <_svfprintf_r+0x1148>
    ebbe:	460c      	mov	r4, r1
    ebc0:	f7ff bace 	b.w	e160 <_svfprintf_r+0x780>
    ebc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ebc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ebc8:	1a9d      	subs	r5, r3, r2
    ebca:	2d00      	cmp	r5, #0
    ebcc:	f77f aacc 	ble.w	e168 <_svfprintf_r+0x788>
    ebd0:	2710      	movs	r7, #16
    ebd2:	4e39      	ldr	r6, [pc, #228]	; (ecb8 <_svfprintf_r+0x12d8>)
    ebd4:	2d10      	cmp	r5, #16
    ebd6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    ebda:	6026      	str	r6, [r4, #0]
    ebdc:	f103 0301 	add.w	r3, r3, #1
    ebe0:	dc18      	bgt.n	ec14 <_svfprintf_r+0x1234>
    ebe2:	6065      	str	r5, [r4, #4]
    ebe4:	2b07      	cmp	r3, #7
    ebe6:	4415      	add	r5, r2
    ebe8:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
    ebec:	f77f aabc 	ble.w	e168 <_svfprintf_r+0x788>
    ebf0:	4659      	mov	r1, fp
    ebf2:	4650      	mov	r0, sl
    ebf4:	aa26      	add	r2, sp, #152	; 0x98
    ebf6:	f008 fc56 	bl	174a6 <__ssprint_r>
    ebfa:	2800      	cmp	r0, #0
    ebfc:	f43f aab4 	beq.w	e168 <_svfprintf_r+0x788>
    ec00:	9b08      	ldr	r3, [sp, #32]
    ec02:	2b00      	cmp	r3, #0
    ec04:	f43f a8d9 	beq.w	ddba <_svfprintf_r+0x3da>
    ec08:	4619      	mov	r1, r3
    ec0a:	4650      	mov	r0, sl
    ec0c:	f7fe fdd4 	bl	d7b8 <_free_r>
    ec10:	f7ff b8d3 	b.w	ddba <_svfprintf_r+0x3da>
    ec14:	3210      	adds	r2, #16
    ec16:	2b07      	cmp	r3, #7
    ec18:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    ec1c:	6067      	str	r7, [r4, #4]
    ec1e:	dc02      	bgt.n	ec26 <_svfprintf_r+0x1246>
    ec20:	3408      	adds	r4, #8
    ec22:	3d10      	subs	r5, #16
    ec24:	e7d6      	b.n	ebd4 <_svfprintf_r+0x11f4>
    ec26:	4659      	mov	r1, fp
    ec28:	4650      	mov	r0, sl
    ec2a:	aa26      	add	r2, sp, #152	; 0x98
    ec2c:	f008 fc3b 	bl	174a6 <__ssprint_r>
    ec30:	2800      	cmp	r0, #0
    ec32:	d1e5      	bne.n	ec00 <_svfprintf_r+0x1220>
    ec34:	ac29      	add	r4, sp, #164	; 0xa4
    ec36:	e7f4      	b.n	ec22 <_svfprintf_r+0x1242>
    ec38:	4650      	mov	r0, sl
    ec3a:	9908      	ldr	r1, [sp, #32]
    ec3c:	f7fe fdbc 	bl	d7b8 <_free_r>
    ec40:	f7ff baaa 	b.w	e198 <_svfprintf_r+0x7b8>
    ec44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    ec46:	2b00      	cmp	r3, #0
    ec48:	f43f a8b7 	beq.w	ddba <_svfprintf_r+0x3da>
    ec4c:	4659      	mov	r1, fp
    ec4e:	4650      	mov	r0, sl
    ec50:	aa26      	add	r2, sp, #152	; 0x98
    ec52:	f008 fc28 	bl	174a6 <__ssprint_r>
    ec56:	f7ff b8b0 	b.w	ddba <_svfprintf_r+0x3da>
    ec5a:	f8cd 8020 	str.w	r8, [sp, #32]
    ec5e:	2e00      	cmp	r6, #0
    ec60:	f43f abb1 	beq.w	e3c6 <_svfprintf_r+0x9e6>
    ec64:	2b01      	cmp	r3, #1
    ec66:	f43f ac22 	beq.w	e4ae <_svfprintf_r+0xace>
    ec6a:	2b02      	cmp	r3, #2
    ec6c:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
    ec70:	f43f ac5a 	beq.w	e528 <_svfprintf_r+0xb48>
    ec74:	f006 0307 	and.w	r3, r6, #7
    ec78:	3330      	adds	r3, #48	; 0x30
    ec7a:	08f6      	lsrs	r6, r6, #3
    ec7c:	464a      	mov	r2, r9
    ec7e:	f809 3d01 	strb.w	r3, [r9, #-1]!
    ec82:	d1f7      	bne.n	ec74 <_svfprintf_r+0x1294>
    ec84:	9908      	ldr	r1, [sp, #32]
    ec86:	07c9      	lsls	r1, r1, #31
    ec88:	d506      	bpl.n	ec98 <_svfprintf_r+0x12b8>
    ec8a:	2b30      	cmp	r3, #48	; 0x30
    ec8c:	d004      	beq.n	ec98 <_svfprintf_r+0x12b8>
    ec8e:	2330      	movs	r3, #48	; 0x30
    ec90:	f809 3c01 	strb.w	r3, [r9, #-1]
    ec94:	f1a2 0902 	sub.w	r9, r2, #2
    ec98:	ab52      	add	r3, sp, #328	; 0x148
    ec9a:	eba3 0309 	sub.w	r3, r3, r9
    ec9e:	9f07      	ldr	r7, [sp, #28]
    eca0:	9307      	str	r3, [sp, #28]
    eca2:	2300      	movs	r3, #0
    eca4:	461e      	mov	r6, r3
    eca6:	f8dd 8020 	ldr.w	r8, [sp, #32]
    ecaa:	9308      	str	r3, [sp, #32]
    ecac:	461d      	mov	r5, r3
    ecae:	930c      	str	r3, [sp, #48]	; 0x30
    ecb0:	f7ff b998 	b.w	dfe4 <_svfprintf_r+0x604>
    ecb4:	00018c36 	.word	0x00018c36
    ecb8:	00018c26 	.word	0x00018c26

0000ecbc <time>:
    ecbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ecbe:	4b0b      	ldr	r3, [pc, #44]	; (ecec <time+0x30>)
    ecc0:	4604      	mov	r4, r0
    ecc2:	2200      	movs	r2, #0
    ecc4:	4669      	mov	r1, sp
    ecc6:	6818      	ldr	r0, [r3, #0]
    ecc8:	f001 fe0a 	bl	108e0 <_gettimeofday_r>
    eccc:	2800      	cmp	r0, #0
    ecce:	da05      	bge.n	ecdc <time+0x20>
    ecd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ecd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ecd8:	e9cd 2300 	strd	r2, r3, [sp]
    ecdc:	e9dd 0100 	ldrd	r0, r1, [sp]
    ece0:	b10c      	cbz	r4, ece6 <time+0x2a>
    ece2:	e9c4 0100 	strd	r0, r1, [r4]
    ece6:	b004      	add	sp, #16
    ece8:	bd10      	pop	{r4, pc}
    ecea:	bf00      	nop
    ecec:	20000028 	.word	0x20000028

0000ecf0 <_vfprintf_r>:
    ecf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecf4:	b0d3      	sub	sp, #332	; 0x14c
    ecf6:	4689      	mov	r9, r1
    ecf8:	4690      	mov	r8, r2
    ecfa:	461e      	mov	r6, r3
    ecfc:	4682      	mov	sl, r0
    ecfe:	f7fe fd03 	bl	d708 <_localeconv_r>
    ed02:	6803      	ldr	r3, [r0, #0]
    ed04:	4618      	mov	r0, r3
    ed06:	9317      	str	r3, [sp, #92]	; 0x5c
    ed08:	f7f2 f8b2 	bl	e70 <strlen>
    ed0c:	9012      	str	r0, [sp, #72]	; 0x48
    ed0e:	f1ba 0f00 	cmp.w	sl, #0
    ed12:	d005      	beq.n	ed20 <_vfprintf_r+0x30>
    ed14:	f8da 3018 	ldr.w	r3, [sl, #24]
    ed18:	b913      	cbnz	r3, ed20 <_vfprintf_r+0x30>
    ed1a:	4650      	mov	r0, sl
    ed1c:	f7fe fc64 	bl	d5e8 <__sinit>
    ed20:	4b91      	ldr	r3, [pc, #580]	; (ef68 <_vfprintf_r+0x278>)
    ed22:	4599      	cmp	r9, r3
    ed24:	d124      	bne.n	ed70 <_vfprintf_r+0x80>
    ed26:	f8da 9004 	ldr.w	r9, [sl, #4]
    ed2a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
    ed2e:	07db      	lsls	r3, r3, #31
    ed30:	d407      	bmi.n	ed42 <_vfprintf_r+0x52>
    ed32:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    ed36:	059f      	lsls	r7, r3, #22
    ed38:	d403      	bmi.n	ed42 <_vfprintf_r+0x52>
    ed3a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
    ed3e:	f002 fe8b 	bl	11a58 <__retarget_lock_acquire_recursive>
    ed42:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    ed46:	071d      	lsls	r5, r3, #28
    ed48:	d502      	bpl.n	ed50 <_vfprintf_r+0x60>
    ed4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
    ed4e:	bb23      	cbnz	r3, ed9a <_vfprintf_r+0xaa>
    ed50:	4649      	mov	r1, r9
    ed52:	4650      	mov	r0, sl
    ed54:	f001 f980 	bl	10058 <__swsetup_r>
    ed58:	b1f8      	cbz	r0, ed9a <_vfprintf_r+0xaa>
    ed5a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
    ed5e:	07dc      	lsls	r4, r3, #31
    ed60:	d512      	bpl.n	ed88 <_vfprintf_r+0x98>
    ed62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ed66:	9314      	str	r3, [sp, #80]	; 0x50
    ed68:	9814      	ldr	r0, [sp, #80]	; 0x50
    ed6a:	b053      	add	sp, #332	; 0x14c
    ed6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed70:	4b7e      	ldr	r3, [pc, #504]	; (ef6c <_vfprintf_r+0x27c>)
    ed72:	4599      	cmp	r9, r3
    ed74:	d102      	bne.n	ed7c <_vfprintf_r+0x8c>
    ed76:	f8da 9008 	ldr.w	r9, [sl, #8]
    ed7a:	e7d6      	b.n	ed2a <_vfprintf_r+0x3a>
    ed7c:	4b7c      	ldr	r3, [pc, #496]	; (ef70 <_vfprintf_r+0x280>)
    ed7e:	4599      	cmp	r9, r3
    ed80:	bf08      	it	eq
    ed82:	f8da 900c 	ldreq.w	r9, [sl, #12]
    ed86:	e7d0      	b.n	ed2a <_vfprintf_r+0x3a>
    ed88:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    ed8c:	0598      	lsls	r0, r3, #22
    ed8e:	d4e8      	bmi.n	ed62 <_vfprintf_r+0x72>
    ed90:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
    ed94:	f002 fe66 	bl	11a64 <__retarget_lock_release_recursive>
    ed98:	e7e3      	b.n	ed62 <_vfprintf_r+0x72>
    ed9a:	2500      	movs	r5, #0
    ed9c:	2200      	movs	r2, #0
    ed9e:	2300      	movs	r3, #0
    eda0:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
    eda4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    eda8:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
    edac:	ac29      	add	r4, sp, #164	; 0xa4
    edae:	9426      	str	r4, [sp, #152]	; 0x98
    edb0:	9509      	str	r5, [sp, #36]	; 0x24
    edb2:	950e      	str	r5, [sp, #56]	; 0x38
    edb4:	9516      	str	r5, [sp, #88]	; 0x58
    edb6:	9518      	str	r5, [sp, #96]	; 0x60
    edb8:	9514      	str	r5, [sp, #80]	; 0x50
    edba:	4643      	mov	r3, r8
    edbc:	461d      	mov	r5, r3
    edbe:	f813 2b01 	ldrb.w	r2, [r3], #1
    edc2:	b10a      	cbz	r2, edc8 <_vfprintf_r+0xd8>
    edc4:	2a25      	cmp	r2, #37	; 0x25
    edc6:	d1f9      	bne.n	edbc <_vfprintf_r+0xcc>
    edc8:	ebb5 0708 	subs.w	r7, r5, r8
    edcc:	d00d      	beq.n	edea <_vfprintf_r+0xfa>
    edce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    edd0:	e9c4 8700 	strd	r8, r7, [r4]
    edd4:	443b      	add	r3, r7
    edd6:	9328      	str	r3, [sp, #160]	; 0xa0
    edd8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    edda:	3301      	adds	r3, #1
    eddc:	2b07      	cmp	r3, #7
    edde:	9327      	str	r3, [sp, #156]	; 0x9c
    ede0:	dc79      	bgt.n	eed6 <_vfprintf_r+0x1e6>
    ede2:	3408      	adds	r4, #8
    ede4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ede6:	443b      	add	r3, r7
    ede8:	9314      	str	r3, [sp, #80]	; 0x50
    edea:	782b      	ldrb	r3, [r5, #0]
    edec:	2b00      	cmp	r3, #0
    edee:	f001 80e3 	beq.w	ffb8 <__kernel_ram_size+0x200>
    edf2:	2300      	movs	r3, #0
    edf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    edf8:	469b      	mov	fp, r3
    edfa:	270a      	movs	r7, #10
    edfc:	212b      	movs	r1, #43	; 0x2b
    edfe:	3501      	adds	r5, #1
    ee00:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    ee04:	9207      	str	r2, [sp, #28]
    ee06:	9313      	str	r3, [sp, #76]	; 0x4c
    ee08:	462b      	mov	r3, r5
    ee0a:	f813 2b01 	ldrb.w	r2, [r3], #1
    ee0e:	920a      	str	r2, [sp, #40]	; 0x28
    ee10:	930f      	str	r3, [sp, #60]	; 0x3c
    ee12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ee14:	3b20      	subs	r3, #32
    ee16:	2b5a      	cmp	r3, #90	; 0x5a
    ee18:	f200 8559 	bhi.w	f8ce <_vfprintf_r+0xbde>
    ee1c:	e8df f013 	tbh	[pc, r3, lsl #1]
    ee20:	0557007e 	.word	0x0557007e
    ee24:	00860557 	.word	0x00860557
    ee28:	05570557 	.word	0x05570557
    ee2c:	00650557 	.word	0x00650557
    ee30:	05570557 	.word	0x05570557
    ee34:	00930089 	.word	0x00930089
    ee38:	00900557 	.word	0x00900557
    ee3c:	05570096 	.word	0x05570096
    ee40:	00bd00ba 	.word	0x00bd00ba
    ee44:	00bd00bd 	.word	0x00bd00bd
    ee48:	00bd00bd 	.word	0x00bd00bd
    ee4c:	00bd00bd 	.word	0x00bd00bd
    ee50:	00bd00bd 	.word	0x00bd00bd
    ee54:	05570557 	.word	0x05570557
    ee58:	05570557 	.word	0x05570557
    ee5c:	05570557 	.word	0x05570557
    ee60:	01180557 	.word	0x01180557
    ee64:	00ea0557 	.word	0x00ea0557
    ee68:	011800fd 	.word	0x011800fd
    ee6c:	01180118 	.word	0x01180118
    ee70:	05570557 	.word	0x05570557
    ee74:	05570557 	.word	0x05570557
    ee78:	055700cd 	.word	0x055700cd
    ee7c:	04730557 	.word	0x04730557
    ee80:	05570557 	.word	0x05570557
    ee84:	04ac0557 	.word	0x04ac0557
    ee88:	04cd0557 	.word	0x04cd0557
    ee8c:	05570557 	.word	0x05570557
    ee90:	055704e1 	.word	0x055704e1
    ee94:	05570557 	.word	0x05570557
    ee98:	05570557 	.word	0x05570557
    ee9c:	05570557 	.word	0x05570557
    eea0:	01180557 	.word	0x01180557
    eea4:	00ea0557 	.word	0x00ea0557
    eea8:	011800ff 	.word	0x011800ff
    eeac:	01180118 	.word	0x01180118
    eeb0:	00ff00d0 	.word	0x00ff00d0
    eeb4:	055700e7 	.word	0x055700e7
    eeb8:	055700dd 	.word	0x055700dd
    eebc:	04750459 	.word	0x04750459
    eec0:	00e7049b 	.word	0x00e7049b
    eec4:	04ac0557 	.word	0x04ac0557
    eec8:	04cf007c 	.word	0x04cf007c
    eecc:	05570557 	.word	0x05570557
    eed0:	055704eb 	.word	0x055704eb
    eed4:	007c      	.short	0x007c
    eed6:	4649      	mov	r1, r9
    eed8:	4650      	mov	r0, sl
    eeda:	aa26      	add	r2, sp, #152	; 0x98
    eedc:	f008 fb5e 	bl	1759c <__sprint_r>
    eee0:	2800      	cmp	r0, #0
    eee2:	f040 8121 	bne.w	f128 <_vfprintf_r+0x438>
    eee6:	ac29      	add	r4, sp, #164	; 0xa4
    eee8:	e77c      	b.n	ede4 <_vfprintf_r+0xf4>
    eeea:	4650      	mov	r0, sl
    eeec:	f7fe fc0c 	bl	d708 <_localeconv_r>
    eef0:	6843      	ldr	r3, [r0, #4]
    eef2:	4618      	mov	r0, r3
    eef4:	9318      	str	r3, [sp, #96]	; 0x60
    eef6:	f7f1 ffbb 	bl	e70 <strlen>
    eefa:	9016      	str	r0, [sp, #88]	; 0x58
    eefc:	4650      	mov	r0, sl
    eefe:	f7fe fc03 	bl	d708 <_localeconv_r>
    ef02:	6883      	ldr	r3, [r0, #8]
    ef04:	212b      	movs	r1, #43	; 0x2b
    ef06:	930e      	str	r3, [sp, #56]	; 0x38
    ef08:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ef0a:	b12b      	cbz	r3, ef18 <_vfprintf_r+0x228>
    ef0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ef0e:	b11b      	cbz	r3, ef18 <_vfprintf_r+0x228>
    ef10:	781b      	ldrb	r3, [r3, #0]
    ef12:	b10b      	cbz	r3, ef18 <_vfprintf_r+0x228>
    ef14:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
    ef18:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    ef1a:	e775      	b.n	ee08 <_vfprintf_r+0x118>
    ef1c:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
    ef20:	2b00      	cmp	r3, #0
    ef22:	d1f9      	bne.n	ef18 <_vfprintf_r+0x228>
    ef24:	2320      	movs	r3, #32
    ef26:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    ef2a:	e7f5      	b.n	ef18 <_vfprintf_r+0x228>
    ef2c:	f04b 0b01 	orr.w	fp, fp, #1
    ef30:	e7f2      	b.n	ef18 <_vfprintf_r+0x228>
    ef32:	f856 3b04 	ldr.w	r3, [r6], #4
    ef36:	2b00      	cmp	r3, #0
    ef38:	9313      	str	r3, [sp, #76]	; 0x4c
    ef3a:	daed      	bge.n	ef18 <_vfprintf_r+0x228>
    ef3c:	425b      	negs	r3, r3
    ef3e:	9313      	str	r3, [sp, #76]	; 0x4c
    ef40:	f04b 0b04 	orr.w	fp, fp, #4
    ef44:	e7e8      	b.n	ef18 <_vfprintf_r+0x228>
    ef46:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
    ef4a:	e7e5      	b.n	ef18 <_vfprintf_r+0x228>
    ef4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ef4e:	f812 3b01 	ldrb.w	r3, [r2], #1
    ef52:	2b2a      	cmp	r3, #42	; 0x2a
    ef54:	930a      	str	r3, [sp, #40]	; 0x28
    ef56:	d11a      	bne.n	ef8e <_vfprintf_r+0x29e>
    ef58:	f856 0b04 	ldr.w	r0, [r6], #4
    ef5c:	920f      	str	r2, [sp, #60]	; 0x3c
    ef5e:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
    ef62:	9307      	str	r3, [sp, #28]
    ef64:	e7d8      	b.n	ef18 <_vfprintf_r+0x228>
    ef66:	bf00      	nop
    ef68:	00017c6c 	.word	0x00017c6c
    ef6c:	00017c8c 	.word	0x00017c8c
    ef70:	00017c4c 	.word	0x00017c4c
    ef74:	9807      	ldr	r0, [sp, #28]
    ef76:	fb07 3300 	mla	r3, r7, r0, r3
    ef7a:	9307      	str	r3, [sp, #28]
    ef7c:	f812 3b01 	ldrb.w	r3, [r2], #1
    ef80:	930a      	str	r3, [sp, #40]	; 0x28
    ef82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ef84:	3b30      	subs	r3, #48	; 0x30
    ef86:	2b09      	cmp	r3, #9
    ef88:	d9f4      	bls.n	ef74 <_vfprintf_r+0x284>
    ef8a:	920f      	str	r2, [sp, #60]	; 0x3c
    ef8c:	e741      	b.n	ee12 <_vfprintf_r+0x122>
    ef8e:	2300      	movs	r3, #0
    ef90:	9307      	str	r3, [sp, #28]
    ef92:	e7f6      	b.n	ef82 <_vfprintf_r+0x292>
    ef94:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    ef98:	e7be      	b.n	ef18 <_vfprintf_r+0x228>
    ef9a:	2300      	movs	r3, #0
    ef9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ef9e:	9313      	str	r3, [sp, #76]	; 0x4c
    efa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    efa2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    efa4:	3b30      	subs	r3, #48	; 0x30
    efa6:	fb07 3300 	mla	r3, r7, r0, r3
    efaa:	9313      	str	r3, [sp, #76]	; 0x4c
    efac:	f812 3b01 	ldrb.w	r3, [r2], #1
    efb0:	930a      	str	r3, [sp, #40]	; 0x28
    efb2:	3b30      	subs	r3, #48	; 0x30
    efb4:	2b09      	cmp	r3, #9
    efb6:	d9f3      	bls.n	efa0 <_vfprintf_r+0x2b0>
    efb8:	e7e7      	b.n	ef8a <_vfprintf_r+0x29a>
    efba:	f04b 0b08 	orr.w	fp, fp, #8
    efbe:	e7ab      	b.n	ef18 <_vfprintf_r+0x228>
    efc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    efc2:	781b      	ldrb	r3, [r3, #0]
    efc4:	2b68      	cmp	r3, #104	; 0x68
    efc6:	bf01      	itttt	eq
    efc8:	9b0f      	ldreq	r3, [sp, #60]	; 0x3c
    efca:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
    efce:	3301      	addeq	r3, #1
    efd0:	930f      	streq	r3, [sp, #60]	; 0x3c
    efd2:	bf18      	it	ne
    efd4:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
    efd8:	e79e      	b.n	ef18 <_vfprintf_r+0x228>
    efda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    efdc:	f04b 0b10 	orr.w	fp, fp, #16
    efe0:	781b      	ldrb	r3, [r3, #0]
    efe2:	2b6c      	cmp	r3, #108	; 0x6c
    efe4:	d198      	bne.n	ef18 <_vfprintf_r+0x228>
    efe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    efe8:	3301      	adds	r3, #1
    efea:	930f      	str	r3, [sp, #60]	; 0x3c
    efec:	e794      	b.n	ef18 <_vfprintf_r+0x228>
    efee:	f04b 0b10 	orr.w	fp, fp, #16
    eff2:	e791      	b.n	ef18 <_vfprintf_r+0x228>
    eff4:	4632      	mov	r2, r6
    eff6:	2000      	movs	r0, #0
    eff8:	f852 3b04 	ldr.w	r3, [r2], #4
    effc:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    f000:	920b      	str	r2, [sp, #44]	; 0x2c
    f002:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    f006:	2301      	movs	r3, #1
    f008:	4606      	mov	r6, r0
    f00a:	4605      	mov	r5, r0
    f00c:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
    f010:	9008      	str	r0, [sp, #32]
    f012:	9307      	str	r3, [sp, #28]
    f014:	f10d 08e4 	add.w	r8, sp, #228	; 0xe4
    f018:	e1a5      	b.n	f366 <_vfprintf_r+0x676>
    f01a:	f04b 0b10 	orr.w	fp, fp, #16
    f01e:	1d33      	adds	r3, r6, #4
    f020:	f01b 0f10 	tst.w	fp, #16
    f024:	930b      	str	r3, [sp, #44]	; 0x2c
    f026:	d008      	beq.n	f03a <_vfprintf_r+0x34a>
    f028:	6836      	ldr	r6, [r6, #0]
    f02a:	2e00      	cmp	r6, #0
    f02c:	da03      	bge.n	f036 <_vfprintf_r+0x346>
    f02e:	232d      	movs	r3, #45	; 0x2d
    f030:	4276      	negs	r6, r6
    f032:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    f036:	2301      	movs	r3, #1
    f038:	e378      	b.n	f72c <_vfprintf_r+0xa3c>
    f03a:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f03e:	6836      	ldr	r6, [r6, #0]
    f040:	d001      	beq.n	f046 <_vfprintf_r+0x356>
    f042:	b236      	sxth	r6, r6
    f044:	e7f1      	b.n	f02a <_vfprintf_r+0x33a>
    f046:	f41b 7f00 	tst.w	fp, #512	; 0x200
    f04a:	bf18      	it	ne
    f04c:	b276      	sxtbne	r6, r6
    f04e:	e7ec      	b.n	f02a <_vfprintf_r+0x33a>
    f050:	3607      	adds	r6, #7
    f052:	f026 0307 	bic.w	r3, r6, #7
    f056:	4619      	mov	r1, r3
    f058:	e8f1 2302 	ldrd	r2, r3, [r1], #8
    f05c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    f060:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
    f064:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
    f068:	910b      	str	r1, [sp, #44]	; 0x2c
    f06a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f06e:	4630      	mov	r0, r6
    f070:	4629      	mov	r1, r5
    f072:	4b3e      	ldr	r3, [pc, #248]	; (f16c <_vfprintf_r+0x47c>)
    f074:	f7f1 fd48 	bl	b08 <__aeabi_dcmpun>
    f078:	bb10      	cbnz	r0, f0c0 <_vfprintf_r+0x3d0>
    f07a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f07e:	4630      	mov	r0, r6
    f080:	4629      	mov	r1, r5
    f082:	4b3a      	ldr	r3, [pc, #232]	; (f16c <_vfprintf_r+0x47c>)
    f084:	f7f1 fc6c 	bl	960 <__aeabi_dcmple>
    f088:	b9d0      	cbnz	r0, f0c0 <_vfprintf_r+0x3d0>
    f08a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    f08e:	2200      	movs	r2, #0
    f090:	2300      	movs	r3, #0
    f092:	f7f1 fc5b 	bl	94c <__aeabi_dcmplt>
    f096:	b110      	cbz	r0, f09e <_vfprintf_r+0x3ae>
    f098:	232d      	movs	r3, #45	; 0x2d
    f09a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    f09e:	4a34      	ldr	r2, [pc, #208]	; (f170 <_vfprintf_r+0x480>)
    f0a0:	4834      	ldr	r0, [pc, #208]	; (f174 <_vfprintf_r+0x484>)
    f0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f0a4:	2100      	movs	r1, #0
    f0a6:	2b47      	cmp	r3, #71	; 0x47
    f0a8:	bfd4      	ite	le
    f0aa:	4690      	movle	r8, r2
    f0ac:	4680      	movgt	r8, r0
    f0ae:	2303      	movs	r3, #3
    f0b0:	e9cd 3107 	strd	r3, r1, [sp, #28]
    f0b4:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    f0b8:	2600      	movs	r6, #0
    f0ba:	4633      	mov	r3, r6
    f0bc:	f000 bfb0 	b.w	10020 <__kernel_ram_size+0x268>
    f0c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    f0c4:	4610      	mov	r0, r2
    f0c6:	4619      	mov	r1, r3
    f0c8:	f7f1 fd1e 	bl	b08 <__aeabi_dcmpun>
    f0cc:	b148      	cbz	r0, f0e2 <_vfprintf_r+0x3f2>
    f0ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f0d0:	4a29      	ldr	r2, [pc, #164]	; (f178 <_vfprintf_r+0x488>)
    f0d2:	2b00      	cmp	r3, #0
    f0d4:	bfb8      	it	lt
    f0d6:	232d      	movlt	r3, #45	; 0x2d
    f0d8:	4828      	ldr	r0, [pc, #160]	; (f17c <_vfprintf_r+0x48c>)
    f0da:	bfb8      	it	lt
    f0dc:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
    f0e0:	e7df      	b.n	f0a2 <_vfprintf_r+0x3b2>
    f0e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f0e4:	f023 0320 	bic.w	r3, r3, #32
    f0e8:	2b41      	cmp	r3, #65	; 0x41
    f0ea:	930c      	str	r3, [sp, #48]	; 0x30
    f0ec:	d12e      	bne.n	f14c <_vfprintf_r+0x45c>
    f0ee:	2330      	movs	r3, #48	; 0x30
    f0f0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    f0f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f0f6:	f04b 0b02 	orr.w	fp, fp, #2
    f0fa:	2b61      	cmp	r3, #97	; 0x61
    f0fc:	bf0c      	ite	eq
    f0fe:	2378      	moveq	r3, #120	; 0x78
    f100:	2358      	movne	r3, #88	; 0x58
    f102:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
    f106:	9b07      	ldr	r3, [sp, #28]
    f108:	2b63      	cmp	r3, #99	; 0x63
    f10a:	dd39      	ble.n	f180 <_vfprintf_r+0x490>
    f10c:	4650      	mov	r0, sl
    f10e:	1c59      	adds	r1, r3, #1
    f110:	f7fe fb9a 	bl	d848 <_malloc_r>
    f114:	4680      	mov	r8, r0
    f116:	2800      	cmp	r0, #0
    f118:	f040 81fc 	bne.w	f514 <_vfprintf_r+0x824>
    f11c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    f120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f124:	f8a9 300c 	strh.w	r3, [r9, #12]
    f128:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
    f12c:	07d9      	lsls	r1, r3, #31
    f12e:	d407      	bmi.n	f140 <_vfprintf_r+0x450>
    f130:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    f134:	059a      	lsls	r2, r3, #22
    f136:	d403      	bmi.n	f140 <_vfprintf_r+0x450>
    f138:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
    f13c:	f002 fc92 	bl	11a64 <__retarget_lock_release_recursive>
    f140:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    f144:	065b      	lsls	r3, r3, #25
    f146:	f57f ae0f 	bpl.w	ed68 <_vfprintf_r+0x78>
    f14a:	e60a      	b.n	ed62 <_vfprintf_r+0x72>
    f14c:	9b07      	ldr	r3, [sp, #28]
    f14e:	3301      	adds	r3, #1
    f150:	f000 81e2 	beq.w	f518 <_vfprintf_r+0x828>
    f154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f156:	2b47      	cmp	r3, #71	; 0x47
    f158:	f040 81e1 	bne.w	f51e <_vfprintf_r+0x82e>
    f15c:	9b07      	ldr	r3, [sp, #28]
    f15e:	2b00      	cmp	r3, #0
    f160:	f040 81dd 	bne.w	f51e <_vfprintf_r+0x82e>
    f164:	9308      	str	r3, [sp, #32]
    f166:	2301      	movs	r3, #1
    f168:	9307      	str	r3, [sp, #28]
    f16a:	e00c      	b.n	f186 <_vfprintf_r+0x496>
    f16c:	7fefffff 	.word	0x7fefffff
    f170:	00018bf4 	.word	0x00018bf4
    f174:	00018bf8 	.word	0x00018bf8
    f178:	00018bfc 	.word	0x00018bfc
    f17c:	00018c00 	.word	0x00018c00
    f180:	9008      	str	r0, [sp, #32]
    f182:	f10d 08e4 	add.w	r8, sp, #228	; 0xe4
    f186:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
    f18a:	9315      	str	r3, [sp, #84]	; 0x54
    f18c:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
    f190:	1e1d      	subs	r5, r3, #0
    f192:	bfae      	itee	ge
    f194:	2300      	movge	r3, #0
    f196:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
    f19a:	232d      	movlt	r3, #45	; 0x2d
    f19c:	931c      	str	r3, [sp, #112]	; 0x70
    f19e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f1a0:	2b41      	cmp	r3, #65	; 0x41
    f1a2:	f040 81d4 	bne.w	f54e <_vfprintf_r+0x85e>
    f1a6:	4638      	mov	r0, r7
    f1a8:	aa20      	add	r2, sp, #128	; 0x80
    f1aa:	4629      	mov	r1, r5
    f1ac:	f7fd fda6 	bl	ccfc <frexp>
    f1b0:	2200      	movs	r2, #0
    f1b2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    f1b6:	f7f1 f957 	bl	468 <__aeabi_dmul>
    f1ba:	2200      	movs	r2, #0
    f1bc:	2300      	movs	r3, #0
    f1be:	4606      	mov	r6, r0
    f1c0:	460f      	mov	r7, r1
    f1c2:	f7f1 fbb9 	bl	938 <__aeabi_dcmpeq>
    f1c6:	b108      	cbz	r0, f1cc <_vfprintf_r+0x4dc>
    f1c8:	2301      	movs	r3, #1
    f1ca:	9320      	str	r3, [sp, #128]	; 0x80
    f1cc:	4ba6      	ldr	r3, [pc, #664]	; (f468 <_vfprintf_r+0x778>)
    f1ce:	4aa7      	ldr	r2, [pc, #668]	; (f46c <_vfprintf_r+0x77c>)
    f1d0:	990a      	ldr	r1, [sp, #40]	; 0x28
    f1d2:	4645      	mov	r5, r8
    f1d4:	2961      	cmp	r1, #97	; 0x61
    f1d6:	bf18      	it	ne
    f1d8:	461a      	movne	r2, r3
    f1da:	9b07      	ldr	r3, [sp, #28]
    f1dc:	921b      	str	r2, [sp, #108]	; 0x6c
    f1de:	3b01      	subs	r3, #1
    f1e0:	9309      	str	r3, [sp, #36]	; 0x24
    f1e2:	2200      	movs	r2, #0
    f1e4:	4ba2      	ldr	r3, [pc, #648]	; (f470 <_vfprintf_r+0x780>)
    f1e6:	4630      	mov	r0, r6
    f1e8:	4639      	mov	r1, r7
    f1ea:	f7f1 f93d 	bl	468 <__aeabi_dmul>
    f1ee:	460f      	mov	r7, r1
    f1f0:	4606      	mov	r6, r0
    f1f2:	f7f1 fc9f 	bl	b34 <__aeabi_d2iz>
    f1f6:	901d      	str	r0, [sp, #116]	; 0x74
    f1f8:	f7f1 f8cc 	bl	394 <__aeabi_i2d>
    f1fc:	4602      	mov	r2, r0
    f1fe:	460b      	mov	r3, r1
    f200:	4630      	mov	r0, r6
    f202:	4639      	mov	r1, r7
    f204:	f7f0 ff78 	bl	f8 <__aeabi_dsub>
    f208:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    f20a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f20c:	4606      	mov	r6, r0
    f20e:	5c9b      	ldrb	r3, [r3, r2]
    f210:	460f      	mov	r7, r1
    f212:	f805 3b01 	strb.w	r3, [r5], #1
    f216:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f218:	1c5a      	adds	r2, r3, #1
    f21a:	930d      	str	r3, [sp, #52]	; 0x34
    f21c:	d007      	beq.n	f22e <_vfprintf_r+0x53e>
    f21e:	3b01      	subs	r3, #1
    f220:	9309      	str	r3, [sp, #36]	; 0x24
    f222:	2200      	movs	r2, #0
    f224:	2300      	movs	r3, #0
    f226:	f7f1 fb87 	bl	938 <__aeabi_dcmpeq>
    f22a:	2800      	cmp	r0, #0
    f22c:	d0d9      	beq.n	f1e2 <_vfprintf_r+0x4f2>
    f22e:	2200      	movs	r2, #0
    f230:	4630      	mov	r0, r6
    f232:	4639      	mov	r1, r7
    f234:	4b8f      	ldr	r3, [pc, #572]	; (f474 <_vfprintf_r+0x784>)
    f236:	f7f1 fba7 	bl	988 <__aeabi_dcmpgt>
    f23a:	b960      	cbnz	r0, f256 <_vfprintf_r+0x566>
    f23c:	2200      	movs	r2, #0
    f23e:	4630      	mov	r0, r6
    f240:	4639      	mov	r1, r7
    f242:	4b8c      	ldr	r3, [pc, #560]	; (f474 <_vfprintf_r+0x784>)
    f244:	f7f1 fb78 	bl	938 <__aeabi_dcmpeq>
    f248:	2800      	cmp	r0, #0
    f24a:	f000 817b 	beq.w	f544 <_vfprintf_r+0x854>
    f24e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    f250:	07da      	lsls	r2, r3, #31
    f252:	f140 8177 	bpl.w	f544 <_vfprintf_r+0x854>
    f256:	2030      	movs	r0, #48	; 0x30
    f258:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f25a:	9524      	str	r5, [sp, #144]	; 0x90
    f25c:	7bd9      	ldrb	r1, [r3, #15]
    f25e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    f260:	1e53      	subs	r3, r2, #1
    f262:	9324      	str	r3, [sp, #144]	; 0x90
    f264:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    f268:	428b      	cmp	r3, r1
    f26a:	f000 815a 	beq.w	f522 <_vfprintf_r+0x832>
    f26e:	2b39      	cmp	r3, #57	; 0x39
    f270:	bf0b      	itete	eq
    f272:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
    f274:	3301      	addne	r3, #1
    f276:	7a9b      	ldrbeq	r3, [r3, #10]
    f278:	b2db      	uxtbne	r3, r3
    f27a:	f802 3c01 	strb.w	r3, [r2, #-1]
    f27e:	eba5 0308 	sub.w	r3, r5, r8
    f282:	9309      	str	r3, [sp, #36]	; 0x24
    f284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f286:	9d20      	ldr	r5, [sp, #128]	; 0x80
    f288:	2b47      	cmp	r3, #71	; 0x47
    f28a:	f040 81ad 	bne.w	f5e8 <_vfprintf_r+0x8f8>
    f28e:	1ceb      	adds	r3, r5, #3
    f290:	db03      	blt.n	f29a <_vfprintf_r+0x5aa>
    f292:	9b07      	ldr	r3, [sp, #28]
    f294:	429d      	cmp	r5, r3
    f296:	f340 81d2 	ble.w	f63e <_vfprintf_r+0x94e>
    f29a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f29c:	3b02      	subs	r3, #2
    f29e:	930a      	str	r3, [sp, #40]	; 0x28
    f2a0:	990a      	ldr	r1, [sp, #40]	; 0x28
    f2a2:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    f2a6:	f021 0120 	bic.w	r1, r1, #32
    f2aa:	2941      	cmp	r1, #65	; 0x41
    f2ac:	bf08      	it	eq
    f2ae:	320f      	addeq	r2, #15
    f2b0:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
    f2b4:	bf06      	itte	eq
    f2b6:	b2d2      	uxtbeq	r2, r2
    f2b8:	2101      	moveq	r1, #1
    f2ba:	2100      	movne	r1, #0
    f2bc:	2b00      	cmp	r3, #0
    f2be:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
    f2c2:	bfb4      	ite	lt
    f2c4:	222d      	movlt	r2, #45	; 0x2d
    f2c6:	222b      	movge	r2, #43	; 0x2b
    f2c8:	9320      	str	r3, [sp, #128]	; 0x80
    f2ca:	bfb8      	it	lt
    f2cc:	f1c5 0301 	rsblt	r3, r5, #1
    f2d0:	2b09      	cmp	r3, #9
    f2d2:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
    f2d6:	f340 81a0 	ble.w	f61a <_vfprintf_r+0x92a>
    f2da:	260a      	movs	r6, #10
    f2dc:	f10d 0297 	add.w	r2, sp, #151	; 0x97
    f2e0:	fb93 f5f6 	sdiv	r5, r3, r6
    f2e4:	4611      	mov	r1, r2
    f2e6:	fb06 3015 	mls	r0, r6, r5, r3
    f2ea:	3030      	adds	r0, #48	; 0x30
    f2ec:	f801 0c01 	strb.w	r0, [r1, #-1]
    f2f0:	4618      	mov	r0, r3
    f2f2:	2863      	cmp	r0, #99	; 0x63
    f2f4:	462b      	mov	r3, r5
    f2f6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    f2fa:	dcf1      	bgt.n	f2e0 <_vfprintf_r+0x5f0>
    f2fc:	3330      	adds	r3, #48	; 0x30
    f2fe:	1e88      	subs	r0, r1, #2
    f300:	f802 3c01 	strb.w	r3, [r2, #-1]
    f304:	4603      	mov	r3, r0
    f306:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
    f30a:	f10d 0597 	add.w	r5, sp, #151	; 0x97
    f30e:	42ab      	cmp	r3, r5
    f310:	f0c0 817e 	bcc.w	f610 <_vfprintf_r+0x920>
    f314:	f10d 0299 	add.w	r2, sp, #153	; 0x99
    f318:	1a52      	subs	r2, r2, r1
    f31a:	42a8      	cmp	r0, r5
    f31c:	bf88      	it	hi
    f31e:	2200      	movhi	r2, #0
    f320:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
    f324:	441a      	add	r2, r3
    f326:	ab22      	add	r3, sp, #136	; 0x88
    f328:	1ad3      	subs	r3, r2, r3
    f32a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f32c:	9319      	str	r3, [sp, #100]	; 0x64
    f32e:	2a01      	cmp	r2, #1
    f330:	4413      	add	r3, r2
    f332:	9307      	str	r3, [sp, #28]
    f334:	dc02      	bgt.n	f33c <_vfprintf_r+0x64c>
    f336:	f01b 0f01 	tst.w	fp, #1
    f33a:	d003      	beq.n	f344 <_vfprintf_r+0x654>
    f33c:	9b07      	ldr	r3, [sp, #28]
    f33e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    f340:	4413      	add	r3, r2
    f342:	9307      	str	r3, [sp, #28]
    f344:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
    f348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f34c:	9315      	str	r3, [sp, #84]	; 0x54
    f34e:	2300      	movs	r3, #0
    f350:	461d      	mov	r5, r3
    f352:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    f356:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    f358:	b113      	cbz	r3, f360 <_vfprintf_r+0x670>
    f35a:	232d      	movs	r3, #45	; 0x2d
    f35c:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    f360:	2600      	movs	r6, #0
    f362:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
    f366:	9b07      	ldr	r3, [sp, #28]
    f368:	42b3      	cmp	r3, r6
    f36a:	bfb8      	it	lt
    f36c:	4633      	movlt	r3, r6
    f36e:	9315      	str	r3, [sp, #84]	; 0x54
    f370:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
    f374:	b113      	cbz	r3, f37c <_vfprintf_r+0x68c>
    f376:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f378:	3301      	adds	r3, #1
    f37a:	9315      	str	r3, [sp, #84]	; 0x54
    f37c:	f01b 0302 	ands.w	r3, fp, #2
    f380:	931b      	str	r3, [sp, #108]	; 0x6c
    f382:	bf1e      	ittt	ne
    f384:	9b15      	ldrne	r3, [sp, #84]	; 0x54
    f386:	3302      	addne	r3, #2
    f388:	9315      	strne	r3, [sp, #84]	; 0x54
    f38a:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
    f38e:	931c      	str	r3, [sp, #112]	; 0x70
    f390:	d11f      	bne.n	f3d2 <_vfprintf_r+0x6e2>
    f392:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f394:	9a15      	ldr	r2, [sp, #84]	; 0x54
    f396:	1a9f      	subs	r7, r3, r2
    f398:	2f00      	cmp	r7, #0
    f39a:	dd1a      	ble.n	f3d2 <_vfprintf_r+0x6e2>
    f39c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    f3a0:	4835      	ldr	r0, [pc, #212]	; (f478 <_vfprintf_r+0x788>)
    f3a2:	2f10      	cmp	r7, #16
    f3a4:	f103 0301 	add.w	r3, r3, #1
    f3a8:	f104 0108 	add.w	r1, r4, #8
    f3ac:	6020      	str	r0, [r4, #0]
    f3ae:	f300 829d 	bgt.w	f8ec <_vfprintf_r+0xbfc>
    f3b2:	6067      	str	r7, [r4, #4]
    f3b4:	2b07      	cmp	r3, #7
    f3b6:	4417      	add	r7, r2
    f3b8:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
    f3bc:	f340 82a9 	ble.w	f912 <_vfprintf_r+0xc22>
    f3c0:	4649      	mov	r1, r9
    f3c2:	4650      	mov	r0, sl
    f3c4:	aa26      	add	r2, sp, #152	; 0x98
    f3c6:	f008 f8e9 	bl	1759c <__sprint_r>
    f3ca:	2800      	cmp	r0, #0
    f3cc:	f040 85d2 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    f3d0:	ac29      	add	r4, sp, #164	; 0xa4
    f3d2:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
    f3d6:	b173      	cbz	r3, f3f6 <_vfprintf_r+0x706>
    f3d8:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
    f3dc:	6023      	str	r3, [r4, #0]
    f3de:	2301      	movs	r3, #1
    f3e0:	6063      	str	r3, [r4, #4]
    f3e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    f3e4:	3301      	adds	r3, #1
    f3e6:	9328      	str	r3, [sp, #160]	; 0xa0
    f3e8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    f3ea:	3301      	adds	r3, #1
    f3ec:	2b07      	cmp	r3, #7
    f3ee:	9327      	str	r3, [sp, #156]	; 0x9c
    f3f0:	f300 8291 	bgt.w	f916 <_vfprintf_r+0xc26>
    f3f4:	3408      	adds	r4, #8
    f3f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f3f8:	b16b      	cbz	r3, f416 <_vfprintf_r+0x726>
    f3fa:	ab1f      	add	r3, sp, #124	; 0x7c
    f3fc:	6023      	str	r3, [r4, #0]
    f3fe:	2302      	movs	r3, #2
    f400:	6063      	str	r3, [r4, #4]
    f402:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    f404:	3302      	adds	r3, #2
    f406:	9328      	str	r3, [sp, #160]	; 0xa0
    f408:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    f40a:	3301      	adds	r3, #1
    f40c:	2b07      	cmp	r3, #7
    f40e:	9327      	str	r3, [sp, #156]	; 0x9c
    f410:	f300 828b 	bgt.w	f92a <_vfprintf_r+0xc3a>
    f414:	3408      	adds	r4, #8
    f416:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    f418:	2b80      	cmp	r3, #128	; 0x80
    f41a:	d11f      	bne.n	f45c <_vfprintf_r+0x76c>
    f41c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f41e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    f420:	1a9f      	subs	r7, r3, r2
    f422:	2f00      	cmp	r7, #0
    f424:	dd1a      	ble.n	f45c <_vfprintf_r+0x76c>
    f426:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    f42a:	4814      	ldr	r0, [pc, #80]	; (f47c <_vfprintf_r+0x78c>)
    f42c:	2f10      	cmp	r7, #16
    f42e:	f103 0301 	add.w	r3, r3, #1
    f432:	f104 0108 	add.w	r1, r4, #8
    f436:	6020      	str	r0, [r4, #0]
    f438:	f300 8281 	bgt.w	f93e <_vfprintf_r+0xc4e>
    f43c:	6067      	str	r7, [r4, #4]
    f43e:	2b07      	cmp	r3, #7
    f440:	4417      	add	r7, r2
    f442:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
    f446:	f340 828d 	ble.w	f964 <_vfprintf_r+0xc74>
    f44a:	4649      	mov	r1, r9
    f44c:	4650      	mov	r0, sl
    f44e:	aa26      	add	r2, sp, #152	; 0x98
    f450:	f008 f8a4 	bl	1759c <__sprint_r>
    f454:	2800      	cmp	r0, #0
    f456:	f040 858d 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    f45a:	ac29      	add	r4, sp, #164	; 0xa4
    f45c:	9b07      	ldr	r3, [sp, #28]
    f45e:	1af6      	subs	r6, r6, r3
    f460:	2e00      	cmp	r6, #0
    f462:	dd27      	ble.n	f4b4 <_vfprintf_r+0x7c4>
    f464:	4f05      	ldr	r7, [pc, #20]	; (f47c <_vfprintf_r+0x78c>)
    f466:	e00b      	b.n	f480 <_vfprintf_r+0x790>
    f468:	00018c15 	.word	0x00018c15
    f46c:	00018c04 	.word	0x00018c04
    f470:	40300000 	.word	0x40300000
    f474:	3fe00000 	.word	0x3fe00000
    f478:	00018c46 	.word	0x00018c46
    f47c:	00018c56 	.word	0x00018c56
    f480:	2e10      	cmp	r6, #16
    f482:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    f486:	f104 0108 	add.w	r1, r4, #8
    f48a:	f103 0301 	add.w	r3, r3, #1
    f48e:	6027      	str	r7, [r4, #0]
    f490:	f300 826a 	bgt.w	f968 <_vfprintf_r+0xc78>
    f494:	6066      	str	r6, [r4, #4]
    f496:	2b07      	cmp	r3, #7
    f498:	4416      	add	r6, r2
    f49a:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    f49e:	f340 8276 	ble.w	f98e <_vfprintf_r+0xc9e>
    f4a2:	4649      	mov	r1, r9
    f4a4:	4650      	mov	r0, sl
    f4a6:	aa26      	add	r2, sp, #152	; 0x98
    f4a8:	f008 f878 	bl	1759c <__sprint_r>
    f4ac:	2800      	cmp	r0, #0
    f4ae:	f040 8561 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    f4b2:	ac29      	add	r4, sp, #164	; 0xa4
    f4b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
    f4b8:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    f4ba:	f040 826f 	bne.w	f99c <_vfprintf_r+0xcac>
    f4be:	9b07      	ldr	r3, [sp, #28]
    f4c0:	f8c4 8000 	str.w	r8, [r4]
    f4c4:	441e      	add	r6, r3
    f4c6:	6063      	str	r3, [r4, #4]
    f4c8:	9628      	str	r6, [sp, #160]	; 0xa0
    f4ca:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    f4cc:	3301      	adds	r3, #1
    f4ce:	2b07      	cmp	r3, #7
    f4d0:	9327      	str	r3, [sp, #156]	; 0x9c
    f4d2:	f300 82a8 	bgt.w	fa26 <_vfprintf_r+0xd36>
    f4d6:	3408      	adds	r4, #8
    f4d8:	f01b 0f04 	tst.w	fp, #4
    f4dc:	f040 852c 	bne.w	ff38 <__kernel_ram_size+0x180>
    f4e0:	e9dd 2313 	ldrd	r2, r3, [sp, #76]	; 0x4c
    f4e4:	9915      	ldr	r1, [sp, #84]	; 0x54
    f4e6:	428a      	cmp	r2, r1
    f4e8:	bfac      	ite	ge
    f4ea:	189b      	addge	r3, r3, r2
    f4ec:	185b      	addlt	r3, r3, r1
    f4ee:	9314      	str	r3, [sp, #80]	; 0x50
    f4f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    f4f2:	b13b      	cbz	r3, f504 <_vfprintf_r+0x814>
    f4f4:	4649      	mov	r1, r9
    f4f6:	4650      	mov	r0, sl
    f4f8:	aa26      	add	r2, sp, #152	; 0x98
    f4fa:	f008 f84f 	bl	1759c <__sprint_r>
    f4fe:	2800      	cmp	r0, #0
    f500:	f040 8538 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    f504:	2300      	movs	r3, #0
    f506:	9327      	str	r3, [sp, #156]	; 0x9c
    f508:	9b08      	ldr	r3, [sp, #32]
    f50a:	2b00      	cmp	r3, #0
    f50c:	f040 854e 	bne.w	ffac <__kernel_ram_size+0x1f4>
    f510:	ac29      	add	r4, sp, #164	; 0xa4
    f512:	e0ed      	b.n	f6f0 <_vfprintf_r+0xa00>
    f514:	9008      	str	r0, [sp, #32]
    f516:	e636      	b.n	f186 <_vfprintf_r+0x496>
    f518:	2306      	movs	r3, #6
    f51a:	9008      	str	r0, [sp, #32]
    f51c:	e624      	b.n	f168 <_vfprintf_r+0x478>
    f51e:	9008      	str	r0, [sp, #32]
    f520:	e631      	b.n	f186 <_vfprintf_r+0x496>
    f522:	f802 0c01 	strb.w	r0, [r2, #-1]
    f526:	e69a      	b.n	f25e <_vfprintf_r+0x56e>
    f528:	f803 0b01 	strb.w	r0, [r3], #1
    f52c:	1aca      	subs	r2, r1, r3
    f52e:	2a00      	cmp	r2, #0
    f530:	dafa      	bge.n	f528 <_vfprintf_r+0x838>
    f532:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f536:	3201      	adds	r2, #1
    f538:	f103 0301 	add.w	r3, r3, #1
    f53c:	bfb8      	it	lt
    f53e:	2300      	movlt	r3, #0
    f540:	441d      	add	r5, r3
    f542:	e69c      	b.n	f27e <_vfprintf_r+0x58e>
    f544:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f546:	462b      	mov	r3, r5
    f548:	2030      	movs	r0, #48	; 0x30
    f54a:	18a9      	adds	r1, r5, r2
    f54c:	e7ee      	b.n	f52c <_vfprintf_r+0x83c>
    f54e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f550:	2b46      	cmp	r3, #70	; 0x46
    f552:	d005      	beq.n	f560 <_vfprintf_r+0x870>
    f554:	2b45      	cmp	r3, #69	; 0x45
    f556:	d11b      	bne.n	f590 <_vfprintf_r+0x8a0>
    f558:	9b07      	ldr	r3, [sp, #28]
    f55a:	1c5e      	adds	r6, r3, #1
    f55c:	2302      	movs	r3, #2
    f55e:	e001      	b.n	f564 <_vfprintf_r+0x874>
    f560:	2303      	movs	r3, #3
    f562:	9e07      	ldr	r6, [sp, #28]
    f564:	aa24      	add	r2, sp, #144	; 0x90
    f566:	9204      	str	r2, [sp, #16]
    f568:	aa21      	add	r2, sp, #132	; 0x84
    f56a:	9203      	str	r2, [sp, #12]
    f56c:	aa20      	add	r2, sp, #128	; 0x80
    f56e:	e9cd 6201 	strd	r6, r2, [sp, #4]
    f572:	9300      	str	r3, [sp, #0]
    f574:	463a      	mov	r2, r7
    f576:	462b      	mov	r3, r5
    f578:	4650      	mov	r0, sl
    f57a:	f7f3 f91d 	bl	27b8 <_dtoa_r>
    f57e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f580:	4680      	mov	r8, r0
    f582:	2b47      	cmp	r3, #71	; 0x47
    f584:	d106      	bne.n	f594 <_vfprintf_r+0x8a4>
    f586:	f01b 0f01 	tst.w	fp, #1
    f58a:	d103      	bne.n	f594 <_vfprintf_r+0x8a4>
    f58c:	9d24      	ldr	r5, [sp, #144]	; 0x90
    f58e:	e676      	b.n	f27e <_vfprintf_r+0x58e>
    f590:	9e07      	ldr	r6, [sp, #28]
    f592:	e7e3      	b.n	f55c <_vfprintf_r+0x86c>
    f594:	eb08 0306 	add.w	r3, r8, r6
    f598:	9309      	str	r3, [sp, #36]	; 0x24
    f59a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f59c:	2b46      	cmp	r3, #70	; 0x46
    f59e:	d111      	bne.n	f5c4 <_vfprintf_r+0x8d4>
    f5a0:	f898 3000 	ldrb.w	r3, [r8]
    f5a4:	2b30      	cmp	r3, #48	; 0x30
    f5a6:	d109      	bne.n	f5bc <_vfprintf_r+0x8cc>
    f5a8:	2200      	movs	r2, #0
    f5aa:	2300      	movs	r3, #0
    f5ac:	4638      	mov	r0, r7
    f5ae:	4629      	mov	r1, r5
    f5b0:	f7f1 f9c2 	bl	938 <__aeabi_dcmpeq>
    f5b4:	b910      	cbnz	r0, f5bc <_vfprintf_r+0x8cc>
    f5b6:	f1c6 0601 	rsb	r6, r6, #1
    f5ba:	9620      	str	r6, [sp, #128]	; 0x80
    f5bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f5be:	9b20      	ldr	r3, [sp, #128]	; 0x80
    f5c0:	441a      	add	r2, r3
    f5c2:	9209      	str	r2, [sp, #36]	; 0x24
    f5c4:	2200      	movs	r2, #0
    f5c6:	2300      	movs	r3, #0
    f5c8:	4638      	mov	r0, r7
    f5ca:	4629      	mov	r1, r5
    f5cc:	f7f1 f9b4 	bl	938 <__aeabi_dcmpeq>
    f5d0:	b108      	cbz	r0, f5d6 <_vfprintf_r+0x8e6>
    f5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f5d4:	9324      	str	r3, [sp, #144]	; 0x90
    f5d6:	2230      	movs	r2, #48	; 0x30
    f5d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    f5da:	9909      	ldr	r1, [sp, #36]	; 0x24
    f5dc:	4299      	cmp	r1, r3
    f5de:	d9d5      	bls.n	f58c <_vfprintf_r+0x89c>
    f5e0:	1c59      	adds	r1, r3, #1
    f5e2:	9124      	str	r1, [sp, #144]	; 0x90
    f5e4:	701a      	strb	r2, [r3, #0]
    f5e6:	e7f7      	b.n	f5d8 <_vfprintf_r+0x8e8>
    f5e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f5ea:	2b46      	cmp	r3, #70	; 0x46
    f5ec:	f47f ae58 	bne.w	f2a0 <_vfprintf_r+0x5b0>
    f5f0:	9a07      	ldr	r2, [sp, #28]
    f5f2:	f00b 0301 	and.w	r3, fp, #1
    f5f6:	2d00      	cmp	r5, #0
    f5f8:	ea43 0302 	orr.w	r3, r3, r2
    f5fc:	dd1a      	ble.n	f634 <_vfprintf_r+0x944>
    f5fe:	2b00      	cmp	r3, #0
    f600:	d034      	beq.n	f66c <_vfprintf_r+0x97c>
    f602:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f604:	18eb      	adds	r3, r5, r3
    f606:	441a      	add	r2, r3
    f608:	9207      	str	r2, [sp, #28]
    f60a:	2366      	movs	r3, #102	; 0x66
    f60c:	930a      	str	r3, [sp, #40]	; 0x28
    f60e:	e033      	b.n	f678 <_vfprintf_r+0x988>
    f610:	f813 6b01 	ldrb.w	r6, [r3], #1
    f614:	f802 6b01 	strb.w	r6, [r2], #1
    f618:	e679      	b.n	f30e <_vfprintf_r+0x61e>
    f61a:	b941      	cbnz	r1, f62e <_vfprintf_r+0x93e>
    f61c:	2230      	movs	r2, #48	; 0x30
    f61e:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
    f622:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
    f626:	3330      	adds	r3, #48	; 0x30
    f628:	f802 3b01 	strb.w	r3, [r2], #1
    f62c:	e67b      	b.n	f326 <_vfprintf_r+0x636>
    f62e:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
    f632:	e7f8      	b.n	f626 <_vfprintf_r+0x936>
    f634:	b1e3      	cbz	r3, f670 <_vfprintf_r+0x980>
    f636:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f638:	9a07      	ldr	r2, [sp, #28]
    f63a:	3301      	adds	r3, #1
    f63c:	e7e3      	b.n	f606 <_vfprintf_r+0x916>
    f63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f640:	429d      	cmp	r5, r3
    f642:	db07      	blt.n	f654 <_vfprintf_r+0x964>
    f644:	f01b 0f01 	tst.w	fp, #1
    f648:	d02d      	beq.n	f6a6 <_vfprintf_r+0x9b6>
    f64a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f64c:	18eb      	adds	r3, r5, r3
    f64e:	9307      	str	r3, [sp, #28]
    f650:	2367      	movs	r3, #103	; 0x67
    f652:	e7db      	b.n	f60c <_vfprintf_r+0x91c>
    f654:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f656:	9a12      	ldr	r2, [sp, #72]	; 0x48
    f658:	2d00      	cmp	r5, #0
    f65a:	4413      	add	r3, r2
    f65c:	9307      	str	r3, [sp, #28]
    f65e:	dcf7      	bgt.n	f650 <_vfprintf_r+0x960>
    f660:	9a07      	ldr	r2, [sp, #28]
    f662:	f1c5 0301 	rsb	r3, r5, #1
    f666:	441a      	add	r2, r3
    f668:	9207      	str	r2, [sp, #28]
    f66a:	e7f1      	b.n	f650 <_vfprintf_r+0x960>
    f66c:	9507      	str	r5, [sp, #28]
    f66e:	e7cc      	b.n	f60a <_vfprintf_r+0x91a>
    f670:	2366      	movs	r3, #102	; 0x66
    f672:	930a      	str	r3, [sp, #40]	; 0x28
    f674:	2301      	movs	r3, #1
    f676:	9307      	str	r3, [sp, #28]
    f678:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
    f67c:	930d      	str	r3, [sp, #52]	; 0x34
    f67e:	d025      	beq.n	f6cc <_vfprintf_r+0x9dc>
    f680:	2300      	movs	r3, #0
    f682:	2d00      	cmp	r5, #0
    f684:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    f688:	f77f ae65 	ble.w	f356 <_vfprintf_r+0x666>
    f68c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f68e:	781b      	ldrb	r3, [r3, #0]
    f690:	2bff      	cmp	r3, #255	; 0xff
    f692:	d10a      	bne.n	f6aa <_vfprintf_r+0x9ba>
    f694:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    f698:	9916      	ldr	r1, [sp, #88]	; 0x58
    f69a:	4413      	add	r3, r2
    f69c:	9a07      	ldr	r2, [sp, #28]
    f69e:	fb01 2303 	mla	r3, r1, r3, r2
    f6a2:	9307      	str	r3, [sp, #28]
    f6a4:	e657      	b.n	f356 <_vfprintf_r+0x666>
    f6a6:	9507      	str	r5, [sp, #28]
    f6a8:	e7d2      	b.n	f650 <_vfprintf_r+0x960>
    f6aa:	42ab      	cmp	r3, r5
    f6ac:	daf2      	bge.n	f694 <_vfprintf_r+0x9a4>
    f6ae:	1aed      	subs	r5, r5, r3
    f6b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f6b2:	785b      	ldrb	r3, [r3, #1]
    f6b4:	b133      	cbz	r3, f6c4 <_vfprintf_r+0x9d4>
    f6b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f6b8:	3301      	adds	r3, #1
    f6ba:	930d      	str	r3, [sp, #52]	; 0x34
    f6bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f6be:	3301      	adds	r3, #1
    f6c0:	930e      	str	r3, [sp, #56]	; 0x38
    f6c2:	e7e3      	b.n	f68c <_vfprintf_r+0x99c>
    f6c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f6c6:	3301      	adds	r3, #1
    f6c8:	930c      	str	r3, [sp, #48]	; 0x30
    f6ca:	e7df      	b.n	f68c <_vfprintf_r+0x99c>
    f6cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f6ce:	930c      	str	r3, [sp, #48]	; 0x30
    f6d0:	e641      	b.n	f356 <_vfprintf_r+0x666>
    f6d2:	4632      	mov	r2, r6
    f6d4:	f852 3b04 	ldr.w	r3, [r2], #4
    f6d8:	f01b 0f10 	tst.w	fp, #16
    f6dc:	920b      	str	r2, [sp, #44]	; 0x2c
    f6de:	d002      	beq.n	f6e6 <_vfprintf_r+0x9f6>
    f6e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    f6e2:	601a      	str	r2, [r3, #0]
    f6e4:	e004      	b.n	f6f0 <_vfprintf_r+0xa00>
    f6e6:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f6ea:	d006      	beq.n	f6fa <_vfprintf_r+0xa0a>
    f6ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
    f6ee:	801a      	strh	r2, [r3, #0]
    f6f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    f6f2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    f6f6:	f7ff bb60 	b.w	edba <_vfprintf_r+0xca>
    f6fa:	f41b 7f00 	tst.w	fp, #512	; 0x200
    f6fe:	d0ef      	beq.n	f6e0 <_vfprintf_r+0x9f0>
    f700:	9a14      	ldr	r2, [sp, #80]	; 0x50
    f702:	701a      	strb	r2, [r3, #0]
    f704:	e7f4      	b.n	f6f0 <_vfprintf_r+0xa00>
    f706:	f04b 0b10 	orr.w	fp, fp, #16
    f70a:	1d33      	adds	r3, r6, #4
    f70c:	f01b 0f10 	tst.w	fp, #16
    f710:	930b      	str	r3, [sp, #44]	; 0x2c
    f712:	d001      	beq.n	f718 <_vfprintf_r+0xa28>
    f714:	6836      	ldr	r6, [r6, #0]
    f716:	e003      	b.n	f720 <_vfprintf_r+0xa30>
    f718:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f71c:	d016      	beq.n	f74c <_vfprintf_r+0xa5c>
    f71e:	8836      	ldrh	r6, [r6, #0]
    f720:	2300      	movs	r3, #0
    f722:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
    f726:	2200      	movs	r2, #0
    f728:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
    f72c:	9a07      	ldr	r2, [sp, #28]
    f72e:	1c55      	adds	r5, r2, #1
    f730:	f000 8451 	beq.w	ffd6 <__kernel_ram_size+0x21e>
    f734:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
    f738:	2e00      	cmp	r6, #0
    f73a:	f040 8450 	bne.w	ffde <__kernel_ram_size+0x226>
    f73e:	2a00      	cmp	r2, #0
    f740:	f000 80ba 	beq.w	f8b8 <_vfprintf_r+0xbc8>
    f744:	2b01      	cmp	r3, #1
    f746:	f040 844d 	bne.w	ffe4 <__kernel_ram_size+0x22c>
    f74a:	e071      	b.n	f830 <_vfprintf_r+0xb40>
    f74c:	f41b 7f00 	tst.w	fp, #512	; 0x200
    f750:	d0e0      	beq.n	f714 <_vfprintf_r+0xa24>
    f752:	7836      	ldrb	r6, [r6, #0]
    f754:	e7e4      	b.n	f720 <_vfprintf_r+0xa30>
    f756:	4633      	mov	r3, r6
    f758:	f853 6b04 	ldr.w	r6, [r3], #4
    f75c:	2278      	movs	r2, #120	; 0x78
    f75e:	930b      	str	r3, [sp, #44]	; 0x2c
    f760:	2330      	movs	r3, #48	; 0x30
    f762:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    f766:	4b8b      	ldr	r3, [pc, #556]	; (f994 <_vfprintf_r+0xca4>)
    f768:	f04b 0b02 	orr.w	fp, fp, #2
    f76c:	931a      	str	r3, [sp, #104]	; 0x68
    f76e:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
    f772:	2302      	movs	r3, #2
    f774:	920a      	str	r2, [sp, #40]	; 0x28
    f776:	e7d6      	b.n	f726 <_vfprintf_r+0xa36>
    f778:	4633      	mov	r3, r6
    f77a:	2500      	movs	r5, #0
    f77c:	f853 8b04 	ldr.w	r8, [r3], #4
    f780:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
    f784:	930b      	str	r3, [sp, #44]	; 0x2c
    f786:	9b07      	ldr	r3, [sp, #28]
    f788:	1c5e      	adds	r6, r3, #1
    f78a:	d010      	beq.n	f7ae <_vfprintf_r+0xabe>
    f78c:	461a      	mov	r2, r3
    f78e:	4629      	mov	r1, r5
    f790:	4640      	mov	r0, r8
    f792:	f007 fa55 	bl	16c40 <memchr>
    f796:	9008      	str	r0, [sp, #32]
    f798:	2800      	cmp	r0, #0
    f79a:	f000 80a4 	beq.w	f8e6 <_vfprintf_r+0xbf6>
    f79e:	eba0 0308 	sub.w	r3, r0, r8
    f7a2:	462e      	mov	r6, r5
    f7a4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    f7a8:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
    f7ac:	e5db      	b.n	f366 <_vfprintf_r+0x676>
    f7ae:	4640      	mov	r0, r8
    f7b0:	f7f1 fb5e 	bl	e70 <strlen>
    f7b4:	e9cd 0507 	strd	r0, r5, [sp, #28]
    f7b8:	e47e      	b.n	f0b8 <_vfprintf_r+0x3c8>
    f7ba:	f04b 0b10 	orr.w	fp, fp, #16
    f7be:	1d33      	adds	r3, r6, #4
    f7c0:	f01b 0f10 	tst.w	fp, #16
    f7c4:	930b      	str	r3, [sp, #44]	; 0x2c
    f7c6:	d001      	beq.n	f7cc <_vfprintf_r+0xadc>
    f7c8:	6836      	ldr	r6, [r6, #0]
    f7ca:	e003      	b.n	f7d4 <_vfprintf_r+0xae4>
    f7cc:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f7d0:	d002      	beq.n	f7d8 <_vfprintf_r+0xae8>
    f7d2:	8836      	ldrh	r6, [r6, #0]
    f7d4:	2301      	movs	r3, #1
    f7d6:	e7a6      	b.n	f726 <_vfprintf_r+0xa36>
    f7d8:	f41b 7f00 	tst.w	fp, #512	; 0x200
    f7dc:	d0f4      	beq.n	f7c8 <_vfprintf_r+0xad8>
    f7de:	7836      	ldrb	r6, [r6, #0]
    f7e0:	e7f8      	b.n	f7d4 <_vfprintf_r+0xae4>
    f7e2:	4b6d      	ldr	r3, [pc, #436]	; (f998 <_vfprintf_r+0xca8>)
    f7e4:	931a      	str	r3, [sp, #104]	; 0x68
    f7e6:	f01b 0f10 	tst.w	fp, #16
    f7ea:	f106 0304 	add.w	r3, r6, #4
    f7ee:	930b      	str	r3, [sp, #44]	; 0x2c
    f7f0:	d003      	beq.n	f7fa <_vfprintf_r+0xb0a>
    f7f2:	6836      	ldr	r6, [r6, #0]
    f7f4:	e005      	b.n	f802 <_vfprintf_r+0xb12>
    f7f6:	4b67      	ldr	r3, [pc, #412]	; (f994 <_vfprintf_r+0xca4>)
    f7f8:	e7f4      	b.n	f7e4 <_vfprintf_r+0xaf4>
    f7fa:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f7fe:	d010      	beq.n	f822 <_vfprintf_r+0xb32>
    f800:	8836      	ldrh	r6, [r6, #0]
    f802:	f01b 0f01 	tst.w	fp, #1
    f806:	d008      	beq.n	f81a <_vfprintf_r+0xb2a>
    f808:	b13e      	cbz	r6, f81a <_vfprintf_r+0xb2a>
    f80a:	2330      	movs	r3, #48	; 0x30
    f80c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    f810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f812:	f04b 0b02 	orr.w	fp, fp, #2
    f816:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
    f81a:	2302      	movs	r3, #2
    f81c:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
    f820:	e781      	b.n	f726 <_vfprintf_r+0xa36>
    f822:	f41b 7f00 	tst.w	fp, #512	; 0x200
    f826:	d0e4      	beq.n	f7f2 <_vfprintf_r+0xb02>
    f828:	7836      	ldrb	r6, [r6, #0]
    f82a:	e7ea      	b.n	f802 <_vfprintf_r+0xb12>
    f82c:	2e09      	cmp	r6, #9
    f82e:	d805      	bhi.n	f83c <_vfprintf_r+0xb4c>
    f830:	3630      	adds	r6, #48	; 0x30
    f832:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
    f836:	f20d 1847 	addw	r8, sp, #327	; 0x147
    f83a:	e3e9      	b.n	10010 <__kernel_ram_size+0x258>
    f83c:	2300      	movs	r3, #0
    f83e:	f04f 0b0a 	mov.w	fp, #10
    f842:	9309      	str	r3, [sp, #36]	; 0x24
    f844:	aa52      	add	r2, sp, #328	; 0x148
    f846:	f407 6580 	and.w	r5, r7, #1024	; 0x400
    f84a:	fbb6 f3fb 	udiv	r3, r6, fp
    f84e:	fb0b 6313 	mls	r3, fp, r3, r6
    f852:	3330      	adds	r3, #48	; 0x30
    f854:	f802 3c01 	strb.w	r3, [r2, #-1]
    f858:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f85a:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
    f85e:	3301      	adds	r3, #1
    f860:	9309      	str	r3, [sp, #36]	; 0x24
    f862:	b1c5      	cbz	r5, f896 <_vfprintf_r+0xba6>
    f864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f866:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f868:	781b      	ldrb	r3, [r3, #0]
    f86a:	429a      	cmp	r2, r3
    f86c:	d113      	bne.n	f896 <_vfprintf_r+0xba6>
    f86e:	2aff      	cmp	r2, #255	; 0xff
    f870:	d011      	beq.n	f896 <_vfprintf_r+0xba6>
    f872:	2e09      	cmp	r6, #9
    f874:	d90f      	bls.n	f896 <_vfprintf_r+0xba6>
    f876:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f878:	9918      	ldr	r1, [sp, #96]	; 0x60
    f87a:	eba8 0803 	sub.w	r8, r8, r3
    f87e:	461a      	mov	r2, r3
    f880:	4640      	mov	r0, r8
    f882:	f007 fdfd 	bl	17480 <strncpy>
    f886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f888:	785b      	ldrb	r3, [r3, #1]
    f88a:	b11b      	cbz	r3, f894 <_vfprintf_r+0xba4>
    f88c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f88e:	3301      	adds	r3, #1
    f890:	930e      	str	r3, [sp, #56]	; 0x38
    f892:	2300      	movs	r3, #0
    f894:	9309      	str	r3, [sp, #36]	; 0x24
    f896:	2e09      	cmp	r6, #9
    f898:	fbb6 f3fb 	udiv	r3, r6, fp
    f89c:	f240 83b8 	bls.w	10010 <__kernel_ram_size+0x258>
    f8a0:	461e      	mov	r6, r3
    f8a2:	4642      	mov	r2, r8
    f8a4:	e7d1      	b.n	f84a <_vfprintf_r+0xb5a>
    f8a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    f8a8:	f006 030f 	and.w	r3, r6, #15
    f8ac:	5cd3      	ldrb	r3, [r2, r3]
    f8ae:	0936      	lsrs	r6, r6, #4
    f8b0:	f808 3d01 	strb.w	r3, [r8, #-1]!
    f8b4:	d1f7      	bne.n	f8a6 <_vfprintf_r+0xbb6>
    f8b6:	e3ab      	b.n	10010 <__kernel_ram_size+0x258>
    f8b8:	b933      	cbnz	r3, f8c8 <_vfprintf_r+0xbd8>
    f8ba:	f01b 0f01 	tst.w	fp, #1
    f8be:	d003      	beq.n	f8c8 <_vfprintf_r+0xbd8>
    f8c0:	2330      	movs	r3, #48	; 0x30
    f8c2:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
    f8c6:	e7b6      	b.n	f836 <_vfprintf_r+0xb46>
    f8c8:	f50d 78a4 	add.w	r8, sp, #328	; 0x148
    f8cc:	e3a0      	b.n	10010 <__kernel_ram_size+0x258>
    f8ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8d0:	2b00      	cmp	r3, #0
    f8d2:	f000 8371 	beq.w	ffb8 <__kernel_ram_size+0x200>
    f8d6:	2000      	movs	r0, #0
    f8d8:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    f8dc:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    f8e0:	960b      	str	r6, [sp, #44]	; 0x2c
    f8e2:	f7ff bb90 	b.w	f006 <_vfprintf_r+0x316>
    f8e6:	9e08      	ldr	r6, [sp, #32]
    f8e8:	f7ff bbe7 	b.w	f0ba <_vfprintf_r+0x3ca>
    f8ec:	2010      	movs	r0, #16
    f8ee:	2b07      	cmp	r3, #7
    f8f0:	4402      	add	r2, r0
    f8f2:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    f8f6:	6060      	str	r0, [r4, #4]
    f8f8:	dd08      	ble.n	f90c <_vfprintf_r+0xc1c>
    f8fa:	4649      	mov	r1, r9
    f8fc:	4650      	mov	r0, sl
    f8fe:	aa26      	add	r2, sp, #152	; 0x98
    f900:	f007 fe4c 	bl	1759c <__sprint_r>
    f904:	2800      	cmp	r0, #0
    f906:	f040 8335 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    f90a:	a929      	add	r1, sp, #164	; 0xa4
    f90c:	460c      	mov	r4, r1
    f90e:	3f10      	subs	r7, #16
    f910:	e544      	b.n	f39c <_vfprintf_r+0x6ac>
    f912:	460c      	mov	r4, r1
    f914:	e55d      	b.n	f3d2 <_vfprintf_r+0x6e2>
    f916:	4649      	mov	r1, r9
    f918:	4650      	mov	r0, sl
    f91a:	aa26      	add	r2, sp, #152	; 0x98
    f91c:	f007 fe3e 	bl	1759c <__sprint_r>
    f920:	2800      	cmp	r0, #0
    f922:	f040 8327 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    f926:	ac29      	add	r4, sp, #164	; 0xa4
    f928:	e565      	b.n	f3f6 <_vfprintf_r+0x706>
    f92a:	4649      	mov	r1, r9
    f92c:	4650      	mov	r0, sl
    f92e:	aa26      	add	r2, sp, #152	; 0x98
    f930:	f007 fe34 	bl	1759c <__sprint_r>
    f934:	2800      	cmp	r0, #0
    f936:	f040 831d 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    f93a:	ac29      	add	r4, sp, #164	; 0xa4
    f93c:	e56b      	b.n	f416 <_vfprintf_r+0x726>
    f93e:	2010      	movs	r0, #16
    f940:	2b07      	cmp	r3, #7
    f942:	4402      	add	r2, r0
    f944:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    f948:	6060      	str	r0, [r4, #4]
    f94a:	dd08      	ble.n	f95e <_vfprintf_r+0xc6e>
    f94c:	4649      	mov	r1, r9
    f94e:	4650      	mov	r0, sl
    f950:	aa26      	add	r2, sp, #152	; 0x98
    f952:	f007 fe23 	bl	1759c <__sprint_r>
    f956:	2800      	cmp	r0, #0
    f958:	f040 830c 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    f95c:	a929      	add	r1, sp, #164	; 0xa4
    f95e:	460c      	mov	r4, r1
    f960:	3f10      	subs	r7, #16
    f962:	e560      	b.n	f426 <_vfprintf_r+0x736>
    f964:	460c      	mov	r4, r1
    f966:	e579      	b.n	f45c <_vfprintf_r+0x76c>
    f968:	2010      	movs	r0, #16
    f96a:	2b07      	cmp	r3, #7
    f96c:	4402      	add	r2, r0
    f96e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    f972:	6060      	str	r0, [r4, #4]
    f974:	dd08      	ble.n	f988 <_vfprintf_r+0xc98>
    f976:	4649      	mov	r1, r9
    f978:	4650      	mov	r0, sl
    f97a:	aa26      	add	r2, sp, #152	; 0x98
    f97c:	f007 fe0e 	bl	1759c <__sprint_r>
    f980:	2800      	cmp	r0, #0
    f982:	f040 82f7 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    f986:	a929      	add	r1, sp, #164	; 0xa4
    f988:	460c      	mov	r4, r1
    f98a:	3e10      	subs	r6, #16
    f98c:	e578      	b.n	f480 <_vfprintf_r+0x790>
    f98e:	460c      	mov	r4, r1
    f990:	e590      	b.n	f4b4 <_vfprintf_r+0x7c4>
    f992:	bf00      	nop
    f994:	00018c04 	.word	0x00018c04
    f998:	00018c15 	.word	0x00018c15
    f99c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f99e:	2b65      	cmp	r3, #101	; 0x65
    f9a0:	f340 8230 	ble.w	fe04 <__kernel_ram_size+0x4c>
    f9a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    f9a8:	2200      	movs	r2, #0
    f9aa:	2300      	movs	r3, #0
    f9ac:	f7f0 ffc4 	bl	938 <__aeabi_dcmpeq>
    f9b0:	2800      	cmp	r0, #0
    f9b2:	d068      	beq.n	fa86 <_vfprintf_r+0xd96>
    f9b4:	4b6d      	ldr	r3, [pc, #436]	; (fb6c <_vfprintf_r+0xe7c>)
    f9b6:	6023      	str	r3, [r4, #0]
    f9b8:	2301      	movs	r3, #1
    f9ba:	441e      	add	r6, r3
    f9bc:	6063      	str	r3, [r4, #4]
    f9be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    f9c0:	9628      	str	r6, [sp, #160]	; 0xa0
    f9c2:	3301      	adds	r3, #1
    f9c4:	2b07      	cmp	r3, #7
    f9c6:	9327      	str	r3, [sp, #156]	; 0x9c
    f9c8:	dc37      	bgt.n	fa3a <_vfprintf_r+0xd4a>
    f9ca:	3408      	adds	r4, #8
    f9cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
    f9ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f9d0:	4293      	cmp	r3, r2
    f9d2:	db03      	blt.n	f9dc <_vfprintf_r+0xcec>
    f9d4:	f01b 0f01 	tst.w	fp, #1
    f9d8:	f43f ad7e 	beq.w	f4d8 <_vfprintf_r+0x7e8>
    f9dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f9de:	9a12      	ldr	r2, [sp, #72]	; 0x48
    f9e0:	6023      	str	r3, [r4, #0]
    f9e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f9e4:	6063      	str	r3, [r4, #4]
    f9e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    f9e8:	4413      	add	r3, r2
    f9ea:	9328      	str	r3, [sp, #160]	; 0xa0
    f9ec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    f9ee:	3301      	adds	r3, #1
    f9f0:	2b07      	cmp	r3, #7
    f9f2:	9327      	str	r3, [sp, #156]	; 0x9c
    f9f4:	dc2b      	bgt.n	fa4e <_vfprintf_r+0xd5e>
    f9f6:	3408      	adds	r4, #8
    f9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f9fa:	1e5d      	subs	r5, r3, #1
    f9fc:	2d00      	cmp	r5, #0
    f9fe:	f77f ad6b 	ble.w	f4d8 <_vfprintf_r+0x7e8>
    fa02:	2710      	movs	r7, #16
    fa04:	4e5a      	ldr	r6, [pc, #360]	; (fb70 <_vfprintf_r+0xe80>)
    fa06:	2d10      	cmp	r5, #16
    fa08:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    fa0c:	f104 0108 	add.w	r1, r4, #8
    fa10:	f103 0301 	add.w	r3, r3, #1
    fa14:	6026      	str	r6, [r4, #0]
    fa16:	dc24      	bgt.n	fa62 <_vfprintf_r+0xd72>
    fa18:	6065      	str	r5, [r4, #4]
    fa1a:	2b07      	cmp	r3, #7
    fa1c:	4415      	add	r5, r2
    fa1e:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
    fa22:	f340 8286 	ble.w	ff32 <__kernel_ram_size+0x17a>
    fa26:	4649      	mov	r1, r9
    fa28:	4650      	mov	r0, sl
    fa2a:	aa26      	add	r2, sp, #152	; 0x98
    fa2c:	f007 fdb6 	bl	1759c <__sprint_r>
    fa30:	2800      	cmp	r0, #0
    fa32:	f040 829f 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fa36:	ac29      	add	r4, sp, #164	; 0xa4
    fa38:	e54e      	b.n	f4d8 <_vfprintf_r+0x7e8>
    fa3a:	4649      	mov	r1, r9
    fa3c:	4650      	mov	r0, sl
    fa3e:	aa26      	add	r2, sp, #152	; 0x98
    fa40:	f007 fdac 	bl	1759c <__sprint_r>
    fa44:	2800      	cmp	r0, #0
    fa46:	f040 8295 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fa4a:	ac29      	add	r4, sp, #164	; 0xa4
    fa4c:	e7be      	b.n	f9cc <_vfprintf_r+0xcdc>
    fa4e:	4649      	mov	r1, r9
    fa50:	4650      	mov	r0, sl
    fa52:	aa26      	add	r2, sp, #152	; 0x98
    fa54:	f007 fda2 	bl	1759c <__sprint_r>
    fa58:	2800      	cmp	r0, #0
    fa5a:	f040 828b 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fa5e:	ac29      	add	r4, sp, #164	; 0xa4
    fa60:	e7ca      	b.n	f9f8 <_vfprintf_r+0xd08>
    fa62:	3210      	adds	r2, #16
    fa64:	2b07      	cmp	r3, #7
    fa66:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    fa6a:	6067      	str	r7, [r4, #4]
    fa6c:	dd08      	ble.n	fa80 <_vfprintf_r+0xd90>
    fa6e:	4649      	mov	r1, r9
    fa70:	4650      	mov	r0, sl
    fa72:	aa26      	add	r2, sp, #152	; 0x98
    fa74:	f007 fd92 	bl	1759c <__sprint_r>
    fa78:	2800      	cmp	r0, #0
    fa7a:	f040 827b 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fa7e:	a929      	add	r1, sp, #164	; 0xa4
    fa80:	460c      	mov	r4, r1
    fa82:	3d10      	subs	r5, #16
    fa84:	e7bf      	b.n	fa06 <_vfprintf_r+0xd16>
    fa86:	9b20      	ldr	r3, [sp, #128]	; 0x80
    fa88:	2b00      	cmp	r3, #0
    fa8a:	dc73      	bgt.n	fb74 <_vfprintf_r+0xe84>
    fa8c:	4b37      	ldr	r3, [pc, #220]	; (fb6c <_vfprintf_r+0xe7c>)
    fa8e:	6023      	str	r3, [r4, #0]
    fa90:	2301      	movs	r3, #1
    fa92:	441e      	add	r6, r3
    fa94:	6063      	str	r3, [r4, #4]
    fa96:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    fa98:	9628      	str	r6, [sp, #160]	; 0xa0
    fa9a:	3301      	adds	r3, #1
    fa9c:	2b07      	cmp	r3, #7
    fa9e:	9327      	str	r3, [sp, #156]	; 0x9c
    faa0:	dc3d      	bgt.n	fb1e <_vfprintf_r+0xe2e>
    faa2:	3408      	adds	r4, #8
    faa4:	9909      	ldr	r1, [sp, #36]	; 0x24
    faa6:	9a20      	ldr	r2, [sp, #128]	; 0x80
    faa8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    faaa:	430a      	orrs	r2, r1
    faac:	f00b 0101 	and.w	r1, fp, #1
    fab0:	430a      	orrs	r2, r1
    fab2:	f43f ad11 	beq.w	f4d8 <_vfprintf_r+0x7e8>
    fab6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    fab8:	6022      	str	r2, [r4, #0]
    faba:	9a12      	ldr	r2, [sp, #72]	; 0x48
    fabc:	4413      	add	r3, r2
    fabe:	9328      	str	r3, [sp, #160]	; 0xa0
    fac0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    fac2:	6062      	str	r2, [r4, #4]
    fac4:	3301      	adds	r3, #1
    fac6:	2b07      	cmp	r3, #7
    fac8:	9327      	str	r3, [sp, #156]	; 0x9c
    faca:	dc32      	bgt.n	fb32 <_vfprintf_r+0xe42>
    facc:	3408      	adds	r4, #8
    face:	9d20      	ldr	r5, [sp, #128]	; 0x80
    fad0:	2d00      	cmp	r5, #0
    fad2:	da1b      	bge.n	fb0c <_vfprintf_r+0xe1c>
    fad4:	4623      	mov	r3, r4
    fad6:	2710      	movs	r7, #16
    fad8:	4e25      	ldr	r6, [pc, #148]	; (fb70 <_vfprintf_r+0xe80>)
    fada:	426d      	negs	r5, r5
    fadc:	2d10      	cmp	r5, #16
    fade:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
    fae2:	f104 0408 	add.w	r4, r4, #8
    fae6:	f102 0201 	add.w	r2, r2, #1
    faea:	601e      	str	r6, [r3, #0]
    faec:	dc2b      	bgt.n	fb46 <_vfprintf_r+0xe56>
    faee:	605d      	str	r5, [r3, #4]
    faf0:	2a07      	cmp	r2, #7
    faf2:	440d      	add	r5, r1
    faf4:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
    faf8:	dd08      	ble.n	fb0c <_vfprintf_r+0xe1c>
    fafa:	4649      	mov	r1, r9
    fafc:	4650      	mov	r0, sl
    fafe:	aa26      	add	r2, sp, #152	; 0x98
    fb00:	f007 fd4c 	bl	1759c <__sprint_r>
    fb04:	2800      	cmp	r0, #0
    fb06:	f040 8235 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fb0a:	ac29      	add	r4, sp, #164	; 0xa4
    fb0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fb10:	6063      	str	r3, [r4, #4]
    fb12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    fb14:	f8c4 8000 	str.w	r8, [r4]
    fb18:	4413      	add	r3, r2
    fb1a:	9328      	str	r3, [sp, #160]	; 0xa0
    fb1c:	e4d5      	b.n	f4ca <_vfprintf_r+0x7da>
    fb1e:	4649      	mov	r1, r9
    fb20:	4650      	mov	r0, sl
    fb22:	aa26      	add	r2, sp, #152	; 0x98
    fb24:	f007 fd3a 	bl	1759c <__sprint_r>
    fb28:	2800      	cmp	r0, #0
    fb2a:	f040 8223 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fb2e:	ac29      	add	r4, sp, #164	; 0xa4
    fb30:	e7b8      	b.n	faa4 <_vfprintf_r+0xdb4>
    fb32:	4649      	mov	r1, r9
    fb34:	4650      	mov	r0, sl
    fb36:	aa26      	add	r2, sp, #152	; 0x98
    fb38:	f007 fd30 	bl	1759c <__sprint_r>
    fb3c:	2800      	cmp	r0, #0
    fb3e:	f040 8219 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fb42:	ac29      	add	r4, sp, #164	; 0xa4
    fb44:	e7c3      	b.n	face <_vfprintf_r+0xdde>
    fb46:	3110      	adds	r1, #16
    fb48:	2a07      	cmp	r2, #7
    fb4a:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
    fb4e:	605f      	str	r7, [r3, #4]
    fb50:	dd08      	ble.n	fb64 <_vfprintf_r+0xe74>
    fb52:	4649      	mov	r1, r9
    fb54:	4650      	mov	r0, sl
    fb56:	aa26      	add	r2, sp, #152	; 0x98
    fb58:	f007 fd20 	bl	1759c <__sprint_r>
    fb5c:	2800      	cmp	r0, #0
    fb5e:	f040 8209 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fb62:	ac29      	add	r4, sp, #164	; 0xa4
    fb64:	4623      	mov	r3, r4
    fb66:	3d10      	subs	r5, #16
    fb68:	e7b8      	b.n	fadc <_vfprintf_r+0xdec>
    fb6a:	bf00      	nop
    fb6c:	00017d64 	.word	0x00017d64
    fb70:	00018c56 	.word	0x00018c56
    fb74:	9f09      	ldr	r7, [sp, #36]	; 0x24
    fb76:	42af      	cmp	r7, r5
    fb78:	bfa8      	it	ge
    fb7a:	462f      	movge	r7, r5
    fb7c:	2f00      	cmp	r7, #0
    fb7e:	dd0a      	ble.n	fb96 <_vfprintf_r+0xea6>
    fb80:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    fb82:	443e      	add	r6, r7
    fb84:	3301      	adds	r3, #1
    fb86:	2b07      	cmp	r3, #7
    fb88:	e9c4 8700 	strd	r8, r7, [r4]
    fb8c:	9628      	str	r6, [sp, #160]	; 0xa0
    fb8e:	9327      	str	r3, [sp, #156]	; 0x9c
    fb90:	f300 8085 	bgt.w	fc9e <_vfprintf_r+0xfae>
    fb94:	3408      	adds	r4, #8
    fb96:	2f00      	cmp	r7, #0
    fb98:	bfb4      	ite	lt
    fb9a:	462e      	movlt	r6, r5
    fb9c:	1bee      	subge	r6, r5, r7
    fb9e:	2e00      	cmp	r6, #0
    fba0:	dd19      	ble.n	fbd6 <_vfprintf_r+0xee6>
    fba2:	4f97      	ldr	r7, [pc, #604]	; (fe00 <__kernel_ram_size+0x48>)
    fba4:	2e10      	cmp	r6, #16
    fba6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    fbaa:	f104 0108 	add.w	r1, r4, #8
    fbae:	f103 0301 	add.w	r3, r3, #1
    fbb2:	6027      	str	r7, [r4, #0]
    fbb4:	dc7d      	bgt.n	fcb2 <_vfprintf_r+0xfc2>
    fbb6:	6066      	str	r6, [r4, #4]
    fbb8:	2b07      	cmp	r3, #7
    fbba:	4416      	add	r6, r2
    fbbc:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    fbc0:	f340 808a 	ble.w	fcd8 <_vfprintf_r+0xfe8>
    fbc4:	4649      	mov	r1, r9
    fbc6:	4650      	mov	r0, sl
    fbc8:	aa26      	add	r2, sp, #152	; 0x98
    fbca:	f007 fce7 	bl	1759c <__sprint_r>
    fbce:	2800      	cmp	r0, #0
    fbd0:	f040 81d0 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fbd4:	ac29      	add	r4, sp, #164	; 0xa4
    fbd6:	f41b 6f80 	tst.w	fp, #1024	; 0x400
    fbda:	4445      	add	r5, r8
    fbdc:	d00a      	beq.n	fbf4 <_vfprintf_r+0xf04>
    fbde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fbe0:	2b00      	cmp	r3, #0
    fbe2:	d17b      	bne.n	fcdc <_vfprintf_r+0xfec>
    fbe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fbe6:	2b00      	cmp	r3, #0
    fbe8:	d17b      	bne.n	fce2 <_vfprintf_r+0xff2>
    fbea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fbec:	4443      	add	r3, r8
    fbee:	429d      	cmp	r5, r3
    fbf0:	bf28      	it	cs
    fbf2:	461d      	movcs	r5, r3
    fbf4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    fbf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fbf8:	4293      	cmp	r3, r2
    fbfa:	db02      	blt.n	fc02 <_vfprintf_r+0xf12>
    fbfc:	f01b 0f01 	tst.w	fp, #1
    fc00:	d00e      	beq.n	fc20 <_vfprintf_r+0xf30>
    fc02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fc04:	9a12      	ldr	r2, [sp, #72]	; 0x48
    fc06:	6023      	str	r3, [r4, #0]
    fc08:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fc0a:	6063      	str	r3, [r4, #4]
    fc0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    fc0e:	4413      	add	r3, r2
    fc10:	9328      	str	r3, [sp, #160]	; 0xa0
    fc12:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    fc14:	3301      	adds	r3, #1
    fc16:	2b07      	cmp	r3, #7
    fc18:	9327      	str	r3, [sp, #156]	; 0x9c
    fc1a:	f300 80dd 	bgt.w	fdd8 <__kernel_ram_size+0x20>
    fc1e:	3408      	adds	r4, #8
    fc20:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fc22:	9e20      	ldr	r6, [sp, #128]	; 0x80
    fc24:	eb08 0203 	add.w	r2, r8, r3
    fc28:	1b9e      	subs	r6, r3, r6
    fc2a:	1b52      	subs	r2, r2, r5
    fc2c:	4296      	cmp	r6, r2
    fc2e:	bfa8      	it	ge
    fc30:	4616      	movge	r6, r2
    fc32:	2e00      	cmp	r6, #0
    fc34:	dd0b      	ble.n	fc4e <_vfprintf_r+0xf5e>
    fc36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    fc38:	e9c4 5600 	strd	r5, r6, [r4]
    fc3c:	4433      	add	r3, r6
    fc3e:	9328      	str	r3, [sp, #160]	; 0xa0
    fc40:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    fc42:	3301      	adds	r3, #1
    fc44:	2b07      	cmp	r3, #7
    fc46:	9327      	str	r3, [sp, #156]	; 0x9c
    fc48:	f300 80d0 	bgt.w	fdec <__kernel_ram_size+0x34>
    fc4c:	3408      	adds	r4, #8
    fc4e:	9d20      	ldr	r5, [sp, #128]	; 0x80
    fc50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fc52:	2e00      	cmp	r6, #0
    fc54:	eba3 0505 	sub.w	r5, r3, r5
    fc58:	bfa8      	it	ge
    fc5a:	1bad      	subge	r5, r5, r6
    fc5c:	2d00      	cmp	r5, #0
    fc5e:	f77f ac3b 	ble.w	f4d8 <_vfprintf_r+0x7e8>
    fc62:	2710      	movs	r7, #16
    fc64:	4e66      	ldr	r6, [pc, #408]	; (fe00 <__kernel_ram_size+0x48>)
    fc66:	2d10      	cmp	r5, #16
    fc68:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    fc6c:	f104 0108 	add.w	r1, r4, #8
    fc70:	f103 0301 	add.w	r3, r3, #1
    fc74:	6026      	str	r6, [r4, #0]
    fc76:	f77f aecf 	ble.w	fa18 <_vfprintf_r+0xd28>
    fc7a:	3210      	adds	r2, #16
    fc7c:	2b07      	cmp	r3, #7
    fc7e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    fc82:	6067      	str	r7, [r4, #4]
    fc84:	dd08      	ble.n	fc98 <_vfprintf_r+0xfa8>
    fc86:	4649      	mov	r1, r9
    fc88:	4650      	mov	r0, sl
    fc8a:	aa26      	add	r2, sp, #152	; 0x98
    fc8c:	f007 fc86 	bl	1759c <__sprint_r>
    fc90:	2800      	cmp	r0, #0
    fc92:	f040 816f 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fc96:	a929      	add	r1, sp, #164	; 0xa4
    fc98:	460c      	mov	r4, r1
    fc9a:	3d10      	subs	r5, #16
    fc9c:	e7e3      	b.n	fc66 <_vfprintf_r+0xf76>
    fc9e:	4649      	mov	r1, r9
    fca0:	4650      	mov	r0, sl
    fca2:	aa26      	add	r2, sp, #152	; 0x98
    fca4:	f007 fc7a 	bl	1759c <__sprint_r>
    fca8:	2800      	cmp	r0, #0
    fcaa:	f040 8163 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fcae:	ac29      	add	r4, sp, #164	; 0xa4
    fcb0:	e771      	b.n	fb96 <_vfprintf_r+0xea6>
    fcb2:	2010      	movs	r0, #16
    fcb4:	2b07      	cmp	r3, #7
    fcb6:	4402      	add	r2, r0
    fcb8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    fcbc:	6060      	str	r0, [r4, #4]
    fcbe:	dd08      	ble.n	fcd2 <_vfprintf_r+0xfe2>
    fcc0:	4649      	mov	r1, r9
    fcc2:	4650      	mov	r0, sl
    fcc4:	aa26      	add	r2, sp, #152	; 0x98
    fcc6:	f007 fc69 	bl	1759c <__sprint_r>
    fcca:	2800      	cmp	r0, #0
    fccc:	f040 8152 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fcd0:	a929      	add	r1, sp, #164	; 0xa4
    fcd2:	460c      	mov	r4, r1
    fcd4:	3e10      	subs	r6, #16
    fcd6:	e765      	b.n	fba4 <_vfprintf_r+0xeb4>
    fcd8:	460c      	mov	r4, r1
    fcda:	e77c      	b.n	fbd6 <_vfprintf_r+0xee6>
    fcdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fcde:	2b00      	cmp	r3, #0
    fce0:	d04a      	beq.n	fd78 <_vfprintf_r+0x1088>
    fce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fce4:	3b01      	subs	r3, #1
    fce6:	930c      	str	r3, [sp, #48]	; 0x30
    fce8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    fcea:	9a16      	ldr	r2, [sp, #88]	; 0x58
    fcec:	6023      	str	r3, [r4, #0]
    fcee:	9b16      	ldr	r3, [sp, #88]	; 0x58
    fcf0:	6063      	str	r3, [r4, #4]
    fcf2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    fcf4:	4413      	add	r3, r2
    fcf6:	9328      	str	r3, [sp, #160]	; 0xa0
    fcf8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    fcfa:	3301      	adds	r3, #1
    fcfc:	2b07      	cmp	r3, #7
    fcfe:	9327      	str	r3, [sp, #156]	; 0x9c
    fd00:	dc41      	bgt.n	fd86 <_vfprintf_r+0x1096>
    fd02:	3408      	adds	r4, #8
    fd04:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    fd08:	eb08 0703 	add.w	r7, r8, r3
    fd0c:	1b7b      	subs	r3, r7, r5
    fd0e:	7817      	ldrb	r7, [r2, #0]
    fd10:	429f      	cmp	r7, r3
    fd12:	bfa8      	it	ge
    fd14:	461f      	movge	r7, r3
    fd16:	2f00      	cmp	r7, #0
    fd18:	dd0a      	ble.n	fd30 <_vfprintf_r+0x1040>
    fd1a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    fd1c:	e9c4 5700 	strd	r5, r7, [r4]
    fd20:	443b      	add	r3, r7
    fd22:	9328      	str	r3, [sp, #160]	; 0xa0
    fd24:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    fd26:	3301      	adds	r3, #1
    fd28:	2b07      	cmp	r3, #7
    fd2a:	9327      	str	r3, [sp, #156]	; 0x9c
    fd2c:	dc35      	bgt.n	fd9a <_vfprintf_r+0x10aa>
    fd2e:	3408      	adds	r4, #8
    fd30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fd32:	2f00      	cmp	r7, #0
    fd34:	781e      	ldrb	r6, [r3, #0]
    fd36:	bfa8      	it	ge
    fd38:	1bf6      	subge	r6, r6, r7
    fd3a:	2e00      	cmp	r6, #0
    fd3c:	dd18      	ble.n	fd70 <_vfprintf_r+0x1080>
    fd3e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    fd42:	482f      	ldr	r0, [pc, #188]	; (fe00 <__kernel_ram_size+0x48>)
    fd44:	2e10      	cmp	r6, #16
    fd46:	f103 0301 	add.w	r3, r3, #1
    fd4a:	f104 0108 	add.w	r1, r4, #8
    fd4e:	6020      	str	r0, [r4, #0]
    fd50:	dc2d      	bgt.n	fdae <_vfprintf_r+0x10be>
    fd52:	6066      	str	r6, [r4, #4]
    fd54:	2b07      	cmp	r3, #7
    fd56:	4416      	add	r6, r2
    fd58:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    fd5c:	dd3a      	ble.n	fdd4 <__kernel_ram_size+0x1c>
    fd5e:	4649      	mov	r1, r9
    fd60:	4650      	mov	r0, sl
    fd62:	aa26      	add	r2, sp, #152	; 0x98
    fd64:	f007 fc1a 	bl	1759c <__sprint_r>
    fd68:	2800      	cmp	r0, #0
    fd6a:	f040 8103 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fd6e:	ac29      	add	r4, sp, #164	; 0xa4
    fd70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fd72:	781b      	ldrb	r3, [r3, #0]
    fd74:	441d      	add	r5, r3
    fd76:	e732      	b.n	fbde <_vfprintf_r+0xeee>
    fd78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fd7a:	3b01      	subs	r3, #1
    fd7c:	930e      	str	r3, [sp, #56]	; 0x38
    fd7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fd80:	3b01      	subs	r3, #1
    fd82:	930d      	str	r3, [sp, #52]	; 0x34
    fd84:	e7b0      	b.n	fce8 <_vfprintf_r+0xff8>
    fd86:	4649      	mov	r1, r9
    fd88:	4650      	mov	r0, sl
    fd8a:	aa26      	add	r2, sp, #152	; 0x98
    fd8c:	f007 fc06 	bl	1759c <__sprint_r>
    fd90:	2800      	cmp	r0, #0
    fd92:	f040 80ef 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fd96:	ac29      	add	r4, sp, #164	; 0xa4
    fd98:	e7b4      	b.n	fd04 <_vfprintf_r+0x1014>
    fd9a:	4649      	mov	r1, r9
    fd9c:	4650      	mov	r0, sl
    fd9e:	aa26      	add	r2, sp, #152	; 0x98
    fda0:	f007 fbfc 	bl	1759c <__sprint_r>
    fda4:	2800      	cmp	r0, #0
    fda6:	f040 80e5 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fdaa:	ac29      	add	r4, sp, #164	; 0xa4
    fdac:	e7c0      	b.n	fd30 <_vfprintf_r+0x1040>
    fdae:	2010      	movs	r0, #16
    fdb0:	2b07      	cmp	r3, #7
    fdb2:	4402      	add	r2, r0
    fdb4:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    fdb8:	6060      	str	r0, [r4, #4]
    fdba:	dd08      	ble.n	fdce <__kernel_ram_size+0x16>
    fdbc:	4649      	mov	r1, r9
    fdbe:	4650      	mov	r0, sl
    fdc0:	aa26      	add	r2, sp, #152	; 0x98
    fdc2:	f007 fbeb 	bl	1759c <__sprint_r>
    fdc6:	2800      	cmp	r0, #0
    fdc8:	f040 80d4 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fdcc:	a929      	add	r1, sp, #164	; 0xa4
    fdce:	460c      	mov	r4, r1
    fdd0:	3e10      	subs	r6, #16
    fdd2:	e7b4      	b.n	fd3e <_vfprintf_r+0x104e>
    fdd4:	460c      	mov	r4, r1
    fdd6:	e7cb      	b.n	fd70 <_vfprintf_r+0x1080>
    fdd8:	4649      	mov	r1, r9
    fdda:	4650      	mov	r0, sl
    fddc:	aa26      	add	r2, sp, #152	; 0x98
    fdde:	f007 fbdd 	bl	1759c <__sprint_r>
    fde2:	2800      	cmp	r0, #0
    fde4:	f040 80c6 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fde8:	ac29      	add	r4, sp, #164	; 0xa4
    fdea:	e719      	b.n	fc20 <_vfprintf_r+0xf30>
    fdec:	4649      	mov	r1, r9
    fdee:	4650      	mov	r0, sl
    fdf0:	aa26      	add	r2, sp, #152	; 0x98
    fdf2:	f007 fbd3 	bl	1759c <__sprint_r>
    fdf6:	2800      	cmp	r0, #0
    fdf8:	f040 80bc 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fdfc:	ac29      	add	r4, sp, #164	; 0xa4
    fdfe:	e726      	b.n	fc4e <_vfprintf_r+0xf5e>
    fe00:	00018c56 	.word	0x00018c56
    fe04:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fe06:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    fe08:	2a01      	cmp	r2, #1
    fe0a:	f106 0601 	add.w	r6, r6, #1
    fe0e:	f103 0301 	add.w	r3, r3, #1
    fe12:	f104 0508 	add.w	r5, r4, #8
    fe16:	dc02      	bgt.n	fe1e <__kernel_ram_size+0x66>
    fe18:	f01b 0f01 	tst.w	fp, #1
    fe1c:	d07e      	beq.n	ff1c <__kernel_ram_size+0x164>
    fe1e:	2201      	movs	r2, #1
    fe20:	2b07      	cmp	r3, #7
    fe22:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    fe26:	f8c4 8000 	str.w	r8, [r4]
    fe2a:	6062      	str	r2, [r4, #4]
    fe2c:	dd08      	ble.n	fe40 <__kernel_ram_size+0x88>
    fe2e:	4649      	mov	r1, r9
    fe30:	4650      	mov	r0, sl
    fe32:	aa26      	add	r2, sp, #152	; 0x98
    fe34:	f007 fbb2 	bl	1759c <__sprint_r>
    fe38:	2800      	cmp	r0, #0
    fe3a:	f040 809b 	bne.w	ff74 <__kernel_ram_size+0x1bc>
    fe3e:	ad29      	add	r5, sp, #164	; 0xa4
    fe40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fe42:	9a12      	ldr	r2, [sp, #72]	; 0x48
    fe44:	602b      	str	r3, [r5, #0]
    fe46:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fe48:	606b      	str	r3, [r5, #4]
    fe4a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    fe4c:	4413      	add	r3, r2
    fe4e:	9328      	str	r3, [sp, #160]	; 0xa0
    fe50:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    fe52:	3301      	adds	r3, #1
    fe54:	2b07      	cmp	r3, #7
    fe56:	9327      	str	r3, [sp, #156]	; 0x9c
    fe58:	dc32      	bgt.n	fec0 <__kernel_ram_size+0x108>
    fe5a:	3508      	adds	r5, #8
    fe5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fe5e:	2200      	movs	r2, #0
    fe60:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    fe64:	1e5c      	subs	r4, r3, #1
    fe66:	2300      	movs	r3, #0
    fe68:	f7f0 fd66 	bl	938 <__aeabi_dcmpeq>
    fe6c:	2800      	cmp	r0, #0
    fe6e:	d130      	bne.n	fed2 <__kernel_ram_size+0x11a>
    fe70:	9927      	ldr	r1, [sp, #156]	; 0x9c
    fe72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    fe74:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fe76:	3101      	adds	r1, #1
    fe78:	3b01      	subs	r3, #1
    fe7a:	f108 0001 	add.w	r0, r8, #1
    fe7e:	4413      	add	r3, r2
    fe80:	2907      	cmp	r1, #7
    fe82:	e9c5 0400 	strd	r0, r4, [r5]
    fe86:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
    fe8a:	dd50      	ble.n	ff2e <__kernel_ram_size+0x176>
    fe8c:	4649      	mov	r1, r9
    fe8e:	4650      	mov	r0, sl
    fe90:	aa26      	add	r2, sp, #152	; 0x98
    fe92:	f007 fb83 	bl	1759c <__sprint_r>
    fe96:	2800      	cmp	r0, #0
    fe98:	d16c      	bne.n	ff74 <__kernel_ram_size+0x1bc>
    fe9a:	ad29      	add	r5, sp, #164	; 0xa4
    fe9c:	ab22      	add	r3, sp, #136	; 0x88
    fe9e:	602b      	str	r3, [r5, #0]
    fea0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    fea2:	9a19      	ldr	r2, [sp, #100]	; 0x64
    fea4:	606b      	str	r3, [r5, #4]
    fea6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    fea8:	4413      	add	r3, r2
    feaa:	9328      	str	r3, [sp, #160]	; 0xa0
    feac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    feae:	3301      	adds	r3, #1
    feb0:	2b07      	cmp	r3, #7
    feb2:	9327      	str	r3, [sp, #156]	; 0x9c
    feb4:	f73f adb7 	bgt.w	fa26 <_vfprintf_r+0xd36>
    feb8:	f105 0408 	add.w	r4, r5, #8
    febc:	f7ff bb0c 	b.w	f4d8 <_vfprintf_r+0x7e8>
    fec0:	4649      	mov	r1, r9
    fec2:	4650      	mov	r0, sl
    fec4:	aa26      	add	r2, sp, #152	; 0x98
    fec6:	f007 fb69 	bl	1759c <__sprint_r>
    feca:	2800      	cmp	r0, #0
    fecc:	d152      	bne.n	ff74 <__kernel_ram_size+0x1bc>
    fece:	ad29      	add	r5, sp, #164	; 0xa4
    fed0:	e7c4      	b.n	fe5c <__kernel_ram_size+0xa4>
    fed2:	2c00      	cmp	r4, #0
    fed4:	dde2      	ble.n	fe9c <__kernel_ram_size+0xe4>
    fed6:	2710      	movs	r7, #16
    fed8:	4e54      	ldr	r6, [pc, #336]	; (1002c <__kernel_ram_size+0x274>)
    feda:	2c10      	cmp	r4, #16
    fedc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    fee0:	f105 0108 	add.w	r1, r5, #8
    fee4:	f103 0301 	add.w	r3, r3, #1
    fee8:	602e      	str	r6, [r5, #0]
    feea:	dc07      	bgt.n	fefc <__kernel_ram_size+0x144>
    feec:	606c      	str	r4, [r5, #4]
    feee:	2b07      	cmp	r3, #7
    fef0:	4414      	add	r4, r2
    fef2:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
    fef6:	dcc9      	bgt.n	fe8c <__kernel_ram_size+0xd4>
    fef8:	460d      	mov	r5, r1
    fefa:	e7cf      	b.n	fe9c <__kernel_ram_size+0xe4>
    fefc:	3210      	adds	r2, #16
    fefe:	2b07      	cmp	r3, #7
    ff00:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    ff04:	606f      	str	r7, [r5, #4]
    ff06:	dd06      	ble.n	ff16 <__kernel_ram_size+0x15e>
    ff08:	4649      	mov	r1, r9
    ff0a:	4650      	mov	r0, sl
    ff0c:	aa26      	add	r2, sp, #152	; 0x98
    ff0e:	f007 fb45 	bl	1759c <__sprint_r>
    ff12:	bb78      	cbnz	r0, ff74 <__kernel_ram_size+0x1bc>
    ff14:	a929      	add	r1, sp, #164	; 0xa4
    ff16:	460d      	mov	r5, r1
    ff18:	3c10      	subs	r4, #16
    ff1a:	e7de      	b.n	feda <__kernel_ram_size+0x122>
    ff1c:	2201      	movs	r2, #1
    ff1e:	2b07      	cmp	r3, #7
    ff20:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    ff24:	f8c4 8000 	str.w	r8, [r4]
    ff28:	6062      	str	r2, [r4, #4]
    ff2a:	ddb7      	ble.n	fe9c <__kernel_ram_size+0xe4>
    ff2c:	e7ae      	b.n	fe8c <__kernel_ram_size+0xd4>
    ff2e:	3508      	adds	r5, #8
    ff30:	e7b4      	b.n	fe9c <__kernel_ram_size+0xe4>
    ff32:	460c      	mov	r4, r1
    ff34:	f7ff bad0 	b.w	f4d8 <_vfprintf_r+0x7e8>
    ff38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ff3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ff3c:	1a9d      	subs	r5, r3, r2
    ff3e:	2d00      	cmp	r5, #0
    ff40:	f77f aace 	ble.w	f4e0 <_vfprintf_r+0x7f0>
    ff44:	2710      	movs	r7, #16
    ff46:	4e3a      	ldr	r6, [pc, #232]	; (10030 <__kernel_ram_size+0x278>)
    ff48:	2d10      	cmp	r5, #16
    ff4a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    ff4e:	6026      	str	r6, [r4, #0]
    ff50:	f103 0301 	add.w	r3, r3, #1
    ff54:	dc18      	bgt.n	ff88 <__kernel_ram_size+0x1d0>
    ff56:	6065      	str	r5, [r4, #4]
    ff58:	2b07      	cmp	r3, #7
    ff5a:	4415      	add	r5, r2
    ff5c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
    ff60:	f77f aabe 	ble.w	f4e0 <_vfprintf_r+0x7f0>
    ff64:	4649      	mov	r1, r9
    ff66:	4650      	mov	r0, sl
    ff68:	aa26      	add	r2, sp, #152	; 0x98
    ff6a:	f007 fb17 	bl	1759c <__sprint_r>
    ff6e:	2800      	cmp	r0, #0
    ff70:	f43f aab6 	beq.w	f4e0 <_vfprintf_r+0x7f0>
    ff74:	9b08      	ldr	r3, [sp, #32]
    ff76:	2b00      	cmp	r3, #0
    ff78:	f43f a8d6 	beq.w	f128 <_vfprintf_r+0x438>
    ff7c:	4619      	mov	r1, r3
    ff7e:	4650      	mov	r0, sl
    ff80:	f7fd fc1a 	bl	d7b8 <_free_r>
    ff84:	f7ff b8d0 	b.w	f128 <_vfprintf_r+0x438>
    ff88:	3210      	adds	r2, #16
    ff8a:	2b07      	cmp	r3, #7
    ff8c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    ff90:	6067      	str	r7, [r4, #4]
    ff92:	dc02      	bgt.n	ff9a <__kernel_ram_size+0x1e2>
    ff94:	3408      	adds	r4, #8
    ff96:	3d10      	subs	r5, #16
    ff98:	e7d6      	b.n	ff48 <__kernel_ram_size+0x190>
    ff9a:	4649      	mov	r1, r9
    ff9c:	4650      	mov	r0, sl
    ff9e:	aa26      	add	r2, sp, #152	; 0x98
    ffa0:	f007 fafc 	bl	1759c <__sprint_r>
    ffa4:	2800      	cmp	r0, #0
    ffa6:	d1e5      	bne.n	ff74 <__kernel_ram_size+0x1bc>
    ffa8:	ac29      	add	r4, sp, #164	; 0xa4
    ffaa:	e7f4      	b.n	ff96 <__kernel_ram_size+0x1de>
    ffac:	4650      	mov	r0, sl
    ffae:	9908      	ldr	r1, [sp, #32]
    ffb0:	f7fd fc02 	bl	d7b8 <_free_r>
    ffb4:	f7ff baac 	b.w	f510 <_vfprintf_r+0x820>
    ffb8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    ffba:	b91b      	cbnz	r3, ffc4 <__kernel_ram_size+0x20c>
    ffbc:	2300      	movs	r3, #0
    ffbe:	9327      	str	r3, [sp, #156]	; 0x9c
    ffc0:	f7ff b8b2 	b.w	f128 <_vfprintf_r+0x438>
    ffc4:	4649      	mov	r1, r9
    ffc6:	4650      	mov	r0, sl
    ffc8:	aa26      	add	r2, sp, #152	; 0x98
    ffca:	f007 fae7 	bl	1759c <__sprint_r>
    ffce:	2800      	cmp	r0, #0
    ffd0:	d0f4      	beq.n	ffbc <__kernel_ram_size+0x204>
    ffd2:	f7ff b8a9 	b.w	f128 <_vfprintf_r+0x438>
    ffd6:	465f      	mov	r7, fp
    ffd8:	2e00      	cmp	r6, #0
    ffda:	f43f abb3 	beq.w	f744 <_vfprintf_r+0xa54>
    ffde:	2b01      	cmp	r3, #1
    ffe0:	f43f ac24 	beq.w	f82c <_vfprintf_r+0xb3c>
    ffe4:	2b02      	cmp	r3, #2
    ffe6:	f50d 78a4 	add.w	r8, sp, #328	; 0x148
    ffea:	f43f ac5c 	beq.w	f8a6 <_vfprintf_r+0xbb6>
    ffee:	f006 0307 	and.w	r3, r6, #7
    fff2:	3330      	adds	r3, #48	; 0x30
    fff4:	08f6      	lsrs	r6, r6, #3
    fff6:	4642      	mov	r2, r8
    fff8:	f808 3d01 	strb.w	r3, [r8, #-1]!
    fffc:	d1f7      	bne.n	ffee <__kernel_ram_size+0x236>
    fffe:	07f8      	lsls	r0, r7, #31
   10000:	d506      	bpl.n	10010 <__kernel_ram_size+0x258>
   10002:	2b30      	cmp	r3, #48	; 0x30
   10004:	d004      	beq.n	10010 <__kernel_ram_size+0x258>
   10006:	2330      	movs	r3, #48	; 0x30
   10008:	f808 3c01 	strb.w	r3, [r8, #-1]
   1000c:	f1a2 0802 	sub.w	r8, r2, #2
   10010:	ab52      	add	r3, sp, #328	; 0x148
   10012:	eba3 0308 	sub.w	r3, r3, r8
   10016:	9e07      	ldr	r6, [sp, #28]
   10018:	9307      	str	r3, [sp, #28]
   1001a:	2300      	movs	r3, #0
   1001c:	46bb      	mov	fp, r7
   1001e:	9308      	str	r3, [sp, #32]
   10020:	461d      	mov	r5, r3
   10022:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   10026:	f7ff b99e 	b.w	f366 <_vfprintf_r+0x676>
   1002a:	bf00      	nop
   1002c:	00018c56 	.word	0x00018c56
   10030:	00018c46 	.word	0x00018c46

00010034 <_write_r>:
   10034:	b538      	push	{r3, r4, r5, lr}
   10036:	4604      	mov	r4, r0
   10038:	4608      	mov	r0, r1
   1003a:	4611      	mov	r1, r2
   1003c:	2200      	movs	r2, #0
   1003e:	4d05      	ldr	r5, [pc, #20]	; (10054 <_write_r+0x20>)
   10040:	602a      	str	r2, [r5, #0]
   10042:	461a      	mov	r2, r3
   10044:	f001 fce7 	bl	11a16 <_write>
   10048:	1c43      	adds	r3, r0, #1
   1004a:	d102      	bne.n	10052 <_write_r+0x1e>
   1004c:	682b      	ldr	r3, [r5, #0]
   1004e:	b103      	cbz	r3, 10052 <_write_r+0x1e>
   10050:	6023      	str	r3, [r4, #0]
   10052:	bd38      	pop	{r3, r4, r5, pc}
   10054:	20000480 	.word	0x20000480

00010058 <__swsetup_r>:
   10058:	4b32      	ldr	r3, [pc, #200]	; (10124 <__swsetup_r+0xcc>)
   1005a:	b570      	push	{r4, r5, r6, lr}
   1005c:	681d      	ldr	r5, [r3, #0]
   1005e:	4606      	mov	r6, r0
   10060:	460c      	mov	r4, r1
   10062:	b125      	cbz	r5, 1006e <__swsetup_r+0x16>
   10064:	69ab      	ldr	r3, [r5, #24]
   10066:	b913      	cbnz	r3, 1006e <__swsetup_r+0x16>
   10068:	4628      	mov	r0, r5
   1006a:	f7fd fabd 	bl	d5e8 <__sinit>
   1006e:	4b2e      	ldr	r3, [pc, #184]	; (10128 <__swsetup_r+0xd0>)
   10070:	429c      	cmp	r4, r3
   10072:	d10f      	bne.n	10094 <__swsetup_r+0x3c>
   10074:	686c      	ldr	r4, [r5, #4]
   10076:	89a3      	ldrh	r3, [r4, #12]
   10078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1007c:	0719      	lsls	r1, r3, #28
   1007e:	d42c      	bmi.n	100da <__swsetup_r+0x82>
   10080:	06dd      	lsls	r5, r3, #27
   10082:	d411      	bmi.n	100a8 <__swsetup_r+0x50>
   10084:	2309      	movs	r3, #9
   10086:	6033      	str	r3, [r6, #0]
   10088:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   1008c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10090:	81a3      	strh	r3, [r4, #12]
   10092:	e03e      	b.n	10112 <__swsetup_r+0xba>
   10094:	4b25      	ldr	r3, [pc, #148]	; (1012c <__swsetup_r+0xd4>)
   10096:	429c      	cmp	r4, r3
   10098:	d101      	bne.n	1009e <__swsetup_r+0x46>
   1009a:	68ac      	ldr	r4, [r5, #8]
   1009c:	e7eb      	b.n	10076 <__swsetup_r+0x1e>
   1009e:	4b24      	ldr	r3, [pc, #144]	; (10130 <__swsetup_r+0xd8>)
   100a0:	429c      	cmp	r4, r3
   100a2:	bf08      	it	eq
   100a4:	68ec      	ldreq	r4, [r5, #12]
   100a6:	e7e6      	b.n	10076 <__swsetup_r+0x1e>
   100a8:	0758      	lsls	r0, r3, #29
   100aa:	d512      	bpl.n	100d2 <__swsetup_r+0x7a>
   100ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
   100ae:	b141      	cbz	r1, 100c2 <__swsetup_r+0x6a>
   100b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   100b4:	4299      	cmp	r1, r3
   100b6:	d002      	beq.n	100be <__swsetup_r+0x66>
   100b8:	4630      	mov	r0, r6
   100ba:	f7fd fb7d 	bl	d7b8 <_free_r>
   100be:	2300      	movs	r3, #0
   100c0:	6363      	str	r3, [r4, #52]	; 0x34
   100c2:	89a3      	ldrh	r3, [r4, #12]
   100c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   100c8:	81a3      	strh	r3, [r4, #12]
   100ca:	2300      	movs	r3, #0
   100cc:	6063      	str	r3, [r4, #4]
   100ce:	6923      	ldr	r3, [r4, #16]
   100d0:	6023      	str	r3, [r4, #0]
   100d2:	89a3      	ldrh	r3, [r4, #12]
   100d4:	f043 0308 	orr.w	r3, r3, #8
   100d8:	81a3      	strh	r3, [r4, #12]
   100da:	6923      	ldr	r3, [r4, #16]
   100dc:	b94b      	cbnz	r3, 100f2 <__swsetup_r+0x9a>
   100de:	89a3      	ldrh	r3, [r4, #12]
   100e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
   100e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   100e8:	d003      	beq.n	100f2 <__swsetup_r+0x9a>
   100ea:	4621      	mov	r1, r4
   100ec:	4630      	mov	r0, r6
   100ee:	f7fd fb13 	bl	d718 <__smakebuf_r>
   100f2:	89a0      	ldrh	r0, [r4, #12]
   100f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   100f8:	f010 0301 	ands.w	r3, r0, #1
   100fc:	d00a      	beq.n	10114 <__swsetup_r+0xbc>
   100fe:	2300      	movs	r3, #0
   10100:	60a3      	str	r3, [r4, #8]
   10102:	6963      	ldr	r3, [r4, #20]
   10104:	425b      	negs	r3, r3
   10106:	61a3      	str	r3, [r4, #24]
   10108:	6923      	ldr	r3, [r4, #16]
   1010a:	b943      	cbnz	r3, 1011e <__swsetup_r+0xc6>
   1010c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   10110:	d1ba      	bne.n	10088 <__swsetup_r+0x30>
   10112:	bd70      	pop	{r4, r5, r6, pc}
   10114:	0781      	lsls	r1, r0, #30
   10116:	bf58      	it	pl
   10118:	6963      	ldrpl	r3, [r4, #20]
   1011a:	60a3      	str	r3, [r4, #8]
   1011c:	e7f4      	b.n	10108 <__swsetup_r+0xb0>
   1011e:	2000      	movs	r0, #0
   10120:	e7f7      	b.n	10112 <__swsetup_r+0xba>
   10122:	bf00      	nop
   10124:	20000028 	.word	0x20000028
   10128:	00017c6c 	.word	0x00017c6c
   1012c:	00017c8c 	.word	0x00017c8c
   10130:	00017c4c 	.word	0x00017c4c

00010134 <__assert_func>:
   10134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   10136:	4614      	mov	r4, r2
   10138:	461a      	mov	r2, r3
   1013a:	4b09      	ldr	r3, [pc, #36]	; (10160 <__assert_func+0x2c>)
   1013c:	4605      	mov	r5, r0
   1013e:	681b      	ldr	r3, [r3, #0]
   10140:	68d8      	ldr	r0, [r3, #12]
   10142:	b14c      	cbz	r4, 10158 <__assert_func+0x24>
   10144:	4b07      	ldr	r3, [pc, #28]	; (10164 <__assert_func+0x30>)
   10146:	e9cd 3401 	strd	r3, r4, [sp, #4]
   1014a:	9100      	str	r1, [sp, #0]
   1014c:	462b      	mov	r3, r5
   1014e:	4906      	ldr	r1, [pc, #24]	; (10168 <__assert_func+0x34>)
   10150:	f000 f81e 	bl	10190 <fiprintf>
   10154:	f006 fcfd 	bl	16b52 <abort>
   10158:	4b04      	ldr	r3, [pc, #16]	; (1016c <__assert_func+0x38>)
   1015a:	461c      	mov	r4, r3
   1015c:	e7f3      	b.n	10146 <__assert_func+0x12>
   1015e:	bf00      	nop
   10160:	20000028 	.word	0x20000028
   10164:	00018c66 	.word	0x00018c66
   10168:	00018c73 	.word	0x00018c73
   1016c:	00018987 	.word	0x00018987

00010170 <_close_r>:
   10170:	b538      	push	{r3, r4, r5, lr}
   10172:	2300      	movs	r3, #0
   10174:	4d05      	ldr	r5, [pc, #20]	; (1018c <_close_r+0x1c>)
   10176:	4604      	mov	r4, r0
   10178:	4608      	mov	r0, r1
   1017a:	602b      	str	r3, [r5, #0]
   1017c:	f001 fc4f 	bl	11a1e <_close>
   10180:	1c43      	adds	r3, r0, #1
   10182:	d102      	bne.n	1018a <_close_r+0x1a>
   10184:	682b      	ldr	r3, [r5, #0]
   10186:	b103      	cbz	r3, 1018a <_close_r+0x1a>
   10188:	6023      	str	r3, [r4, #0]
   1018a:	bd38      	pop	{r3, r4, r5, pc}
   1018c:	20000480 	.word	0x20000480

00010190 <fiprintf>:
   10190:	b40e      	push	{r1, r2, r3}
   10192:	b503      	push	{r0, r1, lr}
   10194:	4601      	mov	r1, r0
   10196:	ab03      	add	r3, sp, #12
   10198:	4805      	ldr	r0, [pc, #20]	; (101b0 <fiprintf+0x20>)
   1019a:	f853 2b04 	ldr.w	r2, [r3], #4
   1019e:	6800      	ldr	r0, [r0, #0]
   101a0:	9301      	str	r3, [sp, #4]
   101a2:	f000 ffcb 	bl	1113c <_vfiprintf_r>
   101a6:	b002      	add	sp, #8
   101a8:	f85d eb04 	ldr.w	lr, [sp], #4
   101ac:	b003      	add	sp, #12
   101ae:	4770      	bx	lr
   101b0:	20000028 	.word	0x20000028

000101b4 <_fstat_r>:
   101b4:	b538      	push	{r3, r4, r5, lr}
   101b6:	2300      	movs	r3, #0
   101b8:	4d06      	ldr	r5, [pc, #24]	; (101d4 <_fstat_r+0x20>)
   101ba:	4604      	mov	r4, r0
   101bc:	4608      	mov	r0, r1
   101be:	4611      	mov	r1, r2
   101c0:	602b      	str	r3, [r5, #0]
   101c2:	f001 fc3a 	bl	11a3a <_fstat>
   101c6:	1c43      	adds	r3, r0, #1
   101c8:	d102      	bne.n	101d0 <_fstat_r+0x1c>
   101ca:	682b      	ldr	r3, [r5, #0]
   101cc:	b103      	cbz	r3, 101d0 <_fstat_r+0x1c>
   101ce:	6023      	str	r3, [r4, #0]
   101d0:	bd38      	pop	{r3, r4, r5, pc}
   101d2:	bf00      	nop
   101d4:	20000480 	.word	0x20000480

000101d8 <__sfvwrite_r>:
   101d8:	6893      	ldr	r3, [r2, #8]
   101da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   101de:	4606      	mov	r6, r0
   101e0:	460c      	mov	r4, r1
   101e2:	4690      	mov	r8, r2
   101e4:	b91b      	cbnz	r3, 101ee <__sfvwrite_r+0x16>
   101e6:	2000      	movs	r0, #0
   101e8:	b003      	add	sp, #12
   101ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   101ee:	898b      	ldrh	r3, [r1, #12]
   101f0:	0718      	lsls	r0, r3, #28
   101f2:	d550      	bpl.n	10296 <__sfvwrite_r+0xbe>
   101f4:	690b      	ldr	r3, [r1, #16]
   101f6:	2b00      	cmp	r3, #0
   101f8:	d04d      	beq.n	10296 <__sfvwrite_r+0xbe>
   101fa:	89a3      	ldrh	r3, [r4, #12]
   101fc:	f8d8 7000 	ldr.w	r7, [r8]
   10200:	f013 0902 	ands.w	r9, r3, #2
   10204:	d16b      	bne.n	102de <__sfvwrite_r+0x106>
   10206:	f013 0301 	ands.w	r3, r3, #1
   1020a:	f000 809b 	beq.w	10344 <__sfvwrite_r+0x16c>
   1020e:	4648      	mov	r0, r9
   10210:	46ca      	mov	sl, r9
   10212:	46cb      	mov	fp, r9
   10214:	f1bb 0f00 	cmp.w	fp, #0
   10218:	f000 8102 	beq.w	10420 <__sfvwrite_r+0x248>
   1021c:	b950      	cbnz	r0, 10234 <__sfvwrite_r+0x5c>
   1021e:	465a      	mov	r2, fp
   10220:	210a      	movs	r1, #10
   10222:	4650      	mov	r0, sl
   10224:	f006 fd0c 	bl	16c40 <memchr>
   10228:	2800      	cmp	r0, #0
   1022a:	f000 80fe 	beq.w	1042a <__sfvwrite_r+0x252>
   1022e:	3001      	adds	r0, #1
   10230:	eba0 090a 	sub.w	r9, r0, sl
   10234:	6820      	ldr	r0, [r4, #0]
   10236:	6921      	ldr	r1, [r4, #16]
   10238:	45d9      	cmp	r9, fp
   1023a:	464a      	mov	r2, r9
   1023c:	bf28      	it	cs
   1023e:	465a      	movcs	r2, fp
   10240:	4288      	cmp	r0, r1
   10242:	6963      	ldr	r3, [r4, #20]
   10244:	f240 80f4 	bls.w	10430 <__sfvwrite_r+0x258>
   10248:	68a5      	ldr	r5, [r4, #8]
   1024a:	441d      	add	r5, r3
   1024c:	42aa      	cmp	r2, r5
   1024e:	f340 80ef 	ble.w	10430 <__sfvwrite_r+0x258>
   10252:	4651      	mov	r1, sl
   10254:	462a      	mov	r2, r5
   10256:	f006 ffeb 	bl	17230 <memmove>
   1025a:	6823      	ldr	r3, [r4, #0]
   1025c:	4621      	mov	r1, r4
   1025e:	442b      	add	r3, r5
   10260:	4630      	mov	r0, r6
   10262:	6023      	str	r3, [r4, #0]
   10264:	f7fd f930 	bl	d4c8 <_fflush_r>
   10268:	2800      	cmp	r0, #0
   1026a:	d166      	bne.n	1033a <__sfvwrite_r+0x162>
   1026c:	ebb9 0905 	subs.w	r9, r9, r5
   10270:	f040 80f6 	bne.w	10460 <__sfvwrite_r+0x288>
   10274:	4621      	mov	r1, r4
   10276:	4630      	mov	r0, r6
   10278:	f7fd f926 	bl	d4c8 <_fflush_r>
   1027c:	2800      	cmp	r0, #0
   1027e:	d15c      	bne.n	1033a <__sfvwrite_r+0x162>
   10280:	f8d8 2008 	ldr.w	r2, [r8, #8]
   10284:	44aa      	add	sl, r5
   10286:	ebab 0b05 	sub.w	fp, fp, r5
   1028a:	1b55      	subs	r5, r2, r5
   1028c:	f8c8 5008 	str.w	r5, [r8, #8]
   10290:	2d00      	cmp	r5, #0
   10292:	d1bf      	bne.n	10214 <__sfvwrite_r+0x3c>
   10294:	e7a7      	b.n	101e6 <__sfvwrite_r+0xe>
   10296:	4621      	mov	r1, r4
   10298:	4630      	mov	r0, r6
   1029a:	f7ff fedd 	bl	10058 <__swsetup_r>
   1029e:	2800      	cmp	r0, #0
   102a0:	d0ab      	beq.n	101fa <__sfvwrite_r+0x22>
   102a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   102a6:	e79f      	b.n	101e8 <__sfvwrite_r+0x10>
   102a8:	e9d7 b500 	ldrd	fp, r5, [r7]
   102ac:	3708      	adds	r7, #8
   102ae:	2d00      	cmp	r5, #0
   102b0:	d0fa      	beq.n	102a8 <__sfvwrite_r+0xd0>
   102b2:	4555      	cmp	r5, sl
   102b4:	462b      	mov	r3, r5
   102b6:	465a      	mov	r2, fp
   102b8:	bf28      	it	cs
   102ba:	4653      	movcs	r3, sl
   102bc:	4630      	mov	r0, r6
   102be:	6a21      	ldr	r1, [r4, #32]
   102c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   102c4:	47e0      	blx	ip
   102c6:	2800      	cmp	r0, #0
   102c8:	dd37      	ble.n	1033a <__sfvwrite_r+0x162>
   102ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
   102ce:	4483      	add	fp, r0
   102d0:	1a2d      	subs	r5, r5, r0
   102d2:	1a18      	subs	r0, r3, r0
   102d4:	f8c8 0008 	str.w	r0, [r8, #8]
   102d8:	2800      	cmp	r0, #0
   102da:	d1e8      	bne.n	102ae <__sfvwrite_r+0xd6>
   102dc:	e783      	b.n	101e6 <__sfvwrite_r+0xe>
   102de:	f04f 0b00 	mov.w	fp, #0
   102e2:	f8df a180 	ldr.w	sl, [pc, #384]	; 10464 <__sfvwrite_r+0x28c>
   102e6:	465d      	mov	r5, fp
   102e8:	e7e1      	b.n	102ae <__sfvwrite_r+0xd6>
   102ea:	e9d7 9a00 	ldrd	r9, sl, [r7]
   102ee:	3708      	adds	r7, #8
   102f0:	f1ba 0f00 	cmp.w	sl, #0
   102f4:	d0f9      	beq.n	102ea <__sfvwrite_r+0x112>
   102f6:	89a3      	ldrh	r3, [r4, #12]
   102f8:	6820      	ldr	r0, [r4, #0]
   102fa:	0599      	lsls	r1, r3, #22
   102fc:	68a2      	ldr	r2, [r4, #8]
   102fe:	d563      	bpl.n	103c8 <__sfvwrite_r+0x1f0>
   10300:	4552      	cmp	r2, sl
   10302:	d836      	bhi.n	10372 <__sfvwrite_r+0x19a>
   10304:	f413 6f90 	tst.w	r3, #1152	; 0x480
   10308:	d033      	beq.n	10372 <__sfvwrite_r+0x19a>
   1030a:	6921      	ldr	r1, [r4, #16]
   1030c:	6965      	ldr	r5, [r4, #20]
   1030e:	eba0 0b01 	sub.w	fp, r0, r1
   10312:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   10316:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1031a:	f10b 0201 	add.w	r2, fp, #1
   1031e:	106d      	asrs	r5, r5, #1
   10320:	4452      	add	r2, sl
   10322:	4295      	cmp	r5, r2
   10324:	bf38      	it	cc
   10326:	4615      	movcc	r5, r2
   10328:	055b      	lsls	r3, r3, #21
   1032a:	d53d      	bpl.n	103a8 <__sfvwrite_r+0x1d0>
   1032c:	4629      	mov	r1, r5
   1032e:	4630      	mov	r0, r6
   10330:	f7fd fa8a 	bl	d848 <_malloc_r>
   10334:	b948      	cbnz	r0, 1034a <__sfvwrite_r+0x172>
   10336:	230c      	movs	r3, #12
   10338:	6033      	str	r3, [r6, #0]
   1033a:	89a3      	ldrh	r3, [r4, #12]
   1033c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10340:	81a3      	strh	r3, [r4, #12]
   10342:	e7ae      	b.n	102a2 <__sfvwrite_r+0xca>
   10344:	4699      	mov	r9, r3
   10346:	469a      	mov	sl, r3
   10348:	e7d2      	b.n	102f0 <__sfvwrite_r+0x118>
   1034a:	465a      	mov	r2, fp
   1034c:	6921      	ldr	r1, [r4, #16]
   1034e:	9001      	str	r0, [sp, #4]
   10350:	f006 fc94 	bl	16c7c <memcpy>
   10354:	89a2      	ldrh	r2, [r4, #12]
   10356:	9b01      	ldr	r3, [sp, #4]
   10358:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1035c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   10360:	81a2      	strh	r2, [r4, #12]
   10362:	4652      	mov	r2, sl
   10364:	6123      	str	r3, [r4, #16]
   10366:	6165      	str	r5, [r4, #20]
   10368:	445b      	add	r3, fp
   1036a:	eba5 050b 	sub.w	r5, r5, fp
   1036e:	6023      	str	r3, [r4, #0]
   10370:	60a5      	str	r5, [r4, #8]
   10372:	4552      	cmp	r2, sl
   10374:	bf28      	it	cs
   10376:	4652      	movcs	r2, sl
   10378:	4655      	mov	r5, sl
   1037a:	4649      	mov	r1, r9
   1037c:	6820      	ldr	r0, [r4, #0]
   1037e:	9201      	str	r2, [sp, #4]
   10380:	f006 ff56 	bl	17230 <memmove>
   10384:	68a3      	ldr	r3, [r4, #8]
   10386:	9a01      	ldr	r2, [sp, #4]
   10388:	1a9b      	subs	r3, r3, r2
   1038a:	60a3      	str	r3, [r4, #8]
   1038c:	6823      	ldr	r3, [r4, #0]
   1038e:	441a      	add	r2, r3
   10390:	6022      	str	r2, [r4, #0]
   10392:	f8d8 0008 	ldr.w	r0, [r8, #8]
   10396:	44a9      	add	r9, r5
   10398:	ebaa 0a05 	sub.w	sl, sl, r5
   1039c:	1b45      	subs	r5, r0, r5
   1039e:	f8c8 5008 	str.w	r5, [r8, #8]
   103a2:	2d00      	cmp	r5, #0
   103a4:	d1a4      	bne.n	102f0 <__sfvwrite_r+0x118>
   103a6:	e71e      	b.n	101e6 <__sfvwrite_r+0xe>
   103a8:	462a      	mov	r2, r5
   103aa:	4630      	mov	r0, r6
   103ac:	f007 f842 	bl	17434 <_realloc_r>
   103b0:	4603      	mov	r3, r0
   103b2:	2800      	cmp	r0, #0
   103b4:	d1d5      	bne.n	10362 <__sfvwrite_r+0x18a>
   103b6:	4630      	mov	r0, r6
   103b8:	6921      	ldr	r1, [r4, #16]
   103ba:	f7fd f9fd 	bl	d7b8 <_free_r>
   103be:	89a3      	ldrh	r3, [r4, #12]
   103c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   103c4:	81a3      	strh	r3, [r4, #12]
   103c6:	e7b6      	b.n	10336 <__sfvwrite_r+0x15e>
   103c8:	6923      	ldr	r3, [r4, #16]
   103ca:	4283      	cmp	r3, r0
   103cc:	d302      	bcc.n	103d4 <__sfvwrite_r+0x1fc>
   103ce:	6961      	ldr	r1, [r4, #20]
   103d0:	4551      	cmp	r1, sl
   103d2:	d915      	bls.n	10400 <__sfvwrite_r+0x228>
   103d4:	4552      	cmp	r2, sl
   103d6:	bf28      	it	cs
   103d8:	4652      	movcs	r2, sl
   103da:	4615      	mov	r5, r2
   103dc:	4649      	mov	r1, r9
   103de:	f006 ff27 	bl	17230 <memmove>
   103e2:	68a3      	ldr	r3, [r4, #8]
   103e4:	6822      	ldr	r2, [r4, #0]
   103e6:	1b5b      	subs	r3, r3, r5
   103e8:	442a      	add	r2, r5
   103ea:	60a3      	str	r3, [r4, #8]
   103ec:	6022      	str	r2, [r4, #0]
   103ee:	2b00      	cmp	r3, #0
   103f0:	d1cf      	bne.n	10392 <__sfvwrite_r+0x1ba>
   103f2:	4621      	mov	r1, r4
   103f4:	4630      	mov	r0, r6
   103f6:	f7fd f867 	bl	d4c8 <_fflush_r>
   103fa:	2800      	cmp	r0, #0
   103fc:	d0c9      	beq.n	10392 <__sfvwrite_r+0x1ba>
   103fe:	e79c      	b.n	1033a <__sfvwrite_r+0x162>
   10400:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   10404:	459a      	cmp	sl, r3
   10406:	bf38      	it	cc
   10408:	4653      	movcc	r3, sl
   1040a:	fb93 f3f1 	sdiv	r3, r3, r1
   1040e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10410:	434b      	muls	r3, r1
   10412:	464a      	mov	r2, r9
   10414:	4630      	mov	r0, r6
   10416:	6a21      	ldr	r1, [r4, #32]
   10418:	47a8      	blx	r5
   1041a:	1e05      	subs	r5, r0, #0
   1041c:	dcb9      	bgt.n	10392 <__sfvwrite_r+0x1ba>
   1041e:	e78c      	b.n	1033a <__sfvwrite_r+0x162>
   10420:	e9d7 ab00 	ldrd	sl, fp, [r7]
   10424:	2000      	movs	r0, #0
   10426:	3708      	adds	r7, #8
   10428:	e6f4      	b.n	10214 <__sfvwrite_r+0x3c>
   1042a:	f10b 0901 	add.w	r9, fp, #1
   1042e:	e701      	b.n	10234 <__sfvwrite_r+0x5c>
   10430:	4293      	cmp	r3, r2
   10432:	dc08      	bgt.n	10446 <__sfvwrite_r+0x26e>
   10434:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10436:	4652      	mov	r2, sl
   10438:	4630      	mov	r0, r6
   1043a:	6a21      	ldr	r1, [r4, #32]
   1043c:	47a8      	blx	r5
   1043e:	1e05      	subs	r5, r0, #0
   10440:	f73f af14 	bgt.w	1026c <__sfvwrite_r+0x94>
   10444:	e779      	b.n	1033a <__sfvwrite_r+0x162>
   10446:	4651      	mov	r1, sl
   10448:	9201      	str	r2, [sp, #4]
   1044a:	f006 fef1 	bl	17230 <memmove>
   1044e:	9a01      	ldr	r2, [sp, #4]
   10450:	68a3      	ldr	r3, [r4, #8]
   10452:	4615      	mov	r5, r2
   10454:	1a9b      	subs	r3, r3, r2
   10456:	60a3      	str	r3, [r4, #8]
   10458:	6823      	ldr	r3, [r4, #0]
   1045a:	4413      	add	r3, r2
   1045c:	6023      	str	r3, [r4, #0]
   1045e:	e705      	b.n	1026c <__sfvwrite_r+0x94>
   10460:	2001      	movs	r0, #1
   10462:	e70d      	b.n	10280 <__sfvwrite_r+0xa8>
   10464:	7ffffc00 	.word	0x7ffffc00

00010468 <__gethex>:
   10468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1046c:	b08b      	sub	sp, #44	; 0x2c
   1046e:	9305      	str	r3, [sp, #20]
   10470:	4bb2      	ldr	r3, [pc, #712]	; (1073c <__gethex+0x2d4>)
   10472:	9002      	str	r0, [sp, #8]
   10474:	681b      	ldr	r3, [r3, #0]
   10476:	468b      	mov	fp, r1
   10478:	4618      	mov	r0, r3
   1047a:	4690      	mov	r8, r2
   1047c:	9303      	str	r3, [sp, #12]
   1047e:	f7f0 fcf7 	bl	e70 <strlen>
   10482:	4682      	mov	sl, r0
   10484:	9b03      	ldr	r3, [sp, #12]
   10486:	f8db 2000 	ldr.w	r2, [fp]
   1048a:	4403      	add	r3, r0
   1048c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   10490:	9306      	str	r3, [sp, #24]
   10492:	1c93      	adds	r3, r2, #2
   10494:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   10498:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   1049c:	32fe      	adds	r2, #254	; 0xfe
   1049e:	18d1      	adds	r1, r2, r3
   104a0:	461f      	mov	r7, r3
   104a2:	f813 0b01 	ldrb.w	r0, [r3], #1
   104a6:	9101      	str	r1, [sp, #4]
   104a8:	2830      	cmp	r0, #48	; 0x30
   104aa:	d0f8      	beq.n	1049e <__gethex+0x36>
   104ac:	f006 fde9 	bl	17082 <__hexdig_fun>
   104b0:	4604      	mov	r4, r0
   104b2:	2800      	cmp	r0, #0
   104b4:	d13a      	bne.n	1052c <__gethex+0xc4>
   104b6:	4652      	mov	r2, sl
   104b8:	4638      	mov	r0, r7
   104ba:	9903      	ldr	r1, [sp, #12]
   104bc:	f006 fc8c 	bl	16dd8 <strncmp>
   104c0:	4605      	mov	r5, r0
   104c2:	2800      	cmp	r0, #0
   104c4:	d166      	bne.n	10594 <__gethex+0x12c>
   104c6:	f817 000a 	ldrb.w	r0, [r7, sl]
   104ca:	eb07 060a 	add.w	r6, r7, sl
   104ce:	f006 fdd8 	bl	17082 <__hexdig_fun>
   104d2:	2800      	cmp	r0, #0
   104d4:	d060      	beq.n	10598 <__gethex+0x130>
   104d6:	4633      	mov	r3, r6
   104d8:	7818      	ldrb	r0, [r3, #0]
   104da:	461f      	mov	r7, r3
   104dc:	2830      	cmp	r0, #48	; 0x30
   104de:	f103 0301 	add.w	r3, r3, #1
   104e2:	d0f9      	beq.n	104d8 <__gethex+0x70>
   104e4:	f006 fdcd 	bl	17082 <__hexdig_fun>
   104e8:	2301      	movs	r3, #1
   104ea:	fab0 f480 	clz	r4, r0
   104ee:	4635      	mov	r5, r6
   104f0:	0964      	lsrs	r4, r4, #5
   104f2:	9301      	str	r3, [sp, #4]
   104f4:	463a      	mov	r2, r7
   104f6:	4616      	mov	r6, r2
   104f8:	7830      	ldrb	r0, [r6, #0]
   104fa:	3201      	adds	r2, #1
   104fc:	f006 fdc1 	bl	17082 <__hexdig_fun>
   10500:	2800      	cmp	r0, #0
   10502:	d1f8      	bne.n	104f6 <__gethex+0x8e>
   10504:	4652      	mov	r2, sl
   10506:	4630      	mov	r0, r6
   10508:	9903      	ldr	r1, [sp, #12]
   1050a:	f006 fc65 	bl	16dd8 <strncmp>
   1050e:	b980      	cbnz	r0, 10532 <__gethex+0xca>
   10510:	b94d      	cbnz	r5, 10526 <__gethex+0xbe>
   10512:	eb06 050a 	add.w	r5, r6, sl
   10516:	462a      	mov	r2, r5
   10518:	4616      	mov	r6, r2
   1051a:	7830      	ldrb	r0, [r6, #0]
   1051c:	3201      	adds	r2, #1
   1051e:	f006 fdb0 	bl	17082 <__hexdig_fun>
   10522:	2800      	cmp	r0, #0
   10524:	d1f8      	bne.n	10518 <__gethex+0xb0>
   10526:	1bad      	subs	r5, r5, r6
   10528:	00ad      	lsls	r5, r5, #2
   1052a:	e004      	b.n	10536 <__gethex+0xce>
   1052c:	2400      	movs	r4, #0
   1052e:	4625      	mov	r5, r4
   10530:	e7e0      	b.n	104f4 <__gethex+0x8c>
   10532:	2d00      	cmp	r5, #0
   10534:	d1f7      	bne.n	10526 <__gethex+0xbe>
   10536:	7833      	ldrb	r3, [r6, #0]
   10538:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1053c:	2b50      	cmp	r3, #80	; 0x50
   1053e:	d139      	bne.n	105b4 <__gethex+0x14c>
   10540:	7873      	ldrb	r3, [r6, #1]
   10542:	2b2b      	cmp	r3, #43	; 0x2b
   10544:	d02a      	beq.n	1059c <__gethex+0x134>
   10546:	2b2d      	cmp	r3, #45	; 0x2d
   10548:	d02c      	beq.n	105a4 <__gethex+0x13c>
   1054a:	f04f 0900 	mov.w	r9, #0
   1054e:	1c71      	adds	r1, r6, #1
   10550:	7808      	ldrb	r0, [r1, #0]
   10552:	f006 fd96 	bl	17082 <__hexdig_fun>
   10556:	1e43      	subs	r3, r0, #1
   10558:	b2db      	uxtb	r3, r3
   1055a:	2b18      	cmp	r3, #24
   1055c:	d82a      	bhi.n	105b4 <__gethex+0x14c>
   1055e:	f1a0 0210 	sub.w	r2, r0, #16
   10562:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   10566:	f006 fd8c 	bl	17082 <__hexdig_fun>
   1056a:	1e43      	subs	r3, r0, #1
   1056c:	b2db      	uxtb	r3, r3
   1056e:	2b18      	cmp	r3, #24
   10570:	d91b      	bls.n	105aa <__gethex+0x142>
   10572:	f1b9 0f00 	cmp.w	r9, #0
   10576:	d000      	beq.n	1057a <__gethex+0x112>
   10578:	4252      	negs	r2, r2
   1057a:	4415      	add	r5, r2
   1057c:	f8cb 1000 	str.w	r1, [fp]
   10580:	b1d4      	cbz	r4, 105b8 <__gethex+0x150>
   10582:	9b01      	ldr	r3, [sp, #4]
   10584:	2b00      	cmp	r3, #0
   10586:	bf14      	ite	ne
   10588:	2700      	movne	r7, #0
   1058a:	2706      	moveq	r7, #6
   1058c:	4638      	mov	r0, r7
   1058e:	b00b      	add	sp, #44	; 0x2c
   10590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10594:	463e      	mov	r6, r7
   10596:	4625      	mov	r5, r4
   10598:	2401      	movs	r4, #1
   1059a:	e7cc      	b.n	10536 <__gethex+0xce>
   1059c:	f04f 0900 	mov.w	r9, #0
   105a0:	1cb1      	adds	r1, r6, #2
   105a2:	e7d5      	b.n	10550 <__gethex+0xe8>
   105a4:	f04f 0901 	mov.w	r9, #1
   105a8:	e7fa      	b.n	105a0 <__gethex+0x138>
   105aa:	230a      	movs	r3, #10
   105ac:	fb03 0202 	mla	r2, r3, r2, r0
   105b0:	3a10      	subs	r2, #16
   105b2:	e7d6      	b.n	10562 <__gethex+0xfa>
   105b4:	4631      	mov	r1, r6
   105b6:	e7e1      	b.n	1057c <__gethex+0x114>
   105b8:	4621      	mov	r1, r4
   105ba:	1bf3      	subs	r3, r6, r7
   105bc:	3b01      	subs	r3, #1
   105be:	2b07      	cmp	r3, #7
   105c0:	dc0a      	bgt.n	105d8 <__gethex+0x170>
   105c2:	9802      	ldr	r0, [sp, #8]
   105c4:	f000 f9cc 	bl	10960 <_Balloc>
   105c8:	4604      	mov	r4, r0
   105ca:	b940      	cbnz	r0, 105de <__gethex+0x176>
   105cc:	4602      	mov	r2, r0
   105ce:	21de      	movs	r1, #222	; 0xde
   105d0:	4b5b      	ldr	r3, [pc, #364]	; (10740 <__gethex+0x2d8>)
   105d2:	485c      	ldr	r0, [pc, #368]	; (10744 <__gethex+0x2dc>)
   105d4:	f7ff fdae 	bl	10134 <__assert_func>
   105d8:	3101      	adds	r1, #1
   105da:	105b      	asrs	r3, r3, #1
   105dc:	e7ef      	b.n	105be <__gethex+0x156>
   105de:	f04f 0b00 	mov.w	fp, #0
   105e2:	f100 0914 	add.w	r9, r0, #20
   105e6:	f1ca 0301 	rsb	r3, sl, #1
   105ea:	f8cd 9010 	str.w	r9, [sp, #16]
   105ee:	f8cd b004 	str.w	fp, [sp, #4]
   105f2:	9308      	str	r3, [sp, #32]
   105f4:	42b7      	cmp	r7, r6
   105f6:	d33f      	bcc.n	10678 <__gethex+0x210>
   105f8:	9f04      	ldr	r7, [sp, #16]
   105fa:	9b01      	ldr	r3, [sp, #4]
   105fc:	f847 3b04 	str.w	r3, [r7], #4
   10600:	eba7 0709 	sub.w	r7, r7, r9
   10604:	10bf      	asrs	r7, r7, #2
   10606:	6127      	str	r7, [r4, #16]
   10608:	4618      	mov	r0, r3
   1060a:	f006 fe2b 	bl	17264 <__hi0bits>
   1060e:	017f      	lsls	r7, r7, #5
   10610:	f8d8 6000 	ldr.w	r6, [r8]
   10614:	1a3f      	subs	r7, r7, r0
   10616:	42b7      	cmp	r7, r6
   10618:	dd62      	ble.n	106e0 <__gethex+0x278>
   1061a:	1bbf      	subs	r7, r7, r6
   1061c:	4639      	mov	r1, r7
   1061e:	4620      	mov	r0, r4
   10620:	f006 fed9 	bl	173d6 <__any_on>
   10624:	4682      	mov	sl, r0
   10626:	b1a8      	cbz	r0, 10654 <__gethex+0x1ec>
   10628:	f04f 0a01 	mov.w	sl, #1
   1062c:	1e7b      	subs	r3, r7, #1
   1062e:	1159      	asrs	r1, r3, #5
   10630:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   10634:	f003 021f 	and.w	r2, r3, #31
   10638:	fa0a f202 	lsl.w	r2, sl, r2
   1063c:	420a      	tst	r2, r1
   1063e:	d009      	beq.n	10654 <__gethex+0x1ec>
   10640:	4553      	cmp	r3, sl
   10642:	dd05      	ble.n	10650 <__gethex+0x1e8>
   10644:	4620      	mov	r0, r4
   10646:	1eb9      	subs	r1, r7, #2
   10648:	f006 fec5 	bl	173d6 <__any_on>
   1064c:	2800      	cmp	r0, #0
   1064e:	d144      	bne.n	106da <__gethex+0x272>
   10650:	f04f 0a02 	mov.w	sl, #2
   10654:	4639      	mov	r1, r7
   10656:	4620      	mov	r0, r4
   10658:	f006 fcc0 	bl	16fdc <rshift>
   1065c:	443d      	add	r5, r7
   1065e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   10662:	42ab      	cmp	r3, r5
   10664:	da4a      	bge.n	106fc <__gethex+0x294>
   10666:	4621      	mov	r1, r4
   10668:	9802      	ldr	r0, [sp, #8]
   1066a:	f000 f9b9 	bl	109e0 <_Bfree>
   1066e:	2300      	movs	r3, #0
   10670:	9a14      	ldr	r2, [sp, #80]	; 0x50
   10672:	27a3      	movs	r7, #163	; 0xa3
   10674:	6013      	str	r3, [r2, #0]
   10676:	e789      	b.n	1058c <__gethex+0x124>
   10678:	1e73      	subs	r3, r6, #1
   1067a:	9a06      	ldr	r2, [sp, #24]
   1067c:	9307      	str	r3, [sp, #28]
   1067e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   10682:	4293      	cmp	r3, r2
   10684:	d019      	beq.n	106ba <__gethex+0x252>
   10686:	f1bb 0f20 	cmp.w	fp, #32
   1068a:	d107      	bne.n	1069c <__gethex+0x234>
   1068c:	9b04      	ldr	r3, [sp, #16]
   1068e:	9a01      	ldr	r2, [sp, #4]
   10690:	f843 2b04 	str.w	r2, [r3], #4
   10694:	9304      	str	r3, [sp, #16]
   10696:	2300      	movs	r3, #0
   10698:	469b      	mov	fp, r3
   1069a:	9301      	str	r3, [sp, #4]
   1069c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   106a0:	f006 fcef 	bl	17082 <__hexdig_fun>
   106a4:	9b01      	ldr	r3, [sp, #4]
   106a6:	f000 000f 	and.w	r0, r0, #15
   106aa:	fa00 f00b 	lsl.w	r0, r0, fp
   106ae:	4303      	orrs	r3, r0
   106b0:	9301      	str	r3, [sp, #4]
   106b2:	f10b 0b04 	add.w	fp, fp, #4
   106b6:	9b07      	ldr	r3, [sp, #28]
   106b8:	e00d      	b.n	106d6 <__gethex+0x26e>
   106ba:	9a08      	ldr	r2, [sp, #32]
   106bc:	1e73      	subs	r3, r6, #1
   106be:	4413      	add	r3, r2
   106c0:	42bb      	cmp	r3, r7
   106c2:	d3e0      	bcc.n	10686 <__gethex+0x21e>
   106c4:	4618      	mov	r0, r3
   106c6:	4652      	mov	r2, sl
   106c8:	9903      	ldr	r1, [sp, #12]
   106ca:	9309      	str	r3, [sp, #36]	; 0x24
   106cc:	f006 fb84 	bl	16dd8 <strncmp>
   106d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   106d2:	2800      	cmp	r0, #0
   106d4:	d1d7      	bne.n	10686 <__gethex+0x21e>
   106d6:	461e      	mov	r6, r3
   106d8:	e78c      	b.n	105f4 <__gethex+0x18c>
   106da:	f04f 0a03 	mov.w	sl, #3
   106de:	e7b9      	b.n	10654 <__gethex+0x1ec>
   106e0:	da09      	bge.n	106f6 <__gethex+0x28e>
   106e2:	1bf7      	subs	r7, r6, r7
   106e4:	4621      	mov	r1, r4
   106e6:	463a      	mov	r2, r7
   106e8:	9802      	ldr	r0, [sp, #8]
   106ea:	f000 fb43 	bl	10d74 <__lshift>
   106ee:	4604      	mov	r4, r0
   106f0:	1bed      	subs	r5, r5, r7
   106f2:	f100 0914 	add.w	r9, r0, #20
   106f6:	f04f 0a00 	mov.w	sl, #0
   106fa:	e7b0      	b.n	1065e <__gethex+0x1f6>
   106fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   10700:	42a8      	cmp	r0, r5
   10702:	dd72      	ble.n	107ea <__gethex+0x382>
   10704:	1b45      	subs	r5, r0, r5
   10706:	42ae      	cmp	r6, r5
   10708:	dc35      	bgt.n	10776 <__gethex+0x30e>
   1070a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1070e:	2b02      	cmp	r3, #2
   10710:	d029      	beq.n	10766 <__gethex+0x2fe>
   10712:	2b03      	cmp	r3, #3
   10714:	d02b      	beq.n	1076e <__gethex+0x306>
   10716:	2b01      	cmp	r3, #1
   10718:	d11c      	bne.n	10754 <__gethex+0x2ec>
   1071a:	42ae      	cmp	r6, r5
   1071c:	d11a      	bne.n	10754 <__gethex+0x2ec>
   1071e:	2e01      	cmp	r6, #1
   10720:	d112      	bne.n	10748 <__gethex+0x2e0>
   10722:	f8d8 3004 	ldr.w	r3, [r8, #4]
   10726:	9a05      	ldr	r2, [sp, #20]
   10728:	2762      	movs	r7, #98	; 0x62
   1072a:	6013      	str	r3, [r2, #0]
   1072c:	2301      	movs	r3, #1
   1072e:	6123      	str	r3, [r4, #16]
   10730:	f8c9 3000 	str.w	r3, [r9]
   10734:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10736:	601c      	str	r4, [r3, #0]
   10738:	e728      	b.n	1058c <__gethex+0x124>
   1073a:	bf00      	nop
   1073c:	00017cd8 	.word	0x00017cd8
   10740:	00018d1e 	.word	0x00018d1e
   10744:	00018d2f 	.word	0x00018d2f
   10748:	4620      	mov	r0, r4
   1074a:	1e71      	subs	r1, r6, #1
   1074c:	f006 fe43 	bl	173d6 <__any_on>
   10750:	2800      	cmp	r0, #0
   10752:	d1e6      	bne.n	10722 <__gethex+0x2ba>
   10754:	4621      	mov	r1, r4
   10756:	9802      	ldr	r0, [sp, #8]
   10758:	f000 f942 	bl	109e0 <_Bfree>
   1075c:	2300      	movs	r3, #0
   1075e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   10760:	2750      	movs	r7, #80	; 0x50
   10762:	6013      	str	r3, [r2, #0]
   10764:	e712      	b.n	1058c <__gethex+0x124>
   10766:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10768:	2b00      	cmp	r3, #0
   1076a:	d1f3      	bne.n	10754 <__gethex+0x2ec>
   1076c:	e7d9      	b.n	10722 <__gethex+0x2ba>
   1076e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10770:	2b00      	cmp	r3, #0
   10772:	d1d6      	bne.n	10722 <__gethex+0x2ba>
   10774:	e7ee      	b.n	10754 <__gethex+0x2ec>
   10776:	1e6f      	subs	r7, r5, #1
   10778:	f1ba 0f00 	cmp.w	sl, #0
   1077c:	d132      	bne.n	107e4 <__gethex+0x37c>
   1077e:	b127      	cbz	r7, 1078a <__gethex+0x322>
   10780:	4639      	mov	r1, r7
   10782:	4620      	mov	r0, r4
   10784:	f006 fe27 	bl	173d6 <__any_on>
   10788:	4682      	mov	sl, r0
   1078a:	2101      	movs	r1, #1
   1078c:	117b      	asrs	r3, r7, #5
   1078e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   10792:	f007 071f 	and.w	r7, r7, #31
   10796:	fa01 f707 	lsl.w	r7, r1, r7
   1079a:	421f      	tst	r7, r3
   1079c:	f04f 0702 	mov.w	r7, #2
   107a0:	4629      	mov	r1, r5
   107a2:	4620      	mov	r0, r4
   107a4:	bf18      	it	ne
   107a6:	f04a 0a02 	orrne.w	sl, sl, #2
   107aa:	1b76      	subs	r6, r6, r5
   107ac:	f006 fc16 	bl	16fdc <rshift>
   107b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
   107b4:	f1ba 0f00 	cmp.w	sl, #0
   107b8:	d048      	beq.n	1084c <__gethex+0x3e4>
   107ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
   107be:	2b02      	cmp	r3, #2
   107c0:	d015      	beq.n	107ee <__gethex+0x386>
   107c2:	2b03      	cmp	r3, #3
   107c4:	d017      	beq.n	107f6 <__gethex+0x38e>
   107c6:	2b01      	cmp	r3, #1
   107c8:	d109      	bne.n	107de <__gethex+0x376>
   107ca:	f01a 0f02 	tst.w	sl, #2
   107ce:	d006      	beq.n	107de <__gethex+0x376>
   107d0:	f8d9 0000 	ldr.w	r0, [r9]
   107d4:	ea4a 0a00 	orr.w	sl, sl, r0
   107d8:	f01a 0f01 	tst.w	sl, #1
   107dc:	d10e      	bne.n	107fc <__gethex+0x394>
   107de:	f047 0710 	orr.w	r7, r7, #16
   107e2:	e033      	b.n	1084c <__gethex+0x3e4>
   107e4:	f04f 0a01 	mov.w	sl, #1
   107e8:	e7cf      	b.n	1078a <__gethex+0x322>
   107ea:	2701      	movs	r7, #1
   107ec:	e7e2      	b.n	107b4 <__gethex+0x34c>
   107ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   107f0:	f1c3 0301 	rsb	r3, r3, #1
   107f4:	9315      	str	r3, [sp, #84]	; 0x54
   107f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   107f8:	2b00      	cmp	r3, #0
   107fa:	d0f0      	beq.n	107de <__gethex+0x376>
   107fc:	f04f 0c00 	mov.w	ip, #0
   10800:	f8d4 b010 	ldr.w	fp, [r4, #16]
   10804:	f104 0314 	add.w	r3, r4, #20
   10808:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   1080c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   10810:	4618      	mov	r0, r3
   10812:	f853 2b04 	ldr.w	r2, [r3], #4
   10816:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1081a:	d01c      	beq.n	10856 <__gethex+0x3ee>
   1081c:	3201      	adds	r2, #1
   1081e:	6002      	str	r2, [r0, #0]
   10820:	2f02      	cmp	r7, #2
   10822:	f104 0314 	add.w	r3, r4, #20
   10826:	d13d      	bne.n	108a4 <__gethex+0x43c>
   10828:	f8d8 2000 	ldr.w	r2, [r8]
   1082c:	3a01      	subs	r2, #1
   1082e:	42b2      	cmp	r2, r6
   10830:	d10a      	bne.n	10848 <__gethex+0x3e0>
   10832:	2201      	movs	r2, #1
   10834:	1171      	asrs	r1, r6, #5
   10836:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1083a:	f006 061f 	and.w	r6, r6, #31
   1083e:	fa02 f606 	lsl.w	r6, r2, r6
   10842:	421e      	tst	r6, r3
   10844:	bf18      	it	ne
   10846:	4617      	movne	r7, r2
   10848:	f047 0720 	orr.w	r7, r7, #32
   1084c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1084e:	601c      	str	r4, [r3, #0]
   10850:	9b05      	ldr	r3, [sp, #20]
   10852:	601d      	str	r5, [r3, #0]
   10854:	e69a      	b.n	1058c <__gethex+0x124>
   10856:	4299      	cmp	r1, r3
   10858:	f843 cc04 	str.w	ip, [r3, #-4]
   1085c:	d8d8      	bhi.n	10810 <__gethex+0x3a8>
   1085e:	68a3      	ldr	r3, [r4, #8]
   10860:	459b      	cmp	fp, r3
   10862:	db17      	blt.n	10894 <__gethex+0x42c>
   10864:	6861      	ldr	r1, [r4, #4]
   10866:	9802      	ldr	r0, [sp, #8]
   10868:	3101      	adds	r1, #1
   1086a:	f000 f879 	bl	10960 <_Balloc>
   1086e:	4681      	mov	r9, r0
   10870:	b918      	cbnz	r0, 1087a <__gethex+0x412>
   10872:	4602      	mov	r2, r0
   10874:	2184      	movs	r1, #132	; 0x84
   10876:	4b19      	ldr	r3, [pc, #100]	; (108dc <__gethex+0x474>)
   10878:	e6ab      	b.n	105d2 <__gethex+0x16a>
   1087a:	6922      	ldr	r2, [r4, #16]
   1087c:	f104 010c 	add.w	r1, r4, #12
   10880:	3202      	adds	r2, #2
   10882:	0092      	lsls	r2, r2, #2
   10884:	300c      	adds	r0, #12
   10886:	f006 f9f9 	bl	16c7c <memcpy>
   1088a:	4621      	mov	r1, r4
   1088c:	9802      	ldr	r0, [sp, #8]
   1088e:	f000 f8a7 	bl	109e0 <_Bfree>
   10892:	464c      	mov	r4, r9
   10894:	6923      	ldr	r3, [r4, #16]
   10896:	1c5a      	adds	r2, r3, #1
   10898:	6122      	str	r2, [r4, #16]
   1089a:	2201      	movs	r2, #1
   1089c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   108a0:	615a      	str	r2, [r3, #20]
   108a2:	e7bd      	b.n	10820 <__gethex+0x3b8>
   108a4:	6922      	ldr	r2, [r4, #16]
   108a6:	455a      	cmp	r2, fp
   108a8:	dd0b      	ble.n	108c2 <__gethex+0x45a>
   108aa:	2101      	movs	r1, #1
   108ac:	4620      	mov	r0, r4
   108ae:	f006 fb95 	bl	16fdc <rshift>
   108b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   108b6:	3501      	adds	r5, #1
   108b8:	42ab      	cmp	r3, r5
   108ba:	f6ff aed4 	blt.w	10666 <__gethex+0x1fe>
   108be:	2701      	movs	r7, #1
   108c0:	e7c2      	b.n	10848 <__gethex+0x3e0>
   108c2:	f016 061f 	ands.w	r6, r6, #31
   108c6:	d0fa      	beq.n	108be <__gethex+0x456>
   108c8:	4453      	add	r3, sl
   108ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
   108ce:	f006 fcc9 	bl	17264 <__hi0bits>
   108d2:	f1c6 0620 	rsb	r6, r6, #32
   108d6:	42b0      	cmp	r0, r6
   108d8:	dbe7      	blt.n	108aa <__gethex+0x442>
   108da:	e7f0      	b.n	108be <__gethex+0x456>
   108dc:	00018d1e 	.word	0x00018d1e

000108e0 <_gettimeofday_r>:
   108e0:	b538      	push	{r3, r4, r5, lr}
   108e2:	2300      	movs	r3, #0
   108e4:	4d06      	ldr	r5, [pc, #24]	; (10900 <_gettimeofday_r+0x20>)
   108e6:	4604      	mov	r4, r0
   108e8:	4608      	mov	r0, r1
   108ea:	4611      	mov	r1, r2
   108ec:	602b      	str	r3, [r5, #0]
   108ee:	f001 f8bd 	bl	11a6c <_gettimeofday>
   108f2:	1c43      	adds	r3, r0, #1
   108f4:	d102      	bne.n	108fc <_gettimeofday_r+0x1c>
   108f6:	682b      	ldr	r3, [r5, #0]
   108f8:	b103      	cbz	r3, 108fc <_gettimeofday_r+0x1c>
   108fa:	6023      	str	r3, [r4, #0]
   108fc:	bd38      	pop	{r3, r4, r5, pc}
   108fe:	bf00      	nop
   10900:	20000480 	.word	0x20000480

00010904 <_isatty_r>:
   10904:	b538      	push	{r3, r4, r5, lr}
   10906:	2300      	movs	r3, #0
   10908:	4d05      	ldr	r5, [pc, #20]	; (10920 <_isatty_r+0x1c>)
   1090a:	4604      	mov	r4, r0
   1090c:	4608      	mov	r0, r1
   1090e:	602b      	str	r3, [r5, #0]
   10910:	f001 f88a 	bl	11a28 <_isatty>
   10914:	1c43      	adds	r3, r0, #1
   10916:	d102      	bne.n	1091e <_isatty_r+0x1a>
   10918:	682b      	ldr	r3, [r5, #0]
   1091a:	b103      	cbz	r3, 1091e <_isatty_r+0x1a>
   1091c:	6023      	str	r3, [r4, #0]
   1091e:	bd38      	pop	{r3, r4, r5, pc}
   10920:	20000480 	.word	0x20000480

00010924 <_lseek_r>:
   10924:	b538      	push	{r3, r4, r5, lr}
   10926:	4604      	mov	r4, r0
   10928:	4608      	mov	r0, r1
   1092a:	4611      	mov	r1, r2
   1092c:	2200      	movs	r2, #0
   1092e:	4d05      	ldr	r5, [pc, #20]	; (10944 <_lseek_r+0x20>)
   10930:	602a      	str	r2, [r5, #0]
   10932:	461a      	mov	r2, r3
   10934:	f001 f876 	bl	11a24 <_lseek>
   10938:	1c43      	adds	r3, r0, #1
   1093a:	d102      	bne.n	10942 <_lseek_r+0x1e>
   1093c:	682b      	ldr	r3, [r5, #0]
   1093e:	b103      	cbz	r3, 10942 <_lseek_r+0x1e>
   10940:	6023      	str	r3, [r4, #0]
   10942:	bd38      	pop	{r3, r4, r5, pc}
   10944:	20000480 	.word	0x20000480

00010948 <__malloc_lock>:
   10948:	4801      	ldr	r0, [pc, #4]	; (10950 <__malloc_lock+0x8>)
   1094a:	f001 b885 	b.w	11a58 <__retarget_lock_acquire_recursive>
   1094e:	bf00      	nop
   10950:	2000020c 	.word	0x2000020c

00010954 <__malloc_unlock>:
   10954:	4801      	ldr	r0, [pc, #4]	; (1095c <__malloc_unlock+0x8>)
   10956:	f001 b885 	b.w	11a64 <__retarget_lock_release_recursive>
   1095a:	bf00      	nop
   1095c:	2000020c 	.word	0x2000020c

00010960 <_Balloc>:
   10960:	b570      	push	{r4, r5, r6, lr}
   10962:	6a46      	ldr	r6, [r0, #36]	; 0x24
   10964:	4604      	mov	r4, r0
   10966:	460d      	mov	r5, r1
   10968:	b976      	cbnz	r6, 10988 <_Balloc+0x28>
   1096a:	2010      	movs	r0, #16
   1096c:	f7fc ff14 	bl	d798 <malloc>
   10970:	4602      	mov	r2, r0
   10972:	6260      	str	r0, [r4, #36]	; 0x24
   10974:	b920      	cbnz	r0, 10980 <_Balloc+0x20>
   10976:	2166      	movs	r1, #102	; 0x66
   10978:	4b17      	ldr	r3, [pc, #92]	; (109d8 <_Balloc+0x78>)
   1097a:	4818      	ldr	r0, [pc, #96]	; (109dc <_Balloc+0x7c>)
   1097c:	f7ff fbda 	bl	10134 <__assert_func>
   10980:	e9c0 6601 	strd	r6, r6, [r0, #4]
   10984:	6006      	str	r6, [r0, #0]
   10986:	60c6      	str	r6, [r0, #12]
   10988:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1098a:	68f3      	ldr	r3, [r6, #12]
   1098c:	b183      	cbz	r3, 109b0 <_Balloc+0x50>
   1098e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10990:	68db      	ldr	r3, [r3, #12]
   10992:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   10996:	b9b8      	cbnz	r0, 109c8 <_Balloc+0x68>
   10998:	2101      	movs	r1, #1
   1099a:	fa01 f605 	lsl.w	r6, r1, r5
   1099e:	1d72      	adds	r2, r6, #5
   109a0:	4620      	mov	r0, r4
   109a2:	0092      	lsls	r2, r2, #2
   109a4:	f006 fd38 	bl	17418 <_calloc_r>
   109a8:	b160      	cbz	r0, 109c4 <_Balloc+0x64>
   109aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
   109ae:	e00e      	b.n	109ce <_Balloc+0x6e>
   109b0:	2221      	movs	r2, #33	; 0x21
   109b2:	2104      	movs	r1, #4
   109b4:	4620      	mov	r0, r4
   109b6:	f006 fd2f 	bl	17418 <_calloc_r>
   109ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   109bc:	60f0      	str	r0, [r6, #12]
   109be:	68db      	ldr	r3, [r3, #12]
   109c0:	2b00      	cmp	r3, #0
   109c2:	d1e4      	bne.n	1098e <_Balloc+0x2e>
   109c4:	2000      	movs	r0, #0
   109c6:	bd70      	pop	{r4, r5, r6, pc}
   109c8:	6802      	ldr	r2, [r0, #0]
   109ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   109ce:	2300      	movs	r3, #0
   109d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
   109d4:	e7f7      	b.n	109c6 <_Balloc+0x66>
   109d6:	bf00      	nop
   109d8:	00018cab 	.word	0x00018cab
   109dc:	00018d93 	.word	0x00018d93

000109e0 <_Bfree>:
   109e0:	b570      	push	{r4, r5, r6, lr}
   109e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
   109e4:	4605      	mov	r5, r0
   109e6:	460c      	mov	r4, r1
   109e8:	b976      	cbnz	r6, 10a08 <_Bfree+0x28>
   109ea:	2010      	movs	r0, #16
   109ec:	f7fc fed4 	bl	d798 <malloc>
   109f0:	4602      	mov	r2, r0
   109f2:	6268      	str	r0, [r5, #36]	; 0x24
   109f4:	b920      	cbnz	r0, 10a00 <_Bfree+0x20>
   109f6:	218a      	movs	r1, #138	; 0x8a
   109f8:	4b08      	ldr	r3, [pc, #32]	; (10a1c <_Bfree+0x3c>)
   109fa:	4809      	ldr	r0, [pc, #36]	; (10a20 <_Bfree+0x40>)
   109fc:	f7ff fb9a 	bl	10134 <__assert_func>
   10a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
   10a04:	6006      	str	r6, [r0, #0]
   10a06:	60c6      	str	r6, [r0, #12]
   10a08:	b13c      	cbz	r4, 10a1a <_Bfree+0x3a>
   10a0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10a0c:	6862      	ldr	r2, [r4, #4]
   10a0e:	68db      	ldr	r3, [r3, #12]
   10a10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10a14:	6021      	str	r1, [r4, #0]
   10a16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   10a1a:	bd70      	pop	{r4, r5, r6, pc}
   10a1c:	00018cab 	.word	0x00018cab
   10a20:	00018d93 	.word	0x00018d93

00010a24 <__multadd>:
   10a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a28:	4607      	mov	r7, r0
   10a2a:	460c      	mov	r4, r1
   10a2c:	461e      	mov	r6, r3
   10a2e:	2000      	movs	r0, #0
   10a30:	690d      	ldr	r5, [r1, #16]
   10a32:	f101 0c14 	add.w	ip, r1, #20
   10a36:	f8dc 3000 	ldr.w	r3, [ip]
   10a3a:	3001      	adds	r0, #1
   10a3c:	b299      	uxth	r1, r3
   10a3e:	fb02 6101 	mla	r1, r2, r1, r6
   10a42:	0c1e      	lsrs	r6, r3, #16
   10a44:	0c0b      	lsrs	r3, r1, #16
   10a46:	fb02 3306 	mla	r3, r2, r6, r3
   10a4a:	b289      	uxth	r1, r1
   10a4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   10a50:	4285      	cmp	r5, r0
   10a52:	ea4f 4613 	mov.w	r6, r3, lsr #16
   10a56:	f84c 1b04 	str.w	r1, [ip], #4
   10a5a:	dcec      	bgt.n	10a36 <__multadd+0x12>
   10a5c:	b30e      	cbz	r6, 10aa2 <__multadd+0x7e>
   10a5e:	68a3      	ldr	r3, [r4, #8]
   10a60:	42ab      	cmp	r3, r5
   10a62:	dc19      	bgt.n	10a98 <__multadd+0x74>
   10a64:	6861      	ldr	r1, [r4, #4]
   10a66:	4638      	mov	r0, r7
   10a68:	3101      	adds	r1, #1
   10a6a:	f7ff ff79 	bl	10960 <_Balloc>
   10a6e:	4680      	mov	r8, r0
   10a70:	b928      	cbnz	r0, 10a7e <__multadd+0x5a>
   10a72:	4602      	mov	r2, r0
   10a74:	21b5      	movs	r1, #181	; 0xb5
   10a76:	4b0c      	ldr	r3, [pc, #48]	; (10aa8 <__multadd+0x84>)
   10a78:	480c      	ldr	r0, [pc, #48]	; (10aac <__multadd+0x88>)
   10a7a:	f7ff fb5b 	bl	10134 <__assert_func>
   10a7e:	6922      	ldr	r2, [r4, #16]
   10a80:	f104 010c 	add.w	r1, r4, #12
   10a84:	3202      	adds	r2, #2
   10a86:	0092      	lsls	r2, r2, #2
   10a88:	300c      	adds	r0, #12
   10a8a:	f006 f8f7 	bl	16c7c <memcpy>
   10a8e:	4621      	mov	r1, r4
   10a90:	4638      	mov	r0, r7
   10a92:	f7ff ffa5 	bl	109e0 <_Bfree>
   10a96:	4644      	mov	r4, r8
   10a98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   10a9c:	3501      	adds	r5, #1
   10a9e:	615e      	str	r6, [r3, #20]
   10aa0:	6125      	str	r5, [r4, #16]
   10aa2:	4620      	mov	r0, r4
   10aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10aa8:	00018d1e 	.word	0x00018d1e
   10aac:	00018d93 	.word	0x00018d93

00010ab0 <__s2b>:
   10ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10ab4:	4615      	mov	r5, r2
   10ab6:	2209      	movs	r2, #9
   10ab8:	461f      	mov	r7, r3
   10aba:	3308      	adds	r3, #8
   10abc:	460c      	mov	r4, r1
   10abe:	fb93 f3f2 	sdiv	r3, r3, r2
   10ac2:	4606      	mov	r6, r0
   10ac4:	2201      	movs	r2, #1
   10ac6:	2100      	movs	r1, #0
   10ac8:	429a      	cmp	r2, r3
   10aca:	db09      	blt.n	10ae0 <__s2b+0x30>
   10acc:	4630      	mov	r0, r6
   10ace:	f7ff ff47 	bl	10960 <_Balloc>
   10ad2:	b940      	cbnz	r0, 10ae6 <__s2b+0x36>
   10ad4:	4602      	mov	r2, r0
   10ad6:	21ce      	movs	r1, #206	; 0xce
   10ad8:	4b18      	ldr	r3, [pc, #96]	; (10b3c <__s2b+0x8c>)
   10ada:	4819      	ldr	r0, [pc, #100]	; (10b40 <__s2b+0x90>)
   10adc:	f7ff fb2a 	bl	10134 <__assert_func>
   10ae0:	0052      	lsls	r2, r2, #1
   10ae2:	3101      	adds	r1, #1
   10ae4:	e7f0      	b.n	10ac8 <__s2b+0x18>
   10ae6:	9b08      	ldr	r3, [sp, #32]
   10ae8:	2d09      	cmp	r5, #9
   10aea:	6143      	str	r3, [r0, #20]
   10aec:	f04f 0301 	mov.w	r3, #1
   10af0:	6103      	str	r3, [r0, #16]
   10af2:	dd16      	ble.n	10b22 <__s2b+0x72>
   10af4:	f104 0909 	add.w	r9, r4, #9
   10af8:	46c8      	mov	r8, r9
   10afa:	442c      	add	r4, r5
   10afc:	f818 3b01 	ldrb.w	r3, [r8], #1
   10b00:	4601      	mov	r1, r0
   10b02:	220a      	movs	r2, #10
   10b04:	4630      	mov	r0, r6
   10b06:	3b30      	subs	r3, #48	; 0x30
   10b08:	f7ff ff8c 	bl	10a24 <__multadd>
   10b0c:	45a0      	cmp	r8, r4
   10b0e:	d1f5      	bne.n	10afc <__s2b+0x4c>
   10b10:	f1a5 0408 	sub.w	r4, r5, #8
   10b14:	444c      	add	r4, r9
   10b16:	1b2d      	subs	r5, r5, r4
   10b18:	1963      	adds	r3, r4, r5
   10b1a:	42bb      	cmp	r3, r7
   10b1c:	db04      	blt.n	10b28 <__s2b+0x78>
   10b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10b22:	2509      	movs	r5, #9
   10b24:	340a      	adds	r4, #10
   10b26:	e7f6      	b.n	10b16 <__s2b+0x66>
   10b28:	f814 3b01 	ldrb.w	r3, [r4], #1
   10b2c:	4601      	mov	r1, r0
   10b2e:	220a      	movs	r2, #10
   10b30:	4630      	mov	r0, r6
   10b32:	3b30      	subs	r3, #48	; 0x30
   10b34:	f7ff ff76 	bl	10a24 <__multadd>
   10b38:	e7ee      	b.n	10b18 <__s2b+0x68>
   10b3a:	bf00      	nop
   10b3c:	00018d1e 	.word	0x00018d1e
   10b40:	00018d93 	.word	0x00018d93

00010b44 <__i2b>:
   10b44:	b510      	push	{r4, lr}
   10b46:	460c      	mov	r4, r1
   10b48:	2101      	movs	r1, #1
   10b4a:	f7ff ff09 	bl	10960 <_Balloc>
   10b4e:	4602      	mov	r2, r0
   10b50:	b928      	cbnz	r0, 10b5e <__i2b+0x1a>
   10b52:	f44f 71a0 	mov.w	r1, #320	; 0x140
   10b56:	4b04      	ldr	r3, [pc, #16]	; (10b68 <__i2b+0x24>)
   10b58:	4804      	ldr	r0, [pc, #16]	; (10b6c <__i2b+0x28>)
   10b5a:	f7ff faeb 	bl	10134 <__assert_func>
   10b5e:	2301      	movs	r3, #1
   10b60:	6144      	str	r4, [r0, #20]
   10b62:	6103      	str	r3, [r0, #16]
   10b64:	bd10      	pop	{r4, pc}
   10b66:	bf00      	nop
   10b68:	00018d1e 	.word	0x00018d1e
   10b6c:	00018d93 	.word	0x00018d93

00010b70 <__multiply>:
   10b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b74:	4691      	mov	r9, r2
   10b76:	690a      	ldr	r2, [r1, #16]
   10b78:	f8d9 3010 	ldr.w	r3, [r9, #16]
   10b7c:	460c      	mov	r4, r1
   10b7e:	429a      	cmp	r2, r3
   10b80:	bfbe      	ittt	lt
   10b82:	460b      	movlt	r3, r1
   10b84:	464c      	movlt	r4, r9
   10b86:	4699      	movlt	r9, r3
   10b88:	6927      	ldr	r7, [r4, #16]
   10b8a:	f8d9 a010 	ldr.w	sl, [r9, #16]
   10b8e:	68a3      	ldr	r3, [r4, #8]
   10b90:	6861      	ldr	r1, [r4, #4]
   10b92:	eb07 060a 	add.w	r6, r7, sl
   10b96:	42b3      	cmp	r3, r6
   10b98:	b085      	sub	sp, #20
   10b9a:	bfb8      	it	lt
   10b9c:	3101      	addlt	r1, #1
   10b9e:	f7ff fedf 	bl	10960 <_Balloc>
   10ba2:	b930      	cbnz	r0, 10bb2 <__multiply+0x42>
   10ba4:	4602      	mov	r2, r0
   10ba6:	f240 115d 	movw	r1, #349	; 0x15d
   10baa:	4b43      	ldr	r3, [pc, #268]	; (10cb8 <__multiply+0x148>)
   10bac:	4843      	ldr	r0, [pc, #268]	; (10cbc <__multiply+0x14c>)
   10bae:	f7ff fac1 	bl	10134 <__assert_func>
   10bb2:	f100 0514 	add.w	r5, r0, #20
   10bb6:	462b      	mov	r3, r5
   10bb8:	2200      	movs	r2, #0
   10bba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   10bbe:	4543      	cmp	r3, r8
   10bc0:	d321      	bcc.n	10c06 <__multiply+0x96>
   10bc2:	f104 0314 	add.w	r3, r4, #20
   10bc6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   10bca:	f109 0314 	add.w	r3, r9, #20
   10bce:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   10bd2:	9202      	str	r2, [sp, #8]
   10bd4:	1b3a      	subs	r2, r7, r4
   10bd6:	3a15      	subs	r2, #21
   10bd8:	f022 0203 	bic.w	r2, r2, #3
   10bdc:	3204      	adds	r2, #4
   10bde:	f104 0115 	add.w	r1, r4, #21
   10be2:	428f      	cmp	r7, r1
   10be4:	bf38      	it	cc
   10be6:	2204      	movcc	r2, #4
   10be8:	9201      	str	r2, [sp, #4]
   10bea:	9a02      	ldr	r2, [sp, #8]
   10bec:	9303      	str	r3, [sp, #12]
   10bee:	429a      	cmp	r2, r3
   10bf0:	d80c      	bhi.n	10c0c <__multiply+0x9c>
   10bf2:	2e00      	cmp	r6, #0
   10bf4:	dd03      	ble.n	10bfe <__multiply+0x8e>
   10bf6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   10bfa:	2b00      	cmp	r3, #0
   10bfc:	d059      	beq.n	10cb2 <__multiply+0x142>
   10bfe:	6106      	str	r6, [r0, #16]
   10c00:	b005      	add	sp, #20
   10c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c06:	f843 2b04 	str.w	r2, [r3], #4
   10c0a:	e7d8      	b.n	10bbe <__multiply+0x4e>
   10c0c:	f8b3 a000 	ldrh.w	sl, [r3]
   10c10:	f1ba 0f00 	cmp.w	sl, #0
   10c14:	d023      	beq.n	10c5e <__multiply+0xee>
   10c16:	46a9      	mov	r9, r5
   10c18:	f04f 0c00 	mov.w	ip, #0
   10c1c:	f104 0e14 	add.w	lr, r4, #20
   10c20:	f85e 2b04 	ldr.w	r2, [lr], #4
   10c24:	f8d9 1000 	ldr.w	r1, [r9]
   10c28:	fa1f fb82 	uxth.w	fp, r2
   10c2c:	b289      	uxth	r1, r1
   10c2e:	fb0a 110b 	mla	r1, sl, fp, r1
   10c32:	4461      	add	r1, ip
   10c34:	f8d9 c000 	ldr.w	ip, [r9]
   10c38:	0c12      	lsrs	r2, r2, #16
   10c3a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   10c3e:	fb0a c202 	mla	r2, sl, r2, ip
   10c42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   10c46:	b289      	uxth	r1, r1
   10c48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   10c4c:	4577      	cmp	r7, lr
   10c4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   10c52:	f849 1b04 	str.w	r1, [r9], #4
   10c56:	d8e3      	bhi.n	10c20 <__multiply+0xb0>
   10c58:	9a01      	ldr	r2, [sp, #4]
   10c5a:	f845 c002 	str.w	ip, [r5, r2]
   10c5e:	9a03      	ldr	r2, [sp, #12]
   10c60:	3304      	adds	r3, #4
   10c62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   10c66:	f1b9 0f00 	cmp.w	r9, #0
   10c6a:	d020      	beq.n	10cae <__multiply+0x13e>
   10c6c:	46ae      	mov	lr, r5
   10c6e:	f04f 0a00 	mov.w	sl, #0
   10c72:	6829      	ldr	r1, [r5, #0]
   10c74:	f104 0c14 	add.w	ip, r4, #20
   10c78:	f8bc b000 	ldrh.w	fp, [ip]
   10c7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   10c80:	b289      	uxth	r1, r1
   10c82:	fb09 220b 	mla	r2, r9, fp, r2
   10c86:	4492      	add	sl, r2
   10c88:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   10c8c:	f84e 1b04 	str.w	r1, [lr], #4
   10c90:	f85c 2b04 	ldr.w	r2, [ip], #4
   10c94:	f8be 1000 	ldrh.w	r1, [lr]
   10c98:	0c12      	lsrs	r2, r2, #16
   10c9a:	fb09 1102 	mla	r1, r9, r2, r1
   10c9e:	4567      	cmp	r7, ip
   10ca0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   10ca4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   10ca8:	d8e6      	bhi.n	10c78 <__multiply+0x108>
   10caa:	9a01      	ldr	r2, [sp, #4]
   10cac:	50a9      	str	r1, [r5, r2]
   10cae:	3504      	adds	r5, #4
   10cb0:	e79b      	b.n	10bea <__multiply+0x7a>
   10cb2:	3e01      	subs	r6, #1
   10cb4:	e79d      	b.n	10bf2 <__multiply+0x82>
   10cb6:	bf00      	nop
   10cb8:	00018d1e 	.word	0x00018d1e
   10cbc:	00018d93 	.word	0x00018d93

00010cc0 <__pow5mult>:
   10cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10cc4:	4615      	mov	r5, r2
   10cc6:	f012 0203 	ands.w	r2, r2, #3
   10cca:	4606      	mov	r6, r0
   10ccc:	460f      	mov	r7, r1
   10cce:	d007      	beq.n	10ce0 <__pow5mult+0x20>
   10cd0:	4c25      	ldr	r4, [pc, #148]	; (10d68 <__pow5mult+0xa8>)
   10cd2:	3a01      	subs	r2, #1
   10cd4:	2300      	movs	r3, #0
   10cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   10cda:	f7ff fea3 	bl	10a24 <__multadd>
   10cde:	4607      	mov	r7, r0
   10ce0:	10ad      	asrs	r5, r5, #2
   10ce2:	d03d      	beq.n	10d60 <__pow5mult+0xa0>
   10ce4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   10ce6:	b97c      	cbnz	r4, 10d08 <__pow5mult+0x48>
   10ce8:	2010      	movs	r0, #16
   10cea:	f7fc fd55 	bl	d798 <malloc>
   10cee:	4602      	mov	r2, r0
   10cf0:	6270      	str	r0, [r6, #36]	; 0x24
   10cf2:	b928      	cbnz	r0, 10d00 <__pow5mult+0x40>
   10cf4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   10cf8:	4b1c      	ldr	r3, [pc, #112]	; (10d6c <__pow5mult+0xac>)
   10cfa:	481d      	ldr	r0, [pc, #116]	; (10d70 <__pow5mult+0xb0>)
   10cfc:	f7ff fa1a 	bl	10134 <__assert_func>
   10d00:	e9c0 4401 	strd	r4, r4, [r0, #4]
   10d04:	6004      	str	r4, [r0, #0]
   10d06:	60c4      	str	r4, [r0, #12]
   10d08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   10d0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   10d10:	b94c      	cbnz	r4, 10d26 <__pow5mult+0x66>
   10d12:	f240 2171 	movw	r1, #625	; 0x271
   10d16:	4630      	mov	r0, r6
   10d18:	f7ff ff14 	bl	10b44 <__i2b>
   10d1c:	2300      	movs	r3, #0
   10d1e:	4604      	mov	r4, r0
   10d20:	f8c8 0008 	str.w	r0, [r8, #8]
   10d24:	6003      	str	r3, [r0, #0]
   10d26:	f04f 0900 	mov.w	r9, #0
   10d2a:	07eb      	lsls	r3, r5, #31
   10d2c:	d50a      	bpl.n	10d44 <__pow5mult+0x84>
   10d2e:	4639      	mov	r1, r7
   10d30:	4622      	mov	r2, r4
   10d32:	4630      	mov	r0, r6
   10d34:	f7ff ff1c 	bl	10b70 <__multiply>
   10d38:	4680      	mov	r8, r0
   10d3a:	4639      	mov	r1, r7
   10d3c:	4630      	mov	r0, r6
   10d3e:	f7ff fe4f 	bl	109e0 <_Bfree>
   10d42:	4647      	mov	r7, r8
   10d44:	106d      	asrs	r5, r5, #1
   10d46:	d00b      	beq.n	10d60 <__pow5mult+0xa0>
   10d48:	6820      	ldr	r0, [r4, #0]
   10d4a:	b938      	cbnz	r0, 10d5c <__pow5mult+0x9c>
   10d4c:	4622      	mov	r2, r4
   10d4e:	4621      	mov	r1, r4
   10d50:	4630      	mov	r0, r6
   10d52:	f7ff ff0d 	bl	10b70 <__multiply>
   10d56:	6020      	str	r0, [r4, #0]
   10d58:	f8c0 9000 	str.w	r9, [r0]
   10d5c:	4604      	mov	r4, r0
   10d5e:	e7e4      	b.n	10d2a <__pow5mult+0x6a>
   10d60:	4638      	mov	r0, r7
   10d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10d66:	bf00      	nop
   10d68:	00017ce4 	.word	0x00017ce4
   10d6c:	00018cab 	.word	0x00018cab
   10d70:	00018d93 	.word	0x00018d93

00010d74 <__lshift>:
   10d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10d78:	460c      	mov	r4, r1
   10d7a:	4607      	mov	r7, r0
   10d7c:	4691      	mov	r9, r2
   10d7e:	6923      	ldr	r3, [r4, #16]
   10d80:	6849      	ldr	r1, [r1, #4]
   10d82:	eb03 1862 	add.w	r8, r3, r2, asr #5
   10d86:	68a3      	ldr	r3, [r4, #8]
   10d88:	ea4f 1a62 	mov.w	sl, r2, asr #5
   10d8c:	f108 0601 	add.w	r6, r8, #1
   10d90:	42b3      	cmp	r3, r6
   10d92:	db0b      	blt.n	10dac <__lshift+0x38>
   10d94:	4638      	mov	r0, r7
   10d96:	f7ff fde3 	bl	10960 <_Balloc>
   10d9a:	4605      	mov	r5, r0
   10d9c:	b948      	cbnz	r0, 10db2 <__lshift+0x3e>
   10d9e:	4602      	mov	r2, r0
   10da0:	f240 11d9 	movw	r1, #473	; 0x1d9
   10da4:	4b29      	ldr	r3, [pc, #164]	; (10e4c <__lshift+0xd8>)
   10da6:	482a      	ldr	r0, [pc, #168]	; (10e50 <__lshift+0xdc>)
   10da8:	f7ff f9c4 	bl	10134 <__assert_func>
   10dac:	3101      	adds	r1, #1
   10dae:	005b      	lsls	r3, r3, #1
   10db0:	e7ee      	b.n	10d90 <__lshift+0x1c>
   10db2:	2300      	movs	r3, #0
   10db4:	f100 0114 	add.w	r1, r0, #20
   10db8:	f100 0210 	add.w	r2, r0, #16
   10dbc:	4618      	mov	r0, r3
   10dbe:	4553      	cmp	r3, sl
   10dc0:	db37      	blt.n	10e32 <__lshift+0xbe>
   10dc2:	6920      	ldr	r0, [r4, #16]
   10dc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   10dc8:	f104 0314 	add.w	r3, r4, #20
   10dcc:	f019 091f 	ands.w	r9, r9, #31
   10dd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   10dd4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   10dd8:	d02f      	beq.n	10e3a <__lshift+0xc6>
   10dda:	468a      	mov	sl, r1
   10ddc:	f04f 0c00 	mov.w	ip, #0
   10de0:	f1c9 0e20 	rsb	lr, r9, #32
   10de4:	681a      	ldr	r2, [r3, #0]
   10de6:	fa02 f209 	lsl.w	r2, r2, r9
   10dea:	ea42 020c 	orr.w	r2, r2, ip
   10dee:	f84a 2b04 	str.w	r2, [sl], #4
   10df2:	f853 2b04 	ldr.w	r2, [r3], #4
   10df6:	4298      	cmp	r0, r3
   10df8:	fa22 fc0e 	lsr.w	ip, r2, lr
   10dfc:	d8f2      	bhi.n	10de4 <__lshift+0x70>
   10dfe:	1b03      	subs	r3, r0, r4
   10e00:	3b15      	subs	r3, #21
   10e02:	f023 0303 	bic.w	r3, r3, #3
   10e06:	3304      	adds	r3, #4
   10e08:	f104 0215 	add.w	r2, r4, #21
   10e0c:	4290      	cmp	r0, r2
   10e0e:	bf38      	it	cc
   10e10:	2304      	movcc	r3, #4
   10e12:	f841 c003 	str.w	ip, [r1, r3]
   10e16:	f1bc 0f00 	cmp.w	ip, #0
   10e1a:	d001      	beq.n	10e20 <__lshift+0xac>
   10e1c:	f108 0602 	add.w	r6, r8, #2
   10e20:	3e01      	subs	r6, #1
   10e22:	4638      	mov	r0, r7
   10e24:	4621      	mov	r1, r4
   10e26:	612e      	str	r6, [r5, #16]
   10e28:	f7ff fdda 	bl	109e0 <_Bfree>
   10e2c:	4628      	mov	r0, r5
   10e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10e32:	f842 0f04 	str.w	r0, [r2, #4]!
   10e36:	3301      	adds	r3, #1
   10e38:	e7c1      	b.n	10dbe <__lshift+0x4a>
   10e3a:	3904      	subs	r1, #4
   10e3c:	f853 2b04 	ldr.w	r2, [r3], #4
   10e40:	4298      	cmp	r0, r3
   10e42:	f841 2f04 	str.w	r2, [r1, #4]!
   10e46:	d8f9      	bhi.n	10e3c <__lshift+0xc8>
   10e48:	e7ea      	b.n	10e20 <__lshift+0xac>
   10e4a:	bf00      	nop
   10e4c:	00018d1e 	.word	0x00018d1e
   10e50:	00018d93 	.word	0x00018d93

00010e54 <__mdiff>:
   10e54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e58:	460d      	mov	r5, r1
   10e5a:	4607      	mov	r7, r0
   10e5c:	4611      	mov	r1, r2
   10e5e:	4628      	mov	r0, r5
   10e60:	4614      	mov	r4, r2
   10e62:	f006 fa4c 	bl	172fe <__mcmp>
   10e66:	1e06      	subs	r6, r0, #0
   10e68:	d111      	bne.n	10e8e <__mdiff+0x3a>
   10e6a:	4631      	mov	r1, r6
   10e6c:	4638      	mov	r0, r7
   10e6e:	f7ff fd77 	bl	10960 <_Balloc>
   10e72:	4602      	mov	r2, r0
   10e74:	b928      	cbnz	r0, 10e82 <__mdiff+0x2e>
   10e76:	f240 2132 	movw	r1, #562	; 0x232
   10e7a:	4b3a      	ldr	r3, [pc, #232]	; (10f64 <__mdiff+0x110>)
   10e7c:	483a      	ldr	r0, [pc, #232]	; (10f68 <__mdiff+0x114>)
   10e7e:	f7ff f959 	bl	10134 <__assert_func>
   10e82:	2301      	movs	r3, #1
   10e84:	e9c0 3604 	strd	r3, r6, [r0, #16]
   10e88:	4610      	mov	r0, r2
   10e8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e8e:	bfa4      	itt	ge
   10e90:	4623      	movge	r3, r4
   10e92:	462c      	movge	r4, r5
   10e94:	4638      	mov	r0, r7
   10e96:	6861      	ldr	r1, [r4, #4]
   10e98:	bfa6      	itte	ge
   10e9a:	461d      	movge	r5, r3
   10e9c:	2600      	movge	r6, #0
   10e9e:	2601      	movlt	r6, #1
   10ea0:	f7ff fd5e 	bl	10960 <_Balloc>
   10ea4:	4602      	mov	r2, r0
   10ea6:	b918      	cbnz	r0, 10eb0 <__mdiff+0x5c>
   10ea8:	f44f 7110 	mov.w	r1, #576	; 0x240
   10eac:	4b2d      	ldr	r3, [pc, #180]	; (10f64 <__mdiff+0x110>)
   10eae:	e7e5      	b.n	10e7c <__mdiff+0x28>
   10eb0:	f102 0814 	add.w	r8, r2, #20
   10eb4:	46c2      	mov	sl, r8
   10eb6:	f04f 0c00 	mov.w	ip, #0
   10eba:	6927      	ldr	r7, [r4, #16]
   10ebc:	60c6      	str	r6, [r0, #12]
   10ebe:	692e      	ldr	r6, [r5, #16]
   10ec0:	f104 0014 	add.w	r0, r4, #20
   10ec4:	f105 0914 	add.w	r9, r5, #20
   10ec8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
   10ecc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   10ed0:	3410      	adds	r4, #16
   10ed2:	f854 bf04 	ldr.w	fp, [r4, #4]!
   10ed6:	f859 3b04 	ldr.w	r3, [r9], #4
   10eda:	fa1f f18b 	uxth.w	r1, fp
   10ede:	448c      	add	ip, r1
   10ee0:	b299      	uxth	r1, r3
   10ee2:	0c1b      	lsrs	r3, r3, #16
   10ee4:	ebac 0101 	sub.w	r1, ip, r1
   10ee8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   10eec:	eb03 4321 	add.w	r3, r3, r1, asr #16
   10ef0:	b289      	uxth	r1, r1
   10ef2:	ea4f 4c23 	mov.w	ip, r3, asr #16
   10ef6:	454e      	cmp	r6, r9
   10ef8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   10efc:	f84a 3b04 	str.w	r3, [sl], #4
   10f00:	d8e7      	bhi.n	10ed2 <__mdiff+0x7e>
   10f02:	1b73      	subs	r3, r6, r5
   10f04:	3b15      	subs	r3, #21
   10f06:	f023 0303 	bic.w	r3, r3, #3
   10f0a:	3515      	adds	r5, #21
   10f0c:	3304      	adds	r3, #4
   10f0e:	42ae      	cmp	r6, r5
   10f10:	bf38      	it	cc
   10f12:	2304      	movcc	r3, #4
   10f14:	4418      	add	r0, r3
   10f16:	4443      	add	r3, r8
   10f18:	461e      	mov	r6, r3
   10f1a:	4605      	mov	r5, r0
   10f1c:	4575      	cmp	r5, lr
   10f1e:	d30e      	bcc.n	10f3e <__mdiff+0xea>
   10f20:	f10e 0103 	add.w	r1, lr, #3
   10f24:	1a09      	subs	r1, r1, r0
   10f26:	f021 0103 	bic.w	r1, r1, #3
   10f2a:	3803      	subs	r0, #3
   10f2c:	4586      	cmp	lr, r0
   10f2e:	bf38      	it	cc
   10f30:	2100      	movcc	r1, #0
   10f32:	4419      	add	r1, r3
   10f34:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   10f38:	b18b      	cbz	r3, 10f5e <__mdiff+0x10a>
   10f3a:	6117      	str	r7, [r2, #16]
   10f3c:	e7a4      	b.n	10e88 <__mdiff+0x34>
   10f3e:	f855 8b04 	ldr.w	r8, [r5], #4
   10f42:	fa1f f188 	uxth.w	r1, r8
   10f46:	4461      	add	r1, ip
   10f48:	140c      	asrs	r4, r1, #16
   10f4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   10f4e:	b289      	uxth	r1, r1
   10f50:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
   10f54:	ea4f 4c24 	mov.w	ip, r4, asr #16
   10f58:	f846 1b04 	str.w	r1, [r6], #4
   10f5c:	e7de      	b.n	10f1c <__mdiff+0xc8>
   10f5e:	3f01      	subs	r7, #1
   10f60:	e7e8      	b.n	10f34 <__mdiff+0xe0>
   10f62:	bf00      	nop
   10f64:	00018d1e 	.word	0x00018d1e
   10f68:	00018d93 	.word	0x00018d93

00010f6c <__ulp>:
   10f6c:	4b11      	ldr	r3, [pc, #68]	; (10fb4 <__ulp+0x48>)
   10f6e:	400b      	ands	r3, r1
   10f70:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   10f74:	2b00      	cmp	r3, #0
   10f76:	dd02      	ble.n	10f7e <__ulp+0x12>
   10f78:	2000      	movs	r0, #0
   10f7a:	4619      	mov	r1, r3
   10f7c:	4770      	bx	lr
   10f7e:	425b      	negs	r3, r3
   10f80:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   10f84:	f04f 0000 	mov.w	r0, #0
   10f88:	f04f 0100 	mov.w	r1, #0
   10f8c:	ea4f 5223 	mov.w	r2, r3, asr #20
   10f90:	da04      	bge.n	10f9c <__ulp+0x30>
   10f92:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   10f96:	fa43 f102 	asr.w	r1, r3, r2
   10f9a:	4770      	bx	lr
   10f9c:	f1a2 0314 	sub.w	r3, r2, #20
   10fa0:	2b1e      	cmp	r3, #30
   10fa2:	bfd6      	itet	le
   10fa4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   10fa8:	2301      	movgt	r3, #1
   10faa:	fa22 f303 	lsrle.w	r3, r2, r3
   10fae:	4618      	mov	r0, r3
   10fb0:	4770      	bx	lr
   10fb2:	bf00      	nop
   10fb4:	7ff00000 	.word	0x7ff00000

00010fb8 <__b2d>:
   10fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10fbc:	6907      	ldr	r7, [r0, #16]
   10fbe:	f100 0914 	add.w	r9, r0, #20
   10fc2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
   10fc6:	f857 6c04 	ldr.w	r6, [r7, #-4]
   10fca:	f1a7 0804 	sub.w	r8, r7, #4
   10fce:	4630      	mov	r0, r6
   10fd0:	f006 f948 	bl	17264 <__hi0bits>
   10fd4:	f1c0 0320 	rsb	r3, r0, #32
   10fd8:	280a      	cmp	r0, #10
   10fda:	600b      	str	r3, [r1, #0]
   10fdc:	491f      	ldr	r1, [pc, #124]	; (1105c <__b2d+0xa4>)
   10fde:	dc17      	bgt.n	11010 <__b2d+0x58>
   10fe0:	45c1      	cmp	r9, r8
   10fe2:	bf28      	it	cs
   10fe4:	2200      	movcs	r2, #0
   10fe6:	f1c0 0c0b 	rsb	ip, r0, #11
   10fea:	fa26 f30c 	lsr.w	r3, r6, ip
   10fee:	bf38      	it	cc
   10ff0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
   10ff4:	ea43 0501 	orr.w	r5, r3, r1
   10ff8:	f100 0315 	add.w	r3, r0, #21
   10ffc:	fa06 f303 	lsl.w	r3, r6, r3
   11000:	fa22 f20c 	lsr.w	r2, r2, ip
   11004:	ea43 0402 	orr.w	r4, r3, r2
   11008:	4620      	mov	r0, r4
   1100a:	4629      	mov	r1, r5
   1100c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11010:	45c1      	cmp	r9, r8
   11012:	bf2e      	itee	cs
   11014:	2200      	movcs	r2, #0
   11016:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
   1101a:	f1a7 0808 	subcc.w	r8, r7, #8
   1101e:	f1b0 030b 	subs.w	r3, r0, #11
   11022:	d016      	beq.n	11052 <__b2d+0x9a>
   11024:	f1c3 0720 	rsb	r7, r3, #32
   11028:	fa22 f107 	lsr.w	r1, r2, r7
   1102c:	45c8      	cmp	r8, r9
   1102e:	fa06 f603 	lsl.w	r6, r6, r3
   11032:	ea46 0601 	orr.w	r6, r6, r1
   11036:	bf94      	ite	ls
   11038:	2100      	movls	r1, #0
   1103a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
   1103e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   11042:	fa02 f003 	lsl.w	r0, r2, r3
   11046:	40f9      	lsrs	r1, r7
   11048:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   1104c:	ea40 0401 	orr.w	r4, r0, r1
   11050:	e7da      	b.n	11008 <__b2d+0x50>
   11052:	4614      	mov	r4, r2
   11054:	ea46 0501 	orr.w	r5, r6, r1
   11058:	e7d6      	b.n	11008 <__b2d+0x50>
   1105a:	bf00      	nop
   1105c:	3ff00000 	.word	0x3ff00000

00011060 <__d2b>:
   11060:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11064:	2101      	movs	r1, #1
   11066:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
   1106a:	4690      	mov	r8, r2
   1106c:	461d      	mov	r5, r3
   1106e:	f7ff fc77 	bl	10960 <_Balloc>
   11072:	4604      	mov	r4, r0
   11074:	b930      	cbnz	r0, 11084 <__d2b+0x24>
   11076:	4602      	mov	r2, r0
   11078:	f240 310a 	movw	r1, #778	; 0x30a
   1107c:	4b24      	ldr	r3, [pc, #144]	; (11110 <__d2b+0xb0>)
   1107e:	4825      	ldr	r0, [pc, #148]	; (11114 <__d2b+0xb4>)
   11080:	f7ff f858 	bl	10134 <__assert_func>
   11084:	f3c5 0313 	ubfx	r3, r5, #0, #20
   11088:	f3c5 550a 	ubfx	r5, r5, #20, #11
   1108c:	bb2d      	cbnz	r5, 110da <__d2b+0x7a>
   1108e:	9301      	str	r3, [sp, #4]
   11090:	f1b8 0300 	subs.w	r3, r8, #0
   11094:	d026      	beq.n	110e4 <__d2b+0x84>
   11096:	4668      	mov	r0, sp
   11098:	9300      	str	r3, [sp, #0]
   1109a:	f006 f903 	bl	172a4 <__lo0bits>
   1109e:	9900      	ldr	r1, [sp, #0]
   110a0:	b1f0      	cbz	r0, 110e0 <__d2b+0x80>
   110a2:	9a01      	ldr	r2, [sp, #4]
   110a4:	f1c0 0320 	rsb	r3, r0, #32
   110a8:	fa02 f303 	lsl.w	r3, r2, r3
   110ac:	430b      	orrs	r3, r1
   110ae:	40c2      	lsrs	r2, r0
   110b0:	6163      	str	r3, [r4, #20]
   110b2:	9201      	str	r2, [sp, #4]
   110b4:	9b01      	ldr	r3, [sp, #4]
   110b6:	2b00      	cmp	r3, #0
   110b8:	bf14      	ite	ne
   110ba:	2102      	movne	r1, #2
   110bc:	2101      	moveq	r1, #1
   110be:	61a3      	str	r3, [r4, #24]
   110c0:	6121      	str	r1, [r4, #16]
   110c2:	b1c5      	cbz	r5, 110f6 <__d2b+0x96>
   110c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   110c8:	4405      	add	r5, r0
   110ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   110ce:	603d      	str	r5, [r7, #0]
   110d0:	6030      	str	r0, [r6, #0]
   110d2:	4620      	mov	r0, r4
   110d4:	b002      	add	sp, #8
   110d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   110da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   110de:	e7d6      	b.n	1108e <__d2b+0x2e>
   110e0:	6161      	str	r1, [r4, #20]
   110e2:	e7e7      	b.n	110b4 <__d2b+0x54>
   110e4:	a801      	add	r0, sp, #4
   110e6:	f006 f8dd 	bl	172a4 <__lo0bits>
   110ea:	2101      	movs	r1, #1
   110ec:	9b01      	ldr	r3, [sp, #4]
   110ee:	6121      	str	r1, [r4, #16]
   110f0:	6163      	str	r3, [r4, #20]
   110f2:	3020      	adds	r0, #32
   110f4:	e7e5      	b.n	110c2 <__d2b+0x62>
   110f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   110fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   110fe:	6038      	str	r0, [r7, #0]
   11100:	6918      	ldr	r0, [r3, #16]
   11102:	f006 f8af 	bl	17264 <__hi0bits>
   11106:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   1110a:	6031      	str	r1, [r6, #0]
   1110c:	e7e1      	b.n	110d2 <__d2b+0x72>
   1110e:	bf00      	nop
   11110:	00018d1e 	.word	0x00018d1e
   11114:	00018d93 	.word	0x00018d93

00011118 <_read_r>:
   11118:	b538      	push	{r3, r4, r5, lr}
   1111a:	4604      	mov	r4, r0
   1111c:	4608      	mov	r0, r1
   1111e:	4611      	mov	r1, r2
   11120:	2200      	movs	r2, #0
   11122:	4d05      	ldr	r5, [pc, #20]	; (11138 <_read_r+0x20>)
   11124:	602a      	str	r2, [r5, #0]
   11126:	461a      	mov	r2, r3
   11128:	f000 fc71 	bl	11a0e <_read>
   1112c:	1c43      	adds	r3, r0, #1
   1112e:	d102      	bne.n	11136 <_read_r+0x1e>
   11130:	682b      	ldr	r3, [r5, #0]
   11132:	b103      	cbz	r3, 11136 <_read_r+0x1e>
   11134:	6023      	str	r3, [r4, #0]
   11136:	bd38      	pop	{r3, r4, r5, pc}
   11138:	20000480 	.word	0x20000480

0001113c <_vfiprintf_r>:
   1113c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11140:	b0bb      	sub	sp, #236	; 0xec
   11142:	460e      	mov	r6, r1
   11144:	4698      	mov	r8, r3
   11146:	4681      	mov	r9, r0
   11148:	9201      	str	r2, [sp, #4]
   1114a:	b118      	cbz	r0, 11154 <_vfiprintf_r+0x18>
   1114c:	6983      	ldr	r3, [r0, #24]
   1114e:	b90b      	cbnz	r3, 11154 <_vfiprintf_r+0x18>
   11150:	f7fc fa4a 	bl	d5e8 <__sinit>
   11154:	4b93      	ldr	r3, [pc, #588]	; (113a4 <_vfiprintf_r+0x268>)
   11156:	429e      	cmp	r6, r3
   11158:	d11e      	bne.n	11198 <_vfiprintf_r+0x5c>
   1115a:	f8d9 6004 	ldr.w	r6, [r9, #4]
   1115e:	6e73      	ldr	r3, [r6, #100]	; 0x64
   11160:	07df      	lsls	r7, r3, #31
   11162:	d405      	bmi.n	11170 <_vfiprintf_r+0x34>
   11164:	89b3      	ldrh	r3, [r6, #12]
   11166:	059d      	lsls	r5, r3, #22
   11168:	d402      	bmi.n	11170 <_vfiprintf_r+0x34>
   1116a:	6db0      	ldr	r0, [r6, #88]	; 0x58
   1116c:	f000 fc74 	bl	11a58 <__retarget_lock_acquire_recursive>
   11170:	89b3      	ldrh	r3, [r6, #12]
   11172:	071c      	lsls	r4, r3, #28
   11174:	d501      	bpl.n	1117a <_vfiprintf_r+0x3e>
   11176:	6933      	ldr	r3, [r6, #16]
   11178:	bb0b      	cbnz	r3, 111be <_vfiprintf_r+0x82>
   1117a:	4631      	mov	r1, r6
   1117c:	4648      	mov	r0, r9
   1117e:	f7fe ff6b 	bl	10058 <__swsetup_r>
   11182:	b1e0      	cbz	r0, 111be <_vfiprintf_r+0x82>
   11184:	6e73      	ldr	r3, [r6, #100]	; 0x64
   11186:	07d8      	lsls	r0, r3, #31
   11188:	d512      	bpl.n	111b0 <_vfiprintf_r+0x74>
   1118a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1118e:	9304      	str	r3, [sp, #16]
   11190:	9804      	ldr	r0, [sp, #16]
   11192:	b03b      	add	sp, #236	; 0xec
   11194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11198:	4b83      	ldr	r3, [pc, #524]	; (113a8 <_vfiprintf_r+0x26c>)
   1119a:	429e      	cmp	r6, r3
   1119c:	d102      	bne.n	111a4 <_vfiprintf_r+0x68>
   1119e:	f8d9 6008 	ldr.w	r6, [r9, #8]
   111a2:	e7dc      	b.n	1115e <_vfiprintf_r+0x22>
   111a4:	4b81      	ldr	r3, [pc, #516]	; (113ac <_vfiprintf_r+0x270>)
   111a6:	429e      	cmp	r6, r3
   111a8:	bf08      	it	eq
   111aa:	f8d9 600c 	ldreq.w	r6, [r9, #12]
   111ae:	e7d6      	b.n	1115e <_vfiprintf_r+0x22>
   111b0:	89b3      	ldrh	r3, [r6, #12]
   111b2:	0599      	lsls	r1, r3, #22
   111b4:	d4e9      	bmi.n	1118a <_vfiprintf_r+0x4e>
   111b6:	6db0      	ldr	r0, [r6, #88]	; 0x58
   111b8:	f000 fc54 	bl	11a64 <__retarget_lock_release_recursive>
   111bc:	e7e5      	b.n	1118a <_vfiprintf_r+0x4e>
   111be:	2300      	movs	r3, #0
   111c0:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   111c4:	e9cd 3306 	strd	r3, r3, [sp, #24]
   111c8:	e9cd 3308 	strd	r3, r3, [sp, #32]
   111cc:	ad11      	add	r5, sp, #68	; 0x44
   111ce:	950e      	str	r5, [sp, #56]	; 0x38
   111d0:	9304      	str	r3, [sp, #16]
   111d2:	9b01      	ldr	r3, [sp, #4]
   111d4:	461c      	mov	r4, r3
   111d6:	f813 2b01 	ldrb.w	r2, [r3], #1
   111da:	b10a      	cbz	r2, 111e0 <_vfiprintf_r+0xa4>
   111dc:	2a25      	cmp	r2, #37	; 0x25
   111de:	d1f9      	bne.n	111d4 <_vfiprintf_r+0x98>
   111e0:	9b01      	ldr	r3, [sp, #4]
   111e2:	1ae7      	subs	r7, r4, r3
   111e4:	d00d      	beq.n	11202 <_vfiprintf_r+0xc6>
   111e6:	e9c5 3700 	strd	r3, r7, [r5]
   111ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
   111ec:	443b      	add	r3, r7
   111ee:	9310      	str	r3, [sp, #64]	; 0x40
   111f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   111f2:	3301      	adds	r3, #1
   111f4:	2b07      	cmp	r3, #7
   111f6:	930f      	str	r3, [sp, #60]	; 0x3c
   111f8:	dc74      	bgt.n	112e4 <_vfiprintf_r+0x1a8>
   111fa:	3508      	adds	r5, #8
   111fc:	9b04      	ldr	r3, [sp, #16]
   111fe:	443b      	add	r3, r7
   11200:	9304      	str	r3, [sp, #16]
   11202:	7823      	ldrb	r3, [r4, #0]
   11204:	2b00      	cmp	r3, #0
   11206:	f000 8383 	beq.w	11910 <_vfiprintf_r+0x7d4>
   1120a:	2300      	movs	r3, #0
   1120c:	1c62      	adds	r2, r4, #1
   1120e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   11212:	461c      	mov	r4, r3
   11214:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   11218:	9303      	str	r3, [sp, #12]
   1121a:	f812 3b01 	ldrb.w	r3, [r2], #1
   1121e:	9201      	str	r2, [sp, #4]
   11220:	f1a3 0220 	sub.w	r2, r3, #32
   11224:	2a5a      	cmp	r2, #90	; 0x5a
   11226:	f200 82cb 	bhi.w	117c0 <_vfiprintf_r+0x684>
   1122a:	e8df f012 	tbh	[pc, r2, lsl #1]
   1122e:	0088      	.short	0x0088
   11230:	02c902c9 	.word	0x02c902c9
   11234:	02c90090 	.word	0x02c90090
   11238:	02c902c9 	.word	0x02c902c9
   1123c:	02c90070 	.word	0x02c90070
   11240:	009302c9 	.word	0x009302c9
   11244:	02c9009d 	.word	0x02c9009d
   11248:	009f009a 	.word	0x009f009a
   1124c:	00b702c9 	.word	0x00b702c9
   11250:	00c300c3 	.word	0x00c300c3
   11254:	00c300c3 	.word	0x00c300c3
   11258:	00c300c3 	.word	0x00c300c3
   1125c:	00c300c3 	.word	0x00c300c3
   11260:	02c900c3 	.word	0x02c900c3
   11264:	02c902c9 	.word	0x02c902c9
   11268:	02c902c9 	.word	0x02c902c9
   1126c:	02c902c9 	.word	0x02c902c9
   11270:	02c902c9 	.word	0x02c902c9
   11274:	00fb00ed 	.word	0x00fb00ed
   11278:	02c902c9 	.word	0x02c902c9
   1127c:	02c902c9 	.word	0x02c902c9
   11280:	02c902c9 	.word	0x02c902c9
   11284:	02c902c9 	.word	0x02c902c9
   11288:	02c902c9 	.word	0x02c902c9
   1128c:	02c90128 	.word	0x02c90128
   11290:	02c902c9 	.word	0x02c902c9
   11294:	02c90162 	.word	0x02c90162
   11298:	02c90248 	.word	0x02c90248
   1129c:	025d02c9 	.word	0x025d02c9
   112a0:	02c902c9 	.word	0x02c902c9
   112a4:	02c902c9 	.word	0x02c902c9
   112a8:	02c902c9 	.word	0x02c902c9
   112ac:	02c902c9 	.word	0x02c902c9
   112b0:	02c902c9 	.word	0x02c902c9
   112b4:	00fd00ed 	.word	0x00fd00ed
   112b8:	02c902c9 	.word	0x02c902c9
   112bc:	00d302c9 	.word	0x00d302c9
   112c0:	00ea00fd 	.word	0x00ea00fd
   112c4:	00e002c9 	.word	0x00e002c9
   112c8:	011702c9 	.word	0x011702c9
   112cc:	0152012a 	.word	0x0152012a
   112d0:	02c900ea 	.word	0x02c900ea
   112d4:	00860162 	.word	0x00860162
   112d8:	02c9024a 	.word	0x02c9024a
   112dc:	006502c9 	.word	0x006502c9
   112e0:	008602c9 	.word	0x008602c9
   112e4:	4631      	mov	r1, r6
   112e6:	4648      	mov	r0, r9
   112e8:	aa0e      	add	r2, sp, #56	; 0x38
   112ea:	f006 f957 	bl	1759c <__sprint_r>
   112ee:	2800      	cmp	r0, #0
   112f0:	f040 82ee 	bne.w	118d0 <_vfiprintf_r+0x794>
   112f4:	ad11      	add	r5, sp, #68	; 0x44
   112f6:	e781      	b.n	111fc <_vfiprintf_r+0xc0>
   112f8:	4a2d      	ldr	r2, [pc, #180]	; (113b0 <_vfiprintf_r+0x274>)
   112fa:	9206      	str	r2, [sp, #24]
   112fc:	06e7      	lsls	r7, r4, #27
   112fe:	f108 0204 	add.w	r2, r8, #4
   11302:	9202      	str	r2, [sp, #8]
   11304:	f140 81f2 	bpl.w	116ec <_vfiprintf_r+0x5b0>
   11308:	f8d8 7000 	ldr.w	r7, [r8]
   1130c:	e1f2      	b.n	116f4 <_vfiprintf_r+0x5b8>
   1130e:	4648      	mov	r0, r9
   11310:	f7fc f9fa 	bl	d708 <_localeconv_r>
   11314:	6843      	ldr	r3, [r0, #4]
   11316:	4618      	mov	r0, r3
   11318:	9309      	str	r3, [sp, #36]	; 0x24
   1131a:	f7ef fda9 	bl	e70 <strlen>
   1131e:	9008      	str	r0, [sp, #32]
   11320:	4648      	mov	r0, r9
   11322:	f7fc f9f1 	bl	d708 <_localeconv_r>
   11326:	6883      	ldr	r3, [r0, #8]
   11328:	9307      	str	r3, [sp, #28]
   1132a:	9b08      	ldr	r3, [sp, #32]
   1132c:	b12b      	cbz	r3, 1133a <_vfiprintf_r+0x1fe>
   1132e:	9b07      	ldr	r3, [sp, #28]
   11330:	b11b      	cbz	r3, 1133a <_vfiprintf_r+0x1fe>
   11332:	781b      	ldrb	r3, [r3, #0]
   11334:	b10b      	cbz	r3, 1133a <_vfiprintf_r+0x1fe>
   11336:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   1133a:	9a01      	ldr	r2, [sp, #4]
   1133c:	e76d      	b.n	1121a <_vfiprintf_r+0xde>
   1133e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   11342:	2b00      	cmp	r3, #0
   11344:	d1f9      	bne.n	1133a <_vfiprintf_r+0x1fe>
   11346:	2320      	movs	r3, #32
   11348:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1134c:	e7f5      	b.n	1133a <_vfiprintf_r+0x1fe>
   1134e:	f044 0401 	orr.w	r4, r4, #1
   11352:	e7f2      	b.n	1133a <_vfiprintf_r+0x1fe>
   11354:	f858 3b04 	ldr.w	r3, [r8], #4
   11358:	2b00      	cmp	r3, #0
   1135a:	9303      	str	r3, [sp, #12]
   1135c:	daed      	bge.n	1133a <_vfiprintf_r+0x1fe>
   1135e:	425b      	negs	r3, r3
   11360:	9303      	str	r3, [sp, #12]
   11362:	f044 0404 	orr.w	r4, r4, #4
   11366:	e7e8      	b.n	1133a <_vfiprintf_r+0x1fe>
   11368:	232b      	movs	r3, #43	; 0x2b
   1136a:	e7ed      	b.n	11348 <_vfiprintf_r+0x20c>
   1136c:	9a01      	ldr	r2, [sp, #4]
   1136e:	f812 3b01 	ldrb.w	r3, [r2], #1
   11372:	2b2a      	cmp	r3, #42	; 0x2a
   11374:	d10f      	bne.n	11396 <_vfiprintf_r+0x25a>
   11376:	f858 0b04 	ldr.w	r0, [r8], #4
   1137a:	9201      	str	r2, [sp, #4]
   1137c:	ea40 7be0 	orr.w	fp, r0, r0, asr #31
   11380:	e7db      	b.n	1133a <_vfiprintf_r+0x1fe>
   11382:	230a      	movs	r3, #10
   11384:	fb03 1b0b 	mla	fp, r3, fp, r1
   11388:	f812 3b01 	ldrb.w	r3, [r2], #1
   1138c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   11390:	2909      	cmp	r1, #9
   11392:	d9f6      	bls.n	11382 <_vfiprintf_r+0x246>
   11394:	e743      	b.n	1121e <_vfiprintf_r+0xe2>
   11396:	f04f 0b00 	mov.w	fp, #0
   1139a:	e7f7      	b.n	1138c <_vfiprintf_r+0x250>
   1139c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   113a0:	e7cb      	b.n	1133a <_vfiprintf_r+0x1fe>
   113a2:	bf00      	nop
   113a4:	00017c6c 	.word	0x00017c6c
   113a8:	00017c8c 	.word	0x00017c8c
   113ac:	00017c4c 	.word	0x00017c4c
   113b0:	00018c04 	.word	0x00018c04
   113b4:	2100      	movs	r1, #0
   113b6:	9a01      	ldr	r2, [sp, #4]
   113b8:	9103      	str	r1, [sp, #12]
   113ba:	200a      	movs	r0, #10
   113bc:	9903      	ldr	r1, [sp, #12]
   113be:	3b30      	subs	r3, #48	; 0x30
   113c0:	fb00 3301 	mla	r3, r0, r1, r3
   113c4:	9303      	str	r3, [sp, #12]
   113c6:	f812 3b01 	ldrb.w	r3, [r2], #1
   113ca:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   113ce:	2909      	cmp	r1, #9
   113d0:	d9f3      	bls.n	113ba <_vfiprintf_r+0x27e>
   113d2:	e724      	b.n	1121e <_vfiprintf_r+0xe2>
   113d4:	9b01      	ldr	r3, [sp, #4]
   113d6:	781b      	ldrb	r3, [r3, #0]
   113d8:	2b68      	cmp	r3, #104	; 0x68
   113da:	bf01      	itttt	eq
   113dc:	9b01      	ldreq	r3, [sp, #4]
   113de:	f444 7400 	orreq.w	r4, r4, #512	; 0x200
   113e2:	3301      	addeq	r3, #1
   113e4:	9301      	streq	r3, [sp, #4]
   113e6:	bf18      	it	ne
   113e8:	f044 0440 	orrne.w	r4, r4, #64	; 0x40
   113ec:	e7a5      	b.n	1133a <_vfiprintf_r+0x1fe>
   113ee:	9b01      	ldr	r3, [sp, #4]
   113f0:	f044 0410 	orr.w	r4, r4, #16
   113f4:	781b      	ldrb	r3, [r3, #0]
   113f6:	2b6c      	cmp	r3, #108	; 0x6c
   113f8:	d19f      	bne.n	1133a <_vfiprintf_r+0x1fe>
   113fa:	9b01      	ldr	r3, [sp, #4]
   113fc:	3301      	adds	r3, #1
   113fe:	9301      	str	r3, [sp, #4]
   11400:	e79b      	b.n	1133a <_vfiprintf_r+0x1fe>
   11402:	f044 0410 	orr.w	r4, r4, #16
   11406:	e798      	b.n	1133a <_vfiprintf_r+0x1fe>
   11408:	4642      	mov	r2, r8
   1140a:	2700      	movs	r7, #0
   1140c:	f852 3b04 	ldr.w	r3, [r2], #4
   11410:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
   11414:	9202      	str	r2, [sp, #8]
   11416:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   1141a:	f04f 0b01 	mov.w	fp, #1
   1141e:	f10d 0884 	add.w	r8, sp, #132	; 0x84
   11422:	e07b      	b.n	1151c <_vfiprintf_r+0x3e0>
   11424:	f044 0410 	orr.w	r4, r4, #16
   11428:	f108 0304 	add.w	r3, r8, #4
   1142c:	06e2      	lsls	r2, r4, #27
   1142e:	9302      	str	r3, [sp, #8]
   11430:	d509      	bpl.n	11446 <_vfiprintf_r+0x30a>
   11432:	f8d8 7000 	ldr.w	r7, [r8]
   11436:	2f00      	cmp	r7, #0
   11438:	da03      	bge.n	11442 <_vfiprintf_r+0x306>
   1143a:	232d      	movs	r3, #45	; 0x2d
   1143c:	427f      	negs	r7, r7
   1143e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   11442:	2301      	movs	r3, #1
   11444:	e02f      	b.n	114a6 <_vfiprintf_r+0x36a>
   11446:	f014 0f40 	tst.w	r4, #64	; 0x40
   1144a:	f8d8 7000 	ldr.w	r7, [r8]
   1144e:	d001      	beq.n	11454 <_vfiprintf_r+0x318>
   11450:	b23f      	sxth	r7, r7
   11452:	e7f0      	b.n	11436 <_vfiprintf_r+0x2fa>
   11454:	05a3      	lsls	r3, r4, #22
   11456:	bf48      	it	mi
   11458:	b27f      	sxtbmi	r7, r7
   1145a:	e7ec      	b.n	11436 <_vfiprintf_r+0x2fa>
   1145c:	06e0      	lsls	r0, r4, #27
   1145e:	f858 3b04 	ldr.w	r3, [r8], #4
   11462:	d502      	bpl.n	1146a <_vfiprintf_r+0x32e>
   11464:	9a04      	ldr	r2, [sp, #16]
   11466:	601a      	str	r2, [r3, #0]
   11468:	e6b3      	b.n	111d2 <_vfiprintf_r+0x96>
   1146a:	0661      	lsls	r1, r4, #25
   1146c:	d502      	bpl.n	11474 <_vfiprintf_r+0x338>
   1146e:	9a04      	ldr	r2, [sp, #16]
   11470:	801a      	strh	r2, [r3, #0]
   11472:	e6ae      	b.n	111d2 <_vfiprintf_r+0x96>
   11474:	05a2      	lsls	r2, r4, #22
   11476:	d5f5      	bpl.n	11464 <_vfiprintf_r+0x328>
   11478:	9a04      	ldr	r2, [sp, #16]
   1147a:	701a      	strb	r2, [r3, #0]
   1147c:	e6a9      	b.n	111d2 <_vfiprintf_r+0x96>
   1147e:	f044 0410 	orr.w	r4, r4, #16
   11482:	f108 0304 	add.w	r3, r8, #4
   11486:	9302      	str	r3, [sp, #8]
   11488:	06e3      	lsls	r3, r4, #27
   1148a:	d502      	bpl.n	11492 <_vfiprintf_r+0x356>
   1148c:	f8d8 7000 	ldr.w	r7, [r8]
   11490:	e003      	b.n	1149a <_vfiprintf_r+0x35e>
   11492:	0667      	lsls	r7, r4, #25
   11494:	d518      	bpl.n	114c8 <_vfiprintf_r+0x38c>
   11496:	f8b8 7000 	ldrh.w	r7, [r8]
   1149a:	2300      	movs	r3, #0
   1149c:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
   114a0:	2200      	movs	r2, #0
   114a2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   114a6:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   114aa:	f000 823e 	beq.w	1192a <_vfiprintf_r+0x7ee>
   114ae:	f024 0a80 	bic.w	sl, r4, #128	; 0x80
   114b2:	2f00      	cmp	r7, #0
   114b4:	f040 823d 	bne.w	11932 <_vfiprintf_r+0x7f6>
   114b8:	f1bb 0f00 	cmp.w	fp, #0
   114bc:	f000 8176 	beq.w	117ac <_vfiprintf_r+0x670>
   114c0:	2b01      	cmp	r3, #1
   114c2:	f040 8239 	bne.w	11938 <_vfiprintf_r+0x7fc>
   114c6:	e12a      	b.n	1171e <_vfiprintf_r+0x5e2>
   114c8:	05a0      	lsls	r0, r4, #22
   114ca:	d5df      	bpl.n	1148c <_vfiprintf_r+0x350>
   114cc:	f898 7000 	ldrb.w	r7, [r8]
   114d0:	e7e3      	b.n	1149a <_vfiprintf_r+0x35e>
   114d2:	4643      	mov	r3, r8
   114d4:	f853 7b04 	ldr.w	r7, [r3], #4
   114d8:	f044 0402 	orr.w	r4, r4, #2
   114dc:	9302      	str	r3, [sp, #8]
   114de:	2330      	movs	r3, #48	; 0x30
   114e0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   114e4:	2378      	movs	r3, #120	; 0x78
   114e6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   114ea:	4bac      	ldr	r3, [pc, #688]	; (1179c <_vfiprintf_r+0x660>)
   114ec:	9306      	str	r3, [sp, #24]
   114ee:	2302      	movs	r3, #2
   114f0:	e7d6      	b.n	114a0 <_vfiprintf_r+0x364>
   114f2:	4643      	mov	r3, r8
   114f4:	2700      	movs	r7, #0
   114f6:	f853 8b04 	ldr.w	r8, [r3], #4
   114fa:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   114fe:	9302      	str	r3, [sp, #8]
   11500:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
   11504:	f000 80d6 	beq.w	116b4 <_vfiprintf_r+0x578>
   11508:	465a      	mov	r2, fp
   1150a:	4639      	mov	r1, r7
   1150c:	4640      	mov	r0, r8
   1150e:	f005 fb97 	bl	16c40 <memchr>
   11512:	2800      	cmp	r0, #0
   11514:	f000 815f 	beq.w	117d6 <_vfiprintf_r+0x69a>
   11518:	eba0 0b08 	sub.w	fp, r0, r8
   1151c:	455f      	cmp	r7, fp
   1151e:	463b      	mov	r3, r7
   11520:	bfb8      	it	lt
   11522:	465b      	movlt	r3, fp
   11524:	9305      	str	r3, [sp, #20]
   11526:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1152a:	b113      	cbz	r3, 11532 <_vfiprintf_r+0x3f6>
   1152c:	9b05      	ldr	r3, [sp, #20]
   1152e:	3301      	adds	r3, #1
   11530:	9305      	str	r3, [sp, #20]
   11532:	f014 0302 	ands.w	r3, r4, #2
   11536:	930a      	str	r3, [sp, #40]	; 0x28
   11538:	bf1e      	ittt	ne
   1153a:	9b05      	ldrne	r3, [sp, #20]
   1153c:	3302      	addne	r3, #2
   1153e:	9305      	strne	r3, [sp, #20]
   11540:	f014 0384 	ands.w	r3, r4, #132	; 0x84
   11544:	930b      	str	r3, [sp, #44]	; 0x2c
   11546:	d123      	bne.n	11590 <_vfiprintf_r+0x454>
   11548:	9b03      	ldr	r3, [sp, #12]
   1154a:	9a05      	ldr	r2, [sp, #20]
   1154c:	eba3 0a02 	sub.w	sl, r3, r2
   11550:	f1ba 0f00 	cmp.w	sl, #0
   11554:	dd1c      	ble.n	11590 <_vfiprintf_r+0x454>
   11556:	4b92      	ldr	r3, [pc, #584]	; (117a0 <_vfiprintf_r+0x664>)
   11558:	f1ba 0f10 	cmp.w	sl, #16
   1155c:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
   11560:	f105 0008 	add.w	r0, r5, #8
   11564:	f102 0201 	add.w	r2, r2, #1
   11568:	602b      	str	r3, [r5, #0]
   1156a:	f300 8136 	bgt.w	117da <_vfiprintf_r+0x69e>
   1156e:	4451      	add	r1, sl
   11570:	2a07      	cmp	r2, #7
   11572:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
   11576:	f8c5 a004 	str.w	sl, [r5, #4]
   1157a:	f340 8144 	ble.w	11806 <_vfiprintf_r+0x6ca>
   1157e:	4631      	mov	r1, r6
   11580:	4648      	mov	r0, r9
   11582:	aa0e      	add	r2, sp, #56	; 0x38
   11584:	f006 f80a 	bl	1759c <__sprint_r>
   11588:	2800      	cmp	r0, #0
   1158a:	f040 81a1 	bne.w	118d0 <_vfiprintf_r+0x794>
   1158e:	ad11      	add	r5, sp, #68	; 0x44
   11590:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   11594:	b173      	cbz	r3, 115b4 <_vfiprintf_r+0x478>
   11596:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   1159a:	602a      	str	r2, [r5, #0]
   1159c:	2201      	movs	r2, #1
   1159e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   115a0:	606a      	str	r2, [r5, #4]
   115a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   115a4:	3301      	adds	r3, #1
   115a6:	3201      	adds	r2, #1
   115a8:	2b07      	cmp	r3, #7
   115aa:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   115ae:	f300 812c 	bgt.w	1180a <_vfiprintf_r+0x6ce>
   115b2:	3508      	adds	r5, #8
   115b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   115b6:	b16b      	cbz	r3, 115d4 <_vfiprintf_r+0x498>
   115b8:	aa0d      	add	r2, sp, #52	; 0x34
   115ba:	602a      	str	r2, [r5, #0]
   115bc:	2202      	movs	r2, #2
   115be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   115c0:	606a      	str	r2, [r5, #4]
   115c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   115c4:	3301      	adds	r3, #1
   115c6:	3202      	adds	r2, #2
   115c8:	2b07      	cmp	r3, #7
   115ca:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   115ce:	f300 8125 	bgt.w	1181c <_vfiprintf_r+0x6e0>
   115d2:	3508      	adds	r5, #8
   115d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   115d6:	2b80      	cmp	r3, #128	; 0x80
   115d8:	d123      	bne.n	11622 <_vfiprintf_r+0x4e6>
   115da:	9b03      	ldr	r3, [sp, #12]
   115dc:	9a05      	ldr	r2, [sp, #20]
   115de:	eba3 0a02 	sub.w	sl, r3, r2
   115e2:	f1ba 0f00 	cmp.w	sl, #0
   115e6:	dd1c      	ble.n	11622 <_vfiprintf_r+0x4e6>
   115e8:	4b6e      	ldr	r3, [pc, #440]	; (117a4 <_vfiprintf_r+0x668>)
   115ea:	f1ba 0f10 	cmp.w	sl, #16
   115ee:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
   115f2:	f105 0008 	add.w	r0, r5, #8
   115f6:	f102 0201 	add.w	r2, r2, #1
   115fa:	602b      	str	r3, [r5, #0]
   115fc:	f300 8117 	bgt.w	1182e <_vfiprintf_r+0x6f2>
   11600:	4451      	add	r1, sl
   11602:	2a07      	cmp	r2, #7
   11604:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
   11608:	f8c5 a004 	str.w	sl, [r5, #4]
   1160c:	f340 8125 	ble.w	1185a <_vfiprintf_r+0x71e>
   11610:	4631      	mov	r1, r6
   11612:	4648      	mov	r0, r9
   11614:	aa0e      	add	r2, sp, #56	; 0x38
   11616:	f005 ffc1 	bl	1759c <__sprint_r>
   1161a:	2800      	cmp	r0, #0
   1161c:	f040 8158 	bne.w	118d0 <_vfiprintf_r+0x794>
   11620:	ad11      	add	r5, sp, #68	; 0x44
   11622:	eba7 070b 	sub.w	r7, r7, fp
   11626:	2f00      	cmp	r7, #0
   11628:	dd1c      	ble.n	11664 <_vfiprintf_r+0x528>
   1162a:	f8df a178 	ldr.w	sl, [pc, #376]	; 117a4 <_vfiprintf_r+0x668>
   1162e:	2f10      	cmp	r7, #16
   11630:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
   11634:	f105 0208 	add.w	r2, r5, #8
   11638:	f103 0301 	add.w	r3, r3, #1
   1163c:	f8c5 a000 	str.w	sl, [r5]
   11640:	f300 810d 	bgt.w	1185e <_vfiprintf_r+0x722>
   11644:	606f      	str	r7, [r5, #4]
   11646:	2b07      	cmp	r3, #7
   11648:	440f      	add	r7, r1
   1164a:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
   1164e:	f340 8117 	ble.w	11880 <_vfiprintf_r+0x744>
   11652:	4631      	mov	r1, r6
   11654:	4648      	mov	r0, r9
   11656:	aa0e      	add	r2, sp, #56	; 0x38
   11658:	f005 ffa0 	bl	1759c <__sprint_r>
   1165c:	2800      	cmp	r0, #0
   1165e:	f040 8137 	bne.w	118d0 <_vfiprintf_r+0x794>
   11662:	ad11      	add	r5, sp, #68	; 0x44
   11664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11666:	9810      	ldr	r0, [sp, #64]	; 0x40
   11668:	3301      	adds	r3, #1
   1166a:	4458      	add	r0, fp
   1166c:	2b07      	cmp	r3, #7
   1166e:	e9c5 8b00 	strd	r8, fp, [r5]
   11672:	9010      	str	r0, [sp, #64]	; 0x40
   11674:	930f      	str	r3, [sp, #60]	; 0x3c
   11676:	f300 8105 	bgt.w	11884 <_vfiprintf_r+0x748>
   1167a:	f105 0308 	add.w	r3, r5, #8
   1167e:	0760      	lsls	r0, r4, #29
   11680:	f100 8108 	bmi.w	11894 <_vfiprintf_r+0x758>
   11684:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   11688:	9905      	ldr	r1, [sp, #20]
   1168a:	428a      	cmp	r2, r1
   1168c:	bfac      	ite	ge
   1168e:	189b      	addge	r3, r3, r2
   11690:	185b      	addlt	r3, r3, r1
   11692:	9304      	str	r3, [sp, #16]
   11694:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11696:	b13b      	cbz	r3, 116a8 <_vfiprintf_r+0x56c>
   11698:	4631      	mov	r1, r6
   1169a:	4648      	mov	r0, r9
   1169c:	aa0e      	add	r2, sp, #56	; 0x38
   1169e:	f005 ff7d 	bl	1759c <__sprint_r>
   116a2:	2800      	cmp	r0, #0
   116a4:	f040 8114 	bne.w	118d0 <_vfiprintf_r+0x794>
   116a8:	2300      	movs	r3, #0
   116aa:	f8dd 8008 	ldr.w	r8, [sp, #8]
   116ae:	930f      	str	r3, [sp, #60]	; 0x3c
   116b0:	ad11      	add	r5, sp, #68	; 0x44
   116b2:	e58e      	b.n	111d2 <_vfiprintf_r+0x96>
   116b4:	4640      	mov	r0, r8
   116b6:	f7ef fbdb 	bl	e70 <strlen>
   116ba:	4683      	mov	fp, r0
   116bc:	e72e      	b.n	1151c <_vfiprintf_r+0x3e0>
   116be:	f044 0410 	orr.w	r4, r4, #16
   116c2:	f108 0304 	add.w	r3, r8, #4
   116c6:	06e1      	lsls	r1, r4, #27
   116c8:	9302      	str	r3, [sp, #8]
   116ca:	d502      	bpl.n	116d2 <_vfiprintf_r+0x596>
   116cc:	f8d8 7000 	ldr.w	r7, [r8]
   116d0:	e003      	b.n	116da <_vfiprintf_r+0x59e>
   116d2:	0662      	lsls	r2, r4, #25
   116d4:	d503      	bpl.n	116de <_vfiprintf_r+0x5a2>
   116d6:	f8b8 7000 	ldrh.w	r7, [r8]
   116da:	2301      	movs	r3, #1
   116dc:	e6e0      	b.n	114a0 <_vfiprintf_r+0x364>
   116de:	05a3      	lsls	r3, r4, #22
   116e0:	d5f4      	bpl.n	116cc <_vfiprintf_r+0x590>
   116e2:	f898 7000 	ldrb.w	r7, [r8]
   116e6:	e7f8      	b.n	116da <_vfiprintf_r+0x59e>
   116e8:	4a2f      	ldr	r2, [pc, #188]	; (117a8 <_vfiprintf_r+0x66c>)
   116ea:	e606      	b.n	112fa <_vfiprintf_r+0x1be>
   116ec:	0660      	lsls	r0, r4, #25
   116ee:	d50e      	bpl.n	1170e <_vfiprintf_r+0x5d2>
   116f0:	f8b8 7000 	ldrh.w	r7, [r8]
   116f4:	07e2      	lsls	r2, r4, #31
   116f6:	d507      	bpl.n	11708 <_vfiprintf_r+0x5cc>
   116f8:	b137      	cbz	r7, 11708 <_vfiprintf_r+0x5cc>
   116fa:	2230      	movs	r2, #48	; 0x30
   116fc:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   11700:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   11704:	f044 0402 	orr.w	r4, r4, #2
   11708:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
   1170c:	e6ef      	b.n	114ee <_vfiprintf_r+0x3b2>
   1170e:	05a1      	lsls	r1, r4, #22
   11710:	f57f adfa 	bpl.w	11308 <_vfiprintf_r+0x1cc>
   11714:	f898 7000 	ldrb.w	r7, [r8]
   11718:	e7ec      	b.n	116f4 <_vfiprintf_r+0x5b8>
   1171a:	2f09      	cmp	r7, #9
   1171c:	d805      	bhi.n	1172a <_vfiprintf_r+0x5ee>
   1171e:	3730      	adds	r7, #48	; 0x30
   11720:	f88d 70e7 	strb.w	r7, [sp, #231]	; 0xe7
   11724:	f10d 08e7 	add.w	r8, sp, #231	; 0xe7
   11728:	e11d      	b.n	11966 <_vfiprintf_r+0x82a>
   1172a:	2300      	movs	r3, #0
   1172c:	a93a      	add	r1, sp, #232	; 0xe8
   1172e:	f40a 6480 	and.w	r4, sl, #1024	; 0x400
   11732:	200a      	movs	r0, #10
   11734:	fbb7 f2f0 	udiv	r2, r7, r0
   11738:	fb00 7212 	mls	r2, r0, r2, r7
   1173c:	3230      	adds	r2, #48	; 0x30
   1173e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
   11742:	f801 2c01 	strb.w	r2, [r1, #-1]
   11746:	3301      	adds	r3, #1
   11748:	b1b4      	cbz	r4, 11778 <_vfiprintf_r+0x63c>
   1174a:	9a07      	ldr	r2, [sp, #28]
   1174c:	7812      	ldrb	r2, [r2, #0]
   1174e:	429a      	cmp	r2, r3
   11750:	d112      	bne.n	11778 <_vfiprintf_r+0x63c>
   11752:	2bff      	cmp	r3, #255	; 0xff
   11754:	d010      	beq.n	11778 <_vfiprintf_r+0x63c>
   11756:	2f09      	cmp	r7, #9
   11758:	d90e      	bls.n	11778 <_vfiprintf_r+0x63c>
   1175a:	9b08      	ldr	r3, [sp, #32]
   1175c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1175e:	eba8 0803 	sub.w	r8, r8, r3
   11762:	461a      	mov	r2, r3
   11764:	4640      	mov	r0, r8
   11766:	f005 fe8b 	bl	17480 <strncpy>
   1176a:	9b07      	ldr	r3, [sp, #28]
   1176c:	785b      	ldrb	r3, [r3, #1]
   1176e:	b11b      	cbz	r3, 11778 <_vfiprintf_r+0x63c>
   11770:	9b07      	ldr	r3, [sp, #28]
   11772:	3301      	adds	r3, #1
   11774:	9307      	str	r3, [sp, #28]
   11776:	2300      	movs	r3, #0
   11778:	220a      	movs	r2, #10
   1177a:	2f09      	cmp	r7, #9
   1177c:	fbb7 f2f2 	udiv	r2, r7, r2
   11780:	f240 80f1 	bls.w	11966 <_vfiprintf_r+0x82a>
   11784:	4617      	mov	r7, r2
   11786:	4641      	mov	r1, r8
   11788:	e7d3      	b.n	11732 <_vfiprintf_r+0x5f6>
   1178a:	9a06      	ldr	r2, [sp, #24]
   1178c:	f007 030f 	and.w	r3, r7, #15
   11790:	5cd3      	ldrb	r3, [r2, r3]
   11792:	093f      	lsrs	r7, r7, #4
   11794:	f808 3d01 	strb.w	r3, [r8, #-1]!
   11798:	d1f7      	bne.n	1178a <_vfiprintf_r+0x64e>
   1179a:	e0e4      	b.n	11966 <_vfiprintf_r+0x82a>
   1179c:	00018c04 	.word	0x00018c04
   117a0:	00018df0 	.word	0x00018df0
   117a4:	00018e00 	.word	0x00018e00
   117a8:	00018c15 	.word	0x00018c15
   117ac:	b92b      	cbnz	r3, 117ba <_vfiprintf_r+0x67e>
   117ae:	07e4      	lsls	r4, r4, #31
   117b0:	d503      	bpl.n	117ba <_vfiprintf_r+0x67e>
   117b2:	2330      	movs	r3, #48	; 0x30
   117b4:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   117b8:	e7b4      	b.n	11724 <_vfiprintf_r+0x5e8>
   117ba:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
   117be:	e0d2      	b.n	11966 <_vfiprintf_r+0x82a>
   117c0:	2b00      	cmp	r3, #0
   117c2:	f000 80a5 	beq.w	11910 <_vfiprintf_r+0x7d4>
   117c6:	2700      	movs	r7, #0
   117c8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   117cc:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
   117d0:	f8cd 8008 	str.w	r8, [sp, #8]
   117d4:	e621      	b.n	1141a <_vfiprintf_r+0x2de>
   117d6:	4607      	mov	r7, r0
   117d8:	e6a0      	b.n	1151c <_vfiprintf_r+0x3e0>
   117da:	f04f 0c10 	mov.w	ip, #16
   117de:	2a07      	cmp	r2, #7
   117e0:	4461      	add	r1, ip
   117e2:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
   117e6:	f8c5 c004 	str.w	ip, [r5, #4]
   117ea:	dd08      	ble.n	117fe <_vfiprintf_r+0x6c2>
   117ec:	4631      	mov	r1, r6
   117ee:	4648      	mov	r0, r9
   117f0:	aa0e      	add	r2, sp, #56	; 0x38
   117f2:	f005 fed3 	bl	1759c <__sprint_r>
   117f6:	2800      	cmp	r0, #0
   117f8:	d16a      	bne.n	118d0 <_vfiprintf_r+0x794>
   117fa:	4b5e      	ldr	r3, [pc, #376]	; (11974 <_vfiprintf_r+0x838>)
   117fc:	a811      	add	r0, sp, #68	; 0x44
   117fe:	4605      	mov	r5, r0
   11800:	f1aa 0a10 	sub.w	sl, sl, #16
   11804:	e6a8      	b.n	11558 <_vfiprintf_r+0x41c>
   11806:	4605      	mov	r5, r0
   11808:	e6c2      	b.n	11590 <_vfiprintf_r+0x454>
   1180a:	4631      	mov	r1, r6
   1180c:	4648      	mov	r0, r9
   1180e:	aa0e      	add	r2, sp, #56	; 0x38
   11810:	f005 fec4 	bl	1759c <__sprint_r>
   11814:	2800      	cmp	r0, #0
   11816:	d15b      	bne.n	118d0 <_vfiprintf_r+0x794>
   11818:	ad11      	add	r5, sp, #68	; 0x44
   1181a:	e6cb      	b.n	115b4 <_vfiprintf_r+0x478>
   1181c:	4631      	mov	r1, r6
   1181e:	4648      	mov	r0, r9
   11820:	aa0e      	add	r2, sp, #56	; 0x38
   11822:	f005 febb 	bl	1759c <__sprint_r>
   11826:	2800      	cmp	r0, #0
   11828:	d152      	bne.n	118d0 <_vfiprintf_r+0x794>
   1182a:	ad11      	add	r5, sp, #68	; 0x44
   1182c:	e6d2      	b.n	115d4 <_vfiprintf_r+0x498>
   1182e:	f04f 0c10 	mov.w	ip, #16
   11832:	2a07      	cmp	r2, #7
   11834:	4461      	add	r1, ip
   11836:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
   1183a:	f8c5 c004 	str.w	ip, [r5, #4]
   1183e:	dd08      	ble.n	11852 <_vfiprintf_r+0x716>
   11840:	4631      	mov	r1, r6
   11842:	4648      	mov	r0, r9
   11844:	aa0e      	add	r2, sp, #56	; 0x38
   11846:	f005 fea9 	bl	1759c <__sprint_r>
   1184a:	2800      	cmp	r0, #0
   1184c:	d140      	bne.n	118d0 <_vfiprintf_r+0x794>
   1184e:	4b4a      	ldr	r3, [pc, #296]	; (11978 <_vfiprintf_r+0x83c>)
   11850:	a811      	add	r0, sp, #68	; 0x44
   11852:	4605      	mov	r5, r0
   11854:	f1aa 0a10 	sub.w	sl, sl, #16
   11858:	e6c7      	b.n	115ea <_vfiprintf_r+0x4ae>
   1185a:	4605      	mov	r5, r0
   1185c:	e6e1      	b.n	11622 <_vfiprintf_r+0x4e6>
   1185e:	2010      	movs	r0, #16
   11860:	2b07      	cmp	r3, #7
   11862:	4401      	add	r1, r0
   11864:	e9cd 310f 	strd	r3, r1, [sp, #60]	; 0x3c
   11868:	6068      	str	r0, [r5, #4]
   1186a:	dd06      	ble.n	1187a <_vfiprintf_r+0x73e>
   1186c:	4631      	mov	r1, r6
   1186e:	4648      	mov	r0, r9
   11870:	aa0e      	add	r2, sp, #56	; 0x38
   11872:	f005 fe93 	bl	1759c <__sprint_r>
   11876:	bb58      	cbnz	r0, 118d0 <_vfiprintf_r+0x794>
   11878:	aa11      	add	r2, sp, #68	; 0x44
   1187a:	4615      	mov	r5, r2
   1187c:	3f10      	subs	r7, #16
   1187e:	e6d6      	b.n	1162e <_vfiprintf_r+0x4f2>
   11880:	4615      	mov	r5, r2
   11882:	e6ef      	b.n	11664 <_vfiprintf_r+0x528>
   11884:	4631      	mov	r1, r6
   11886:	4648      	mov	r0, r9
   11888:	aa0e      	add	r2, sp, #56	; 0x38
   1188a:	f005 fe87 	bl	1759c <__sprint_r>
   1188e:	b9f8      	cbnz	r0, 118d0 <_vfiprintf_r+0x794>
   11890:	ab11      	add	r3, sp, #68	; 0x44
   11892:	e6f4      	b.n	1167e <_vfiprintf_r+0x542>
   11894:	9a03      	ldr	r2, [sp, #12]
   11896:	9905      	ldr	r1, [sp, #20]
   11898:	1a54      	subs	r4, r2, r1
   1189a:	2c00      	cmp	r4, #0
   1189c:	f77f aef2 	ble.w	11684 <_vfiprintf_r+0x548>
   118a0:	2510      	movs	r5, #16
   118a2:	4f34      	ldr	r7, [pc, #208]	; (11974 <_vfiprintf_r+0x838>)
   118a4:	2c10      	cmp	r4, #16
   118a6:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
   118aa:	601f      	str	r7, [r3, #0]
   118ac:	f102 0201 	add.w	r2, r2, #1
   118b0:	dc1c      	bgt.n	118ec <_vfiprintf_r+0x7b0>
   118b2:	605c      	str	r4, [r3, #4]
   118b4:	2a07      	cmp	r2, #7
   118b6:	440c      	add	r4, r1
   118b8:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
   118bc:	f77f aee2 	ble.w	11684 <_vfiprintf_r+0x548>
   118c0:	4631      	mov	r1, r6
   118c2:	4648      	mov	r0, r9
   118c4:	aa0e      	add	r2, sp, #56	; 0x38
   118c6:	f005 fe69 	bl	1759c <__sprint_r>
   118ca:	2800      	cmp	r0, #0
   118cc:	f43f aeda 	beq.w	11684 <_vfiprintf_r+0x548>
   118d0:	6e73      	ldr	r3, [r6, #100]	; 0x64
   118d2:	07d9      	lsls	r1, r3, #31
   118d4:	d405      	bmi.n	118e2 <_vfiprintf_r+0x7a6>
   118d6:	89b3      	ldrh	r3, [r6, #12]
   118d8:	059a      	lsls	r2, r3, #22
   118da:	d402      	bmi.n	118e2 <_vfiprintf_r+0x7a6>
   118dc:	6db0      	ldr	r0, [r6, #88]	; 0x58
   118de:	f000 f8c1 	bl	11a64 <__retarget_lock_release_recursive>
   118e2:	89b3      	ldrh	r3, [r6, #12]
   118e4:	065b      	lsls	r3, r3, #25
   118e6:	f57f ac53 	bpl.w	11190 <_vfiprintf_r+0x54>
   118ea:	e44e      	b.n	1118a <_vfiprintf_r+0x4e>
   118ec:	3110      	adds	r1, #16
   118ee:	2a07      	cmp	r2, #7
   118f0:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
   118f4:	605d      	str	r5, [r3, #4]
   118f6:	dc02      	bgt.n	118fe <_vfiprintf_r+0x7c2>
   118f8:	3308      	adds	r3, #8
   118fa:	3c10      	subs	r4, #16
   118fc:	e7d2      	b.n	118a4 <_vfiprintf_r+0x768>
   118fe:	4631      	mov	r1, r6
   11900:	4648      	mov	r0, r9
   11902:	aa0e      	add	r2, sp, #56	; 0x38
   11904:	f005 fe4a 	bl	1759c <__sprint_r>
   11908:	2800      	cmp	r0, #0
   1190a:	d1e1      	bne.n	118d0 <_vfiprintf_r+0x794>
   1190c:	ab11      	add	r3, sp, #68	; 0x44
   1190e:	e7f4      	b.n	118fa <_vfiprintf_r+0x7be>
   11910:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11912:	b913      	cbnz	r3, 1191a <_vfiprintf_r+0x7de>
   11914:	2300      	movs	r3, #0
   11916:	930f      	str	r3, [sp, #60]	; 0x3c
   11918:	e7da      	b.n	118d0 <_vfiprintf_r+0x794>
   1191a:	4631      	mov	r1, r6
   1191c:	4648      	mov	r0, r9
   1191e:	aa0e      	add	r2, sp, #56	; 0x38
   11920:	f005 fe3c 	bl	1759c <__sprint_r>
   11924:	2800      	cmp	r0, #0
   11926:	d0f5      	beq.n	11914 <_vfiprintf_r+0x7d8>
   11928:	e7d2      	b.n	118d0 <_vfiprintf_r+0x794>
   1192a:	46a2      	mov	sl, r4
   1192c:	2f00      	cmp	r7, #0
   1192e:	f43f adc7 	beq.w	114c0 <_vfiprintf_r+0x384>
   11932:	2b01      	cmp	r3, #1
   11934:	f43f aef1 	beq.w	1171a <_vfiprintf_r+0x5de>
   11938:	2b02      	cmp	r3, #2
   1193a:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
   1193e:	f43f af24 	beq.w	1178a <_vfiprintf_r+0x64e>
   11942:	f007 0307 	and.w	r3, r7, #7
   11946:	3330      	adds	r3, #48	; 0x30
   11948:	08ff      	lsrs	r7, r7, #3
   1194a:	4642      	mov	r2, r8
   1194c:	f808 3d01 	strb.w	r3, [r8, #-1]!
   11950:	d1f7      	bne.n	11942 <_vfiprintf_r+0x806>
   11952:	f01a 0f01 	tst.w	sl, #1
   11956:	d006      	beq.n	11966 <_vfiprintf_r+0x82a>
   11958:	2b30      	cmp	r3, #48	; 0x30
   1195a:	d004      	beq.n	11966 <_vfiprintf_r+0x82a>
   1195c:	2330      	movs	r3, #48	; 0x30
   1195e:	f808 3c01 	strb.w	r3, [r8, #-1]
   11962:	f1a2 0802 	sub.w	r8, r2, #2
   11966:	ab3a      	add	r3, sp, #232	; 0xe8
   11968:	465f      	mov	r7, fp
   1196a:	4654      	mov	r4, sl
   1196c:	eba3 0b08 	sub.w	fp, r3, r8
   11970:	e5d4      	b.n	1151c <_vfiprintf_r+0x3e0>
   11972:	bf00      	nop
   11974:	00018df0 	.word	0x00018df0
   11978:	00018e00 	.word	0x00018e00

0001197c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1197c:	4770      	bx	lr

0001197e <arch_printk_char_out>:
}
   1197e:	2000      	movs	r0, #0
   11980:	4770      	bx	lr

00011982 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
   11982:	b40f      	push	{r0, r1, r2, r3}
   11984:	b507      	push	{r0, r1, r2, lr}
   11986:	a904      	add	r1, sp, #16
   11988:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1198c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1198e:	f7f1 fd33 	bl	33f8 <vprintk>

	va_end(ap);
}
   11992:	b003      	add	sp, #12
   11994:	f85d eb04 	ldr.w	lr, [sp], #4
   11998:	b004      	add	sp, #16
   1199a:	4770      	bx	lr

0001199c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1199c:	4604      	mov	r4, r0
   1199e:	b508      	push	{r3, lr}
   119a0:	4608      	mov	r0, r1
   119a2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   119a4:	461a      	mov	r2, r3
   119a6:	47a0      	blx	r4
		/* coverity[OVERRUN] */
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_Z_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_z_current_get();
   119a8:	f7fa fff2 	bl	c990 <z_impl_z_current_get>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
   119ac:	f7f2 fb02 	bl	3fb4 <z_impl_k_thread_abort>

000119b0 <outs>:
{
   119b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   119b4:	4607      	mov	r7, r0
   119b6:	4688      	mov	r8, r1
   119b8:	4615      	mov	r5, r2
   119ba:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   119bc:	4614      	mov	r4, r2
   119be:	42b4      	cmp	r4, r6
   119c0:	eba4 0005 	sub.w	r0, r4, r5
   119c4:	d302      	bcc.n	119cc <outs+0x1c>
   119c6:	b93e      	cbnz	r6, 119d8 <outs+0x28>
   119c8:	7823      	ldrb	r3, [r4, #0]
   119ca:	b12b      	cbz	r3, 119d8 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   119cc:	4641      	mov	r1, r8
   119ce:	f814 0b01 	ldrb.w	r0, [r4], #1
   119d2:	47b8      	blx	r7
		if (rc < 0) {
   119d4:	2800      	cmp	r0, #0
   119d6:	daf2      	bge.n	119be <outs+0xe>
}
   119d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000119dc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   119dc:	4770      	bx	lr

000119de <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   119de:	f004 bf71 	b.w	168c4 <z_fatal_error>

000119e2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   119e2:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   119e4:	6800      	ldr	r0, [r0, #0]
   119e6:	f004 bf6d 	b.w	168c4 <z_fatal_error>

000119ea <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   119ea:	2100      	movs	r1, #0
   119ec:	2001      	movs	r0, #1
   119ee:	f7ff bff6 	b.w	119de <z_arm_fatal_error>

000119f2 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   119f2:	b508      	push	{r3, lr}
	handler();
   119f4:	f7f2 f91c 	bl	3c30 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   119f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   119fc:	f7f2 b9c4 	b.w	3d88 <z_arm_exc_exit>

00011a00 <malloc_prepare>:
}
   11a00:	2000      	movs	r0, #0
   11a02:	4770      	bx	lr

00011a04 <_stdout_hook_default>:
}
   11a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11a08:	4770      	bx	lr

00011a0a <_stdin_hook_default>:
}
   11a0a:	2000      	movs	r0, #0
   11a0c:	4770      	bx	lr

00011a0e <_read>:
{
   11a0e:	4608      	mov	r0, r1
   11a10:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   11a12:	f7f2 bae7 	b.w	3fe4 <z_impl_zephyr_read_stdin>

00011a16 <_write>:
{
   11a16:	4608      	mov	r0, r1
   11a18:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   11a1a:	f7f2 baf7 	b.w	400c <z_impl_zephyr_write_stdout>

00011a1e <_close>:
   11a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11a22:	4770      	bx	lr

00011a24 <_lseek>:
}
   11a24:	2000      	movs	r0, #0
   11a26:	4770      	bx	lr

00011a28 <_isatty>:
}
   11a28:	2802      	cmp	r0, #2
   11a2a:	bfcc      	ite	gt
   11a2c:	2000      	movgt	r0, #0
   11a2e:	2001      	movle	r0, #1
   11a30:	4770      	bx	lr

00011a32 <_kill>:
}
   11a32:	2000      	movs	r0, #0
   11a34:	4770      	bx	lr

00011a36 <_getpid>:
}
   11a36:	2000      	movs	r0, #0
   11a38:	4770      	bx	lr

00011a3a <_fstat>:
	st->st_mode = S_IFCHR;
   11a3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   11a3e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   11a40:	604b      	str	r3, [r1, #4]
}
   11a42:	4770      	bx	lr

00011a44 <__retarget_lock_init_recursive>:
{
   11a44:	b510      	push	{r4, lr}
   11a46:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
   11a48:	2014      	movs	r0, #20
   11a4a:	f7fb fea5 	bl	d798 <malloc>
   11a4e:	6020      	str	r0, [r4, #0]
}
   11a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
   11a54:	f004 bf65 	b.w	16922 <z_impl_k_mutex_init>

00011a58 <__retarget_lock_acquire_recursive>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   11a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11a60:	f7fa bc9c 	b.w	c39c <z_impl_k_mutex_lock>

00011a64 <__retarget_lock_release_recursive>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   11a64:	f7fa bd12 	b.w	c48c <z_impl_k_mutex_unlock>

00011a68 <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   11a68:	f7fa bb5c 	b.w	c124 <z_impl_z_errno>

00011a6c <_gettimeofday>:
	/* Non-posix systems should not call gettimeofday() here as it will
	 * result in a recursive call loop and result in a stack overflow.
	 */
	return -1;
#endif
}
   11a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11a70:	4770      	bx	lr

00011a72 <ti_lm3s6965_init>:
	/* Install default handler that simply resets the CPU
	 * if configured in the kernel, NOP otherwise
	 */
	NMI_INIT();
	return 0;
}
   11a72:	2000      	movs	r0, #0
   11a74:	4770      	bx	lr

00011a76 <uart_stellaris_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_stellaris_poll_in(const struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
   11a76:	6843      	ldr	r3, [r0, #4]
   11a78:	681b      	ldr	r3, [r3, #0]

	if (uart->fr & UARTFR_RXFE) {
   11a7a:	6998      	ldr	r0, [r3, #24]
   11a7c:	f010 0010 	ands.w	r0, r0, #16
		return (-1);
	}

	/* got a character */
	*c = (unsigned char)uart->dr;
   11a80:	bf0a      	itet	eq
   11a82:	681b      	ldreq	r3, [r3, #0]
		return (-1);
   11a84:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
	*c = (unsigned char)uart->dr;
   11a88:	700b      	strbeq	r3, [r1, #0]

	return 0;
}
   11a8a:	4770      	bx	lr

00011a8c <uart_stellaris_poll_out>:
 * @param c Character to send
 */
static void uart_stellaris_poll_out(const struct device *dev,
					     unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
   11a8c:	6843      	ldr	r3, [r0, #4]
   11a8e:	681b      	ldr	r3, [r3, #0]
	return (uart->fr & UARTFR_TXFE);
   11a90:	699a      	ldr	r2, [r3, #24]

	while (!poll_tx_ready(dev)) {
   11a92:	0612      	lsls	r2, r2, #24
   11a94:	d5fc      	bpl.n	11a90 <uart_stellaris_poll_out+0x4>
	}

	/* send a character */
	uart->dr = (uint32_t)c;
   11a96:	6019      	str	r1, [r3, #0]
}
   11a98:	4770      	bx	lr

00011a9a <uart_stellaris_init>:
{
   11a9a:	4601      	mov	r1, r0
   11a9c:	b530      	push	{r4, r5, lr}
   11a9e:	6844      	ldr	r4, [r0, #4]
	volatile struct _uart *uart = UART_STRUCT(dev);
   11aa0:	6822      	ldr	r2, [r4, #0]
	uart->ctl &= ~UARTCTL_UARTEN;
   11aa2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   11aa4:	f023 0301 	bic.w	r3, r3, #1
   11aa8:	6313      	str	r3, [r2, #48]	; 0x30
	while (uart->fr & UARTFR_BUSY) {
   11aaa:	6990      	ldr	r0, [r2, #24]
   11aac:	f010 0008 	ands.w	r0, r0, #8
   11ab0:	d1fb      	bne.n	11aaa <uart_stellaris_init+0x10>
	uart->lcrh &= ~UARTLCRH_FEN;
   11ab2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	baudrate_set(dev, DEV_DATA(dev)->baud_rate,
   11ab4:	6909      	ldr	r1, [r1, #16]
	uart->lcrh &= ~UARTLCRH_FEN;
   11ab6:	f023 0310 	bic.w	r3, r3, #16
	div = (baudrate * 16U);
   11aba:	6809      	ldr	r1, [r1, #0]
	uart->lcrh &= ~UARTLCRH_FEN;
   11abc:	62d3      	str	r3, [r2, #44]	; 0x2c
	baudrate_set(dev, DEV_DATA(dev)->baud_rate,
   11abe:	6863      	ldr	r3, [r4, #4]
	div = (baudrate * 16U);
   11ac0:	0109      	lsls	r1, r1, #4
	brdi = sys_clk_freq_hz / div;
   11ac2:	fbb3 f4f1 	udiv	r4, r3, r1
	rem = sys_clk_freq_hz % div;
   11ac6:	fb01 3314 	mls	r3, r1, r4, r3
	brdf = ((((rem * 64U) << 1) / div) + 1) >> 1;
   11aca:	01db      	lsls	r3, r3, #7
   11acc:	fbb3 f3f1 	udiv	r3, r3, r1
   11ad0:	3301      	adds	r3, #1
   11ad2:	b2a5      	uxth	r5, r4
	uart->fbrd = (uint8_t)(brdf & 0x3f);    /* 6 bits */
   11ad4:	f3c3 0345 	ubfx	r3, r3, #1, #6
	uart->ibrd = (uint16_t)(brdi & 0xffff); /* 16 bits */
   11ad8:	6255      	str	r5, [r2, #36]	; 0x24
	uart->fbrd = (uint8_t)(brdf & 0x3f);    /* 6 bits */
   11ada:	6293      	str	r3, [r2, #40]	; 0x28
	uart->lcrh = LINE_CONTROL_DEFAULTS;
   11adc:	2360      	movs	r3, #96	; 0x60
   11ade:	62d3      	str	r3, [r2, #44]	; 0x2c
	uart->ctl |= UARTCTL_UARTEN;
   11ae0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   11ae2:	f043 0301 	orr.w	r3, r3, #1
   11ae6:	6313      	str	r3, [r2, #48]	; 0x30
}
   11ae8:	bd30      	pop	{r4, r5, pc}

00011aea <index2stack>:
l_sinline StkId index2stack (lua_State *L, int idx) {
   11aea:	4603      	mov	r3, r0
  if (idx > 0) {
   11aec:	2900      	cmp	r1, #0
    StkId o = ci->func + idx;
   11aee:	bfca      	itet	gt
   11af0:	695b      	ldrgt	r3, [r3, #20]
    return L->top + idx;
   11af2:	68db      	ldrle	r3, [r3, #12]
    StkId o = ci->func + idx;
   11af4:	681b      	ldrgt	r3, [r3, #0]
   11af6:	0108      	lsls	r0, r1, #4
    return L->top + idx;
   11af8:	4418      	add	r0, r3
}
   11afa:	4770      	bx	lr

00011afc <f_call>:
  luaD_callnoyield(L, c->func, c->nresults);
   11afc:	c906      	ldmia	r1, {r1, r2}
   11afe:	f001 bc9b 	b.w	13438 <luaD_callnoyield>

00011b02 <lua_atpanic>:
  old = G(L)->panic;
   11b02:	6903      	ldr	r3, [r0, #16]
   11b04:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
  G(L)->panic = panicf;
   11b08:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
}
   11b0c:	4770      	bx	lr

00011b0e <lua_tolstring>:
LUA_API const char *lua_tolstring (lua_State *L, int idx, size_t *len) {
   11b0e:	b570      	push	{r4, r5, r6, lr}
   11b10:	460e      	mov	r6, r1
   11b12:	4605      	mov	r5, r0
   11b14:	4614      	mov	r4, r2
  o = index2value(L, idx);
   11b16:	f7f2 fbe9 	bl	42ec <index2value>
   11b1a:	7a03      	ldrb	r3, [r0, #8]
   11b1c:	4601      	mov	r1, r0
  if (!ttisstring(o)) {
   11b1e:	f003 030f 	and.w	r3, r3, #15
   11b22:	2b04      	cmp	r3, #4
   11b24:	d016      	beq.n	11b54 <lua_tolstring+0x46>
    if (!cvt2str(o)) {  /* not convertible? */
   11b26:	2b03      	cmp	r3, #3
   11b28:	d005      	beq.n	11b36 <lua_tolstring+0x28>
      if (len != NULL) *len = 0;
   11b2a:	b114      	cbz	r4, 11b32 <lua_tolstring+0x24>
   11b2c:	2300      	movs	r3, #0
   11b2e:	6023      	str	r3, [r4, #0]
      return NULL;
   11b30:	461c      	mov	r4, r3
}
   11b32:	4620      	mov	r0, r4
   11b34:	bd70      	pop	{r4, r5, r6, pc}
    luaO_tostring(L, o);
   11b36:	4628      	mov	r0, r5
   11b38:	f003 f9c9 	bl	14ece <luaO_tostring>
    luaC_checkGC(L);
   11b3c:	692b      	ldr	r3, [r5, #16]
   11b3e:	68db      	ldr	r3, [r3, #12]
   11b40:	2b00      	cmp	r3, #0
   11b42:	dd02      	ble.n	11b4a <lua_tolstring+0x3c>
   11b44:	4628      	mov	r0, r5
   11b46:	f002 fd96 	bl	14676 <luaC_step>
    o = index2value(L, idx);  /* previous call may reallocate the stack */
   11b4a:	4631      	mov	r1, r6
   11b4c:	4628      	mov	r0, r5
   11b4e:	f7f2 fbcd 	bl	42ec <index2value>
   11b52:	4601      	mov	r1, r0
    *len = vslen(o);
   11b54:	680b      	ldr	r3, [r1, #0]
  if (len != NULL)
   11b56:	b12c      	cbz	r4, 11b64 <lua_tolstring+0x56>
    *len = vslen(o);
   11b58:	791a      	ldrb	r2, [r3, #4]
   11b5a:	2a04      	cmp	r2, #4
   11b5c:	bf0c      	ite	eq
   11b5e:	79da      	ldrbeq	r2, [r3, #7]
   11b60:	68da      	ldrne	r2, [r3, #12]
   11b62:	6022      	str	r2, [r4, #0]
  return svalue(o);
   11b64:	f103 0410 	add.w	r4, r3, #16
   11b68:	e7e3      	b.n	11b32 <lua_tolstring+0x24>

00011b6a <lua_setwarnf>:
}


void lua_setwarnf (lua_State *L, lua_WarnFunction f, void *ud) {
  lua_lock(L);
  G(L)->ud_warn = ud;
   11b6a:	6903      	ldr	r3, [r0, #16]
  G(L)->warnf = f;
   11b6c:	e9c3 12b7 	strd	r1, r2, [r3, #732]	; 0x2dc
  lua_unlock(L);
}
   11b70:	4770      	bx	lr

00011b72 <getS>:
  if (ls->size == 0) return NULL;
   11b72:	6848      	ldr	r0, [r1, #4]
   11b74:	b118      	cbz	r0, 11b7e <getS+0xc>
  ls->size = 0;
   11b76:	2300      	movs	r3, #0
  *size = ls->size;
   11b78:	6010      	str	r0, [r2, #0]
  return ls->s;
   11b7a:	6808      	ldr	r0, [r1, #0]
  ls->size = 0;
   11b7c:	604b      	str	r3, [r1, #4]
}
   11b7e:	4770      	bx	lr

00011b80 <warnfoff>:
  checkcontrol((lua_State *)ud, message, tocont);
   11b80:	f7f2 bc68 	b.w	4454 <checkcontrol>

00011b84 <l_alloc>:
static void *l_alloc (void *ud, void *ptr, size_t osize, size_t nsize) {
   11b84:	b510      	push	{r4, lr}
   11b86:	4608      	mov	r0, r1
  if (nsize == 0) {
   11b88:	461c      	mov	r4, r3
   11b8a:	b123      	cbz	r3, 11b96 <l_alloc+0x12>
}
   11b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return realloc(ptr, nsize);
   11b90:	4619      	mov	r1, r3
   11b92:	f7fb beb3 	b.w	d8fc <realloc>
    free(ptr);
   11b96:	f7fb fe07 	bl	d7a8 <free>
}
   11b9a:	4620      	mov	r0, r4
   11b9c:	bd10      	pop	{r4, pc}

00011b9e <luaL_loadstring>:
LUALIB_API int luaL_loadstring (lua_State *L, const char *s) {
   11b9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11ba0:	4605      	mov	r5, r0
  return luaL_loadbuffer(L, s, strlen(s), s);
   11ba2:	4608      	mov	r0, r1
LUALIB_API int luaL_loadstring (lua_State *L, const char *s) {
   11ba4:	460c      	mov	r4, r1
  return luaL_loadbuffer(L, s, strlen(s), s);
   11ba6:	f7ef f963 	bl	e70 <strlen>
   11baa:	2300      	movs	r3, #0
   11bac:	4602      	mov	r2, r0
   11bae:	9300      	str	r3, [sp, #0]
   11bb0:	4621      	mov	r1, r4
   11bb2:	4623      	mov	r3, r4
   11bb4:	4628      	mov	r0, r5
   11bb6:	f7f2 fcdf 	bl	4578 <luaL_loadbufferx>
}
   11bba:	b003      	add	sp, #12
   11bbc:	bd30      	pop	{r4, r5, pc}

00011bbe <isKstr>:
  return (e->k == VK && !hasjumps(e) && e->u.info <= MAXARG_B &&
   11bbe:	780b      	ldrb	r3, [r1, #0]
   11bc0:	2b04      	cmp	r3, #4
   11bc2:	d110      	bne.n	11be6 <isKstr+0x28>
   11bc4:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   11bc8:	429a      	cmp	r2, r3
   11bca:	d10c      	bne.n	11be6 <isKstr+0x28>
   11bcc:	688a      	ldr	r2, [r1, #8]
   11bce:	2aff      	cmp	r2, #255	; 0xff
   11bd0:	dc09      	bgt.n	11be6 <isKstr+0x28>
          ttisshrstring(&fs->f->k[e->u.info]));
   11bd2:	6803      	ldr	r3, [r0, #0]
   11bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11bd6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  return (e->k == VK && !hasjumps(e) && e->u.info <= MAXARG_B &&
   11bda:	7a18      	ldrb	r0, [r3, #8]
   11bdc:	f1a0 0344 	sub.w	r3, r0, #68	; 0x44
   11be0:	4258      	negs	r0, r3
   11be2:	4158      	adcs	r0, r3
   11be4:	4770      	bx	lr
   11be6:	2000      	movs	r0, #0
}
   11be8:	4770      	bx	lr

00011bea <swapexps>:
static void swapexps (expdesc *e1, expdesc *e2) {
   11bea:	b5f0      	push	{r4, r5, r6, r7, lr}
   11bec:	b087      	sub	sp, #28
  expdesc temp = *e1; *e1 = *e2; *e2 = temp;  /* swap 'e1' and 'e2' */
   11bee:	466e      	mov	r6, sp
   11bf0:	4607      	mov	r7, r0
static void swapexps (expdesc *e1, expdesc *e2) {
   11bf2:	460c      	mov	r4, r1
   11bf4:	4605      	mov	r5, r0
  expdesc temp = *e1; *e1 = *e2; *e2 = temp;  /* swap 'e1' and 'e2' */
   11bf6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   11bf8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   11bfa:	e897 0003 	ldmia.w	r7, {r0, r1}
   11bfe:	e886 0003 	stmia.w	r6, {r0, r1}
   11c02:	4626      	mov	r6, r4
   11c04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   11c06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11c08:	e896 0003 	ldmia.w	r6, {r0, r1}
   11c0c:	e885 0003 	stmia.w	r5, {r0, r1}
   11c10:	466d      	mov	r5, sp
   11c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11c14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11c16:	e895 0003 	ldmia.w	r5, {r0, r1}
   11c1a:	e884 0003 	stmia.w	r4, {r0, r1}
}
   11c1e:	b007      	add	sp, #28
   11c20:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011c22 <stringK>:
static int stringK (FuncState *fs, TString *s) {
   11c22:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return addk(fs, &o, &o);  /* use string itself as key */
   11c24:	466a      	mov	r2, sp
  setsvalue(fs->ls->L, &o, s);
   11c26:	790b      	ldrb	r3, [r1, #4]
   11c28:	9100      	str	r1, [sp, #0]
   11c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  return addk(fs, &o, &o);  /* use string itself as key */
   11c2e:	4611      	mov	r1, r2
  setsvalue(fs->ls->L, &o, s);
   11c30:	f88d 3008 	strb.w	r3, [sp, #8]
  return addk(fs, &o, &o);  /* use string itself as key */
   11c34:	f7f2 fd16 	bl	4664 <addk>
}
   11c38:	b005      	add	sp, #20
   11c3a:	f85d fb04 	ldr.w	pc, [sp], #4

00011c3e <freereg>:
static void freereg (FuncState *fs, int reg) {
   11c3e:	b538      	push	{r3, r4, r5, lr}
   11c40:	4604      	mov	r4, r0
   11c42:	460d      	mov	r5, r1
  if (reg >= luaY_nvarstack(fs)) {
   11c44:	f003 fb02 	bl	1524c <luaY_nvarstack>
   11c48:	42a8      	cmp	r0, r5
    fs->freereg--;
   11c4a:	bfde      	ittt	le
   11c4c:	f894 3034 	ldrble.w	r3, [r4, #52]	; 0x34
   11c50:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
   11c54:	f884 3034 	strble.w	r3, [r4, #52]	; 0x34
}
   11c58:	bd38      	pop	{r3, r4, r5, pc}

00011c5a <freeexp>:
  if (e->k == VNONRELOC)
   11c5a:	780b      	ldrb	r3, [r1, #0]
   11c5c:	2b08      	cmp	r3, #8
   11c5e:	d102      	bne.n	11c66 <freeexp+0xc>
    freereg(fs, e->u.info);
   11c60:	6889      	ldr	r1, [r1, #8]
   11c62:	f7ff bfec 	b.w	11c3e <freereg>
}
   11c66:	4770      	bx	lr

00011c68 <isSCnumber>:
static int isSCnumber (expdesc *e, int *pi, int *isfloat) {
   11c68:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (e->k == VKINT)
   11c6a:	7803      	ldrb	r3, [r0, #0]
static int isSCnumber (expdesc *e, int *pi, int *isfloat) {
   11c6c:	4604      	mov	r4, r0
  if (e->k == VKINT)
   11c6e:	2b06      	cmp	r3, #6
static int isSCnumber (expdesc *e, int *pi, int *isfloat) {
   11c70:	460d      	mov	r5, r1
   11c72:	4616      	mov	r6, r2
  if (e->k == VKINT)
   11c74:	d114      	bne.n	11ca0 <isSCnumber+0x38>
    i = e->u.ival;
   11c76:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   11c7a:	e9cd 2300 	strd	r2, r3, [sp]
  if (!hasjumps(e) && fitsC(i)) {
   11c7e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   11c82:	429a      	cmp	r2, r3
   11c84:	d10e      	bne.n	11ca4 <isSCnumber+0x3c>
   11c86:	9b00      	ldr	r3, [sp, #0]
  return (l_castS2U(i) + OFFSET_sC <= cast_uint(MAXARG_C));
   11c88:	9a01      	ldr	r2, [sp, #4]
   11c8a:	337f      	adds	r3, #127	; 0x7f
   11c8c:	f142 0200 	adc.w	r2, r2, #0
  if (!hasjumps(e) && fitsC(i)) {
   11c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   11c94:	f172 0200 	sbcs.w	r2, r2, #0
   11c98:	d204      	bcs.n	11ca4 <isSCnumber+0x3c>
    return 1;
   11c9a:	2001      	movs	r0, #1
    *pi = int2sC(cast_int(i));
   11c9c:	602b      	str	r3, [r5, #0]
    return 1;
   11c9e:	e002      	b.n	11ca6 <isSCnumber+0x3e>
  else if (e->k == VKFLT && luaV_flttointeger(e->u.nval, &i, F2Ieq))
   11ca0:	2b05      	cmp	r3, #5
   11ca2:	d002      	beq.n	11caa <isSCnumber+0x42>
    return 0;  /* not a number */
   11ca4:	2000      	movs	r0, #0
}
   11ca6:	b002      	add	sp, #8
   11ca8:	bd70      	pop	{r4, r5, r6, pc}
  else if (e->k == VKFLT && luaV_flttointeger(e->u.nval, &i, F2Ieq))
   11caa:	2300      	movs	r3, #0
   11cac:	f100 0108 	add.w	r1, r0, #8
   11cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
   11cb4:	466a      	mov	r2, sp
   11cb6:	f7f7 f8a1 	bl	8dfc <luaV_flttointeger>
   11cba:	2800      	cmp	r0, #0
   11cbc:	d0f2      	beq.n	11ca4 <isSCnumber+0x3c>
    *isfloat = 1;
   11cbe:	2301      	movs	r3, #1
   11cc0:	6033      	str	r3, [r6, #0]
   11cc2:	e7dc      	b.n	11c7e <isSCnumber+0x16>

00011cc4 <tonumeral>:
  if (hasjumps(e))
   11cc4:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   11cc8:	429a      	cmp	r2, r3
   11cca:	d115      	bne.n	11cf8 <tonumeral+0x34>
  switch (e->k) {
   11ccc:	7803      	ldrb	r3, [r0, #0]
   11cce:	2b05      	cmp	r3, #5
   11cd0:	d00a      	beq.n	11ce8 <tonumeral+0x24>
   11cd2:	2b06      	cmp	r3, #6
   11cd4:	d110      	bne.n	11cf8 <tonumeral+0x34>
      if (v) setivalue(v, e->u.ival);
   11cd6:	b129      	cbz	r1, 11ce4 <tonumeral+0x20>
   11cd8:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   11cdc:	e9c1 2300 	strd	r2, r3, [r1]
   11ce0:	2303      	movs	r3, #3
      if (v) setfltvalue(v, e->u.nval);
   11ce2:	720b      	strb	r3, [r1, #8]
      return 1;
   11ce4:	2001      	movs	r0, #1
}
   11ce6:	4770      	bx	lr
      if (v) setfltvalue(v, e->u.nval);
   11ce8:	2900      	cmp	r1, #0
   11cea:	d0fb      	beq.n	11ce4 <tonumeral+0x20>
   11cec:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   11cf0:	e9c1 2300 	strd	r2, r3, [r1]
   11cf4:	2313      	movs	r3, #19
   11cf6:	e7f4      	b.n	11ce2 <tonumeral+0x1e>
  switch (e->k) {
   11cf8:	2000      	movs	r0, #0
   11cfa:	4770      	bx	lr

00011cfc <constfolding>:
                                        const expdesc *e2) {
   11cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11cfe:	b08f      	sub	sp, #60	; 0x3c
   11d00:	4606      	mov	r6, r0
   11d02:	460d      	mov	r5, r1
  if (!tonumeral(e1, &v1) || !tonumeral(e2, &v2) || !validop(op, &v1, &v2))
   11d04:	4610      	mov	r0, r2
   11d06:	a902      	add	r1, sp, #8
                                        const expdesc *e2) {
   11d08:	4614      	mov	r4, r2
   11d0a:	461f      	mov	r7, r3
  if (!tonumeral(e1, &v1) || !tonumeral(e2, &v2) || !validop(op, &v1, &v2))
   11d0c:	f7ff ffda 	bl	11cc4 <tonumeral>
   11d10:	b910      	cbnz	r0, 11d18 <constfolding+0x1c>
    return 0;  /* non-numeric operands or not safe to fold */
   11d12:	2000      	movs	r0, #0
}
   11d14:	b00f      	add	sp, #60	; 0x3c
   11d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!tonumeral(e1, &v1) || !tonumeral(e2, &v2) || !validop(op, &v1, &v2))
   11d18:	4638      	mov	r0, r7
   11d1a:	a906      	add	r1, sp, #24
   11d1c:	f7ff ffd2 	bl	11cc4 <tonumeral>
   11d20:	2800      	cmp	r0, #0
   11d22:	d0f6      	beq.n	11d12 <constfolding+0x16>
  switch (op) {
   11d24:	1eeb      	subs	r3, r5, #3
   11d26:	2b0a      	cmp	r3, #10
   11d28:	d815      	bhi.n	11d56 <constfolding+0x5a>
   11d2a:	e8df f003 	tbb	[pc, r3]
   11d2e:	1429      	.short	0x1429
   11d30:	06062929 	.word	0x06062929
   11d34:	14060606 	.word	0x14060606
   11d38:	06          	.byte	0x06
   11d39:	00          	.byte	0x00
      return (luaV_tointegerns(v1, &i, LUA_FLOORN2I) &&
   11d3a:	2200      	movs	r2, #0
   11d3c:	a90a      	add	r1, sp, #40	; 0x28
   11d3e:	a802      	add	r0, sp, #8
   11d40:	f004 fc46 	bl	165d0 <luaV_tointegerns>
   11d44:	2800      	cmp	r0, #0
   11d46:	d0e4      	beq.n	11d12 <constfolding+0x16>
              luaV_tointegerns(v2, &i, LUA_FLOORN2I));
   11d48:	2200      	movs	r2, #0
   11d4a:	a90a      	add	r1, sp, #40	; 0x28
   11d4c:	a806      	add	r0, sp, #24
   11d4e:	f004 fc3f 	bl	165d0 <luaV_tointegerns>
      return (luaV_tointegerns(v1, &i, LUA_FLOORN2I) &&
   11d52:	2800      	cmp	r0, #0
   11d54:	d0dd      	beq.n	11d12 <constfolding+0x16>
  luaO_rawarith(fs->ls->L, op, &v1, &v2, &res);  /* does operation */
   11d56:	68b0      	ldr	r0, [r6, #8]
   11d58:	ab0a      	add	r3, sp, #40	; 0x28
   11d5a:	9300      	str	r3, [sp, #0]
   11d5c:	4629      	mov	r1, r5
   11d5e:	ab06      	add	r3, sp, #24
   11d60:	6b40      	ldr	r0, [r0, #52]	; 0x34
   11d62:	aa02      	add	r2, sp, #8
   11d64:	f003 f812 	bl	14d8c <luaO_rawarith>
  if (ttisinteger(&res)) {
   11d68:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11d6c:	2b03      	cmp	r3, #3
   11d6e:	d11b      	bne.n	11da8 <constfolding+0xac>
    e1->k = VKINT;
   11d70:	2306      	movs	r3, #6
   11d72:	7023      	strb	r3, [r4, #0]
    e1->u.ival = ivalue(&res);
   11d74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   11d78:	e9c4 2302 	strd	r2, r3, [r4, #8]
  return 1;
   11d7c:	2001      	movs	r0, #1
   11d7e:	e7c9      	b.n	11d14 <constfolding+0x18>
      return (nvalue(v2) != 0);
   11d80:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11d84:	2b03      	cmp	r3, #3
   11d86:	d10a      	bne.n	11d9e <constfolding+0xa2>
   11d88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   11d8c:	f7ee fb3e 	bl	40c <__aeabi_l2d>
  if (!tonumeral(e1, &v1) || !tonumeral(e2, &v2) || !validop(op, &v1, &v2))
   11d90:	2200      	movs	r2, #0
   11d92:	2300      	movs	r3, #0
   11d94:	f7ee fdd0 	bl	938 <__aeabi_dcmpeq>
   11d98:	2800      	cmp	r0, #0
   11d9a:	d1ba      	bne.n	11d12 <constfolding+0x16>
   11d9c:	e7db      	b.n	11d56 <constfolding+0x5a>
   11d9e:	2200      	movs	r2, #0
   11da0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   11da4:	2300      	movs	r3, #0
   11da6:	e7f5      	b.n	11d94 <constfolding+0x98>
    lua_Number n = fltvalue(&res);
   11da8:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    if (luai_numisnan(n) || n == 0)
   11dac:	4632      	mov	r2, r6
   11dae:	463b      	mov	r3, r7
   11db0:	4630      	mov	r0, r6
   11db2:	4639      	mov	r1, r7
   11db4:	f7ee fdc0 	bl	938 <__aeabi_dcmpeq>
   11db8:	2800      	cmp	r0, #0
   11dba:	d0aa      	beq.n	11d12 <constfolding+0x16>
   11dbc:	2200      	movs	r2, #0
   11dbe:	2300      	movs	r3, #0
   11dc0:	4630      	mov	r0, r6
   11dc2:	4639      	mov	r1, r7
   11dc4:	f7ee fdb8 	bl	938 <__aeabi_dcmpeq>
   11dc8:	2800      	cmp	r0, #0
   11dca:	d1a2      	bne.n	11d12 <constfolding+0x16>
    e1->k = VKFLT;
   11dcc:	2305      	movs	r3, #5
    e1->u.nval = n;
   11dce:	e9c4 6702 	strd	r6, r7, [r4, #8]
    e1->k = VKFLT;
   11dd2:	7023      	strb	r3, [r4, #0]
    e1->u.nval = n;
   11dd4:	e7d2      	b.n	11d7c <constfolding+0x80>

00011dd6 <removelastlineinfo>:
  if (f->lineinfo[pc] != ABSLINEINFO) {  /* relative line info? */
   11dd6:	6803      	ldr	r3, [r0, #0]
   11dd8:	6902      	ldr	r2, [r0, #16]
   11dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   11ddc:	4413      	add	r3, r2
   11dde:	f913 2c01 	ldrsb.w	r2, [r3, #-1]
   11de2:	f112 0f80 	cmn.w	r2, #128	; 0x80
   11de6:	d008      	beq.n	11dfa <removelastlineinfo+0x24>
    fs->previousline -= f->lineinfo[pc];  /* correct last line saved */
   11de8:	6983      	ldr	r3, [r0, #24]
   11dea:	1a9b      	subs	r3, r3, r2
   11dec:	6183      	str	r3, [r0, #24]
    fs->iwthabs--;  /* undo previous increment */
   11dee:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   11df2:	3b01      	subs	r3, #1
    fs->iwthabs = MAXIWTHABS + 1;  /* force next line info to be absolute */
   11df4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
}
   11df8:	4770      	bx	lr
    fs->nabslineinfo--;  /* remove it */
   11dfa:	6a43      	ldr	r3, [r0, #36]	; 0x24
   11dfc:	3b01      	subs	r3, #1
   11dfe:	6243      	str	r3, [r0, #36]	; 0x24
    fs->iwthabs = MAXIWTHABS + 1;  /* force next line info to be absolute */
   11e00:	2381      	movs	r3, #129	; 0x81
   11e02:	e7f7      	b.n	11df4 <removelastlineinfo+0x1e>

00011e04 <freeregs>:
  if (r1 > r2) {
   11e04:	4291      	cmp	r1, r2
static void freeregs (FuncState *fs, int r1, int r2) {
   11e06:	b570      	push	{r4, r5, r6, lr}
   11e08:	4605      	mov	r5, r0
   11e0a:	460e      	mov	r6, r1
   11e0c:	4614      	mov	r4, r2
  if (r1 > r2) {
   11e0e:	dd07      	ble.n	11e20 <freeregs+0x1c>
    freereg(fs, r1);
   11e10:	f7ff ff15 	bl	11c3e <freereg>
    freereg(fs, r2);
   11e14:	4621      	mov	r1, r4
    freereg(fs, r1);
   11e16:	4628      	mov	r0, r5
}
   11e18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    freereg(fs, r1);
   11e1c:	f7ff bf0f 	b.w	11c3e <freereg>
    freereg(fs, r2);
   11e20:	4611      	mov	r1, r2
   11e22:	f7ff ff0c 	bl	11c3e <freereg>
    freereg(fs, r1);
   11e26:	4631      	mov	r1, r6
   11e28:	e7f5      	b.n	11e16 <freeregs+0x12>

00011e2a <freeexps>:
  int r1 = (e1->k == VNONRELOC) ? e1->u.info : -1;
   11e2a:	780b      	ldrb	r3, [r1, #0]
   11e2c:	2b08      	cmp	r3, #8
  int r2 = (e2->k == VNONRELOC) ? e2->u.info : -1;
   11e2e:	7813      	ldrb	r3, [r2, #0]
  int r1 = (e1->k == VNONRELOC) ? e1->u.info : -1;
   11e30:	bf14      	ite	ne
   11e32:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   11e36:	6889      	ldreq	r1, [r1, #8]
  int r2 = (e2->k == VNONRELOC) ? e2->u.info : -1;
   11e38:	2b08      	cmp	r3, #8
   11e3a:	bf14      	ite	ne
   11e3c:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   11e40:	6892      	ldreq	r2, [r2, #8]
  freeregs(fs, r1, r2);
   11e42:	f7ff bfdf 	b.w	11e04 <freeregs>

00011e46 <luaK_exp2K.part.0>:
static int luaK_exp2K (FuncState *fs, expdesc *e) {
   11e46:	b510      	push	{r4, lr}
    switch (e->k) {  /* move constants to 'k' */
   11e48:	780b      	ldrb	r3, [r1, #0]
static int luaK_exp2K (FuncState *fs, expdesc *e) {
   11e4a:	460c      	mov	r4, r1
    switch (e->k) {  /* move constants to 'k' */
   11e4c:	3b01      	subs	r3, #1
static int luaK_exp2K (FuncState *fs, expdesc *e) {
   11e4e:	b088      	sub	sp, #32
    switch (e->k) {  /* move constants to 'k' */
   11e50:	2b06      	cmp	r3, #6
   11e52:	d833      	bhi.n	11ebc <luaK_exp2K.part.0+0x76>
   11e54:	e8df f003 	tbb	[pc, r3]
   11e58:	30130415 	.word	0x30130415
   11e5c:	2127      	.short	0x2127
   11e5e:	2c          	.byte	0x2c
   11e5f:	00          	.byte	0x00
  setbtvalue(&o);
   11e60:	2311      	movs	r3, #17
  return addk(fs, &o, &o);  /* use boolean itself as key */
   11e62:	aa04      	add	r2, sp, #16
   11e64:	4611      	mov	r1, r2
  setbfvalue(&o);
   11e66:	f88d 3018 	strb.w	r3, [sp, #24]
  return addk(fs, &o, &o);  /* use boolean itself as key */
   11e6a:	f7f2 fbfb 	bl	4664 <addk>
    if (info <= MAXINDEXRK) {  /* does constant fit in 'argC'? */
   11e6e:	28ff      	cmp	r0, #255	; 0xff
   11e70:	dc24      	bgt.n	11ebc <luaK_exp2K.part.0+0x76>
      e->k = VK;  /* make expression a 'K' expression */
   11e72:	2304      	movs	r3, #4
      e->u.info = info;
   11e74:	60a0      	str	r0, [r4, #8]
      return 1;
   11e76:	2001      	movs	r0, #1
      e->k = VK;  /* make expression a 'K' expression */
   11e78:	7023      	strb	r3, [r4, #0]
}
   11e7a:	b008      	add	sp, #32
   11e7c:	bd10      	pop	{r4, pc}
  setbfvalue(&o);
   11e7e:	2301      	movs	r3, #1
   11e80:	e7ef      	b.n	11e62 <luaK_exp2K.part.0+0x1c>
  setnilvalue(&v);
   11e82:	2300      	movs	r3, #0
   11e84:	f88d 3018 	strb.w	r3, [sp, #24]
  sethvalue(fs->ls->L, &k, fs->ls->h);
   11e88:	6883      	ldr	r3, [r0, #8]
  return addk(fs, &k, &v);
   11e8a:	4669      	mov	r1, sp
  sethvalue(fs->ls->L, &k, fs->ls->h);
   11e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  return addk(fs, &k, &v);
   11e8e:	aa04      	add	r2, sp, #16
  sethvalue(fs->ls->L, &k, fs->ls->h);
   11e90:	9300      	str	r3, [sp, #0]
   11e92:	2345      	movs	r3, #69	; 0x45
   11e94:	f88d 3008 	strb.w	r3, [sp, #8]
  return addk(fs, &k, &v);
   11e98:	e7e7      	b.n	11e6a <luaK_exp2K.part.0+0x24>
  setivalue(&o, n);
   11e9a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   11e9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   11ea2:	2303      	movs	r3, #3
   11ea4:	e7dd      	b.n	11e62 <luaK_exp2K.part.0+0x1c>
      case VKFLT: info = luaK_numberK(fs, e->u.nval); break;
   11ea6:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   11eaa:	f7f2 fc4f 	bl	474c <luaK_numberK>
   11eae:	e7de      	b.n	11e6e <luaK_exp2K.part.0+0x28>
      case VKSTR: info = stringK(fs, e->u.strval); break;
   11eb0:	6889      	ldr	r1, [r1, #8]
   11eb2:	f7ff feb6 	bl	11c22 <stringK>
   11eb6:	e7da      	b.n	11e6e <luaK_exp2K.part.0+0x28>
      case VK: info = e->u.info; break;
   11eb8:	6888      	ldr	r0, [r1, #8]
   11eba:	e7d8      	b.n	11e6e <luaK_exp2K.part.0+0x28>
  return 0;
   11ebc:	2000      	movs	r0, #0
   11ebe:	e7dc      	b.n	11e7a <luaK_exp2K.part.0+0x34>

00011ec0 <patchtestreg.isra.0>:
static int patchtestreg (FuncState *fs, int node, int reg) {
   11ec0:	b510      	push	{r4, lr}
   11ec2:	4614      	mov	r4, r2
   11ec4:	f7f2 fc94 	bl	47f0 <getjumpcontrol.isra.0>
  if (GET_OPCODE(*i) != OP_TESTSET)
   11ec8:	6802      	ldr	r2, [r0, #0]
   11eca:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   11ece:	2b43      	cmp	r3, #67	; 0x43
   11ed0:	d119      	bne.n	11f06 <patchtestreg.isra.0+0x46>
  if (reg != NO_REG && reg != GETARG_B(*i))
   11ed2:	2cff      	cmp	r4, #255	; 0xff
   11ed4:	ea4f 4312 	mov.w	r3, r2, lsr #16
   11ed8:	d00b      	beq.n	11ef2 <patchtestreg.isra.0+0x32>
   11eda:	b2d9      	uxtb	r1, r3
   11edc:	428c      	cmp	r4, r1
   11ede:	d008      	beq.n	11ef2 <patchtestreg.isra.0+0x32>
    SETARG_A(*i, reg);
   11ee0:	01e4      	lsls	r4, r4, #7
   11ee2:	f404 44ff 	and.w	r4, r4, #32640	; 0x7f80
   11ee6:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
   11eea:	4314      	orrs	r4, r2
   11eec:	6004      	str	r4, [r0, #0]
  return 1;
   11eee:	2001      	movs	r0, #1
}
   11ef0:	bd10      	pop	{r4, pc}
    *i = CREATE_ABCk(OP_TEST, GETARG_B(*i), 0, 0, GETARG_k(*i));
   11ef2:	01db      	lsls	r3, r3, #7
   11ef4:	f403 43ff 	and.w	r3, r3, #32640	; 0x7f80
   11ef8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
   11efc:	4313      	orrs	r3, r2
   11efe:	f043 0342 	orr.w	r3, r3, #66	; 0x42
   11f02:	6003      	str	r3, [r0, #0]
   11f04:	e7f3      	b.n	11eee <patchtestreg.isra.0+0x2e>
    return 0;  /* cannot patch other instructions */
   11f06:	2000      	movs	r0, #0
   11f08:	e7f2      	b.n	11ef0 <patchtestreg.isra.0+0x30>

00011f0a <negatecondition.isra.0>:
static void negatecondition (FuncState *fs, expdesc *e) {
   11f0a:	b508      	push	{r3, lr}
   11f0c:	f7f2 fc70 	bl	47f0 <getjumpcontrol.isra.0>
  SETARG_k(*pc, (GETARG_k(*pc) ^ 1));
   11f10:	6802      	ldr	r2, [r0, #0]
   11f12:	f412 4f00 	tst.w	r2, #32768	; 0x8000
   11f16:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
   11f1a:	bf0c      	ite	eq
   11f1c:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
   11f20:	2200      	movne	r2, #0
   11f22:	4313      	orrs	r3, r2
   11f24:	6003      	str	r3, [r0, #0]
}
   11f26:	bd08      	pop	{r3, pc}

00011f28 <getjump.isra.0>:
  int offset = GETARG_sJ(fs->f->code[pc]);
   11f28:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11f2a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   11f2e:	09c0      	lsrs	r0, r0, #7
   11f30:	f100 407f 	add.w	r0, r0, #4278190080	; 0xff000000
   11f34:	3001      	adds	r0, #1
  if (offset == NO_JUMP)  /* point to itself represents end of list */
   11f36:	1c43      	adds	r3, r0, #1
    return (pc+1)+offset;  /* turn offset into absolute position */
   11f38:	bf1c      	itt	ne
   11f3a:	3101      	addne	r1, #1
   11f3c:	1840      	addne	r0, r0, r1
}
   11f3e:	4770      	bx	lr

00011f40 <patchlistaux>:
                          int dtarget) {
   11f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11f44:	4605      	mov	r5, r0
   11f46:	460c      	mov	r4, r1
   11f48:	4616      	mov	r6, r2
   11f4a:	461f      	mov	r7, r3
  while (list != NO_JUMP) {
   11f4c:	1c63      	adds	r3, r4, #1
   11f4e:	d101      	bne.n	11f54 <patchlistaux+0x14>
}
   11f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    int next = getjump(fs, list);
   11f54:	f8d5 9000 	ldr.w	r9, [r5]
   11f58:	4621      	mov	r1, r4
   11f5a:	4648      	mov	r0, r9
   11f5c:	f7ff ffe4 	bl	11f28 <getjump.isra.0>
    if (patchtestreg(fs, list, reg))
   11f60:	463a      	mov	r2, r7
    int next = getjump(fs, list);
   11f62:	4680      	mov	r8, r0
    if (patchtestreg(fs, list, reg))
   11f64:	4621      	mov	r1, r4
   11f66:	4648      	mov	r0, r9
   11f68:	f7ff ffaa 	bl	11ec0 <patchtestreg.isra.0>
   11f6c:	b130      	cbz	r0, 11f7c <patchlistaux+0x3c>
      fixjump(fs, list, vtarget);
   11f6e:	4632      	mov	r2, r6
      fixjump(fs, list, dtarget);  /* jump to default target */
   11f70:	4621      	mov	r1, r4
   11f72:	4628      	mov	r0, r5
   11f74:	f7f2 fc22 	bl	47bc <fixjump>
                          int dtarget) {
   11f78:	4644      	mov	r4, r8
   11f7a:	e7e7      	b.n	11f4c <patchlistaux+0xc>
      fixjump(fs, list, dtarget);  /* jump to default target */
   11f7c:	9a08      	ldr	r2, [sp, #32]
   11f7e:	e7f7      	b.n	11f70 <patchlistaux+0x30>

00011f80 <need_value>:
static int need_value (FuncState *fs, int list) {
   11f80:	b538      	push	{r3, r4, r5, lr}
   11f82:	4604      	mov	r4, r0
  for (; list != NO_JUMP; list = getjump(fs, list)) {
   11f84:	1c4b      	adds	r3, r1, #1
   11f86:	d101      	bne.n	11f8c <need_value+0xc>
  return 0;  /* not found */
   11f88:	2000      	movs	r0, #0
}
   11f8a:	bd38      	pop	{r3, r4, r5, pc}
    Instruction i = *getjumpcontrol(fs, list);
   11f8c:	6825      	ldr	r5, [r4, #0]
   11f8e:	4628      	mov	r0, r5
   11f90:	f7f2 fc2e 	bl	47f0 <getjumpcontrol.isra.0>
    if (GET_OPCODE(i) != OP_TESTSET) return 1;
   11f94:	7803      	ldrb	r3, [r0, #0]
   11f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11f9a:	2b43      	cmp	r3, #67	; 0x43
   11f9c:	d104      	bne.n	11fa8 <need_value+0x28>
  for (; list != NO_JUMP; list = getjump(fs, list)) {
   11f9e:	4628      	mov	r0, r5
   11fa0:	f7ff ffc2 	bl	11f28 <getjump.isra.0>
   11fa4:	4601      	mov	r1, r0
   11fa6:	e7ed      	b.n	11f84 <need_value+0x4>
    if (GET_OPCODE(i) != OP_TESTSET) return 1;
   11fa8:	2001      	movs	r0, #1
   11faa:	e7ee      	b.n	11f8a <need_value+0xa>

00011fac <removevalues>:
static void removevalues (FuncState *fs, int list) {
   11fac:	b538      	push	{r3, r4, r5, lr}
   11fae:	4605      	mov	r5, r0
   11fb0:	460c      	mov	r4, r1
  for (; list != NO_JUMP; list = getjump(fs, list))
   11fb2:	1c63      	adds	r3, r4, #1
   11fb4:	d100      	bne.n	11fb8 <removevalues+0xc>
}
   11fb6:	bd38      	pop	{r3, r4, r5, pc}
      patchtestreg(fs, list, NO_REG);
   11fb8:	4621      	mov	r1, r4
   11fba:	22ff      	movs	r2, #255	; 0xff
   11fbc:	6828      	ldr	r0, [r5, #0]
   11fbe:	f7ff ff7f 	bl	11ec0 <patchtestreg.isra.0>
  for (; list != NO_JUMP; list = getjump(fs, list))
   11fc2:	4621      	mov	r1, r4
   11fc4:	6828      	ldr	r0, [r5, #0]
   11fc6:	f7ff ffaf 	bl	11f28 <getjump.isra.0>
   11fca:	4604      	mov	r4, r0
   11fcc:	e7f1      	b.n	11fb2 <removevalues+0x6>

00011fce <luaK_semerror>:
  ls->t.token = 0;  /* remove "near <token>" from final message */
   11fce:	2200      	movs	r2, #0
l_noret luaK_semerror (LexState *ls, const char *msg) {
   11fd0:	b508      	push	{r3, lr}
  ls->t.token = 0;  /* remove "near <token>" from final message */
   11fd2:	6102      	str	r2, [r0, #16]
  luaX_syntaxerror(ls, msg);
   11fd4:	f002 fd09 	bl	149ea <luaX_syntaxerror>

00011fd8 <luaK_exp2const>:
int luaK_exp2const (FuncState *fs, const expdesc *e, TValue *v) {
   11fd8:	b430      	push	{r4, r5}
   11fda:	4604      	mov	r4, r0
   11fdc:	4608      	mov	r0, r1
   11fde:	4611      	mov	r1, r2
  if (hasjumps(e))
   11fe0:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   11fe4:	429a      	cmp	r2, r3
   11fe6:	d12b      	bne.n	12040 <luaK_exp2const+0x68>
  switch (e->k) {
   11fe8:	7803      	ldrb	r3, [r0, #0]
   11fea:	3b01      	subs	r3, #1
   11fec:	2b0a      	cmp	r3, #10
   11fee:	d824      	bhi.n	1203a <luaK_exp2const+0x62>
   11ff0:	e8df f003 	tbb	[pc, r3]
   11ff4:	23060a0e 	.word	0x23060a0e
   11ff8:	23102323 	.word	0x23102323
   11ffc:	2323      	.short	0x2323
   11ffe:	16          	.byte	0x16
   11fff:	00          	.byte	0x00
      setbfvalue(v);
   12000:	2001      	movs	r0, #1
   12002:	7208      	strb	r0, [r1, #8]
}
   12004:	bc30      	pop	{r4, r5}
   12006:	4770      	bx	lr
      setbtvalue(v);
   12008:	2311      	movs	r3, #17
      return 1;
   1200a:	2001      	movs	r0, #1
      setobj(fs->ls->L, v, const2val(fs, e));
   1200c:	720b      	strb	r3, [r1, #8]
      return 1;
   1200e:	e7f9      	b.n	12004 <luaK_exp2const+0x2c>
      setnilvalue(v);
   12010:	2300      	movs	r3, #0
   12012:	e7fa      	b.n	1200a <luaK_exp2const+0x32>
      setsvalue(fs->ls->L, v, e->u.strval);
   12014:	6883      	ldr	r3, [r0, #8]
   12016:	600b      	str	r3, [r1, #0]
   12018:	791b      	ldrb	r3, [r3, #4]
   1201a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1201e:	e7f4      	b.n	1200a <luaK_exp2const+0x32>
  return &fs->ls->dyd->actvar.arr[e->u.info].k;
   12020:	6882      	ldr	r2, [r0, #8]
   12022:	2018      	movs	r0, #24
   12024:	68a3      	ldr	r3, [r4, #8]
   12026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   12028:	681b      	ldr	r3, [r3, #0]
   1202a:	fb00 3302 	mla	r3, r0, r2, r3
      setobj(fs->ls->L, v, const2val(fs, e));
   1202e:	e9d3 4500 	ldrd	r4, r5, [r3]
   12032:	e9c1 4500 	strd	r4, r5, [r1]
   12036:	7a1b      	ldrb	r3, [r3, #8]
   12038:	e7e7      	b.n	1200a <luaK_exp2const+0x32>
}
   1203a:	bc30      	pop	{r4, r5}
    default: return tonumeral(e, v);
   1203c:	f7ff be42 	b.w	11cc4 <tonumeral>
    return 0;  /* not a constant */
   12040:	2000      	movs	r0, #0
   12042:	e7df      	b.n	12004 <luaK_exp2const+0x2c>

00012044 <luaK_concat>:
void luaK_concat (FuncState *fs, int *l1, int l2) {
   12044:	b570      	push	{r4, r5, r6, lr}
  if (l2 == NO_JUMP) return;  /* nothing to concatenate? */
   12046:	1c56      	adds	r6, r2, #1
void luaK_concat (FuncState *fs, int *l1, int l2) {
   12048:	4604      	mov	r4, r0
  if (l2 == NO_JUMP) return;  /* nothing to concatenate? */
   1204a:	d003      	beq.n	12054 <luaK_concat+0x10>
  else if (*l1 == NO_JUMP)  /* no original list? */
   1204c:	6808      	ldr	r0, [r1, #0]
   1204e:	1c45      	adds	r5, r0, #1
   12050:	d101      	bne.n	12056 <luaK_concat+0x12>
    *l1 = l2;  /* 'l1' points to 'l2' */
   12052:	600a      	str	r2, [r1, #0]
}
   12054:	bd70      	pop	{r4, r5, r6, pc}
   12056:	6826      	ldr	r6, [r4, #0]
    while ((next = getjump(fs, list)) != NO_JUMP)  /* find last element */
   12058:	4601      	mov	r1, r0
   1205a:	4605      	mov	r5, r0
   1205c:	4630      	mov	r0, r6
   1205e:	f7ff ff63 	bl	11f28 <getjump.isra.0>
   12062:	1c43      	adds	r3, r0, #1
   12064:	d1f8      	bne.n	12058 <luaK_concat+0x14>
    fixjump(fs, list, l2);  /* last element links to 'l2' */
   12066:	4629      	mov	r1, r5
   12068:	4620      	mov	r0, r4
}
   1206a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fixjump(fs, list, l2);  /* last element links to 'l2' */
   1206e:	f7f2 bba5 	b.w	47bc <fixjump>

00012072 <luaK_getlabel>:
int luaK_getlabel (FuncState *fs) {
   12072:	4603      	mov	r3, r0
  fs->lasttarget = fs->pc;
   12074:	6900      	ldr	r0, [r0, #16]
   12076:	6158      	str	r0, [r3, #20]
}
   12078:	4770      	bx	lr

0001207a <luaK_patchlist>:
void luaK_patchlist (FuncState *fs, int list, int target) {
   1207a:	b507      	push	{r0, r1, r2, lr}
  patchlistaux(fs, list, target, NO_REG, target);
   1207c:	23ff      	movs	r3, #255	; 0xff
   1207e:	9200      	str	r2, [sp, #0]
   12080:	f7ff ff5e 	bl	11f40 <patchlistaux>
}
   12084:	b003      	add	sp, #12
   12086:	f85d fb04 	ldr.w	pc, [sp], #4

0001208a <luaK_patchtohere>:
  fs->lasttarget = fs->pc;
   1208a:	6902      	ldr	r2, [r0, #16]
   1208c:	6142      	str	r2, [r0, #20]
  luaK_patchlist(fs, list, hr);
   1208e:	f7ff bff4 	b.w	1207a <luaK_patchlist>

00012092 <luaK_codeABCk>:
int luaK_codeABCk (FuncState *fs, OpCode o, int a, int b, int c, int k) {
   12092:	b430      	push	{r4, r5}
  return luaK_code(fs, CREATE_ABCk(o, a, b, c, k));
   12094:	9c03      	ldr	r4, [sp, #12]
   12096:	9d02      	ldr	r5, [sp, #8]
   12098:	03e4      	lsls	r4, r4, #15
   1209a:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
   1209e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   120a2:	4321      	orrs	r1, r4
   120a4:	ea41 11c2 	orr.w	r1, r1, r2, lsl #7
}
   120a8:	bc30      	pop	{r4, r5}
  return luaK_code(fs, CREATE_ABCk(o, a, b, c, k));
   120aa:	f7f2 bbb3 	b.w	4814 <luaK_code>

000120ae <luaK_ret>:
void luaK_ret (FuncState *fs, int first, int nret) {
   120ae:	b513      	push	{r0, r1, r4, lr}
   120b0:	460c      	mov	r4, r1
  switch (nret) {
   120b2:	b162      	cbz	r2, 120ce <luaK_ret+0x20>
    default: op = OP_RETURN; break;
   120b4:	2a01      	cmp	r2, #1
   120b6:	bf0c      	ite	eq
   120b8:	2148      	moveq	r1, #72	; 0x48
   120ba:	2146      	movne	r1, #70	; 0x46
  luaK_codeABC(fs, op, first, nret + 1, 0);
   120bc:	2300      	movs	r3, #0
   120be:	e9cd 3300 	strd	r3, r3, [sp]
   120c2:	1c53      	adds	r3, r2, #1
   120c4:	4622      	mov	r2, r4
   120c6:	f7ff ffe4 	bl	12092 <luaK_codeABCk>
}
   120ca:	b002      	add	sp, #8
   120cc:	bd10      	pop	{r4, pc}
  switch (nret) {
   120ce:	2147      	movs	r1, #71	; 0x47
   120d0:	e7f4      	b.n	120bc <luaK_ret+0xe>

000120d2 <luaK_codeABx>:
  return luaK_code(fs, CREATE_ABx(o, a, bc));
   120d2:	ea41 11c2 	orr.w	r1, r1, r2, lsl #7
   120d6:	ea41 31c3 	orr.w	r1, r1, r3, lsl #15
   120da:	f7f2 bb9b 	b.w	4814 <luaK_code>

000120de <luaK_codek.isra.0>:
  if (k <= MAXARG_Bx)
   120de:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
static int luaK_codek (FuncState *fs, int reg, int k) {
   120e2:	b570      	push	{r4, r5, r6, lr}
   120e4:	4605      	mov	r5, r0
   120e6:	4614      	mov	r4, r2
  if (k <= MAXARG_Bx)
   120e8:	da06      	bge.n	120f8 <luaK_codek.isra.0+0x1a>
}
   120ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return luaK_codeABx(fs, OP_LOADK, reg, k);
   120ee:	4613      	mov	r3, r2
   120f0:	460a      	mov	r2, r1
   120f2:	2103      	movs	r1, #3
   120f4:	f7ff bfed 	b.w	120d2 <luaK_codeABx>
    int p = luaK_codeABx(fs, OP_LOADKX, reg, 0);
   120f8:	460a      	mov	r2, r1
   120fa:	2300      	movs	r3, #0
   120fc:	2104      	movs	r1, #4
   120fe:	f7ff ffe8 	bl	120d2 <luaK_codeABx>
  return luaK_code(fs, CREATE_Ax(OP_EXTRAARG, a));
   12102:	01e1      	lsls	r1, r4, #7
   12104:	4628      	mov	r0, r5
}
   12106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return luaK_code(fs, CREATE_Ax(OP_EXTRAARG, a));
   1210a:	f041 0152 	orr.w	r1, r1, #82	; 0x52
   1210e:	f7f2 bb81 	b.w	4814 <luaK_code>

00012112 <luaK_codeAsBx>:
  unsigned int b = bc + OFFSET_sBx;
   12112:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
  return luaK_code(fs, CREATE_ABx(o, a, b));
   12116:	ea41 11c2 	orr.w	r1, r1, r2, lsl #7
  unsigned int b = bc + OFFSET_sBx;
   1211a:	33ff      	adds	r3, #255	; 0xff
  return luaK_code(fs, CREATE_ABx(o, a, b));
   1211c:	ea41 31c3 	orr.w	r1, r1, r3, lsl #15
   12120:	f7f2 bb78 	b.w	4814 <luaK_code>

00012124 <luaK_reserveregs>:
void luaK_reserveregs (FuncState *fs, int n) {
   12124:	b538      	push	{r3, r4, r5, lr}
   12126:	4604      	mov	r4, r0
   12128:	460d      	mov	r5, r1
  luaK_checkstack(fs, n);
   1212a:	f7f2 fbe9 	bl	4900 <luaK_checkstack>
  fs->freereg += n;
   1212e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   12132:	1959      	adds	r1, r3, r5
   12134:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
}
   12138:	bd38      	pop	{r3, r4, r5, pc}

0001213a <luaK_int>:
void luaK_int (FuncState *fs, int reg, lua_Integer i) {
   1213a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1213c:	460c      	mov	r4, r1
  return (-OFFSET_sBx <= i && i <= MAXARG_Bx - OFFSET_sBx);
   1213e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12142:	1851      	adds	r1, r2, r1
   12144:	f143 0600 	adc.w	r6, r3, #0
  if (fitsBx(i))
   12148:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   1214c:	f176 0100 	sbcs.w	r1, r6, #0
void luaK_int (FuncState *fs, int reg, lua_Integer i) {
   12150:	4605      	mov	r5, r0
  if (fitsBx(i))
   12152:	d207      	bcs.n	12164 <luaK_int+0x2a>
    luaK_codeAsBx(fs, OP_LOADI, reg, cast_int(i));
   12154:	4613      	mov	r3, r2
   12156:	2101      	movs	r1, #1
   12158:	4622      	mov	r2, r4
}
   1215a:	b004      	add	sp, #16
   1215c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    luaK_codeAsBx(fs, OP_LOADI, reg, cast_int(i));
   12160:	f7ff bfd7 	b.w	12112 <luaK_codeAsBx>
  setivalue(&o, n);
   12164:	e9cd 2300 	strd	r2, r3, [sp]
  return addk(fs, &o, &o);  /* use integer itself as key */
   12168:	466a      	mov	r2, sp
  setivalue(&o, n);
   1216a:	2303      	movs	r3, #3
  return addk(fs, &o, &o);  /* use integer itself as key */
   1216c:	4611      	mov	r1, r2
  setivalue(&o, n);
   1216e:	f88d 3008 	strb.w	r3, [sp, #8]
  return addk(fs, &o, &o);  /* use integer itself as key */
   12172:	f7f2 fa77 	bl	4664 <addk>
    luaK_codek(fs, reg, luaK_intK(fs, i));
   12176:	4621      	mov	r1, r4
  return addk(fs, &o, &o);  /* use integer itself as key */
   12178:	4602      	mov	r2, r0
    luaK_codek(fs, reg, luaK_intK(fs, i));
   1217a:	4628      	mov	r0, r5
}
   1217c:	b004      	add	sp, #16
   1217e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    luaK_codek(fs, reg, luaK_intK(fs, i));
   12182:	f7ff bfac 	b.w	120de <luaK_codek.isra.0>

00012186 <luaK_setreturns>:
  Instruction *pc = &getinstruction(fs, e);
   12186:	6803      	ldr	r3, [r0, #0]
void luaK_setreturns (FuncState *fs, expdesc *e, int nresults) {
   12188:	b470      	push	{r4, r5, r6}
  Instruction *pc = &getinstruction(fs, e);
   1218a:	688e      	ldr	r6, [r1, #8]
   1218c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    SETARG_C(*pc, nresults + 1);
   1218e:	3201      	adds	r2, #1
   12190:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   12194:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   12198:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
  if (e->k == VCALL)  /* expression is an open function call? */
   1219c:	780b      	ldrb	r3, [r1, #0]
   1219e:	2b12      	cmp	r3, #18
   121a0:	d103      	bne.n	121aa <luaK_setreturns+0x24>
    SETARG_C(*pc, nresults + 1);
   121a2:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
}
   121a6:	bc70      	pop	{r4, r5, r6}
   121a8:	4770      	bx	lr
    SETARG_A(*pc, fs->freereg);
   121aa:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
   121ae:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
   121b2:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
   121b6:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
    luaK_reserveregs(fs, 1);
   121ba:	2101      	movs	r1, #1
}
   121bc:	bc70      	pop	{r4, r5, r6}
    luaK_reserveregs(fs, 1);
   121be:	f7ff bfb1 	b.w	12124 <luaK_reserveregs>

000121c2 <luaK_setoneret>:
  if (e->k == VCALL) {  /* expression is an open function call? */
   121c2:	780b      	ldrb	r3, [r1, #0]
   121c4:	2b12      	cmp	r3, #18
   121c6:	d10a      	bne.n	121de <luaK_setoneret+0x1c>
    e->k = VNONRELOC;  /* result has fixed position */
   121c8:	2308      	movs	r3, #8
   121ca:	700b      	strb	r3, [r1, #0]
    e->u.info = GETARG_A(getinstruction(fs, e));
   121cc:	6803      	ldr	r3, [r0, #0]
   121ce:	688a      	ldr	r2, [r1, #8]
   121d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   121d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   121d6:	f3c3 13c7 	ubfx	r3, r3, #7, #8
   121da:	608b      	str	r3, [r1, #8]
   121dc:	4770      	bx	lr
  else if (e->k == VVARARG) {
   121de:	2b13      	cmp	r3, #19
   121e0:	d10c      	bne.n	121fc <luaK_setoneret+0x3a>
    SETARG_C(getinstruction(fs, e), 2);
   121e2:	6803      	ldr	r3, [r0, #0]
   121e4:	6888      	ldr	r0, [r1, #8]
   121e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   121e8:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   121ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   121f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   121f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    e->k = VRELOC;  /* can relocate its simple result */
   121f8:	2311      	movs	r3, #17
   121fa:	700b      	strb	r3, [r1, #0]
}
   121fc:	4770      	bx	lr

000121fe <luaK_dischargevars>:
void luaK_dischargevars (FuncState *fs, expdesc *e) {
   121fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (e->k) {
   12200:	780b      	ldrb	r3, [r1, #0]
void luaK_dischargevars (FuncState *fs, expdesc *e) {
   12202:	4605      	mov	r5, r0
  switch (e->k) {
   12204:	3b09      	subs	r3, #9
void luaK_dischargevars (FuncState *fs, expdesc *e) {
   12206:	460c      	mov	r4, r1
  switch (e->k) {
   12208:	2b0a      	cmp	r3, #10
   1220a:	d826      	bhi.n	1225a <luaK_dischargevars+0x5c>
   1220c:	e8df f003 	tbb	[pc, r3]
   12210:	68063e3a 	.word	0x68063e3a
   12214:	255d5247 	.word	0x255d5247
   12218:	7525      	.short	0x7525
   1221a:	75          	.byte	0x75
   1221b:	00          	.byte	0x00
  return &fs->ls->dyd->actvar.arr[e->u.info].k;
   1221c:	6883      	ldr	r3, [r0, #8]
   1221e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   12220:	688b      	ldr	r3, [r1, #8]
   12222:	2118      	movs	r1, #24
   12224:	434b      	muls	r3, r1
   12226:	6810      	ldr	r0, [r2, #0]
   12228:	18c1      	adds	r1, r0, r3
  switch (ttypetag(v)) {
   1222a:	7a0a      	ldrb	r2, [r1, #8]
   1222c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   12230:	2a14      	cmp	r2, #20
   12232:	d812      	bhi.n	1225a <luaK_dischargevars+0x5c>
   12234:	e8df f002 	tbb	[pc, r2]
   12238:	0b111a1f 	.word	0x0b111a1f
   1223c:	11111121 	.word	0x11111121
   12240:	11111111 	.word	0x11111111
   12244:	11111111 	.word	0x11111111
   12248:	13111d11 	.word	0x13111d11
   1224c:	21          	.byte	0x21
   1224d:	00          	.byte	0x00
      e->k = VKINT; e->u.ival = ivalue(v);
   1224e:	2306      	movs	r3, #6
   12250:	7023      	strb	r3, [r4, #0]
   12252:	e9d1 2300 	ldrd	r2, r3, [r1]
   12256:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   1225a:	b003      	add	sp, #12
   1225c:	bd30      	pop	{r4, r5, pc}
      e->k = VKFLT; e->u.nval = fltvalue(v);
   1225e:	2305      	movs	r3, #5
   12260:	7023      	strb	r3, [r4, #0]
   12262:	e9d1 2300 	ldrd	r2, r3, [r1]
   12266:	e9c4 2302 	strd	r2, r3, [r4, #8]
      break;
   1226a:	e7f6      	b.n	1225a <luaK_dischargevars+0x5c>
      e->k = VFALSE;
   1226c:	2303      	movs	r3, #3
      e->k = VRELOC;
   1226e:	7023      	strb	r3, [r4, #0]
      break;
   12270:	e7f3      	b.n	1225a <luaK_dischargevars+0x5c>
      e->k = VTRUE;
   12272:	2302      	movs	r3, #2
   12274:	e7fb      	b.n	1226e <luaK_dischargevars+0x70>
      e->k = VNIL;
   12276:	2301      	movs	r3, #1
   12278:	e7f9      	b.n	1226e <luaK_dischargevars+0x70>
      e->k = VKSTR; e->u.strval = tsvalue(v);
   1227a:	2207      	movs	r2, #7
   1227c:	7022      	strb	r2, [r4, #0]
   1227e:	58c3      	ldr	r3, [r0, r3]
   12280:	60a3      	str	r3, [r4, #8]
      break;
   12282:	e7ea      	b.n	1225a <luaK_dischargevars+0x5c>
      e->u.info = e->u.var.ridx;
   12284:	7a0b      	ldrb	r3, [r1, #8]
   12286:	608b      	str	r3, [r1, #8]
      e->k = VNONRELOC;  /* becomes a non-relocatable value */
   12288:	2308      	movs	r3, #8
   1228a:	e7f0      	b.n	1226e <luaK_dischargevars+0x70>
  return luaK_code(fs, CREATE_ABCk(o, a, b, c, k));
   1228c:	6889      	ldr	r1, [r1, #8]
   1228e:	0409      	lsls	r1, r1, #16
   12290:	f041 0109 	orr.w	r1, r1, #9
   12294:	f7f2 fabe 	bl	4814 <luaK_code>
      e->k = VRELOC;
   12298:	2311      	movs	r3, #17
      e->u.info = luaK_codeABC(fs, OP_GETTABLE, 0, e->u.ind.t, e->u.ind.idx);
   1229a:	60a0      	str	r0, [r4, #8]
      e->k = VRELOC;
   1229c:	e7e7      	b.n	1226e <luaK_dischargevars+0x70>
      e->u.info = luaK_codeABC(fs, OP_GETTABUP, 0, e->u.ind.t, e->u.ind.idx);
   1229e:	2200      	movs	r2, #0
   122a0:	9201      	str	r2, [sp, #4]
   122a2:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
   122a6:	9300      	str	r3, [sp, #0]
   122a8:	7a8b      	ldrb	r3, [r1, #10]
   122aa:	210b      	movs	r1, #11
      e->u.info = luaK_codeABC(fs, OP_GETTABLE, 0, e->u.ind.t, e->u.ind.idx);
   122ac:	4628      	mov	r0, r5
   122ae:	f7ff fef0 	bl	12092 <luaK_codeABCk>
   122b2:	e7f1      	b.n	12298 <luaK_dischargevars+0x9a>
      freereg(fs, e->u.ind.t);
   122b4:	7a89      	ldrb	r1, [r1, #10]
   122b6:	f7ff fcc2 	bl	11c3e <freereg>
      e->u.info = luaK_codeABC(fs, OP_GETI, 0, e->u.ind.t, e->u.ind.idx);
   122ba:	2200      	movs	r2, #0
   122bc:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   122c0:	210d      	movs	r1, #13
   122c2:	9300      	str	r3, [sp, #0]
   122c4:	9201      	str	r2, [sp, #4]
   122c6:	7aa3      	ldrb	r3, [r4, #10]
   122c8:	e7f0      	b.n	122ac <luaK_dischargevars+0xae>
      freereg(fs, e->u.ind.t);
   122ca:	7a89      	ldrb	r1, [r1, #10]
   122cc:	f7ff fcb7 	bl	11c3e <freereg>
      e->u.info = luaK_codeABC(fs, OP_GETFIELD, 0, e->u.ind.t, e->u.ind.idx);
   122d0:	2200      	movs	r2, #0
   122d2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   122d6:	210e      	movs	r1, #14
   122d8:	9300      	str	r3, [sp, #0]
   122da:	9201      	str	r2, [sp, #4]
   122dc:	7aa3      	ldrb	r3, [r4, #10]
   122de:	e7e5      	b.n	122ac <luaK_dischargevars+0xae>
      freeregs(fs, e->u.ind.t, e->u.ind.idx);
   122e0:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
   122e4:	7a89      	ldrb	r1, [r1, #10]
   122e6:	f7ff fd8d 	bl	11e04 <freeregs>
      e->u.info = luaK_codeABC(fs, OP_GETTABLE, 0, e->u.ind.t, e->u.ind.idx);
   122ea:	2200      	movs	r2, #0
   122ec:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   122f0:	210c      	movs	r1, #12
   122f2:	9300      	str	r3, [sp, #0]
   122f4:	9201      	str	r2, [sp, #4]
   122f6:	7aa3      	ldrb	r3, [r4, #10]
   122f8:	e7d8      	b.n	122ac <luaK_dischargevars+0xae>
}
   122fa:	b003      	add	sp, #12
   122fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      luaK_setoneret(fs, e);
   12300:	f7ff bf5f 	b.w	121c2 <luaK_setoneret>

00012304 <discharge2reg>:
static void discharge2reg (FuncState *fs, expdesc *e, int reg) {
   12304:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
   12308:	460c      	mov	r4, r1
   1230a:	4606      	mov	r6, r0
   1230c:	4615      	mov	r5, r2
  luaK_dischargevars(fs, e);
   1230e:	f7ff ff76 	bl	121fe <luaK_dischargevars>
  switch (e->k) {
   12312:	7823      	ldrb	r3, [r4, #0]
   12314:	3b01      	subs	r3, #1
   12316:	2b10      	cmp	r3, #16
   12318:	d812      	bhi.n	12340 <discharge2reg+0x3c>
   1231a:	e8df f003 	tbb	[pc, r3]
   1231e:	1d09      	.short	0x1d09
   12320:	52302a14 	.word	0x52302a14
   12324:	11116723 	.word	0x11116723
   12328:	11111111 	.word	0x11111111
   1232c:	1111      	.short	0x1111
   1232e:	59          	.byte	0x59
   1232f:	00          	.byte	0x00
      luaK_nil(fs, reg, 1);
   12330:	2201      	movs	r2, #1
   12332:	4629      	mov	r1, r5
   12334:	4630      	mov	r0, r6
   12336:	f7f2 fa99 	bl	486c <luaK_nil>
  e->k = VNONRELOC;
   1233a:	2308      	movs	r3, #8
  e->u.info = reg;
   1233c:	60a5      	str	r5, [r4, #8]
  e->k = VNONRELOC;
   1233e:	7023      	strb	r3, [r4, #0]
}
   12340:	b004      	add	sp, #16
   12342:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
      luaK_codeABC(fs, OP_LOADFALSE, reg, 0, 0);
   12346:	2300      	movs	r3, #0
   12348:	462a      	mov	r2, r5
   1234a:	2105      	movs	r1, #5
   1234c:	e9cd 3300 	strd	r3, r3, [sp]
        luaK_codeABC(fs, OP_MOVE, reg, e->u.info, 0);
   12350:	4630      	mov	r0, r6
   12352:	f7ff fe9e 	bl	12092 <luaK_codeABCk>
   12356:	e7f0      	b.n	1233a <discharge2reg+0x36>
      luaK_codeABC(fs, OP_LOADTRUE, reg, 0, 0);
   12358:	2300      	movs	r3, #0
   1235a:	462a      	mov	r2, r5
   1235c:	2107      	movs	r1, #7
   1235e:	e9cd 3300 	strd	r3, r3, [sp]
   12362:	e7f5      	b.n	12350 <discharge2reg+0x4c>
  e->u.info = stringK(fs, e->u.strval);
   12364:	4630      	mov	r0, r6
   12366:	68a1      	ldr	r1, [r4, #8]
   12368:	f7ff fc5b 	bl	11c22 <stringK>
  e->k = VK;
   1236c:	2304      	movs	r3, #4
  e->u.info = stringK(fs, e->u.strval);
   1236e:	60a0      	str	r0, [r4, #8]
  e->k = VK;
   12370:	7023      	strb	r3, [r4, #0]
      luaK_codek(fs, reg, e->u.info);
   12372:	68a2      	ldr	r2, [r4, #8]
    luaK_codek(fs, reg, luaK_numberK(fs, f));
   12374:	4629      	mov	r1, r5
   12376:	4630      	mov	r0, r6
   12378:	f7ff feb1 	bl	120de <luaK_codek.isra.0>
}
   1237c:	e7dd      	b.n	1233a <discharge2reg+0x36>
      luaK_float(fs, reg, e->u.nval);
   1237e:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
  if (luaV_flttointeger(f, &fi, F2Ieq) && fitsBx(fi))
   12382:	2300      	movs	r3, #0
   12384:	4640      	mov	r0, r8
   12386:	4649      	mov	r1, r9
   12388:	aa02      	add	r2, sp, #8
   1238a:	f7f6 fd37 	bl	8dfc <luaV_flttointeger>
   1238e:	b188      	cbz	r0, 123b4 <discharge2reg+0xb0>
  return (-OFFSET_sBx <= i && i <= MAXARG_Bx - OFFSET_sBx);
   12390:	f64f 72ff 	movw	r2, #65535	; 0xffff
  if (luaV_flttointeger(f, &fi, F2Ieq) && fitsBx(fi))
   12394:	9b02      	ldr	r3, [sp, #8]
  return (-OFFSET_sBx <= i && i <= MAXARG_Bx - OFFSET_sBx);
   12396:	9903      	ldr	r1, [sp, #12]
   12398:	189a      	adds	r2, r3, r2
   1239a:	f141 0100 	adc.w	r1, r1, #0
  if (luaV_flttointeger(f, &fi, F2Ieq) && fitsBx(fi))
   1239e:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
   123a2:	f171 0200 	sbcs.w	r2, r1, #0
   123a6:	d205      	bcs.n	123b4 <discharge2reg+0xb0>
    luaK_codeAsBx(fs, OP_LOADF, reg, cast_int(fi));
   123a8:	462a      	mov	r2, r5
   123aa:	2102      	movs	r1, #2
   123ac:	4630      	mov	r0, r6
   123ae:	f7ff feb0 	bl	12112 <luaK_codeAsBx>
   123b2:	e7c2      	b.n	1233a <discharge2reg+0x36>
    luaK_codek(fs, reg, luaK_numberK(fs, f));
   123b4:	4642      	mov	r2, r8
   123b6:	464b      	mov	r3, r9
   123b8:	4630      	mov	r0, r6
   123ba:	f7f2 f9c7 	bl	474c <luaK_numberK>
   123be:	4602      	mov	r2, r0
   123c0:	e7d8      	b.n	12374 <discharge2reg+0x70>
      luaK_int(fs, reg, e->u.ival);
   123c2:	4629      	mov	r1, r5
   123c4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   123c8:	4630      	mov	r0, r6
   123ca:	f7ff feb6 	bl	1213a <luaK_int>
      break;
   123ce:	e7b4      	b.n	1233a <discharge2reg+0x36>
      Instruction *pc = &getinstruction(fs, e);
   123d0:	6833      	ldr	r3, [r6, #0]
   123d2:	68a0      	ldr	r0, [r4, #8]
   123d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
      SETARG_A(*pc, reg);  /* instruction will put result in 'reg' */
   123d6:	01ea      	lsls	r2, r5, #7
   123d8:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   123dc:	f402 42ff 	and.w	r2, r2, #32640	; 0x7f80
   123e0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
   123e4:	4313      	orrs	r3, r2
   123e6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
      break;
   123ea:	e7a6      	b.n	1233a <discharge2reg+0x36>
      if (reg != e->u.info)
   123ec:	68a3      	ldr	r3, [r4, #8]
   123ee:	42ab      	cmp	r3, r5
   123f0:	d0a3      	beq.n	1233a <discharge2reg+0x36>
        luaK_codeABC(fs, OP_MOVE, reg, e->u.info, 0);
   123f2:	2100      	movs	r1, #0
   123f4:	462a      	mov	r2, r5
   123f6:	e9cd 1100 	strd	r1, r1, [sp]
   123fa:	e7a9      	b.n	12350 <discharge2reg+0x4c>

000123fc <exp2reg>:
static void exp2reg (FuncState *fs, expdesc *e, int reg) {
   123fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12400:	460d      	mov	r5, r1
   12402:	4604      	mov	r4, r0
   12404:	4616      	mov	r6, r2
  discharge2reg(fs, e, reg);
   12406:	f7ff ff7d 	bl	12304 <discharge2reg>
  if (e->k == VJMP)  /* expression itself is a test? */
   1240a:	782b      	ldrb	r3, [r5, #0]
   1240c:	2b10      	cmp	r3, #16
   1240e:	d105      	bne.n	1241c <exp2reg+0x20>
    luaK_concat(fs, &e->t, e->u.info);  /* put this jump in 't' list */
   12410:	4620      	mov	r0, r4
   12412:	68aa      	ldr	r2, [r5, #8]
   12414:	f105 0110 	add.w	r1, r5, #16
   12418:	f7ff fe14 	bl	12044 <luaK_concat>
  if (hasjumps(e)) {
   1241c:	e9d5 1704 	ldrd	r1, r7, [r5, #16]
   12420:	42b9      	cmp	r1, r7
   12422:	d03e      	beq.n	124a2 <exp2reg+0xa6>
    if (need_value(fs, e->t) || need_value(fs, e->f)) {
   12424:	4620      	mov	r0, r4
   12426:	f7ff fdab 	bl	11f80 <need_value>
   1242a:	b928      	cbnz	r0, 12438 <exp2reg+0x3c>
   1242c:	4639      	mov	r1, r7
   1242e:	4620      	mov	r0, r4
   12430:	f7ff fda6 	bl	11f80 <need_value>
   12434:	2800      	cmp	r0, #0
   12436:	d041      	beq.n	124bc <exp2reg+0xc0>
      int fj = (e->k == VJMP) ? NO_JUMP : luaK_jump(fs);
   12438:	782b      	ldrb	r3, [r5, #0]
   1243a:	2b10      	cmp	r3, #16
   1243c:	d03b      	beq.n	124b6 <exp2reg+0xba>
   1243e:	4620      	mov	r0, r4
   12440:	f7f2 fa0e 	bl	4860 <luaK_jump>
   12444:	4681      	mov	r9, r0
  return luaK_codeABC(fs, op, A, 0, 0);
   12446:	2700      	movs	r7, #0
  fs->lasttarget = fs->pc;
   12448:	6923      	ldr	r3, [r4, #16]
  return luaK_codeABC(fs, op, A, 0, 0);
   1244a:	4632      	mov	r2, r6
   1244c:	2106      	movs	r1, #6
   1244e:	e9cd 7700 	strd	r7, r7, [sp]
  fs->lasttarget = fs->pc;
   12452:	6163      	str	r3, [r4, #20]
  return luaK_codeABC(fs, op, A, 0, 0);
   12454:	4620      	mov	r0, r4
   12456:	463b      	mov	r3, r7
   12458:	f7ff fe1b 	bl	12092 <luaK_codeABCk>
  fs->lasttarget = fs->pc;
   1245c:	6923      	ldr	r3, [r4, #16]
  return luaK_codeABC(fs, op, A, 0, 0);
   1245e:	2107      	movs	r1, #7
   12460:	e9cd 7700 	strd	r7, r7, [sp]
  fs->lasttarget = fs->pc;
   12464:	6163      	str	r3, [r4, #20]
  return luaK_codeABC(fs, op, A, 0, 0);
   12466:	4680      	mov	r8, r0
   12468:	463b      	mov	r3, r7
   1246a:	4632      	mov	r2, r6
   1246c:	4620      	mov	r0, r4
   1246e:	f7ff fe10 	bl	12092 <luaK_codeABCk>
      luaK_patchtohere(fs, fj);
   12472:	4649      	mov	r1, r9
  return luaK_codeABC(fs, op, A, 0, 0);
   12474:	4607      	mov	r7, r0
      luaK_patchtohere(fs, fj);
   12476:	4620      	mov	r0, r4
   12478:	f7ff fe07 	bl	1208a <luaK_patchtohere>
  fs->lasttarget = fs->pc;
   1247c:	f8d4 9010 	ldr.w	r9, [r4, #16]
    patchlistaux(fs, e->f, final, reg, p_f);
   12480:	4633      	mov	r3, r6
   12482:	464a      	mov	r2, r9
   12484:	4620      	mov	r0, r4
   12486:	6969      	ldr	r1, [r5, #20]
  fs->lasttarget = fs->pc;
   12488:	f8c4 9014 	str.w	r9, [r4, #20]
    patchlistaux(fs, e->f, final, reg, p_f);
   1248c:	f8cd 8000 	str.w	r8, [sp]
   12490:	f7ff fd56 	bl	11f40 <patchlistaux>
    patchlistaux(fs, e->t, final, reg, p_t);
   12494:	4633      	mov	r3, r6
   12496:	464a      	mov	r2, r9
   12498:	4620      	mov	r0, r4
   1249a:	6929      	ldr	r1, [r5, #16]
   1249c:	9700      	str	r7, [sp, #0]
   1249e:	f7ff fd4f 	bl	11f40 <patchlistaux>
  e->f = e->t = NO_JUMP;
   124a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   124a6:	e9c5 3304 	strd	r3, r3, [r5, #16]
  e->k = VNONRELOC;
   124aa:	2308      	movs	r3, #8
  e->u.info = reg;
   124ac:	60ae      	str	r6, [r5, #8]
  e->k = VNONRELOC;
   124ae:	702b      	strb	r3, [r5, #0]
}
   124b0:	b003      	add	sp, #12
   124b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      int fj = (e->k == VJMP) ? NO_JUMP : luaK_jump(fs);
   124b6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   124ba:	e7c4      	b.n	12446 <exp2reg+0x4a>
    int p_t = NO_JUMP;  /* position of an eventual LOAD true */
   124bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    int p_f = NO_JUMP;  /* position of an eventual LOAD false */
   124c0:	46b8      	mov	r8, r7
   124c2:	e7db      	b.n	1247c <exp2reg+0x80>

000124c4 <jumponcond>:
static int jumponcond (FuncState *fs, expdesc *e, int cond) {
   124c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (e->k == VRELOC) {
   124c6:	780b      	ldrb	r3, [r1, #0]
static int jumponcond (FuncState *fs, expdesc *e, int cond) {
   124c8:	4604      	mov	r4, r0
  if (e->k == VRELOC) {
   124ca:	2b11      	cmp	r3, #17
static int jumponcond (FuncState *fs, expdesc *e, int cond) {
   124cc:	460d      	mov	r5, r1
   124ce:	4616      	mov	r6, r2
  if (e->k == VRELOC) {
   124d0:	d11d      	bne.n	1250e <jumponcond+0x4a>
    Instruction ie = getinstruction(fs, e);
   124d2:	6803      	ldr	r3, [r0, #0]
   124d4:	688a      	ldr	r2, [r1, #8]
   124d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   124d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    if (GET_OPCODE(ie) == OP_NOT) {
   124dc:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   124e0:	2b33      	cmp	r3, #51	; 0x33
   124e2:	d116      	bne.n	12512 <jumponcond+0x4e>
  removelastlineinfo(fs);
   124e4:	f7ff fc77 	bl	11dd6 <removelastlineinfo>
  fs->pc--;
   124e8:	6903      	ldr	r3, [r0, #16]
  luaK_codeABCk(fs, op, A, B, C, k);
   124ea:	f3c1 4207 	ubfx	r2, r1, #16, #8
  fs->pc--;
   124ee:	3b01      	subs	r3, #1
   124f0:	6103      	str	r3, [r0, #16]
  luaK_codeABCk(fs, op, A, B, C, k);
   124f2:	2300      	movs	r3, #0
   124f4:	2142      	movs	r1, #66	; 0x42
   124f6:	f086 0601 	eor.w	r6, r6, #1
   124fa:	9601      	str	r6, [sp, #4]
   124fc:	9300      	str	r3, [sp, #0]
   124fe:	f7ff fdc8 	bl	12092 <luaK_codeABCk>
  return luaK_jump(fs);
   12502:	4620      	mov	r0, r4
}
   12504:	b002      	add	sp, #8
   12506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return luaK_jump(fs);
   1250a:	f7f2 b9a9 	b.w	4860 <luaK_jump>
  if (e->k != VNONRELOC) {  /* no fixed register yet? */
   1250e:	2b08      	cmp	r3, #8
   12510:	d00a      	beq.n	12528 <jumponcond+0x64>
    luaK_reserveregs(fs, 1);  /* get a register */
   12512:	2101      	movs	r1, #1
   12514:	4620      	mov	r0, r4
   12516:	f7ff fe05 	bl	12124 <luaK_reserveregs>
    discharge2reg(fs, e, fs->freereg-1);  /* put value there */
   1251a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
   1251e:	4629      	mov	r1, r5
   12520:	4620      	mov	r0, r4
   12522:	3a01      	subs	r2, #1
   12524:	f7ff feee 	bl	12304 <discharge2reg>
  freeexp(fs, e);
   12528:	4629      	mov	r1, r5
   1252a:	4620      	mov	r0, r4
   1252c:	f7ff fb95 	bl	11c5a <freeexp>
  luaK_codeABCk(fs, op, A, B, C, k);
   12530:	2300      	movs	r3, #0
   12532:	22ff      	movs	r2, #255	; 0xff
   12534:	9300      	str	r3, [sp, #0]
   12536:	2143      	movs	r1, #67	; 0x43
   12538:	4620      	mov	r0, r4
   1253a:	68ab      	ldr	r3, [r5, #8]
   1253c:	9601      	str	r6, [sp, #4]
   1253e:	e7de      	b.n	124fe <jumponcond+0x3a>

00012540 <luaK_exp2nextreg>:
void luaK_exp2nextreg (FuncState *fs, expdesc *e) {
   12540:	b538      	push	{r3, r4, r5, lr}
   12542:	4604      	mov	r4, r0
   12544:	460d      	mov	r5, r1
  luaK_dischargevars(fs, e);
   12546:	f7ff fe5a 	bl	121fe <luaK_dischargevars>
  freeexp(fs, e);
   1254a:	4629      	mov	r1, r5
   1254c:	4620      	mov	r0, r4
   1254e:	f7ff fb84 	bl	11c5a <freeexp>
  luaK_reserveregs(fs, 1);
   12552:	4620      	mov	r0, r4
   12554:	2101      	movs	r1, #1
   12556:	f7ff fde5 	bl	12124 <luaK_reserveregs>
  exp2reg(fs, e, fs->freereg - 1);
   1255a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
   1255e:	4629      	mov	r1, r5
   12560:	4620      	mov	r0, r4
}
   12562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  exp2reg(fs, e, fs->freereg - 1);
   12566:	3a01      	subs	r2, #1
   12568:	f7ff bf48 	b.w	123fc <exp2reg>

0001256c <luaK_exp2anyreg>:
int luaK_exp2anyreg (FuncState *fs, expdesc *e) {
   1256c:	b570      	push	{r4, r5, r6, lr}
   1256e:	460c      	mov	r4, r1
   12570:	4605      	mov	r5, r0
  luaK_dischargevars(fs, e);
   12572:	f7ff fe44 	bl	121fe <luaK_dischargevars>
  if (e->k == VNONRELOC) {  /* expression already has a register? */
   12576:	7823      	ldrb	r3, [r4, #0]
   12578:	2b08      	cmp	r3, #8
   1257a:	d111      	bne.n	125a0 <luaK_exp2anyreg+0x34>
    if (!hasjumps(e))  /* no jumps? */
   1257c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   12580:	429a      	cmp	r2, r3
      return e->u.info;  /* result is already in a register */
   12582:	68a6      	ldr	r6, [r4, #8]
    if (!hasjumps(e))  /* no jumps? */
   12584:	d00a      	beq.n	1259c <luaK_exp2anyreg+0x30>
    if (e->u.info >= luaY_nvarstack(fs)) {  /* reg. is not a local? */
   12586:	4628      	mov	r0, r5
   12588:	f002 fe60 	bl	1524c <luaY_nvarstack>
   1258c:	42b0      	cmp	r0, r6
   1258e:	dc07      	bgt.n	125a0 <luaK_exp2anyreg+0x34>
      exp2reg(fs, e, e->u.info);  /* put final result in it */
   12590:	4621      	mov	r1, r4
   12592:	4628      	mov	r0, r5
   12594:	68a2      	ldr	r2, [r4, #8]
   12596:	f7ff ff31 	bl	123fc <exp2reg>
  return e->u.info;
   1259a:	68a6      	ldr	r6, [r4, #8]
}
   1259c:	4630      	mov	r0, r6
   1259e:	bd70      	pop	{r4, r5, r6, pc}
  luaK_exp2nextreg(fs, e);  /* default: use next available register */
   125a0:	4621      	mov	r1, r4
   125a2:	4628      	mov	r0, r5
   125a4:	f7ff ffcc 	bl	12540 <luaK_exp2nextreg>
   125a8:	e7f7      	b.n	1259a <luaK_exp2anyreg+0x2e>

000125aa <codeorder>:
static void codeorder (FuncState *fs, OpCode op, expdesc *e1, expdesc *e2) {
   125aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   125ae:	4698      	mov	r8, r3
  int isfloat = 0;
   125b0:	2300      	movs	r3, #0
static void codeorder (FuncState *fs, OpCode op, expdesc *e1, expdesc *e2) {
   125b2:	b085      	sub	sp, #20
   125b4:	4604      	mov	r4, r0
   125b6:	460d      	mov	r5, r1
   125b8:	4617      	mov	r7, r2
  if (isSCnumber(e2, &im, &isfloat)) {
   125ba:	4640      	mov	r0, r8
   125bc:	aa03      	add	r2, sp, #12
   125be:	a902      	add	r1, sp, #8
  int isfloat = 0;
   125c0:	9303      	str	r3, [sp, #12]
  if (isSCnumber(e2, &im, &isfloat)) {
   125c2:	f7ff fb51 	bl	11c68 <isSCnumber>
   125c6:	b300      	cbz	r0, 1260a <codeorder+0x60>
    r1 = luaK_exp2anyreg(fs, e1);
   125c8:	4639      	mov	r1, r7
   125ca:	4620      	mov	r0, r4
   125cc:	f7ff ffce 	bl	1256c <luaK_exp2anyreg>
   125d0:	4606      	mov	r6, r0
    op = cast(OpCode, (op - OP_LT) + OP_LTI);
   125d2:	3504      	adds	r5, #4
    r2 = im;
   125d4:	f8dd 9008 	ldr.w	r9, [sp, #8]
    op = cast(OpCode, (op - OP_LT) + OP_LTI);
   125d8:	b2ed      	uxtb	r5, r5
  freeexps(fs, e1, e2);
   125da:	4642      	mov	r2, r8
   125dc:	4639      	mov	r1, r7
   125de:	4620      	mov	r0, r4
   125e0:	f7ff fc23 	bl	11e2a <freeexps>
  luaK_codeABCk(fs, op, A, B, C, k);
   125e4:	2301      	movs	r3, #1
   125e6:	9301      	str	r3, [sp, #4]
   125e8:	9b03      	ldr	r3, [sp, #12]
   125ea:	4632      	mov	r2, r6
   125ec:	4629      	mov	r1, r5
   125ee:	9300      	str	r3, [sp, #0]
   125f0:	4620      	mov	r0, r4
   125f2:	464b      	mov	r3, r9
   125f4:	f7ff fd4d 	bl	12092 <luaK_codeABCk>
  return luaK_jump(fs);
   125f8:	4620      	mov	r0, r4
   125fa:	f7f2 f931 	bl	4860 <luaK_jump>
  e1->k = VJMP;
   125fe:	2310      	movs	r3, #16
  e1->u.info = condjump(fs, op, r1, r2, isfloat, 1);
   12600:	60b8      	str	r0, [r7, #8]
  e1->k = VJMP;
   12602:	703b      	strb	r3, [r7, #0]
}
   12604:	b005      	add	sp, #20
   12606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (isSCnumber(e1, &im, &isfloat)) {
   1260a:	4638      	mov	r0, r7
   1260c:	aa03      	add	r2, sp, #12
   1260e:	a902      	add	r1, sp, #8
   12610:	f7ff fb2a 	bl	11c68 <isSCnumber>
   12614:	b158      	cbz	r0, 1262e <codeorder+0x84>
    r1 = luaK_exp2anyreg(fs, e2);
   12616:	4641      	mov	r1, r8
   12618:	4620      	mov	r0, r4
   1261a:	f7ff ffa7 	bl	1256c <luaK_exp2anyreg>
    op = (op == OP_LT) ? OP_GTI : OP_GEI;
   1261e:	2d3a      	cmp	r5, #58	; 0x3a
    r1 = luaK_exp2anyreg(fs, e2);
   12620:	4606      	mov	r6, r0
    op = (op == OP_LT) ? OP_GTI : OP_GEI;
   12622:	bf0c      	ite	eq
   12624:	2540      	moveq	r5, #64	; 0x40
   12626:	2541      	movne	r5, #65	; 0x41
    r2 = im;
   12628:	f8dd 9008 	ldr.w	r9, [sp, #8]
    op = (op == OP_LT) ? OP_GTI : OP_GEI;
   1262c:	e7d5      	b.n	125da <codeorder+0x30>
    r1 = luaK_exp2anyreg(fs, e1);
   1262e:	4639      	mov	r1, r7
   12630:	4620      	mov	r0, r4
   12632:	f7ff ff9b 	bl	1256c <luaK_exp2anyreg>
    r2 = luaK_exp2anyreg(fs, e2);
   12636:	4641      	mov	r1, r8
    r1 = luaK_exp2anyreg(fs, e1);
   12638:	4606      	mov	r6, r0
    r2 = luaK_exp2anyreg(fs, e2);
   1263a:	4620      	mov	r0, r4
   1263c:	f7ff ff96 	bl	1256c <luaK_exp2anyreg>
   12640:	4681      	mov	r9, r0
   12642:	e7ca      	b.n	125da <codeorder+0x30>

00012644 <luaK_exp2anyregup>:
  if (e->k != VUPVAL || hasjumps(e))
   12644:	780b      	ldrb	r3, [r1, #0]
   12646:	2b0a      	cmp	r3, #10
   12648:	d103      	bne.n	12652 <luaK_exp2anyregup+0xe>
   1264a:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1264e:	429a      	cmp	r2, r3
   12650:	d001      	beq.n	12656 <luaK_exp2anyregup+0x12>
    luaK_exp2anyreg(fs, e);
   12652:	f7ff bf8b 	b.w	1256c <luaK_exp2anyreg>
}
   12656:	4770      	bx	lr

00012658 <luaK_exp2val>:
  if (hasjumps(e))
   12658:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1265c:	429a      	cmp	r2, r3
   1265e:	d001      	beq.n	12664 <luaK_exp2val+0xc>
    luaK_exp2anyreg(fs, e);
   12660:	f7ff bf84 	b.w	1256c <luaK_exp2anyreg>
    luaK_dischargevars(fs, e);
   12664:	f7ff bdcb 	b.w	121fe <luaK_dischargevars>

00012668 <luaK_exp2RK>:
int luaK_exp2RK (FuncState *fs, expdesc *e) {
   12668:	b538      	push	{r3, r4, r5, lr}
  if (!hasjumps(e)) {
   1266a:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1266e:	429a      	cmp	r2, r3
int luaK_exp2RK (FuncState *fs, expdesc *e) {
   12670:	4605      	mov	r5, r0
   12672:	460c      	mov	r4, r1
  if (!hasjumps(e)) {
   12674:	d005      	beq.n	12682 <luaK_exp2RK+0x1a>
    luaK_exp2anyreg(fs, e);
   12676:	4621      	mov	r1, r4
   12678:	4628      	mov	r0, r5
   1267a:	f7ff ff77 	bl	1256c <luaK_exp2anyreg>
    return 0;
   1267e:	2000      	movs	r0, #0
}
   12680:	bd38      	pop	{r3, r4, r5, pc}
   12682:	f7ff fbe0 	bl	11e46 <luaK_exp2K.part.0>
  if (luaK_exp2K(fs, e))
   12686:	2800      	cmp	r0, #0
   12688:	d0f5      	beq.n	12676 <luaK_exp2RK+0xe>
    return 1;
   1268a:	2001      	movs	r0, #1
   1268c:	e7f8      	b.n	12680 <luaK_exp2RK+0x18>

0001268e <codeABRK>:
                      expdesc *ec) {
   1268e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12692:	f8dd 8020 	ldr.w	r8, [sp, #32]
   12696:	460d      	mov	r5, r1
  int k = luaK_exp2RK(fs, ec);
   12698:	4641      	mov	r1, r8
                      expdesc *ec) {
   1269a:	461f      	mov	r7, r3
   1269c:	4604      	mov	r4, r0
   1269e:	4616      	mov	r6, r2
  int k = luaK_exp2RK(fs, ec);
   126a0:	f7ff ffe2 	bl	12668 <luaK_exp2RK>
  luaK_codeABCk(fs, o, a, b, ec->u.info, k);
   126a4:	9001      	str	r0, [sp, #4]
   126a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   126aa:	4632      	mov	r2, r6
   126ac:	9300      	str	r3, [sp, #0]
   126ae:	4629      	mov	r1, r5
   126b0:	463b      	mov	r3, r7
   126b2:	4620      	mov	r0, r4
   126b4:	f7ff fced 	bl	12092 <luaK_codeABCk>
}
   126b8:	b002      	add	sp, #8
   126ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000126be <luaK_storevar>:
void luaK_storevar (FuncState *fs, expdesc *var, expdesc *ex) {
   126be:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch (var->k) {
   126c0:	780b      	ldrb	r3, [r1, #0]
void luaK_storevar (FuncState *fs, expdesc *var, expdesc *ex) {
   126c2:	4605      	mov	r5, r0
  switch (var->k) {
   126c4:	3b09      	subs	r3, #9
void luaK_storevar (FuncState *fs, expdesc *var, expdesc *ex) {
   126c6:	460c      	mov	r4, r1
   126c8:	4616      	mov	r6, r2
  switch (var->k) {
   126ca:	2b06      	cmp	r3, #6
   126cc:	d81c      	bhi.n	12708 <luaK_storevar+0x4a>
   126ce:	e8df f003 	tbb	[pc, r3]
   126d2:	0f04      	.short	0x0f04
   126d4:	2b22371b 	.word	0x2b22371b
   126d8:	31          	.byte	0x31
   126d9:	00          	.byte	0x00
      freeexp(fs, ex);
   126da:	4631      	mov	r1, r6
   126dc:	f7ff fabd 	bl	11c5a <freeexp>
      exp2reg(fs, ex, var->u.var.ridx);  /* compute 'ex' into proper place */
   126e0:	4631      	mov	r1, r6
   126e2:	4628      	mov	r0, r5
   126e4:	7a22      	ldrb	r2, [r4, #8]
}
   126e6:	b002      	add	sp, #8
   126e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      exp2reg(fs, ex, var->u.var.ridx);  /* compute 'ex' into proper place */
   126ec:	f7ff be86 	b.w	123fc <exp2reg>
      int e = luaK_exp2anyreg(fs, ex);
   126f0:	4631      	mov	r1, r6
   126f2:	f7ff ff3b 	bl	1256c <luaK_exp2anyreg>
      luaK_codeABC(fs, OP_SETUPVAL, e, var->u.info, 0);
   126f6:	2300      	movs	r3, #0
      int e = luaK_exp2anyreg(fs, ex);
   126f8:	4602      	mov	r2, r0
      luaK_codeABC(fs, OP_SETUPVAL, e, var->u.info, 0);
   126fa:	e9cd 3300 	strd	r3, r3, [sp]
   126fe:	210a      	movs	r1, #10
   12700:	4628      	mov	r0, r5
   12702:	68a3      	ldr	r3, [r4, #8]
   12704:	f7ff fcc5 	bl	12092 <luaK_codeABCk>
  freeexp(fs, ex);
   12708:	4631      	mov	r1, r6
   1270a:	4628      	mov	r0, r5
}
   1270c:	b002      	add	sp, #8
   1270e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  freeexp(fs, ex);
   12712:	f7ff baa2 	b.w	11c5a <freeexp>
      codeABRK(fs, OP_SETTABUP, var->u.ind.t, var->u.ind.idx, ex);
   12716:	9600      	str	r6, [sp, #0]
   12718:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
   1271c:	7a8a      	ldrb	r2, [r1, #10]
   1271e:	210f      	movs	r1, #15
      codeABRK(fs, OP_SETTABLE, var->u.ind.t, var->u.ind.idx, ex);
   12720:	4628      	mov	r0, r5
   12722:	f7ff ffb4 	bl	1268e <codeABRK>
      break;
   12726:	e7ef      	b.n	12708 <luaK_storevar+0x4a>
      codeABRK(fs, OP_SETI, var->u.ind.t, var->u.ind.idx, ex);
   12728:	9600      	str	r6, [sp, #0]
   1272a:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
   1272e:	7a8a      	ldrb	r2, [r1, #10]
   12730:	2111      	movs	r1, #17
   12732:	e7f5      	b.n	12720 <luaK_storevar+0x62>
      codeABRK(fs, OP_SETFIELD, var->u.ind.t, var->u.ind.idx, ex);
   12734:	9600      	str	r6, [sp, #0]
   12736:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
   1273a:	7a8a      	ldrb	r2, [r1, #10]
   1273c:	2112      	movs	r1, #18
   1273e:	e7ef      	b.n	12720 <luaK_storevar+0x62>
      codeABRK(fs, OP_SETTABLE, var->u.ind.t, var->u.ind.idx, ex);
   12740:	9600      	str	r6, [sp, #0]
   12742:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
   12746:	7a8a      	ldrb	r2, [r1, #10]
   12748:	2110      	movs	r1, #16
   1274a:	e7e9      	b.n	12720 <luaK_storevar+0x62>

0001274c <luaK_self>:
void luaK_self (FuncState *fs, expdesc *e, expdesc *key) {
   1274c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1274e:	4604      	mov	r4, r0
   12750:	460d      	mov	r5, r1
   12752:	4616      	mov	r6, r2
  luaK_exp2anyreg(fs, e);
   12754:	f7ff ff0a 	bl	1256c <luaK_exp2anyreg>
  freeexp(fs, e);
   12758:	4629      	mov	r1, r5
   1275a:	4620      	mov	r0, r4
  ereg = e->u.info;  /* register where 'e' was placed */
   1275c:	68af      	ldr	r7, [r5, #8]
  freeexp(fs, e);
   1275e:	f7ff fa7c 	bl	11c5a <freeexp>
  e->u.info = fs->freereg;  /* base register for op_self */
   12762:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  luaK_reserveregs(fs, 2);  /* function and 'self' produced by op_self */
   12766:	4620      	mov	r0, r4
  e->u.info = fs->freereg;  /* base register for op_self */
   12768:	60ab      	str	r3, [r5, #8]
  e->k = VNONRELOC;  /* self expression has a fixed register */
   1276a:	2308      	movs	r3, #8
  luaK_reserveregs(fs, 2);  /* function and 'self' produced by op_self */
   1276c:	2102      	movs	r1, #2
  e->k = VNONRELOC;  /* self expression has a fixed register */
   1276e:	702b      	strb	r3, [r5, #0]
  luaK_reserveregs(fs, 2);  /* function and 'self' produced by op_self */
   12770:	f7ff fcd8 	bl	12124 <luaK_reserveregs>
  codeABRK(fs, OP_SELF, e->u.info, ereg, key);
   12774:	4620      	mov	r0, r4
   12776:	463b      	mov	r3, r7
   12778:	2114      	movs	r1, #20
   1277a:	68aa      	ldr	r2, [r5, #8]
   1277c:	9600      	str	r6, [sp, #0]
   1277e:	f7ff ff86 	bl	1268e <codeABRK>
  freeexp(fs, key);
   12782:	4631      	mov	r1, r6
   12784:	4620      	mov	r0, r4
}
   12786:	b003      	add	sp, #12
   12788:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  freeexp(fs, key);
   1278c:	f7ff ba65 	b.w	11c5a <freeexp>

00012790 <luaK_goiftrue>:
void luaK_goiftrue (FuncState *fs, expdesc *e) {
   12790:	b538      	push	{r3, r4, r5, lr}
   12792:	460c      	mov	r4, r1
   12794:	4605      	mov	r5, r0
  luaK_dischargevars(fs, e);
   12796:	f7ff fd32 	bl	121fe <luaK_dischargevars>
  switch (e->k) {
   1279a:	7823      	ldrb	r3, [r4, #0]
   1279c:	2b07      	cmp	r3, #7
   1279e:	d80a      	bhi.n	127b6 <luaK_goiftrue+0x26>
   127a0:	2b03      	cmp	r3, #3
   127a2:	d81c      	bhi.n	127de <luaK_goiftrue+0x4e>
   127a4:	2b02      	cmp	r3, #2
   127a6:	d01a      	beq.n	127de <luaK_goiftrue+0x4e>
      pc = jumponcond(fs, e, 0);  /* jump when false */
   127a8:	2200      	movs	r2, #0
   127aa:	4621      	mov	r1, r4
   127ac:	4628      	mov	r0, r5
   127ae:	f7ff fe89 	bl	124c4 <jumponcond>
   127b2:	4602      	mov	r2, r0
      break;
   127b4:	e006      	b.n	127c4 <luaK_goiftrue+0x34>
  switch (e->k) {
   127b6:	2b10      	cmp	r3, #16
   127b8:	d1f6      	bne.n	127a8 <luaK_goiftrue+0x18>
      negatecondition(fs, e);  /* jump when it is false */
   127ba:	68a1      	ldr	r1, [r4, #8]
   127bc:	6828      	ldr	r0, [r5, #0]
   127be:	f7ff fba4 	bl	11f0a <negatecondition.isra.0>
      pc = e->u.info;  /* save jump position */
   127c2:	68a2      	ldr	r2, [r4, #8]
  luaK_concat(fs, &e->f, pc);  /* insert new jump in false list */
   127c4:	4628      	mov	r0, r5
   127c6:	f104 0114 	add.w	r1, r4, #20
   127ca:	f7ff fc3b 	bl	12044 <luaK_concat>
  luaK_patchtohere(fs, e->t);  /* true list jumps to here (to go through) */
   127ce:	4628      	mov	r0, r5
   127d0:	6921      	ldr	r1, [r4, #16]
   127d2:	f7ff fc5a 	bl	1208a <luaK_patchtohere>
  e->t = NO_JUMP;
   127d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   127da:	6123      	str	r3, [r4, #16]
}
   127dc:	bd38      	pop	{r3, r4, r5, pc}
  switch (e->k) {
   127de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   127e2:	e7ef      	b.n	127c4 <luaK_goiftrue+0x34>

000127e4 <luaK_goiffalse>:
void luaK_goiffalse (FuncState *fs, expdesc *e) {
   127e4:	b538      	push	{r3, r4, r5, lr}
   127e6:	460c      	mov	r4, r1
   127e8:	4605      	mov	r5, r0
  luaK_dischargevars(fs, e);
   127ea:	f7ff fd08 	bl	121fe <luaK_dischargevars>
  switch (e->k) {
   127ee:	7823      	ldrb	r3, [r4, #0]
   127f0:	2b03      	cmp	r3, #3
   127f2:	d003      	beq.n	127fc <luaK_goiffalse+0x18>
   127f4:	2b10      	cmp	r3, #16
   127f6:	d004      	beq.n	12802 <luaK_goiffalse+0x1e>
   127f8:	2b01      	cmp	r3, #1
   127fa:	d110      	bne.n	1281e <luaK_goiffalse+0x3a>
   127fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12800:	e000      	b.n	12804 <luaK_goiffalse+0x20>
      pc = e->u.info;  /* already jump if true */
   12802:	68a2      	ldr	r2, [r4, #8]
  luaK_concat(fs, &e->t, pc);  /* insert new jump in 't' list */
   12804:	4628      	mov	r0, r5
   12806:	f104 0110 	add.w	r1, r4, #16
   1280a:	f7ff fc1b 	bl	12044 <luaK_concat>
  luaK_patchtohere(fs, e->f);  /* false list jumps to here (to go through) */
   1280e:	4628      	mov	r0, r5
   12810:	6961      	ldr	r1, [r4, #20]
   12812:	f7ff fc3a 	bl	1208a <luaK_patchtohere>
  e->f = NO_JUMP;
   12816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1281a:	6163      	str	r3, [r4, #20]
}
   1281c:	bd38      	pop	{r3, r4, r5, pc}
      pc = jumponcond(fs, e, 1);  /* jump if true */
   1281e:	2201      	movs	r2, #1
   12820:	4621      	mov	r1, r4
   12822:	4628      	mov	r0, r5
   12824:	f7ff fe4e 	bl	124c4 <jumponcond>
   12828:	4602      	mov	r2, r0
      break;
   1282a:	e7eb      	b.n	12804 <luaK_goiffalse+0x20>

0001282c <luaK_isKint>:
  return (e->k == VKINT && !hasjumps(e));
   1282c:	7803      	ldrb	r3, [r0, #0]
   1282e:	2b06      	cmp	r3, #6
   12830:	d105      	bne.n	1283e <luaK_isKint+0x12>
   12832:	e9d0 3004 	ldrd	r3, r0, [r0, #16]
   12836:	1a1b      	subs	r3, r3, r0
   12838:	4258      	negs	r0, r3
   1283a:	4158      	adcs	r0, r3
   1283c:	4770      	bx	lr
   1283e:	2000      	movs	r0, #0
}
   12840:	4770      	bx	lr

00012842 <isSCint>:
static int isSCint (expdesc *e) {
   12842:	b508      	push	{r3, lr}
   12844:	4602      	mov	r2, r0
  return luaK_isKint(e) && fitsC(e->u.ival);
   12846:	f7ff fff1 	bl	1282c <luaK_isKint>
   1284a:	b158      	cbz	r0, 12864 <isSCint+0x22>
  return (l_castS2U(i) + OFFSET_sC <= cast_uint(MAXARG_C));
   1284c:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
   12850:	337f      	adds	r3, #127	; 0x7f
   12852:	f142 0200 	adc.w	r2, r2, #0
  return luaK_isKint(e) && fitsC(e->u.ival);
   12856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1285a:	f172 0300 	sbcs.w	r3, r2, #0
   1285e:	bf34      	ite	cc
   12860:	2001      	movcc	r0, #1
   12862:	2000      	movcs	r0, #0
}
   12864:	bd08      	pop	{r3, pc}

00012866 <luaK_indexed>:
void luaK_indexed (FuncState *fs, expdesc *t, expdesc *k) {
   12866:	b570      	push	{r4, r5, r6, lr}
  if (k->k == VKSTR)
   12868:	7813      	ldrb	r3, [r2, #0]
void luaK_indexed (FuncState *fs, expdesc *t, expdesc *k) {
   1286a:	4606      	mov	r6, r0
  if (k->k == VKSTR)
   1286c:	2b07      	cmp	r3, #7
void luaK_indexed (FuncState *fs, expdesc *t, expdesc *k) {
   1286e:	460c      	mov	r4, r1
   12870:	4615      	mov	r5, r2
  if (k->k == VKSTR)
   12872:	d105      	bne.n	12880 <luaK_indexed+0x1a>
  e->u.info = stringK(fs, e->u.strval);
   12874:	6891      	ldr	r1, [r2, #8]
   12876:	f7ff f9d4 	bl	11c22 <stringK>
  e->k = VK;
   1287a:	2304      	movs	r3, #4
  e->u.info = stringK(fs, e->u.strval);
   1287c:	60a8      	str	r0, [r5, #8]
  e->k = VK;
   1287e:	702b      	strb	r3, [r5, #0]
  if (t->k == VUPVAL && !isKstr(fs, k))  /* upvalue indexed by non 'Kstr'? */
   12880:	7823      	ldrb	r3, [r4, #0]
   12882:	2b0a      	cmp	r3, #10
   12884:	d108      	bne.n	12898 <luaK_indexed+0x32>
   12886:	4629      	mov	r1, r5
   12888:	4630      	mov	r0, r6
   1288a:	f7ff f998 	bl	11bbe <isKstr>
   1288e:	b918      	cbnz	r0, 12898 <luaK_indexed+0x32>
    luaK_exp2anyreg(fs, t);  /* put it in a register */
   12890:	4621      	mov	r1, r4
   12892:	4630      	mov	r0, r6
   12894:	f7ff fe6a 	bl	1256c <luaK_exp2anyreg>
  if (t->k == VUPVAL) {
   12898:	7823      	ldrb	r3, [r4, #0]
   1289a:	2b0a      	cmp	r3, #10
   1289c:	d106      	bne.n	128ac <luaK_indexed+0x46>
    t->u.ind.t = t->u.info;  /* upvalue index */
   1289e:	68a3      	ldr	r3, [r4, #8]
   128a0:	72a3      	strb	r3, [r4, #10]
    t->u.ind.idx = k->u.info;  /* literal string */
   128a2:	68ab      	ldr	r3, [r5, #8]
   128a4:	8123      	strh	r3, [r4, #8]
    t->k = VINDEXUP;
   128a6:	230d      	movs	r3, #13
      t->k = VINDEXED;
   128a8:	7023      	strb	r3, [r4, #0]
}
   128aa:	bd70      	pop	{r4, r5, r6, pc}
    t->u.ind.t = (t->k == VLOCAL) ? t->u.var.ridx: t->u.info;
   128ac:	7a23      	ldrb	r3, [r4, #8]
    if (isKstr(fs, k)) {
   128ae:	4629      	mov	r1, r5
   128b0:	4630      	mov	r0, r6
    t->u.ind.t = (t->k == VLOCAL) ? t->u.var.ridx: t->u.info;
   128b2:	72a3      	strb	r3, [r4, #10]
    if (isKstr(fs, k)) {
   128b4:	f7ff f983 	bl	11bbe <isKstr>
   128b8:	b118      	cbz	r0, 128c2 <luaK_indexed+0x5c>
      t->u.ind.idx = k->u.info;  /* literal string */
   128ba:	68ab      	ldr	r3, [r5, #8]
   128bc:	8123      	strh	r3, [r4, #8]
      t->k = VINDEXSTR;
   128be:	230f      	movs	r3, #15
   128c0:	e7f2      	b.n	128a8 <luaK_indexed+0x42>
  return luaK_isKint(e) && (l_castS2U(e->u.ival) <= l_castS2U(MAXARG_C));
   128c2:	4628      	mov	r0, r5
   128c4:	f7ff ffb2 	bl	1282c <luaK_isKint>
   128c8:	b148      	cbz	r0, 128de <luaK_indexed+0x78>
   128ca:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   128ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   128d2:	f172 0200 	sbcs.w	r2, r2, #0
   128d6:	d202      	bcs.n	128de <luaK_indexed+0x78>
      t->u.ind.idx = cast_int(k->u.ival);  /* int. constant in proper range */
   128d8:	8123      	strh	r3, [r4, #8]
      t->k = VINDEXI;
   128da:	230e      	movs	r3, #14
   128dc:	e7e4      	b.n	128a8 <luaK_indexed+0x42>
      t->u.ind.idx = luaK_exp2anyreg(fs, k);  /* register */
   128de:	4629      	mov	r1, r5
   128e0:	4630      	mov	r0, r6
   128e2:	f7ff fe43 	bl	1256c <luaK_exp2anyreg>
      t->k = VINDEXED;
   128e6:	230c      	movs	r3, #12
      t->u.ind.idx = luaK_exp2anyreg(fs, k);  /* register */
   128e8:	8120      	strh	r0, [r4, #8]
      t->k = VINDEXED;
   128ea:	e7dd      	b.n	128a8 <luaK_indexed+0x42>

000128ec <luaK_infix>:
void luaK_infix (FuncState *fs, BinOpr op, expdesc *v) {
   128ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   128ee:	460e      	mov	r6, r1
  luaK_dischargevars(fs, v);
   128f0:	4611      	mov	r1, r2
void luaK_infix (FuncState *fs, BinOpr op, expdesc *v) {
   128f2:	4605      	mov	r5, r0
   128f4:	4614      	mov	r4, r2
  luaK_dischargevars(fs, v);
   128f6:	f7ff fc82 	bl	121fe <luaK_dischargevars>
  switch (op) {
   128fa:	2e14      	cmp	r6, #20
   128fc:	d843      	bhi.n	12986 <luaK_infix+0x9a>
   128fe:	e8df f006 	tbb	[pc, r6]
   12902:	2020      	.short	0x2020
   12904:	20202020 	.word	0x20202020
   12908:	20202020 	.word	0x20202020
   1290c:	2c192020 	.word	0x2c192020
   12910:	382c3838 	.word	0x382c3838
   12914:	0b38      	.short	0x0b38
   12916:	12          	.byte	0x12
   12917:	00          	.byte	0x00
      luaK_goiftrue(fs, v);  /* go ahead only if 'v' is true */
   12918:	4621      	mov	r1, r4
   1291a:	4628      	mov	r0, r5
}
   1291c:	b002      	add	sp, #8
   1291e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      luaK_goiftrue(fs, v);  /* go ahead only if 'v' is true */
   12922:	f7ff bf35 	b.w	12790 <luaK_goiftrue>
      luaK_goiffalse(fs, v);  /* go ahead only if 'v' is false */
   12926:	4621      	mov	r1, r4
   12928:	4628      	mov	r0, r5
}
   1292a:	b002      	add	sp, #8
   1292c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      luaK_goiffalse(fs, v);  /* go ahead only if 'v' is false */
   12930:	f7ff bf58 	b.w	127e4 <luaK_goiffalse>
      luaK_exp2nextreg(fs, v);  /* operand must be on the stack */
   12934:	4621      	mov	r1, r4
   12936:	4628      	mov	r0, r5
}
   12938:	b002      	add	sp, #8
   1293a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      luaK_exp2nextreg(fs, v);  /* operand must be on the stack */
   1293e:	f7ff bdff 	b.w	12540 <luaK_exp2nextreg>
      if (!tonumeral(v, NULL))
   12942:	2100      	movs	r1, #0
   12944:	4620      	mov	r0, r4
   12946:	f7ff f9bd 	bl	11cc4 <tonumeral>
   1294a:	b9e0      	cbnz	r0, 12986 <luaK_infix+0x9a>
        luaK_exp2anyreg(fs, v);
   1294c:	4621      	mov	r1, r4
   1294e:	4628      	mov	r0, r5
}
   12950:	b002      	add	sp, #8
   12952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        luaK_exp2anyreg(fs, v);
   12956:	f7ff be09 	b.w	1256c <luaK_exp2anyreg>
      if (!tonumeral(v, NULL))
   1295a:	2100      	movs	r1, #0
   1295c:	4620      	mov	r0, r4
   1295e:	f7ff f9b1 	bl	11cc4 <tonumeral>
   12962:	b980      	cbnz	r0, 12986 <luaK_infix+0x9a>
        luaK_exp2RK(fs, v);
   12964:	4621      	mov	r1, r4
   12966:	4628      	mov	r0, r5
}
   12968:	b002      	add	sp, #8
   1296a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        luaK_exp2RK(fs, v);
   1296e:	f7ff be7b 	b.w	12668 <luaK_exp2RK>
      if (!isSCnumber(v, &dummy, &dummy2))
   12972:	4669      	mov	r1, sp
   12974:	4620      	mov	r0, r4
   12976:	aa01      	add	r2, sp, #4
   12978:	f7ff f976 	bl	11c68 <isSCnumber>
   1297c:	b918      	cbnz	r0, 12986 <luaK_infix+0x9a>
        luaK_exp2anyreg(fs, v);
   1297e:	4621      	mov	r1, r4
   12980:	4628      	mov	r0, r5
   12982:	f7ff fdf3 	bl	1256c <luaK_exp2anyreg>
}
   12986:	b002      	add	sp, #8
   12988:	bd70      	pop	{r4, r5, r6, pc}

0001298a <luaK_fixline>:

/*
** Change line information associated with current position, by removing
** previous info and adding it again with new line.
*/
void luaK_fixline (FuncState *fs, int line) {
   1298a:	b510      	push	{r4, lr}
  removelastlineinfo(fs);
   1298c:	f7ff fa23 	bl	11dd6 <removelastlineinfo>
  savelineinfo(fs, fs->f, line);
}
   12990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  savelineinfo(fs, fs->f, line);
   12994:	460a      	mov	r2, r1
   12996:	6801      	ldr	r1, [r0, #0]
   12998:	f7f1 be14 	b.w	45c4 <savelineinfo>

0001299c <finishbinexpval>:
                             OpCode mmop, TMS event) {
   1299c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129a0:	b085      	sub	sp, #20
   129a2:	4698      	mov	r8, r3
   129a4:	e9dd a30e 	ldrd	sl, r3, [sp, #56]	; 0x38
   129a8:	9302      	str	r3, [sp, #8]
   129aa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   129ae:	4604      	mov	r4, r0
   129b0:	460d      	mov	r5, r1
   129b2:	4617      	mov	r7, r2
   129b4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   129b8:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   129bc:	9303      	str	r3, [sp, #12]
  int v1 = luaK_exp2anyreg(fs, e1);
   129be:	f7ff fdd5 	bl	1256c <luaK_exp2anyreg>
  int pc = luaK_codeABCk(fs, op, 0, v1, v2, 0);
   129c2:	2200      	movs	r2, #0
   129c4:	4603      	mov	r3, r0
  int v1 = luaK_exp2anyreg(fs, e1);
   129c6:	4606      	mov	r6, r0
  int pc = luaK_codeABCk(fs, op, 0, v1, v2, 0);
   129c8:	4641      	mov	r1, r8
   129ca:	e9cd a200 	strd	sl, r2, [sp]
   129ce:	4620      	mov	r0, r4
   129d0:	f7ff fb5f 	bl	12092 <luaK_codeABCk>
  freeexps(fs, e1, e2);
   129d4:	463a      	mov	r2, r7
  int pc = luaK_codeABCk(fs, op, 0, v1, v2, 0);
   129d6:	4680      	mov	r8, r0
  freeexps(fs, e1, e2);
   129d8:	4629      	mov	r1, r5
   129da:	4620      	mov	r0, r4
   129dc:	f7ff fa25 	bl	11e2a <freeexps>
  e1->k = VRELOC;  /* all those operations are relocatable */
   129e0:	2311      	movs	r3, #17
  luaK_fixline(fs, line);
   129e2:	4649      	mov	r1, r9
   129e4:	4620      	mov	r0, r4
  e1->k = VRELOC;  /* all those operations are relocatable */
   129e6:	702b      	strb	r3, [r5, #0]
  e1->u.info = pc;
   129e8:	f8c5 8008 	str.w	r8, [r5, #8]
  luaK_fixline(fs, line);
   129ec:	f7ff ffcd 	bl	1298a <luaK_fixline>
  luaK_codeABCk(fs, mmop, v1, v2, event, flip);  /* to call metamethod */
   129f0:	9b02      	ldr	r3, [sp, #8]
   129f2:	4659      	mov	r1, fp
   129f4:	9301      	str	r3, [sp, #4]
   129f6:	9b03      	ldr	r3, [sp, #12]
   129f8:	4632      	mov	r2, r6
   129fa:	9300      	str	r3, [sp, #0]
   129fc:	4620      	mov	r0, r4
   129fe:	4653      	mov	r3, sl
   12a00:	f7ff fb47 	bl	12092 <luaK_codeABCk>
  luaK_fixline(fs, line);
   12a04:	4649      	mov	r1, r9
   12a06:	4620      	mov	r0, r4
}
   12a08:	b005      	add	sp, #20
   12a0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  luaK_fixline(fs, line);
   12a0e:	f7ff bfbc 	b.w	1298a <luaK_fixline>

00012a12 <finishbinexpneg>:
                             OpCode op, int line, TMS event) {
   12a12:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a14:	4606      	mov	r6, r0
   12a16:	b087      	sub	sp, #28
  if (!luaK_isKint(e2))
   12a18:	4610      	mov	r0, r2
                             OpCode op, int line, TMS event) {
   12a1a:	461f      	mov	r7, r3
  if (!luaK_isKint(e2))
   12a1c:	f7ff ff06 	bl	1282c <luaK_isKint>
   12a20:	b388      	cbz	r0, 12a86 <finishbinexpneg+0x74>
    lua_Integer i2 = e2->u.ival;
   12a22:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
  return (l_castS2U(i) + OFFSET_sC <= cast_uint(MAXARG_C));
   12a26:	f114 057f 	adds.w	r5, r4, #127	; 0x7f
   12a2a:	f143 0000 	adc.w	r0, r3, #0
    if (!(fitsC(i2) && fitsC(-i2)))
   12a2e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   12a32:	f170 0000 	sbcs.w	r0, r0, #0
   12a36:	f04f 0000 	mov.w	r0, #0
   12a3a:	d224      	bcs.n	12a86 <finishbinexpneg+0x74>
   12a3c:	f1d4 047f 	rsbs	r4, r4, #127	; 0x7f
   12a40:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12a44:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   12a48:	f173 0300 	sbcs.w	r3, r3, #0
   12a4c:	d21b      	bcs.n	12a86 <finishbinexpneg+0x74>
      finishbinexpval(fs, e1, e2, op, int2sC(-v2), 0, line, OP_MMBINI, event);
   12a4e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   12a52:	9400      	str	r4, [sp, #0]
   12a54:	9304      	str	r3, [sp, #16]
   12a56:	232f      	movs	r3, #47	; 0x2f
   12a58:	9303      	str	r3, [sp, #12]
   12a5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12a5c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12a60:	463b      	mov	r3, r7
   12a62:	4630      	mov	r0, r6
   12a64:	f7ff ff9a 	bl	1299c <finishbinexpval>
      return 1;  /* successfully coded */
   12a68:	2001      	movs	r0, #1
      SETARG_B(fs->f->code[fs->pc - 1], int2sC(v2));
   12a6a:	6832      	ldr	r2, [r6, #0]
   12a6c:	6933      	ldr	r3, [r6, #16]
   12a6e:	6b51      	ldr	r1, [r2, #52]	; 0x34
   12a70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12a74:	3b01      	subs	r3, #1
   12a76:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   12a7a:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
   12a7e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   12a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12a86:	b007      	add	sp, #28
   12a88:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012a8a <codebinexpval>:
                           expdesc *e1, expdesc *e2, int line) {
   12a8a:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a8c:	460d      	mov	r5, r1
   12a8e:	b087      	sub	sp, #28
  int v2 = luaK_exp2anyreg(fs, e2);  /* both operands are in registers */
   12a90:	4619      	mov	r1, r3
                           expdesc *e1, expdesc *e2, int line) {
   12a92:	4617      	mov	r7, r2
   12a94:	461c      	mov	r4, r3
   12a96:	4606      	mov	r6, r0
  int v2 = luaK_exp2anyreg(fs, e2);  /* both operands are in registers */
   12a98:	f7ff fd68 	bl	1256c <luaK_exp2anyreg>
                  cast(TMS, (op - OP_ADD) + TM_ADD));
   12a9c:	f1a5 031c 	sub.w	r3, r5, #28
  finishbinexpval(fs, e1, e2, op, v2, 0, line, OP_MMBIN,
   12aa0:	b2db      	uxtb	r3, r3
   12aa2:	9304      	str	r3, [sp, #16]
   12aa4:	232e      	movs	r3, #46	; 0x2e
   12aa6:	9303      	str	r3, [sp, #12]
   12aa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12aaa:	4622      	mov	r2, r4
   12aac:	9302      	str	r3, [sp, #8]
   12aae:	2300      	movs	r3, #0
   12ab0:	4639      	mov	r1, r7
   12ab2:	e9cd 0300 	strd	r0, r3, [sp]
   12ab6:	462b      	mov	r3, r5
   12ab8:	4630      	mov	r0, r6
   12aba:	f7ff ff6f 	bl	1299c <finishbinexpval>
}
   12abe:	b007      	add	sp, #28
   12ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012ac2 <codearith>:
                       expdesc *e1, expdesc *e2, int flip, int line) {
   12ac2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12ac6:	4605      	mov	r5, r0
   12ac8:	b087      	sub	sp, #28
  TMS event = cast(TMS, opr + TM_ADD);
   12aca:	b24c      	sxtb	r4, r1
  if (tonumeral(e2, NULL) && luaK_exp2K(fs, e2)) {  /* K operand? */
   12acc:	4618      	mov	r0, r3
                       expdesc *e1, expdesc *e2, int flip, int line) {
   12ace:	e9dd 870e 	ldrd	r8, r7, [sp, #56]	; 0x38
  if (tonumeral(e2, NULL) && luaK_exp2K(fs, e2)) {  /* K operand? */
   12ad2:	2100      	movs	r1, #0
                       expdesc *e1, expdesc *e2, int flip, int line) {
   12ad4:	4616      	mov	r6, r2
   12ad6:	4699      	mov	r9, r3
  if (tonumeral(e2, NULL) && luaK_exp2K(fs, e2)) {  /* K operand? */
   12ad8:	f7ff f8f4 	bl	11cc4 <tonumeral>
   12adc:	b1f0      	cbz	r0, 12b1c <codearith+0x5a>
  if (!hasjumps(e)) {
   12ade:	e9d9 2304 	ldrd	r2, r3, [r9, #16]
   12ae2:	429a      	cmp	r2, r3
   12ae4:	d11a      	bne.n	12b1c <codearith+0x5a>
   12ae6:	4649      	mov	r1, r9
   12ae8:	4628      	mov	r0, r5
   12aea:	f7ff f9ac 	bl	11e46 <luaK_exp2K.part.0>
  if (tonumeral(e2, NULL) && luaK_exp2K(fs, e2)) {  /* K operand? */
   12aee:	b1a8      	cbz	r0, 12b1c <codearith+0x5a>
    finishbinexpval(fs, e1, e2, op, v2, flip, line, OP_MMBINK, event);
   12af0:	2230      	movs	r2, #48	; 0x30
    OpCode op = cast(OpCode, opr + OP_ADDK);
   12af2:	f104 0316 	add.w	r3, r4, #22
    finishbinexpval(fs, e1, e2, op, v2, flip, line, OP_MMBINK, event);
   12af6:	e9cd 7202 	strd	r7, r2, [sp, #8]
  TMS event = cast(TMS, opr + TM_ADD);
   12afa:	3406      	adds	r4, #6
    finishbinexpval(fs, e1, e2, op, v2, flip, line, OP_MMBINK, event);
   12afc:	f8d9 2008 	ldr.w	r2, [r9, #8]
   12b00:	b2e4      	uxtb	r4, r4
   12b02:	9200      	str	r2, [sp, #0]
   12b04:	4631      	mov	r1, r6
   12b06:	464a      	mov	r2, r9
   12b08:	4628      	mov	r0, r5
   12b0a:	9404      	str	r4, [sp, #16]
   12b0c:	f8cd 8004 	str.w	r8, [sp, #4]
   12b10:	b2db      	uxtb	r3, r3
   12b12:	f7ff ff43 	bl	1299c <finishbinexpval>
}
   12b16:	b007      	add	sp, #28
   12b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    OpCode op = cast(OpCode, opr + OP_ADD);
   12b1c:	3422      	adds	r4, #34	; 0x22
   12b1e:	b2e4      	uxtb	r4, r4
    if (flip)
   12b20:	f1b8 0f00 	cmp.w	r8, #0
   12b24:	d003      	beq.n	12b2e <codearith+0x6c>
      swapexps(e1, e2);  /* back to original order */
   12b26:	4649      	mov	r1, r9
   12b28:	4630      	mov	r0, r6
   12b2a:	f7ff f85e 	bl	11bea <swapexps>
    codebinexpval(fs, op, e1, e2, line);  /* use standard operators */
   12b2e:	464b      	mov	r3, r9
   12b30:	4632      	mov	r2, r6
   12b32:	4621      	mov	r1, r4
   12b34:	4628      	mov	r0, r5
   12b36:	970e      	str	r7, [sp, #56]	; 0x38
}
   12b38:	b007      	add	sp, #28
   12b3a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    codebinexpval(fs, op, e1, e2, line);  /* use standard operators */
   12b3e:	f7ff bfa4 	b.w	12a8a <codebinexpval>

00012b42 <luaK_settablesize>:


void luaK_settablesize (FuncState *fs, int pc, int ra, int asize, int hsize) {
   12b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12b46:	4605      	mov	r5, r0
   12b48:	461c      	mov	r4, r3
  Instruction *inst = &fs->f->code[pc];
   12b4a:	682b      	ldr	r3, [r5, #0]
void luaK_settablesize (FuncState *fs, int pc, int ra, int asize, int hsize) {
   12b4c:	9806      	ldr	r0, [sp, #24]
  Instruction *inst = &fs->f->code[pc];
   12b4e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
void luaK_settablesize (FuncState *fs, int pc, int ra, int asize, int hsize) {
   12b50:	460e      	mov	r6, r1
   12b52:	4690      	mov	r8, r2
  Instruction *inst = &fs->f->code[pc];
   12b54:	eb07 0581 	add.w	r5, r7, r1, lsl #2
  int rb = (hsize != 0) ? luaO_ceillog2(hsize) + 1 : 0;  /* hash size */
   12b58:	b110      	cbz	r0, 12b60 <luaK_settablesize+0x1e>
   12b5a:	f7f3 fcf5 	bl	6548 <luaO_ceillog2>
   12b5e:	3001      	adds	r0, #1
  int extra = asize / (MAXARG_C + 1);  /* higher bits of array size */
  int rc = asize % (MAXARG_C + 1);  /* lower bits of array size */
   12b60:	4262      	negs	r2, r4
  int k = (extra > 0);  /* true iff needs extra argument */
  *inst = CREATE_ABCk(OP_NEWTABLE, ra, rb, rc, k);
   12b62:	ea4f 4300 	mov.w	r3, r0, lsl #16
  int rc = asize % (MAXARG_C + 1);  /* lower bits of array size */
   12b66:	b2d2      	uxtb	r2, r2
   12b68:	b2e0      	uxtb	r0, r4
  *inst = CREATE_ABCk(OP_NEWTABLE, ra, rb, rc, k);
   12b6a:	ea43 13c8 	orr.w	r3, r3, r8, lsl #7
  int rc = asize % (MAXARG_C + 1);  /* lower bits of array size */
   12b6e:	bf58      	it	pl
   12b70:	4250      	negpl	r0, r2
  int k = (extra > 0);  /* true iff needs extra argument */
   12b72:	2cff      	cmp	r4, #255	; 0xff
  *inst = CREATE_ABCk(OP_NEWTABLE, ra, rb, rc, k);
   12b74:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  int k = (extra > 0);  /* true iff needs extra argument */
   12b78:	bfd4      	ite	le
   12b7a:	2000      	movle	r0, #0
   12b7c:	2001      	movgt	r0, #1
  int extra = asize / (MAXARG_C + 1);  /* higher bits of array size */
   12b7e:	2c00      	cmp	r4, #0
   12b80:	bfb8      	it	lt
   12b82:	34ff      	addlt	r4, #255	; 0xff
   12b84:	1224      	asrs	r4, r4, #8
  *inst = CREATE_ABCk(OP_NEWTABLE, ra, rb, rc, k);
   12b86:	ea43 33c0 	orr.w	r3, r3, r0, lsl #15
  *(inst + 1) = CREATE_Ax(OP_EXTRAARG, extra);
   12b8a:	01e4      	lsls	r4, r4, #7
  *inst = CREATE_ABCk(OP_NEWTABLE, ra, rb, rc, k);
   12b8c:	f043 0313 	orr.w	r3, r3, #19
  *(inst + 1) = CREATE_Ax(OP_EXTRAARG, extra);
   12b90:	f044 0452 	orr.w	r4, r4, #82	; 0x52
  *inst = CREATE_ABCk(OP_NEWTABLE, ra, rb, rc, k);
   12b94:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
  *(inst + 1) = CREATE_Ax(OP_EXTRAARG, extra);
   12b98:	606c      	str	r4, [r5, #4]
}
   12b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012b9e <luaK_setlist>:
** 'base' is register that keeps table;
** 'nelems' is #table plus those to be stored now;
** 'tostore' is number of values (in registers 'base + 1',...) to add to
** table (or LUA_MULTRET to add up to stack top).
*/
void luaK_setlist (FuncState *fs, int base, int nelems, int tostore) {
   12b9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12ba0:	4614      	mov	r4, r2
  lua_assert(tostore != 0 && tostore <= LFIELDS_PER_FLUSH);
  if (tostore == LUA_MULTRET)
    tostore = 0;
   12ba2:	1c5a      	adds	r2, r3, #1
   12ba4:	bf08      	it	eq
   12ba6:	2300      	moveq	r3, #0
  if (nelems <= MAXARG_C)
   12ba8:	2cff      	cmp	r4, #255	; 0xff
void luaK_setlist (FuncState *fs, int base, int nelems, int tostore) {
   12baa:	4606      	mov	r6, r0
   12bac:	460d      	mov	r5, r1
  if (nelems <= MAXARG_C)
   12bae:	dc0b      	bgt.n	12bc8 <luaK_setlist+0x2a>
    luaK_codeABC(fs, OP_SETLIST, base, tostore, nelems);
   12bb0:	2200      	movs	r2, #0
   12bb2:	e9cd 4200 	strd	r4, r2, [sp]
   12bb6:	460a      	mov	r2, r1
   12bb8:	214e      	movs	r1, #78	; 0x4e
   12bba:	f7ff fa6a 	bl	12092 <luaK_codeABCk>
    int extra = nelems / (MAXARG_C + 1);
    nelems %= (MAXARG_C + 1);
    luaK_codeABCk(fs, OP_SETLIST, base, tostore, nelems, 1);
    codeextraarg(fs, extra);
  }
  fs->freereg = base + 1;  /* free registers with list values */
   12bbe:	3501      	adds	r5, #1
   12bc0:	f886 5034 	strb.w	r5, [r6, #52]	; 0x34
}
   12bc4:	b002      	add	sp, #8
   12bc6:	bd70      	pop	{r4, r5, r6, pc}
    luaK_codeABCk(fs, OP_SETLIST, base, tostore, nelems, 1);
   12bc8:	2201      	movs	r2, #1
   12bca:	9201      	str	r2, [sp, #4]
    nelems %= (MAXARG_C + 1);
   12bcc:	b2e2      	uxtb	r2, r4
    int extra = nelems / (MAXARG_C + 1);
   12bce:	1224      	asrs	r4, r4, #8
    luaK_codeABCk(fs, OP_SETLIST, base, tostore, nelems, 1);
   12bd0:	9200      	str	r2, [sp, #0]
  return luaK_code(fs, CREATE_Ax(OP_EXTRAARG, a));
   12bd2:	01e4      	lsls	r4, r4, #7
    luaK_codeABCk(fs, OP_SETLIST, base, tostore, nelems, 1);
   12bd4:	460a      	mov	r2, r1
   12bd6:	214e      	movs	r1, #78	; 0x4e
   12bd8:	f7ff fa5b 	bl	12092 <luaK_codeABCk>
  return luaK_code(fs, CREATE_Ax(OP_EXTRAARG, a));
   12bdc:	4630      	mov	r0, r6
   12bde:	f044 0152 	orr.w	r1, r4, #82	; 0x52
   12be2:	f7f1 fe17 	bl	4814 <luaK_code>
   12be6:	e7ea      	b.n	12bbe <luaK_setlist+0x20>

00012be8 <luaK_finish>:

/*
** Do a final pass over the code of a function, doing small peephole
** optimizations and adjustments.
*/
void luaK_finish (FuncState *fs) {
   12be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12bea:	4605      	mov	r5, r0
  int i;
  Proto *p = fs->f;
  for (i = 0; i < fs->pc; i++) {
   12bec:	2400      	movs	r4, #0
  Proto *p = fs->f;
   12bee:	6806      	ldr	r6, [r0, #0]
  for (i = 0; i < fs->pc; i++) {
   12bf0:	692b      	ldr	r3, [r5, #16]
   12bf2:	42a3      	cmp	r3, r4
   12bf4:	dc00      	bgt.n	12bf8 <luaK_finish+0x10>
        break;
      }
      default: break;
    }
  }
}
   12bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Instruction *pc = &p->code[i];
   12bf8:	6b71      	ldr	r1, [r6, #52]	; 0x34
   12bfa:	00a3      	lsls	r3, r4, #2
    switch (GET_OPCODE(*pc)) {
   12bfc:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   12c00:	f002 007f 	and.w	r0, r2, #127	; 0x7f
   12c04:	2846      	cmp	r0, #70	; 0x46
   12c06:	dc05      	bgt.n	12c14 <luaK_finish+0x2c>
   12c08:	2844      	cmp	r0, #68	; 0x44
   12c0a:	dc11      	bgt.n	12c30 <luaK_finish+0x48>
   12c0c:	2838      	cmp	r0, #56	; 0x38
   12c0e:	d01e      	beq.n	12c4e <luaK_finish+0x66>
  for (i = 0; i < fs->pc; i++) {
   12c10:	3401      	adds	r4, #1
   12c12:	e7ed      	b.n	12bf0 <luaK_finish+0x8>
    switch (GET_OPCODE(*pc)) {
   12c14:	3847      	subs	r0, #71	; 0x47
   12c16:	2801      	cmp	r0, #1
   12c18:	d8fa      	bhi.n	12c10 <luaK_finish+0x28>
        if (!(fs->needclose || p->is_vararg))
   12c1a:	f895 0036 	ldrb.w	r0, [r5, #54]	; 0x36
   12c1e:	b910      	cbnz	r0, 12c26 <luaK_finish+0x3e>
   12c20:	79f0      	ldrb	r0, [r6, #7]
   12c22:	2800      	cmp	r0, #0
   12c24:	d0f4      	beq.n	12c10 <luaK_finish+0x28>
        SET_OPCODE(*pc, OP_RETURN);
   12c26:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   12c2a:	f042 0246 	orr.w	r2, r2, #70	; 0x46
   12c2e:	50ca      	str	r2, [r1, r3]
        if (fs->needclose)
   12c30:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
   12c34:	b11a      	cbz	r2, 12c3e <luaK_finish+0x56>
          SETARG_k(*pc, 1);  /* signal that it needs to close */
   12c36:	58ca      	ldr	r2, [r1, r3]
   12c38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   12c3c:	50ca      	str	r2, [r1, r3]
        if (p->is_vararg)
   12c3e:	79f2      	ldrb	r2, [r6, #7]
   12c40:	2a00      	cmp	r2, #0
   12c42:	d0e5      	beq.n	12c10 <luaK_finish+0x28>
          SETARG_C(*pc, p->numparams + 1);  /* signal that it is vararg */
   12c44:	79b2      	ldrb	r2, [r6, #6]
   12c46:	440b      	add	r3, r1
   12c48:	3201      	adds	r2, #1
   12c4a:	70da      	strb	r2, [r3, #3]
   12c4c:	e7e0      	b.n	12c10 <luaK_finish+0x28>
    switch (GET_OPCODE(*pc)) {
   12c4e:	4622      	mov	r2, r4
   12c50:	2064      	movs	r0, #100	; 0x64
    Instruction pc = code[i];
   12c52:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    if (GET_OPCODE(pc) != OP_JMP)
   12c56:	f003 077f 	and.w	r7, r3, #127	; 0x7f
   12c5a:	2f38      	cmp	r7, #56	; 0x38
   12c5c:	d106      	bne.n	12c6c <luaK_finish+0x84>
       i += GETARG_sJ(pc) + 1;
   12c5e:	09db      	lsrs	r3, r3, #7
   12c60:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   12c64:	3302      	adds	r3, #2
  for (count = 0; count < 100; count++) {  /* avoid infinite loops */
   12c66:	3801      	subs	r0, #1
       i += GETARG_sJ(pc) + 1;
   12c68:	441a      	add	r2, r3
  for (count = 0; count < 100; count++) {  /* avoid infinite loops */
   12c6a:	d1f2      	bne.n	12c52 <luaK_finish+0x6a>
        fixjump(fs, i, target);
   12c6c:	4621      	mov	r1, r4
   12c6e:	4628      	mov	r0, r5
   12c70:	f7f1 fda4 	bl	47bc <fixjump>
        break;
   12c74:	e7cc      	b.n	12c10 <luaK_finish+0x28>

00012c76 <currentpc>:
  return pcRel(ci->u.l.savedpc, ci_func(ci)->p);
   12c76:	6803      	ldr	r3, [r0, #0]
   12c78:	6900      	ldr	r0, [r0, #16]
   12c7a:	681b      	ldr	r3, [r3, #0]
   12c7c:	68db      	ldr	r3, [r3, #12]
   12c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12c80:	1ac0      	subs	r0, r0, r3
   12c82:	1080      	asrs	r0, r0, #2
}
   12c84:	3801      	subs	r0, #1
   12c86:	4770      	bx	lr

00012c88 <luaG_getfuncline>:
int luaG_getfuncline (const Proto *f, int pc) {
   12c88:	b570      	push	{r4, r5, r6, lr}
  if (f->lineinfo == NULL)  /* no debug information? */
   12c8a:	6c04      	ldr	r4, [r0, #64]	; 0x40
   12c8c:	b30c      	cbz	r4, 12cd2 <luaG_getfuncline+0x4a>
  if (f->sizeabslineinfo == 0 || pc < f->abslineinfo[0].pc) {
   12c8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   12c90:	b11d      	cbz	r5, 12c9a <luaG_getfuncline+0x12>
   12c92:	6c42      	ldr	r2, [r0, #68]	; 0x44
   12c94:	6813      	ldr	r3, [r2, #0]
   12c96:	4299      	cmp	r1, r3
   12c98:	da07      	bge.n	12caa <luaG_getfuncline+0x22>
    *basepc = -1;  /* start from the beginning */
   12c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return f->linedefined;
   12c9e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   12ca0:	4423      	add	r3, r4
    while (basepc++ < pc) {  /* walk until given instruction */
   12ca2:	1b1a      	subs	r2, r3, r4
   12ca4:	428a      	cmp	r2, r1
   12ca6:	db10      	blt.n	12cca <luaG_getfuncline+0x42>
}
   12ca8:	bd70      	pop	{r4, r5, r6, pc}
    int i = cast_uint(pc) / MAXIWTHABS - 1;  /* get an estimate */
   12caa:	09cb      	lsrs	r3, r1, #7
   12cac:	3b01      	subs	r3, #1
    while (i + 1 < f->sizeabslineinfo && pc >= f->abslineinfo[i + 1].pc)
   12cae:	4618      	mov	r0, r3
   12cb0:	3301      	adds	r3, #1
   12cb2:	429d      	cmp	r5, r3
   12cb4:	dd03      	ble.n	12cbe <luaG_getfuncline+0x36>
   12cb6:	f852 6033 	ldr.w	r6, [r2, r3, lsl #3]
   12cba:	42b1      	cmp	r1, r6
   12cbc:	daf7      	bge.n	12cae <luaG_getfuncline+0x26>
    *basepc = f->abslineinfo[i].pc;
   12cbe:	eb02 05c0 	add.w	r5, r2, r0, lsl #3
   12cc2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
    return f->abslineinfo[i].line;
   12cc6:	6868      	ldr	r0, [r5, #4]
   12cc8:	e7ea      	b.n	12ca0 <luaG_getfuncline+0x18>
      baseline += f->lineinfo[basepc];  /* correct line */
   12cca:	f913 2f01 	ldrsb.w	r2, [r3, #1]!
   12cce:	4410      	add	r0, r2
   12cd0:	e7e7      	b.n	12ca2 <luaG_getfuncline+0x1a>
    return -1;
   12cd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12cd6:	e7e7      	b.n	12ca8 <luaG_getfuncline+0x20>

00012cd8 <getcurrentline>:
static int getcurrentline (CallInfo *ci) {
   12cd8:	4602      	mov	r2, r0
   12cda:	b508      	push	{r3, lr}
  return luaG_getfuncline(ci_func(ci)->p, currentpc(ci));
   12cdc:	f7ff ffcb 	bl	12c76 <currentpc>
   12ce0:	6813      	ldr	r3, [r2, #0]
   12ce2:	4601      	mov	r1, r0
   12ce4:	681b      	ldr	r3, [r3, #0]
   12ce6:	68d8      	ldr	r0, [r3, #12]
}
   12ce8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return luaG_getfuncline(ci_func(ci)->p, currentpc(ci));
   12cec:	f7ff bfcc 	b.w	12c88 <luaG_getfuncline>

00012cf0 <luaG_errormsg>:
l_noret luaG_errormsg (lua_State *L) {
   12cf0:	b508      	push	{r3, lr}
  if (L->errfunc != 0) {  /* is there an error handling function? */
   12cf2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
l_noret luaG_errormsg (lua_State *L) {
   12cf4:	4604      	mov	r4, r0
  if (L->errfunc != 0) {  /* is there an error handling function? */
   12cf6:	b1bb      	cbz	r3, 12d28 <luaG_errormsg+0x38>
    setobjs2s(L, L->top, L->top - 1);  /* move argument */
   12cf8:	68c1      	ldr	r1, [r0, #12]
    StkId errfunc = restorestack(L, L->errfunc);
   12cfa:	69c5      	ldr	r5, [r0, #28]
   12cfc:	441d      	add	r5, r3
    setobjs2s(L, L->top, L->top - 1);  /* move argument */
   12cfe:	e951 2304 	ldrd	r2, r3, [r1, #-16]
   12d02:	e9c1 2300 	strd	r2, r3, [r1]
   12d06:	f811 3c08 	ldrb.w	r3, [r1, #-8]
   12d0a:	720b      	strb	r3, [r1, #8]
    setobjs2s(L, L->top - 1, errfunc);  /* push function */
   12d0c:	e9d5 2300 	ldrd	r2, r3, [r5]
   12d10:	e941 2304 	strd	r2, r3, [r1, #-16]
   12d14:	7a2b      	ldrb	r3, [r5, #8]
    luaD_callnoyield(L, L->top - 2, 1);  /* call it */
   12d16:	2201      	movs	r2, #1
    setobjs2s(L, L->top - 1, errfunc);  /* push function */
   12d18:	f801 3c08 	strb.w	r3, [r1, #-8]
    L->top++;  /* assume EXTRA_STACK */
   12d1c:	f101 0310 	add.w	r3, r1, #16
   12d20:	60c3      	str	r3, [r0, #12]
    luaD_callnoyield(L, L->top - 2, 1);  /* call it */
   12d22:	3910      	subs	r1, #16
   12d24:	f000 fb88 	bl	13438 <luaD_callnoyield>
  luaD_throw(L, LUA_ERRRUN);
   12d28:	2102      	movs	r1, #2
   12d2a:	4620      	mov	r0, r4
   12d2c:	f000 f831 	bl	12d92 <luaD_throw>

00012d30 <luaG_runerror>:
l_noret luaG_runerror (lua_State *L, const char *fmt, ...) {
   12d30:	b40e      	push	{r1, r2, r3}
  luaC_checkGC(L);  /* error message uses memory */
   12d32:	e9d0 3604 	ldrd	r3, r6, [r0, #16]
   12d36:	68db      	ldr	r3, [r3, #12]
l_noret luaG_runerror (lua_State *L, const char *fmt, ...) {
   12d38:	4604      	mov	r4, r0
  luaC_checkGC(L);  /* error message uses memory */
   12d3a:	2b00      	cmp	r3, #0
l_noret luaG_runerror (lua_State *L, const char *fmt, ...) {
   12d3c:	b503      	push	{r0, r1, lr}
  luaC_checkGC(L);  /* error message uses memory */
   12d3e:	dd01      	ble.n	12d44 <luaG_runerror+0x14>
   12d40:	f001 fc99 	bl	14676 <luaC_step>
  va_start(argp, fmt);
   12d44:	aa04      	add	r2, sp, #16
  msg = luaO_pushvfstring(L, fmt, argp);  /* format message */
   12d46:	4620      	mov	r0, r4
   12d48:	9903      	ldr	r1, [sp, #12]
  va_start(argp, fmt);
   12d4a:	9201      	str	r2, [sp, #4]
  msg = luaO_pushvfstring(L, fmt, argp);  /* format message */
   12d4c:	f7f3 fce2 	bl	6714 <luaO_pushvfstring>
  if (isLua(ci))  /* if Lua function, add source:line information */
   12d50:	8c73      	ldrh	r3, [r6, #34]	; 0x22
  msg = luaO_pushvfstring(L, fmt, argp);  /* format message */
   12d52:	4605      	mov	r5, r0
  if (isLua(ci))  /* if Lua function, add source:line information */
   12d54:	079b      	lsls	r3, r3, #30
   12d56:	d40b      	bmi.n	12d70 <luaG_runerror+0x40>
    luaG_addinfo(L, msg, ci_func(ci)->p->source, getcurrentline(ci));
   12d58:	4630      	mov	r0, r6
   12d5a:	f7ff ffbd 	bl	12cd8 <getcurrentline>
   12d5e:	6832      	ldr	r2, [r6, #0]
   12d60:	4603      	mov	r3, r0
   12d62:	6812      	ldr	r2, [r2, #0]
   12d64:	4629      	mov	r1, r5
   12d66:	68d2      	ldr	r2, [r2, #12]
   12d68:	4620      	mov	r0, r4
   12d6a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   12d6c:	f7f2 fa26 	bl	51bc <luaG_addinfo>
  luaG_errormsg(L);
   12d70:	4620      	mov	r0, r4
   12d72:	f7ff ffbd 	bl	12cf0 <luaG_errormsg>

00012d76 <luaG_opinterror>:
                         const TValue *p2, const char *msg) {
   12d76:	b508      	push	{r3, lr}
  if (!ttisnumber(p1))  /* first operand is wrong? */
   12d78:	7a0c      	ldrb	r4, [r1, #8]
   12d7a:	f004 040f 	and.w	r4, r4, #15
   12d7e:	2c03      	cmp	r4, #3
   12d80:	bf08      	it	eq
   12d82:	4611      	moveq	r1, r2
  luaG_typeerror(L, p2, msg);
   12d84:	461a      	mov	r2, r3
   12d86:	f7f2 fa3b 	bl	5200 <luaG_typeerror>

00012d8a <closepaux>:
  luaF_close(L, pcl->level, pcl->status, 0);
   12d8a:	2300      	movs	r3, #0
   12d8c:	c906      	ldmia	r1, {r1, r2}
   12d8e:	f000 bc0f 	b.w	135b0 <luaF_close>

00012d92 <luaD_throw>:
l_noret luaD_throw (lua_State *L, int errcode) {
   12d92:	b508      	push	{r3, lr}
  if (L->errorJmp) {  /* thread has an error handler? */
   12d94:	6b03      	ldr	r3, [r0, #48]	; 0x30
l_noret luaD_throw (lua_State *L, int errcode) {
   12d96:	4604      	mov	r4, r0
  if (L->errorJmp) {  /* thread has an error handler? */
   12d98:	b123      	cbz	r3, 12da4 <luaD_throw+0x12>
    L->errorJmp->status = errcode;  /* set status */
   12d9a:	6619      	str	r1, [r3, #96]	; 0x60
    LUAI_THROW(L, L->errorJmp);  /* jump to it */
   12d9c:	1d18      	adds	r0, r3, #4
   12d9e:	2101      	movs	r1, #1
   12da0:	f7ed feaa 	bl	af8 <longjmp>
    global_State *g = G(L);
   12da4:	6905      	ldr	r5, [r0, #16]
    errcode = luaE_resetthread(L, errcode);  /* close all upvalues */
   12da6:	f002 fd5e 	bl	15866 <luaE_resetthread>
   12daa:	4601      	mov	r1, r0
    if (g->mainthread->errorJmp) {  /* main thread has a handler? */
   12dac:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   12db0:	6b03      	ldr	r3, [r0, #48]	; 0x30
   12db2:	b16b      	cbz	r3, 12dd0 <luaD_throw+0x3e>
      setobjs2s(L, g->mainthread->top++, L->top - 1);  /* copy error obj. */
   12db4:	68c5      	ldr	r5, [r0, #12]
   12db6:	f105 0310 	add.w	r3, r5, #16
   12dba:	60c3      	str	r3, [r0, #12]
   12dbc:	68e4      	ldr	r4, [r4, #12]
   12dbe:	e954 2304 	ldrd	r2, r3, [r4, #-16]
   12dc2:	e9c5 2300 	strd	r2, r3, [r5]
   12dc6:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   12dca:	722b      	strb	r3, [r5, #8]
      luaD_throw(g->mainthread, errcode);  /* re-throw in main thread */
   12dcc:	f7ff ffe1 	bl	12d92 <luaD_throw>
      if (g->panic) {  /* panic function? */
   12dd0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   12dd4:	b10b      	cbz	r3, 12dda <luaD_throw+0x48>
        g->panic(L);  /* call panic function (last chance to jump out) */
   12dd6:	4620      	mov	r0, r4
   12dd8:	4798      	blx	r3
      abort();
   12dda:	f003 feba 	bl	16b52 <abort>

00012dde <luaD_rawrunprotected>:
int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {
   12dde:	b500      	push	{lr}
  l_uint32 oldnCcalls = L->nCcalls;
   12de0:	6e03      	ldr	r3, [r0, #96]	; 0x60
int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {
   12de2:	b09f      	sub	sp, #124	; 0x7c
  l_uint32 oldnCcalls = L->nCcalls;
   12de4:	9301      	str	r3, [sp, #4]
  lj.status = LUA_OK;
   12de6:	2300      	movs	r3, #0
   12de8:	931d      	str	r3, [sp, #116]	; 0x74
  lj.previous = L->errorJmp;  /* chain new error handler */
   12dea:	6b03      	ldr	r3, [r0, #48]	; 0x30
int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {
   12dec:	9000      	str	r0, [sp, #0]
  lj.previous = L->errorJmp;  /* chain new error handler */
   12dee:	9305      	str	r3, [sp, #20]
  L->errorJmp = &lj;
   12df0:	ab05      	add	r3, sp, #20
   12df2:	6303      	str	r3, [r0, #48]	; 0x30
  LUAI_TRY(L, &lj,
   12df4:	a806      	add	r0, sp, #24
int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {
   12df6:	e9cd 1202 	strd	r1, r2, [sp, #8]
  LUAI_TRY(L, &lj,
   12dfa:	f7ed fe77 	bl	aec <setjmp>
   12dfe:	b918      	cbnz	r0, 12e08 <luaD_rawrunprotected+0x2a>
   12e00:	9903      	ldr	r1, [sp, #12]
   12e02:	9800      	ldr	r0, [sp, #0]
   12e04:	9b02      	ldr	r3, [sp, #8]
   12e06:	4798      	blx	r3
  L->errorJmp = lj.previous;  /* restore old error handler */
   12e08:	9a00      	ldr	r2, [sp, #0]
   12e0a:	9b05      	ldr	r3, [sp, #20]
  return lj.status;
   12e0c:	981d      	ldr	r0, [sp, #116]	; 0x74
  L->errorJmp = lj.previous;  /* restore old error handler */
   12e0e:	6313      	str	r3, [r2, #48]	; 0x30
  L->nCcalls = oldnCcalls;
   12e10:	4613      	mov	r3, r2
   12e12:	9a01      	ldr	r2, [sp, #4]
   12e14:	661a      	str	r2, [r3, #96]	; 0x60
}
   12e16:	b01f      	add	sp, #124	; 0x7c
   12e18:	f85d fb04 	ldr.w	pc, [sp], #4

00012e1c <luaD_reallocstack>:
int luaD_reallocstack (lua_State *L, int newsize, int raiseerror) {
   12e1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e20:	4692      	mov	sl, r2
  int oldsize = stacksize(L);
   12e22:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   12e26:	eba2 0803 	sub.w	r8, r2, r3
  StkId newstack = luaM_reallocvector(L, NULL, 0,
   12e2a:	2200      	movs	r2, #0
   12e2c:	f101 0905 	add.w	r9, r1, #5
   12e30:	ea4f 1709 	mov.w	r7, r9, lsl #4
int luaD_reallocstack (lua_State *L, int newsize, int raiseerror) {
   12e34:	468b      	mov	fp, r1
  StkId newstack = luaM_reallocvector(L, NULL, 0,
   12e36:	463b      	mov	r3, r7
   12e38:	4611      	mov	r1, r2
int luaD_reallocstack (lua_State *L, int newsize, int raiseerror) {
   12e3a:	4604      	mov	r4, r0
  StkId newstack = luaM_reallocvector(L, NULL, 0,
   12e3c:	f001 fe4e 	bl	14adc <luaM_realloc_>
  int oldsize = stacksize(L);
   12e40:	ea4f 1628 	mov.w	r6, r8, asr #4
  if (l_unlikely(newstack == NULL)) {  /* reallocation failed? */
   12e44:	4605      	mov	r5, r0
   12e46:	b930      	cbnz	r0, 12e56 <luaD_reallocstack+0x3a>
    if (raiseerror)
   12e48:	f1ba 0f00 	cmp.w	sl, #0
   12e4c:	d029      	beq.n	12ea2 <luaD_reallocstack+0x86>
      luaM_error(L);
   12e4e:	2104      	movs	r1, #4
   12e50:	4620      	mov	r0, r4
   12e52:	f7ff ff9e 	bl	12d92 <luaD_throw>
  i = ((oldsize <= newsize) ? oldsize : newsize) + EXTRA_STACK;
   12e56:	455e      	cmp	r6, fp
   12e58:	bfa8      	it	ge
   12e5a:	465e      	movge	r6, fp
   12e5c:	3605      	adds	r6, #5
   12e5e:	0132      	lsls	r2, r6, #4
   12e60:	69e1      	ldr	r1, [r4, #28]
   12e62:	f003 ff0b 	bl	16c7c <memcpy>
    setnilvalue(s2v(newstack + i)); /* erase new segment */
   12e66:	2200      	movs	r2, #0
   12e68:	f105 0308 	add.w	r3, r5, #8
  for (; i < newsize + EXTRA_STACK; i++)
   12e6c:	45b1      	cmp	r9, r6
   12e6e:	dc1b      	bgt.n	12ea8 <luaD_reallocstack+0x8c>
  correctstack(L, L->stack, newstack);
   12e70:	69e1      	ldr	r1, [r4, #28]
  L->top = (L->top - oldstack) + newstack;
   12e72:	68e3      	ldr	r3, [r4, #12]
   12e74:	1a5b      	subs	r3, r3, r1
   12e76:	442b      	add	r3, r5
   12e78:	60e3      	str	r3, [r4, #12]
  L->tbclist = (L->tbclist - oldstack) + newstack;
   12e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12e7c:	1a5b      	subs	r3, r3, r1
   12e7e:	442b      	add	r3, r5
   12e80:	6263      	str	r3, [r4, #36]	; 0x24
  for (up = L->openupval; up != NULL; up = up->u.open.next)
   12e82:	6a23      	ldr	r3, [r4, #32]
   12e84:	b9a3      	cbnz	r3, 12eb0 <luaD_reallocstack+0x94>
      ci->u.l.trap = 1;  /* signal to update 'trap' in 'luaV_execute' */
   12e86:	2001      	movs	r0, #1
  for (ci = L->ci; ci != NULL; ci = ci->previous) {
   12e88:	6962      	ldr	r2, [r4, #20]
   12e8a:	b9ba      	cbnz	r2, 12ebc <luaD_reallocstack+0xa0>
  return 1;
   12e8c:	f04f 0a01 	mov.w	sl, #1
  luaM_freearray(L, L->stack, oldsize + EXTRA_STACK);
   12e90:	4620      	mov	r0, r4
   12e92:	f108 0250 	add.w	r2, r8, #80	; 0x50
  L->stack_last = L->stack + newsize;
   12e96:	3f50      	subs	r7, #80	; 0x50
  luaM_freearray(L, L->stack, oldsize + EXTRA_STACK);
   12e98:	f001 fe15 	bl	14ac6 <luaM_free_>
  L->stack = newstack;
   12e9c:	61e5      	str	r5, [r4, #28]
  L->stack_last = L->stack + newsize;
   12e9e:	443d      	add	r5, r7
   12ea0:	61a5      	str	r5, [r4, #24]
}
   12ea2:	4650      	mov	r0, sl
   12ea4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    setnilvalue(s2v(newstack + i)); /* erase new segment */
   12ea8:	0131      	lsls	r1, r6, #4
   12eaa:	545a      	strb	r2, [r3, r1]
  for (; i < newsize + EXTRA_STACK; i++)
   12eac:	3601      	adds	r6, #1
   12eae:	e7dd      	b.n	12e6c <luaD_reallocstack+0x50>
    up->v = s2v((uplevel(up) - oldstack) + newstack);
   12eb0:	689a      	ldr	r2, [r3, #8]
   12eb2:	1a52      	subs	r2, r2, r1
   12eb4:	442a      	add	r2, r5
   12eb6:	609a      	str	r2, [r3, #8]
  for (up = L->openupval; up != NULL; up = up->u.open.next)
   12eb8:	691b      	ldr	r3, [r3, #16]
   12eba:	e7e3      	b.n	12e84 <luaD_reallocstack+0x68>
    ci->top = (ci->top - oldstack) + newstack;
   12ebc:	6853      	ldr	r3, [r2, #4]
   12ebe:	1a5b      	subs	r3, r3, r1
   12ec0:	442b      	add	r3, r5
   12ec2:	6053      	str	r3, [r2, #4]
    ci->func = (ci->func - oldstack) + newstack;
   12ec4:	6813      	ldr	r3, [r2, #0]
   12ec6:	1a5b      	subs	r3, r3, r1
   12ec8:	442b      	add	r3, r5
   12eca:	6013      	str	r3, [r2, #0]
    if (isLua(ci))
   12ecc:	8c53      	ldrh	r3, [r2, #34]	; 0x22
   12ece:	079b      	lsls	r3, r3, #30
      ci->u.l.trap = 1;  /* signal to update 'trap' in 'luaV_execute' */
   12ed0:	bf58      	it	pl
   12ed2:	6150      	strpl	r0, [r2, #20]
  for (ci = L->ci; ci != NULL; ci = ci->previous) {
   12ed4:	6892      	ldr	r2, [r2, #8]
   12ed6:	e7d8      	b.n	12e8a <luaD_reallocstack+0x6e>

00012ed8 <luaD_inctop>:
  luaD_checkstack(L, 1);
   12ed8:	6983      	ldr	r3, [r0, #24]
   12eda:	68c2      	ldr	r2, [r0, #12]
void luaD_inctop (lua_State *L) {
   12edc:	b510      	push	{r4, lr}
  luaD_checkstack(L, 1);
   12ede:	1a9b      	subs	r3, r3, r2
   12ee0:	2b10      	cmp	r3, #16
void luaD_inctop (lua_State *L) {
   12ee2:	4604      	mov	r4, r0
  luaD_checkstack(L, 1);
   12ee4:	dc03      	bgt.n	12eee <luaD_inctop+0x16>
   12ee6:	2201      	movs	r2, #1
   12ee8:	4611      	mov	r1, r2
   12eea:	f7f2 fb1b 	bl	5524 <luaD_growstack>
  L->top++;
   12eee:	68e3      	ldr	r3, [r4, #12]
   12ef0:	3310      	adds	r3, #16
   12ef2:	60e3      	str	r3, [r4, #12]
}
   12ef4:	bd10      	pop	{r4, pc}

00012ef6 <luaD_hook>:
                              int ftransfer, int ntransfer) {
   12ef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  lua_Hook hook = L->hook;
   12efa:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
                              int ftransfer, int ntransfer) {
   12efe:	b09c      	sub	sp, #112	; 0x70
   12f00:	4604      	mov	r4, r0
   12f02:	9f24      	ldr	r7, [sp, #144]	; 0x90
  if (hook && L->allowhook) {  /* make sure there is a hook */
   12f04:	f1b9 0f00 	cmp.w	r9, #0
   12f08:	d040      	beq.n	12f8c <luaD_hook+0x96>
   12f0a:	79c0      	ldrb	r0, [r0, #7]
   12f0c:	2800      	cmp	r0, #0
   12f0e:	d03d      	beq.n	12f8c <luaD_hook+0x96>
    CallInfo *ci = L->ci;
   12f10:	6965      	ldr	r5, [r4, #20]
    ptrdiff_t top = savestack(L, L->top);  /* preserve original 'top' */
   12f12:	69e6      	ldr	r6, [r4, #28]
    ptrdiff_t ci_top = savestack(L, ci->top);  /* idem for 'ci->top' */
   12f14:	6868      	ldr	r0, [r5, #4]
    ptrdiff_t top = savestack(L, L->top);  /* preserve original 'top' */
   12f16:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    ar.event = event;
   12f1a:	9101      	str	r1, [sp, #4]
    ptrdiff_t top = savestack(L, L->top);  /* preserve original 'top' */
   12f1c:	ebac 0806 	sub.w	r8, ip, r6
    ar.currentline = line;
   12f20:	9207      	str	r2, [sp, #28]
    ptrdiff_t ci_top = savestack(L, ci->top);  /* idem for 'ci->top' */
   12f22:	1b86      	subs	r6, r0, r6
    ar.i_ci = ci;
   12f24:	951b      	str	r5, [sp, #108]	; 0x6c
    if (ntransfer != 0) {
   12f26:	2f00      	cmp	r7, #0
   12f28:	d033      	beq.n	12f92 <luaD_hook+0x9c>
      ci->u2.transferinfo.ntransfer = ntransfer;
   12f2a:	83ef      	strh	r7, [r5, #30]
      mask |= CIST_TRAN;  /* 'ci' has transfer information */
   12f2c:	f44f 7784 	mov.w	r7, #264	; 0x108
      ci->u2.transferinfo.ftransfer = ftransfer;
   12f30:	83ab      	strh	r3, [r5, #28]
    if (isLua(ci) && L->top < ci->top)
   12f32:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   12f34:	079b      	lsls	r3, r3, #30
   12f36:	d402      	bmi.n	12f3e <luaD_hook+0x48>
   12f38:	4584      	cmp	ip, r0
      L->top = ci->top;  /* protect entire activation register */
   12f3a:	bf38      	it	cc
   12f3c:	60e0      	strcc	r0, [r4, #12]
    luaD_checkstack(L, LUA_MINSTACK);  /* ensure minimum stack size */
   12f3e:	69a3      	ldr	r3, [r4, #24]
   12f40:	68e2      	ldr	r2, [r4, #12]
   12f42:	1a9b      	subs	r3, r3, r2
   12f44:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
   12f48:	dc04      	bgt.n	12f54 <luaD_hook+0x5e>
   12f4a:	2201      	movs	r2, #1
   12f4c:	2114      	movs	r1, #20
   12f4e:	4620      	mov	r0, r4
   12f50:	f7f2 fae8 	bl	5524 <luaD_growstack>
    if (ci->top < L->top + LUA_MINSTACK)
   12f54:	68e3      	ldr	r3, [r4, #12]
   12f56:	686a      	ldr	r2, [r5, #4]
   12f58:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   12f5c:	429a      	cmp	r2, r3
      ci->top = L->top + LUA_MINSTACK;
   12f5e:	bf38      	it	cc
   12f60:	606b      	strcc	r3, [r5, #4]
    L->allowhook = 0;  /* cannot call hooks inside a hook */
   12f62:	2300      	movs	r3, #0
   12f64:	71e3      	strb	r3, [r4, #7]
    ci->callstatus |= mask;
   12f66:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   12f68:	fa0f fa87 	sxth.w	sl, r7
   12f6c:	431f      	orrs	r7, r3
    (*hook)(L, &ar);
   12f6e:	4620      	mov	r0, r4
    ci->callstatus |= mask;
   12f70:	846f      	strh	r7, [r5, #34]	; 0x22
    (*hook)(L, &ar);
   12f72:	a901      	add	r1, sp, #4
   12f74:	47c8      	blx	r9
    L->allowhook = 1;
   12f76:	2301      	movs	r3, #1
   12f78:	71e3      	strb	r3, [r4, #7]
    ci->top = restorestack(L, ci_top);
   12f7a:	69e3      	ldr	r3, [r4, #28]
   12f7c:	441e      	add	r6, r3
    L->top = restorestack(L, top);
   12f7e:	4443      	add	r3, r8
    ci->top = restorestack(L, ci_top);
   12f80:	606e      	str	r6, [r5, #4]
    L->top = restorestack(L, top);
   12f82:	60e3      	str	r3, [r4, #12]
    ci->callstatus &= ~mask;
   12f84:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   12f86:	ea23 030a 	bic.w	r3, r3, sl
   12f8a:	846b      	strh	r3, [r5, #34]	; 0x22
}
   12f8c:	b01c      	add	sp, #112	; 0x70
   12f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int mask = CIST_HOOKED;
   12f92:	2708      	movs	r7, #8
   12f94:	e7cd      	b.n	12f32 <luaD_hook+0x3c>

00012f96 <rethook>:
  if (L->hookmask & LUA_MASKRET) {  /* is return hook on? */
   12f96:	6f03      	ldr	r3, [r0, #112]	; 0x70
static void rethook (lua_State *L, CallInfo *ci, int nres) {
   12f98:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (L->hookmask & LUA_MASKRET) {  /* is return hook on? */
   12f9a:	079b      	lsls	r3, r3, #30
static void rethook (lua_State *L, CallInfo *ci, int nres) {
   12f9c:	4605      	mov	r5, r0
   12f9e:	460c      	mov	r4, r1
  if (L->hookmask & LUA_MASKRET) {  /* is return hook on? */
   12fa0:	d51f      	bpl.n	12fe2 <rethook+0x4c>
    StkId firstres = L->top - nres;  /* index of first result */
   12fa2:	68c3      	ldr	r3, [r0, #12]
      Proto *p = ci_func(ci)->p;
   12fa4:	6809      	ldr	r1, [r1, #0]
    StkId firstres = L->top - nres;  /* index of first result */
   12fa6:	eba3 1002 	sub.w	r0, r3, r2, lsl #4
    if (isLua(ci)) {
   12faa:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   12fac:	079e      	lsls	r6, r3, #30
   12fae:	d427      	bmi.n	13000 <rethook+0x6a>
      Proto *p = ci_func(ci)->p;
   12fb0:	680b      	ldr	r3, [r1, #0]
   12fb2:	68de      	ldr	r6, [r3, #12]
      if (p->is_vararg)
   12fb4:	79f3      	ldrb	r3, [r6, #7]
   12fb6:	b11b      	cbz	r3, 12fc0 <rethook+0x2a>
        delta = ci->u.l.nextraargs + p->numparams + 1;
   12fb8:	69a3      	ldr	r3, [r4, #24]
   12fba:	79b6      	ldrb	r6, [r6, #6]
   12fbc:	3301      	adds	r3, #1
   12fbe:	4433      	add	r3, r6
    ci->func += delta;  /* if vararg, back to virtual 'func' */
   12fc0:	011e      	lsls	r6, r3, #4
   12fc2:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   12fc6:	6023      	str	r3, [r4, #0]
    ftransfer = cast(unsigned short, firstres - ci->func);
   12fc8:	1ac3      	subs	r3, r0, r3
    luaD_hook(L, LUA_HOOKRET, -1, ftransfer, nres);  /* call it */
   12fca:	9200      	str	r2, [sp, #0]
   12fcc:	f3c3 130f 	ubfx	r3, r3, #4, #16
   12fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12fd4:	2101      	movs	r1, #1
   12fd6:	4628      	mov	r0, r5
   12fd8:	f7ff ff8d 	bl	12ef6 <luaD_hook>
    ci->func -= delta;
   12fdc:	6823      	ldr	r3, [r4, #0]
   12fde:	1b9b      	subs	r3, r3, r6
   12fe0:	6023      	str	r3, [r4, #0]
  if (isLua(ci = ci->previous))
   12fe2:	68a3      	ldr	r3, [r4, #8]
   12fe4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   12fe6:	0792      	lsls	r2, r2, #30
   12fe8:	d408      	bmi.n	12ffc <rethook+0x66>
    L->oldpc = pcRel(ci->u.l.savedpc, ci_func(ci)->p);  /* set 'oldpc' */
   12fea:	681a      	ldr	r2, [r3, #0]
   12fec:	691b      	ldr	r3, [r3, #16]
   12fee:	6812      	ldr	r2, [r2, #0]
   12ff0:	68d2      	ldr	r2, [r2, #12]
   12ff2:	6b52      	ldr	r2, [r2, #52]	; 0x34
   12ff4:	1a9b      	subs	r3, r3, r2
   12ff6:	109b      	asrs	r3, r3, #2
   12ff8:	3b01      	subs	r3, #1
   12ffa:	666b      	str	r3, [r5, #100]	; 0x64
}
   12ffc:	b002      	add	sp, #8
   12ffe:	bd70      	pop	{r4, r5, r6, pc}
    int delta = 0;  /* correction for vararg functions */
   13000:	2300      	movs	r3, #0
   13002:	e7dd      	b.n	12fc0 <rethook+0x2a>

00013004 <luaD_hookcall>:
  L->oldpc = 0;  /* set 'oldpc' for new function */
   13004:	2200      	movs	r2, #0
  if (L->hookmask & LUA_MASKCALL) {  /* is call hook on? */
   13006:	6f03      	ldr	r3, [r0, #112]	; 0x70
void luaD_hookcall (lua_State *L, CallInfo *ci) {
   13008:	b513      	push	{r0, r1, r4, lr}
  if (L->hookmask & LUA_MASKCALL) {  /* is call hook on? */
   1300a:	07db      	lsls	r3, r3, #31
void luaD_hookcall (lua_State *L, CallInfo *ci) {
   1300c:	460c      	mov	r4, r1
  L->oldpc = 0;  /* set 'oldpc' for new function */
   1300e:	6642      	str	r2, [r0, #100]	; 0x64
  if (L->hookmask & LUA_MASKCALL) {  /* is call hook on? */
   13010:	d513      	bpl.n	1303a <luaD_hookcall+0x36>
    Proto *p = ci_func(ci)->p;
   13012:	6823      	ldr	r3, [r4, #0]
                                             : LUA_HOOKCALL;
   13014:	8c49      	ldrh	r1, [r1, #34]	; 0x22
    Proto *p = ci_func(ci)->p;
   13016:	681b      	ldr	r3, [r3, #0]
                                             : LUA_HOOKCALL;
   13018:	10c9      	asrs	r1, r1, #3
    Proto *p = ci_func(ci)->p;
   1301a:	68da      	ldr	r2, [r3, #12]
    ci->u.l.savedpc++;  /* hooks assume 'pc' is already incremented */
   1301c:	6923      	ldr	r3, [r4, #16]
    luaD_hook(L, event, -1, 1, p->numparams);
   1301e:	f001 0104 	and.w	r1, r1, #4
    ci->u.l.savedpc++;  /* hooks assume 'pc' is already incremented */
   13022:	3304      	adds	r3, #4
   13024:	6123      	str	r3, [r4, #16]
    luaD_hook(L, event, -1, 1, p->numparams);
   13026:	7993      	ldrb	r3, [r2, #6]
   13028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1302c:	9300      	str	r3, [sp, #0]
   1302e:	2301      	movs	r3, #1
   13030:	f7ff ff61 	bl	12ef6 <luaD_hook>
    ci->u.l.savedpc--;  /* correct 'pc' */
   13034:	6923      	ldr	r3, [r4, #16]
   13036:	3b04      	subs	r3, #4
   13038:	6123      	str	r3, [r4, #16]
}
   1303a:	b002      	add	sp, #8
   1303c:	bd10      	pop	{r4, pc}

0001303e <luaD_tryfuncTM>:
  checkstackGCp(L, 1, func);  /* space for metamethod */
   1303e:	6983      	ldr	r3, [r0, #24]
   13040:	68c2      	ldr	r2, [r0, #12]
StkId luaD_tryfuncTM (lua_State *L, StkId func) {
   13042:	b570      	push	{r4, r5, r6, lr}
  checkstackGCp(L, 1, func);  /* space for metamethod */
   13044:	1a9b      	subs	r3, r3, r2
   13046:	2b10      	cmp	r3, #16
StkId luaD_tryfuncTM (lua_State *L, StkId func) {
   13048:	4605      	mov	r5, r0
   1304a:	460c      	mov	r4, r1
  checkstackGCp(L, 1, func);  /* space for metamethod */
   1304c:	dc0e      	bgt.n	1306c <luaD_tryfuncTM+0x2e>
   1304e:	6903      	ldr	r3, [r0, #16]
   13050:	69c1      	ldr	r1, [r0, #28]
   13052:	68db      	ldr	r3, [r3, #12]
   13054:	1a64      	subs	r4, r4, r1
   13056:	2b00      	cmp	r3, #0
   13058:	dd01      	ble.n	1305e <luaD_tryfuncTM+0x20>
   1305a:	f001 fb0c 	bl	14676 <luaC_step>
   1305e:	2201      	movs	r2, #1
   13060:	4628      	mov	r0, r5
   13062:	4611      	mov	r1, r2
   13064:	f7f2 fa5e 	bl	5524 <luaD_growstack>
   13068:	69e9      	ldr	r1, [r5, #28]
   1306a:	440c      	add	r4, r1
  tm = luaT_gettmbyobj(L, s2v(func), TM_CALL);  /* (after previous GC) */
   1306c:	2217      	movs	r2, #23
   1306e:	4621      	mov	r1, r4
   13070:	4628      	mov	r0, r5
   13072:	f002 ff2d 	bl	15ed0 <luaT_gettmbyobj>
  if (l_unlikely(ttisnil(tm)))
   13076:	7a03      	ldrb	r3, [r0, #8]
   13078:	071b      	lsls	r3, r3, #28
   1307a:	d103      	bne.n	13084 <luaD_tryfuncTM+0x46>
    luaG_callerror(L, s2v(func));  /* nothing to call */
   1307c:	4621      	mov	r1, r4
   1307e:	4628      	mov	r0, r5
   13080:	f7f2 f926 	bl	52d0 <luaG_callerror>
  for (p = L->top; p > func; p--)  /* open space for metamethod */
   13084:	68ee      	ldr	r6, [r5, #12]
   13086:	4631      	mov	r1, r6
   13088:	428c      	cmp	r4, r1
   1308a:	d309      	bcc.n	130a0 <luaD_tryfuncTM+0x62>
  setobj2s(L, func, tm);  /* metamethod is the new function to be called */
   1308c:	e9d0 2300 	ldrd	r2, r3, [r0]
  L->top++;  /* stack space pre-allocated by the caller */
   13090:	3610      	adds	r6, #16
   13092:	60ee      	str	r6, [r5, #12]
  setobj2s(L, func, tm);  /* metamethod is the new function to be called */
   13094:	e9c4 2300 	strd	r2, r3, [r4]
   13098:	7a03      	ldrb	r3, [r0, #8]
}
   1309a:	4620      	mov	r0, r4
  setobj2s(L, func, tm);  /* metamethod is the new function to be called */
   1309c:	7223      	strb	r3, [r4, #8]
}
   1309e:	bd70      	pop	{r4, r5, r6, pc}
    setobjs2s(L, p, p-1);
   130a0:	e951 2304 	ldrd	r2, r3, [r1, #-16]
   130a4:	e9c1 2300 	strd	r2, r3, [r1]
   130a8:	f811 3c08 	ldrb.w	r3, [r1, #-8]
  for (p = L->top; p > func; p--)  /* open space for metamethod */
   130ac:	3910      	subs	r1, #16
    setobjs2s(L, p, p-1);
   130ae:	760b      	strb	r3, [r1, #24]
  for (p = L->top; p > func; p--)  /* open space for metamethod */
   130b0:	e7ea      	b.n	13088 <luaD_tryfuncTM+0x4a>

000130b2 <luaD_poscall>:
void luaD_poscall (lua_State *L, CallInfo *ci, int nres) {
   130b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (l_unlikely(L->hookmask && !hastocloseCfunc(wanted)))
   130b6:	6f03      	ldr	r3, [r0, #112]	; 0x70
  int wanted = ci->nresults;
   130b8:	f9b1 7020 	ldrsh.w	r7, [r1, #32]
void luaD_poscall (lua_State *L, CallInfo *ci, int nres) {
   130bc:	4604      	mov	r4, r0
   130be:	460d      	mov	r5, r1
   130c0:	4616      	mov	r6, r2
  int wanted = ci->nresults;
   130c2:	46b8      	mov	r8, r7
  if (l_unlikely(L->hookmask && !hastocloseCfunc(wanted)))
   130c4:	b11b      	cbz	r3, 130ce <luaD_poscall+0x1c>
   130c6:	1c7b      	adds	r3, r7, #1
   130c8:	db01      	blt.n	130ce <luaD_poscall+0x1c>
    rethook(L, ci, nres);
   130ca:	f7ff ff64 	bl	12f96 <rethook>
  moveresults(L, ci->func, nres, wanted);
   130ce:	6829      	ldr	r1, [r5, #0]
  switch (wanted) {  /* handle typical cases separately */
   130d0:	b147      	cbz	r7, 130e4 <luaD_poscall+0x32>
   130d2:	2f01      	cmp	r7, #1
   130d4:	d003      	beq.n	130de <luaD_poscall+0x2c>
   130d6:	1c7b      	adds	r3, r7, #1
   130d8:	d113      	bne.n	13102 <luaD_poscall+0x50>
   130da:	46b0      	mov	r8, r6
   130dc:	e036      	b.n	1314c <luaD_poscall+0x9a>
      if (nres == 0)   /* no results? */
   130de:	b936      	cbnz	r6, 130ee <luaD_poscall+0x3c>
        setnilvalue(s2v(res));  /* adjust with nil */
   130e0:	720e      	strb	r6, [r1, #8]
      L->top = res + 1;
   130e2:	3110      	adds	r1, #16
  L->ci = ci->previous;  /* back to caller (after closing variables) */
   130e4:	68ab      	ldr	r3, [r5, #8]
  L->top = res + wanted;  /* top points after the last result */
   130e6:	60e1      	str	r1, [r4, #12]
  L->ci = ci->previous;  /* back to caller (after closing variables) */
   130e8:	6163      	str	r3, [r4, #20]
}
   130ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setobjs2s(L, res, L->top - nres);  /* move it to proper place */
   130ee:	68e2      	ldr	r2, [r4, #12]
   130f0:	eba2 1206 	sub.w	r2, r2, r6, lsl #4
   130f4:	e9d2 6700 	ldrd	r6, r7, [r2]
   130f8:	e9c1 6700 	strd	r6, r7, [r1]
   130fc:	7a13      	ldrb	r3, [r2, #8]
   130fe:	720b      	strb	r3, [r1, #8]
   13100:	e7ef      	b.n	130e2 <luaD_poscall+0x30>
      if (hastocloseCfunc(wanted)) {  /* to-be-closed variables? */
   13102:	da23      	bge.n	1314c <luaD_poscall+0x9a>
        ptrdiff_t savedres = savestack(L, res);
   13104:	69e3      	ldr	r3, [r4, #28]
        luaF_close(L, res, CLOSEKTOP, 1);
   13106:	4620      	mov	r0, r4
        ptrdiff_t savedres = savestack(L, res);
   13108:	eba1 0803 	sub.w	r8, r1, r3
        L->ci->callstatus |= CIST_CLSRET;  /* in case of yields */
   1310c:	6963      	ldr	r3, [r4, #20]
   1310e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
        L->ci->u2.nres = nres;
   13110:	61de      	str	r6, [r3, #28]
        L->ci->callstatus |= CIST_CLSRET;  /* in case of yields */
   13112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   13116:	845a      	strh	r2, [r3, #34]	; 0x22
        luaF_close(L, res, CLOSEKTOP, 1);
   13118:	2301      	movs	r3, #1
   1311a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1311e:	f000 fa47 	bl	135b0 <luaF_close>
        L->ci->callstatus &= ~CIST_CLSRET;
   13122:	6961      	ldr	r1, [r4, #20]
   13124:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
   13126:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   1312a:	844b      	strh	r3, [r1, #34]	; 0x22
        if (L->hookmask)  /* if needed, call hook after '__close's */
   1312c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1312e:	b11b      	cbz	r3, 13138 <luaD_poscall+0x86>
          rethook(L, L->ci, nres);
   13130:	4632      	mov	r2, r6
   13132:	4620      	mov	r0, r4
   13134:	f7ff ff2f 	bl	12f96 <rethook>
        res = restorestack(L, savedres);  /* close and hook can move stack */
   13138:	69e1      	ldr	r1, [r4, #28]
   1313a:	4441      	add	r1, r8
        wanted = decodeNresults(wanted);
   1313c:	f06f 0802 	mvn.w	r8, #2
   13140:	eba8 0807 	sub.w	r8, r8, r7
        if (wanted == LUA_MULTRET)
   13144:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   13148:	bf08      	it	eq
   1314a:	46b0      	moveq	r8, r6
  if (nres > wanted)  /* extra results? */
   1314c:	f06f 000f 	mvn.w	r0, #15
   13150:	68e2      	ldr	r2, [r4, #12]
   13152:	4546      	cmp	r6, r8
   13154:	4633      	mov	r3, r6
   13156:	fb00 2206 	mla	r2, r0, r6, r2
   1315a:	bfa8      	it	ge
   1315c:	4643      	movge	r3, r8
  for (i = 0; i < nres; i++)  /* move all results to correct place */
   1315e:	4608      	mov	r0, r1
   13160:	f04f 0c00 	mov.w	ip, #0
   13164:	4563      	cmp	r3, ip
   13166:	f102 0210 	add.w	r2, r2, #16
   1316a:	f100 0010 	add.w	r0, r0, #16
   1316e:	dc09      	bgt.n	13184 <luaD_poscall+0xd2>
    setnilvalue(s2v(res + i));
   13170:	2000      	movs	r0, #0
   13172:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13176:	f101 0208 	add.w	r2, r1, #8
  for (; i < wanted; i++)  /* complete wanted number of results */
   1317a:	4598      	cmp	r8, r3
   1317c:	dc0d      	bgt.n	1319a <luaD_poscall+0xe8>
  L->top = res + wanted;  /* top points after the last result */
   1317e:	eb01 1108 	add.w	r1, r1, r8, lsl #4
   13182:	e7af      	b.n	130e4 <luaD_poscall+0x32>
    setobjs2s(L, res + i, firstresult + i);
   13184:	e952 6704 	ldrd	r6, r7, [r2, #-16]
   13188:	e940 6704 	strd	r6, r7, [r0, #-16]
   1318c:	f812 6c08 	ldrb.w	r6, [r2, #-8]
  for (i = 0; i < nres; i++)  /* move all results to correct place */
   13190:	f10c 0c01 	add.w	ip, ip, #1
    setobjs2s(L, res + i, firstresult + i);
   13194:	f800 6c08 	strb.w	r6, [r0, #-8]
  for (i = 0; i < nres; i++)  /* move all results to correct place */
   13198:	e7e4      	b.n	13164 <luaD_poscall+0xb2>
    setnilvalue(s2v(res + i));
   1319a:	011e      	lsls	r6, r3, #4
   1319c:	5590      	strb	r0, [r2, r6]
  for (; i < wanted; i++)  /* complete wanted number of results */
   1319e:	3301      	adds	r3, #1
   131a0:	e7eb      	b.n	1317a <luaD_poscall+0xc8>

000131a2 <precallC>:
                                            lua_CFunction f) {
   131a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   131a6:	4691      	mov	r9, r2
   131a8:	461f      	mov	r7, r3
  checkstackGCp(L, LUA_MINSTACK, func);  /* ensure minimum stack size */
   131aa:	68c2      	ldr	r2, [r0, #12]
   131ac:	6983      	ldr	r3, [r0, #24]
                                            lua_CFunction f) {
   131ae:	4604      	mov	r4, r0
  checkstackGCp(L, LUA_MINSTACK, func);  /* ensure minimum stack size */
   131b0:	1a9b      	subs	r3, r3, r2
   131b2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
                                            lua_CFunction f) {
   131b6:	460e      	mov	r6, r1
  checkstackGCp(L, LUA_MINSTACK, func);  /* ensure minimum stack size */
   131b8:	dc0e      	bgt.n	131d8 <precallC+0x36>
   131ba:	6903      	ldr	r3, [r0, #16]
   131bc:	69c1      	ldr	r1, [r0, #28]
   131be:	68db      	ldr	r3, [r3, #12]
   131c0:	1a76      	subs	r6, r6, r1
   131c2:	2b00      	cmp	r3, #0
   131c4:	dd01      	ble.n	131ca <precallC+0x28>
   131c6:	f001 fa56 	bl	14676 <luaC_step>
   131ca:	2114      	movs	r1, #20
   131cc:	2201      	movs	r2, #1
   131ce:	4620      	mov	r0, r4
   131d0:	f7f2 f9a8 	bl	5524 <luaD_growstack>
   131d4:	69e1      	ldr	r1, [r4, #28]
   131d6:	440e      	add	r6, r1
  L->ci = ci = prepCallInfo(L, func, nresults, CIST_C,
   131d8:	68e3      	ldr	r3, [r4, #12]
   131da:	f503 78a0 	add.w	r8, r3, #320	; 0x140
  CallInfo *ci = L->ci = next_ci(L);  /* new frame */
   131de:	6963      	ldr	r3, [r4, #20]
   131e0:	68dd      	ldr	r5, [r3, #12]
   131e2:	b91d      	cbnz	r5, 131ec <precallC+0x4a>
   131e4:	4620      	mov	r0, r4
   131e6:	f002 fab0 	bl	1574a <luaE_extendCI>
   131ea:	4605      	mov	r5, r0
  ci->callstatus = mask;
   131ec:	2302      	movs	r3, #2
   131ee:	846b      	strh	r3, [r5, #34]	; 0x22
  if (l_unlikely(L->hookmask & LUA_MASKCALL)) {
   131f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  ci->func = func;
   131f2:	602e      	str	r6, [r5, #0]
  if (l_unlikely(L->hookmask & LUA_MASKCALL)) {
   131f4:	07db      	lsls	r3, r3, #31
  ci->nresults = nret;
   131f6:	f8a5 9020 	strh.w	r9, [r5, #32]
  ci->top = top;
   131fa:	f8c5 8004 	str.w	r8, [r5, #4]
  L->ci = ci = prepCallInfo(L, func, nresults, CIST_C,
   131fe:	6165      	str	r5, [r4, #20]
  if (l_unlikely(L->hookmask & LUA_MASKCALL)) {
   13200:	d50b      	bpl.n	1321a <precallC+0x78>
    int narg = cast_int(L->top - func) - 1;
   13202:	68e1      	ldr	r1, [r4, #12]
    luaD_hook(L, LUA_HOOKCALL, -1, 1, narg);
   13204:	2301      	movs	r3, #1
    int narg = cast_int(L->top - func) - 1;
   13206:	1b89      	subs	r1, r1, r6
   13208:	1109      	asrs	r1, r1, #4
   1320a:	3901      	subs	r1, #1
    luaD_hook(L, LUA_HOOKCALL, -1, 1, narg);
   1320c:	9100      	str	r1, [sp, #0]
   1320e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13212:	2100      	movs	r1, #0
   13214:	4620      	mov	r0, r4
   13216:	f7ff fe6e 	bl	12ef6 <luaD_hook>
  n = (*f)(L);  /* do the actual call */
   1321a:	4620      	mov	r0, r4
   1321c:	47b8      	blx	r7
   1321e:	4606      	mov	r6, r0
  luaD_poscall(L, ci, n);
   13220:	4602      	mov	r2, r0
   13222:	4629      	mov	r1, r5
   13224:	4620      	mov	r0, r4
   13226:	f7ff ff44 	bl	130b2 <luaD_poscall>
}
   1322a:	4630      	mov	r0, r6
   1322c:	b003      	add	sp, #12
   1322e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00013232 <luaD_pretailcall>:
                                    int narg1, int delta) {
   13232:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13236:	460e      	mov	r6, r1
   13238:	4604      	mov	r4, r0
   1323a:	4611      	mov	r1, r2
   1323c:	461d      	mov	r5, r3
   1323e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  switch (ttypetag(s2v(func))) {
   13242:	7a0b      	ldrb	r3, [r1, #8]
   13244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13248:	2b16      	cmp	r3, #22
   1324a:	d05d      	beq.n	13308 <luaD_pretailcall+0xd6>
   1324c:	2b26      	cmp	r3, #38	; 0x26
   1324e:	d051      	beq.n	132f4 <luaD_pretailcall+0xc2>
   13250:	2b06      	cmp	r3, #6
   13252:	d16b      	bne.n	1332c <luaD_pretailcall+0xfa>
      Proto *p = clLvalue(s2v(func))->p;
   13254:	680b      	ldr	r3, [r1, #0]
      checkstackGCp(L, fsize - delta, func);
   13256:	68e2      	ldr	r2, [r4, #12]
      Proto *p = clLvalue(s2v(func))->p;
   13258:	f8d3 900c 	ldr.w	r9, [r3, #12]
      checkstackGCp(L, fsize - delta, func);
   1325c:	69a3      	ldr	r3, [r4, #24]
      int fsize = p->maxstacksize;  /* frame size */
   1325e:	f899 7008 	ldrb.w	r7, [r9, #8]
      checkstackGCp(L, fsize - delta, func);
   13262:	1a9b      	subs	r3, r3, r2
   13264:	eba7 0a0b 	sub.w	sl, r7, fp
   13268:	ebba 1f23 	cmp.w	sl, r3, asr #4
      int nfixparams = p->numparams;
   1326c:	f899 8006 	ldrb.w	r8, [r9, #6]
      checkstackGCp(L, fsize - delta, func);
   13270:	db11      	blt.n	13296 <luaD_pretailcall+0x64>
   13272:	69e3      	ldr	r3, [r4, #28]
   13274:	1acb      	subs	r3, r1, r3
   13276:	9301      	str	r3, [sp, #4]
   13278:	6923      	ldr	r3, [r4, #16]
   1327a:	68db      	ldr	r3, [r3, #12]
   1327c:	2b00      	cmp	r3, #0
   1327e:	dd02      	ble.n	13286 <luaD_pretailcall+0x54>
   13280:	4620      	mov	r0, r4
   13282:	f001 f9f8 	bl	14676 <luaC_step>
   13286:	4651      	mov	r1, sl
   13288:	2201      	movs	r2, #1
   1328a:	4620      	mov	r0, r4
   1328c:	f7f2 f94a 	bl	5524 <luaD_growstack>
   13290:	69e1      	ldr	r1, [r4, #28]
   13292:	9b01      	ldr	r3, [sp, #4]
   13294:	4419      	add	r1, r3
      ci->func -= delta;  /* restore 'func' (if vararg) */
   13296:	6833      	ldr	r3, [r6, #0]
      for (i = 0; i < narg1; i++)  /* move down function and arguments */
   13298:	2200      	movs	r2, #0
      ci->func -= delta;  /* restore 'func' (if vararg) */
   1329a:	eba3 130b 	sub.w	r3, r3, fp, lsl #4
   1329e:	469c      	mov	ip, r3
   132a0:	6033      	str	r3, [r6, #0]
      for (i = 0; i < narg1; i++)  /* move down function and arguments */
   132a2:	4295      	cmp	r5, r2
   132a4:	f101 0110 	add.w	r1, r1, #16
   132a8:	f10c 0c10 	add.w	ip, ip, #16
   132ac:	dc2e      	bgt.n	1330c <luaD_pretailcall+0xda>
   132ae:	462a      	mov	r2, r5
        setnilvalue(s2v(func + narg1));  /* complete missing arguments */
   132b0:	2000      	movs	r0, #0
   132b2:	f103 0108 	add.w	r1, r3, #8
      for (; narg1 <= nfixparams; narg1++)
   132b6:	4542      	cmp	r2, r8
   132b8:	dd32      	ble.n	13320 <luaD_pretailcall+0xee>
      ci->u.l.savedpc = p->code;  /* starting point */
   132ba:	f8d9 2034 	ldr.w	r2, [r9, #52]	; 0x34
}
   132be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      ci->u.l.savedpc = p->code;  /* starting point */
   132c2:	6132      	str	r2, [r6, #16]
      ci->callstatus |= CIST_TAIL;
   132c4:	8c72      	ldrh	r2, [r6, #34]	; 0x22
      ci->top = func + 1 + fsize;  /* top for new function */
   132c6:	3701      	adds	r7, #1
      ci->callstatus |= CIST_TAIL;
   132c8:	f042 0220 	orr.w	r2, r2, #32
   132cc:	8472      	strh	r2, [r6, #34]	; 0x22
        setnilvalue(s2v(func + narg1));  /* complete missing arguments */
   132ce:	f1c5 0201 	rsb	r2, r5, #1
   132d2:	4442      	add	r2, r8
   132d4:	0112      	lsls	r2, r2, #4
   132d6:	f108 0801 	add.w	r8, r8, #1
   132da:	45a8      	cmp	r8, r5
   132dc:	bfb8      	it	lt
   132de:	2200      	movlt	r2, #0
   132e0:	eb02 1205 	add.w	r2, r2, r5, lsl #4
      ci->top = func + 1 + fsize;  /* top for new function */
   132e4:	eb03 1707 	add.w	r7, r3, r7, lsl #4
        setnilvalue(s2v(func + narg1));  /* complete missing arguments */
   132e8:	4413      	add	r3, r2
      ci->top = func + 1 + fsize;  /* top for new function */
   132ea:	6077      	str	r7, [r6, #4]
      L->top = func + narg1;  /* set top */
   132ec:	60e3      	str	r3, [r4, #12]
}
   132ee:	b003      	add	sp, #12
   132f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return precallC(L, func, LUA_MULTRET, clCvalue(s2v(func))->f);
   132f4:	680b      	ldr	r3, [r1, #0]
   132f6:	68db      	ldr	r3, [r3, #12]
      return precallC(L, func, LUA_MULTRET, fvalue(s2v(func)));
   132f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   132fc:	4620      	mov	r0, r4
}
   132fe:	b003      	add	sp, #12
   13300:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return precallC(L, func, LUA_MULTRET, fvalue(s2v(func)));
   13304:	f7ff bf4d 	b.w	131a2 <precallC>
   13308:	680b      	ldr	r3, [r1, #0]
   1330a:	e7f5      	b.n	132f8 <luaD_pretailcall+0xc6>
        setobjs2s(L, ci->func + i, func + i);
   1330c:	e951 ab04 	ldrd	sl, fp, [r1, #-16]
   13310:	e94c ab04 	strd	sl, fp, [ip, #-16]
   13314:	f811 0c08 	ldrb.w	r0, [r1, #-8]
      for (i = 0; i < narg1; i++)  /* move down function and arguments */
   13318:	3201      	adds	r2, #1
        setobjs2s(L, ci->func + i, func + i);
   1331a:	f80c 0c08 	strb.w	r0, [ip, #-8]
      for (i = 0; i < narg1; i++)  /* move down function and arguments */
   1331e:	e7c0      	b.n	132a2 <luaD_pretailcall+0x70>
        setnilvalue(s2v(func + narg1));  /* complete missing arguments */
   13320:	ea4f 1c02 	mov.w	ip, r2, lsl #4
   13324:	f801 000c 	strb.w	r0, [r1, ip]
      for (; narg1 <= nfixparams; narg1++)
   13328:	3201      	adds	r2, #1
   1332a:	e7c4      	b.n	132b6 <luaD_pretailcall+0x84>
      func = luaD_tryfuncTM(L, func);  /* try to get '__call' metamethod */
   1332c:	4620      	mov	r0, r4
   1332e:	f7ff fe86 	bl	1303e <luaD_tryfuncTM>
      narg1++;
   13332:	3501      	adds	r5, #1
      func = luaD_tryfuncTM(L, func);  /* try to get '__call' metamethod */
   13334:	4601      	mov	r1, r0
      goto retry;  /* try again */
   13336:	e784      	b.n	13242 <luaD_pretailcall+0x10>

00013338 <luaD_precall>:
CallInfo *luaD_precall (lua_State *L, StkId func, int nresults) {
   13338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1333c:	4605      	mov	r5, r0
   1333e:	460c      	mov	r4, r1
   13340:	4617      	mov	r7, r2
  switch (ttypetag(s2v(func))) {
   13342:	7a23      	ldrb	r3, [r4, #8]
   13344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13348:	2b16      	cmp	r3, #22
   1334a:	d04b      	beq.n	133e4 <luaD_precall+0xac>
   1334c:	2b26      	cmp	r3, #38	; 0x26
   1334e:	d03f      	beq.n	133d0 <luaD_precall+0x98>
   13350:	2b06      	cmp	r3, #6
   13352:	d149      	bne.n	133e8 <luaD_precall+0xb0>
      Proto *p = clLvalue(s2v(func))->p;
   13354:	6823      	ldr	r3, [r4, #0]
      int narg = cast_int(L->top - func) - 1;  /* number of real arguments */
   13356:	68ea      	ldr	r2, [r5, #12]
      Proto *p = clLvalue(s2v(func))->p;
   13358:	f8d3 800c 	ldr.w	r8, [r3, #12]
      checkstackGCp(L, fsize, func);
   1335c:	69ab      	ldr	r3, [r5, #24]
      int fsize = p->maxstacksize;  /* frame size */
   1335e:	f898 a008 	ldrb.w	sl, [r8, #8]
      int narg = cast_int(L->top - func) - 1;  /* number of real arguments */
   13362:	1b16      	subs	r6, r2, r4
      checkstackGCp(L, fsize, func);
   13364:	1a9b      	subs	r3, r3, r2
      int narg = cast_int(L->top - func) - 1;  /* number of real arguments */
   13366:	1136      	asrs	r6, r6, #4
      checkstackGCp(L, fsize, func);
   13368:	ebba 1f23 	cmp.w	sl, r3, asr #4
      int nfixparams = p->numparams;
   1336c:	f898 9006 	ldrb.w	r9, [r8, #6]
      int narg = cast_int(L->top - func) - 1;  /* number of real arguments */
   13370:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
      checkstackGCp(L, fsize, func);
   13374:	db0f      	blt.n	13396 <luaD_precall+0x5e>
   13376:	692b      	ldr	r3, [r5, #16]
   13378:	69e9      	ldr	r1, [r5, #28]
   1337a:	68db      	ldr	r3, [r3, #12]
   1337c:	1a64      	subs	r4, r4, r1
   1337e:	2b00      	cmp	r3, #0
   13380:	dd02      	ble.n	13388 <luaD_precall+0x50>
   13382:	4628      	mov	r0, r5
   13384:	f001 f977 	bl	14676 <luaC_step>
   13388:	4651      	mov	r1, sl
   1338a:	2201      	movs	r2, #1
   1338c:	4628      	mov	r0, r5
   1338e:	f7f2 f8c9 	bl	5524 <luaD_growstack>
   13392:	69e9      	ldr	r1, [r5, #28]
   13394:	440c      	add	r4, r1
  CallInfo *ci = L->ci = next_ci(L);  /* new frame */
   13396:	696b      	ldr	r3, [r5, #20]
      L->ci = ci = prepCallInfo(L, func, nresults, 0, func + 1 + fsize);
   13398:	f10a 0a01 	add.w	sl, sl, #1
  CallInfo *ci = L->ci = next_ci(L);  /* new frame */
   1339c:	68d8      	ldr	r0, [r3, #12]
      L->ci = ci = prepCallInfo(L, func, nresults, 0, func + 1 + fsize);
   1339e:	eb04 1a0a 	add.w	sl, r4, sl, lsl #4
  CallInfo *ci = L->ci = next_ci(L);  /* new frame */
   133a2:	b910      	cbnz	r0, 133aa <luaD_precall+0x72>
   133a4:	4628      	mov	r0, r5
   133a6:	f002 f9d0 	bl	1574a <luaE_extendCI>
  ci->callstatus = mask;
   133aa:	2300      	movs	r3, #0
      ci->u.l.savedpc = p->code;  /* starting point */
   133ac:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
  ci->func = func;
   133b0:	6004      	str	r4, [r0, #0]
  ci->nresults = nret;
   133b2:	8407      	strh	r7, [r0, #32]
  ci->callstatus = mask;
   133b4:	8443      	strh	r3, [r0, #34]	; 0x22
  ci->top = top;
   133b6:	f8c0 a004 	str.w	sl, [r0, #4]
      L->ci = ci = prepCallInfo(L, func, nresults, 0, func + 1 + fsize);
   133ba:	6168      	str	r0, [r5, #20]
      ci->u.l.savedpc = p->code;  /* starting point */
   133bc:	6102      	str	r2, [r0, #16]
      for (; narg < nfixparams; narg++)
   133be:	454e      	cmp	r6, r9
   133c0:	da0e      	bge.n	133e0 <luaD_precall+0xa8>
        setnilvalue(s2v(L->top++));  /* complete missing arguments */
   133c2:	68ea      	ldr	r2, [r5, #12]
      for (; narg < nfixparams; narg++)
   133c4:	3601      	adds	r6, #1
        setnilvalue(s2v(L->top++));  /* complete missing arguments */
   133c6:	f102 0110 	add.w	r1, r2, #16
   133ca:	60e9      	str	r1, [r5, #12]
   133cc:	7213      	strb	r3, [r2, #8]
      for (; narg < nfixparams; narg++)
   133ce:	e7f6      	b.n	133be <luaD_precall+0x86>
      precallC(L, func, nresults, clCvalue(s2v(func))->f);
   133d0:	6823      	ldr	r3, [r4, #0]
   133d2:	68db      	ldr	r3, [r3, #12]
      precallC(L, func, nresults, fvalue(s2v(func)));
   133d4:	463a      	mov	r2, r7
   133d6:	4621      	mov	r1, r4
   133d8:	4628      	mov	r0, r5
   133da:	f7ff fee2 	bl	131a2 <precallC>
      return NULL;
   133de:	2000      	movs	r0, #0
}
   133e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      precallC(L, func, nresults, fvalue(s2v(func)));
   133e4:	6823      	ldr	r3, [r4, #0]
   133e6:	e7f5      	b.n	133d4 <luaD_precall+0x9c>
      func = luaD_tryfuncTM(L, func);  /* try to get '__call' metamethod */
   133e8:	4621      	mov	r1, r4
   133ea:	4628      	mov	r0, r5
   133ec:	f7ff fe27 	bl	1303e <luaD_tryfuncTM>
   133f0:	4604      	mov	r4, r0
      goto retry;  /* try again with metamethod */
   133f2:	e7a6      	b.n	13342 <luaD_precall+0xa>

000133f4 <ccall>:
l_sinline void ccall (lua_State *L, StkId func, int nResults, int inc) {
   133f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  L->nCcalls += inc;
   133f8:	6e05      	ldr	r5, [r0, #96]	; 0x60
l_sinline void ccall (lua_State *L, StkId func, int nResults, int inc) {
   133fa:	4604      	mov	r4, r0
  L->nCcalls += inc;
   133fc:	441d      	add	r5, r3
   133fe:	6605      	str	r5, [r0, #96]	; 0x60
  if (l_unlikely(getCcalls(L) >= LUAI_MAXCCALLS))
   13400:	b2ad      	uxth	r5, r5
   13402:	2dc7      	cmp	r5, #199	; 0xc7
l_sinline void ccall (lua_State *L, StkId func, int nResults, int inc) {
   13404:	460f      	mov	r7, r1
   13406:	4690      	mov	r8, r2
   13408:	461e      	mov	r6, r3
  if (l_unlikely(getCcalls(L) >= LUAI_MAXCCALLS))
   1340a:	d901      	bls.n	13410 <ccall+0x1c>
    luaE_checkcstack(L);
   1340c:	f7f4 fe7c 	bl	8108 <luaE_checkcstack>
  if ((ci = luaD_precall(L, func, nResults)) != NULL) {  /* Lua function? */
   13410:	4639      	mov	r1, r7
   13412:	4642      	mov	r2, r8
   13414:	4620      	mov	r0, r4
   13416:	f7ff ff8f 	bl	13338 <luaD_precall>
   1341a:	4601      	mov	r1, r0
   1341c:	b120      	cbz	r0, 13428 <ccall+0x34>
    ci->callstatus = CIST_FRESH;  /* mark that it is a "fresh" execute */
   1341e:	2304      	movs	r3, #4
   13420:	8443      	strh	r3, [r0, #34]	; 0x22
    luaV_execute(L, ci);  /* call it */
   13422:	4620      	mov	r0, r4
   13424:	f7f5 ff36 	bl	9294 <luaV_execute>
  L->nCcalls -= inc;
   13428:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1342a:	1b9b      	subs	r3, r3, r6
   1342c:	6623      	str	r3, [r4, #96]	; 0x60
}
   1342e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013432 <luaD_call>:
  ccall(L, func, nResults, 1);
   13432:	2301      	movs	r3, #1
   13434:	f7ff bfde 	b.w	133f4 <ccall>

00013438 <luaD_callnoyield>:
  ccall(L, func, nResults, nyci);
   13438:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1343c:	f7ff bfda 	b.w	133f4 <ccall>

00013440 <luaD_pcall>:
                ptrdiff_t old_top, ptrdiff_t ef) {
   13440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13444:	461e      	mov	r6, r3
  L->errfunc = ef;
   13446:	9b08      	ldr	r3, [sp, #32]
  ptrdiff_t old_errfunc = L->errfunc;
   13448:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
  L->errfunc = ef;
   1344a:	65c3      	str	r3, [r0, #92]	; 0x5c
                ptrdiff_t old_top, ptrdiff_t ef) {
   1344c:	4604      	mov	r4, r0
  CallInfo *old_ci = L->ci;
   1344e:	f8d0 9014 	ldr.w	r9, [r0, #20]
  lu_byte old_allowhooks = L->allowhook;
   13452:	f890 8007 	ldrb.w	r8, [r0, #7]
  status = luaD_rawrunprotected(L, func, u);
   13456:	f7ff fcc2 	bl	12dde <luaD_rawrunprotected>
  if (l_unlikely(status != LUA_OK)) {  /* an error occurred? */
   1345a:	4605      	mov	r5, r0
   1345c:	b190      	cbz	r0, 13484 <luaD_pcall+0x44>
    status = luaD_closeprotected(L, old_top, status);
   1345e:	4602      	mov	r2, r0
   13460:	4631      	mov	r1, r6
   13462:	4620      	mov	r0, r4
    L->ci = old_ci;
   13464:	f8c4 9014 	str.w	r9, [r4, #20]
    L->allowhook = old_allowhooks;
   13468:	f884 8007 	strb.w	r8, [r4, #7]
    status = luaD_closeprotected(L, old_top, status);
   1346c:	f7f2 f8c0 	bl	55f0 <luaD_closeprotected>
    luaD_seterrorobj(L, status, restorestack(L, old_top));
   13470:	69e2      	ldr	r2, [r4, #28]
   13472:	4601      	mov	r1, r0
    status = luaD_closeprotected(L, old_top, status);
   13474:	4605      	mov	r5, r0
    luaD_seterrorobj(L, status, restorestack(L, old_top));
   13476:	4432      	add	r2, r6
   13478:	4620      	mov	r0, r4
   1347a:	f7f1 ffdf 	bl	543c <luaD_seterrorobj>
    luaD_shrinkstack(L);   /* restore stack size in case of overflow */
   1347e:	4620      	mov	r0, r4
   13480:	f7f2 f886 	bl	5590 <luaD_shrinkstack>
}
   13484:	4628      	mov	r0, r5
  L->errfunc = old_errfunc;
   13486:	65e7      	str	r7, [r4, #92]	; 0x5c
}
   13488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001348c <luaF_newLclosure>:
  GCObject *o = luaC_newobj(L, LUA_VLCL, sizeLclosure(nupvals));
   1348c:	1d0a      	adds	r2, r1, #4
LClosure *luaF_newLclosure (lua_State *L, int nupvals) {
   1348e:	b510      	push	{r4, lr}
  GCObject *o = luaC_newobj(L, LUA_VLCL, sizeLclosure(nupvals));
   13490:	0092      	lsls	r2, r2, #2
LClosure *luaF_newLclosure (lua_State *L, int nupvals) {
   13492:	460c      	mov	r4, r1
  GCObject *o = luaC_newobj(L, LUA_VLCL, sizeLclosure(nupvals));
   13494:	2106      	movs	r1, #6
   13496:	f001 f87e 	bl	14596 <luaC_newobj>
  c->p = NULL;
   1349a:	2300      	movs	r3, #0
  c->nupvalues = cast_byte(nupvals);
   1349c:	7184      	strb	r4, [r0, #6]
  c->p = NULL;
   1349e:	60c3      	str	r3, [r0, #12]
  while (nupvals--) c->upvals[nupvals] = NULL;
   134a0:	f100 0210 	add.w	r2, r0, #16
   134a4:	3c01      	subs	r4, #1
   134a6:	d200      	bcs.n	134aa <luaF_newLclosure+0x1e>
}
   134a8:	bd10      	pop	{r4, pc}
  while (nupvals--) c->upvals[nupvals] = NULL;
   134aa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
   134ae:	e7f9      	b.n	134a4 <luaF_newLclosure+0x18>

000134b0 <luaF_initupvals>:
void luaF_initupvals (lua_State *L, LClosure *cl) {
   134b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (i = 0; i < cl->nupvalues; i++) {
   134b4:	2500      	movs	r5, #0
void luaF_initupvals (lua_State *L, LClosure *cl) {
   134b6:	4606      	mov	r6, r0
   134b8:	460c      	mov	r4, r1
    setnilvalue(uv->v);
   134ba:	46a8      	mov	r8, r5
   134bc:	f101 0710 	add.w	r7, r1, #16
  for (i = 0; i < cl->nupvalues; i++) {
   134c0:	79a3      	ldrb	r3, [r4, #6]
   134c2:	42ab      	cmp	r3, r5
   134c4:	dc01      	bgt.n	134ca <luaF_initupvals+0x1a>
}
   134c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    GCObject *o = luaC_newobj(L, LUA_VUPVAL, sizeof(UpVal));
   134ca:	2220      	movs	r2, #32
   134cc:	2109      	movs	r1, #9
   134ce:	4630      	mov	r0, r6
   134d0:	f001 f861 	bl	14596 <luaC_newobj>
    uv->v = &uv->u.value;  /* make it closed */
   134d4:	f100 0310 	add.w	r3, r0, #16
   134d8:	6083      	str	r3, [r0, #8]
    setnilvalue(uv->v);
   134da:	f880 8018 	strb.w	r8, [r0, #24]
    cl->upvals[i] = uv;
   134de:	f847 0b04 	str.w	r0, [r7], #4
    luaC_objbarrier(L, cl, uv);
   134e2:	7963      	ldrb	r3, [r4, #5]
    GCObject *o = luaC_newobj(L, LUA_VUPVAL, sizeof(UpVal));
   134e4:	4602      	mov	r2, r0
    luaC_objbarrier(L, cl, uv);
   134e6:	069b      	lsls	r3, r3, #26
   134e8:	d507      	bpl.n	134fa <luaF_initupvals+0x4a>
   134ea:	7943      	ldrb	r3, [r0, #5]
   134ec:	f013 0f18 	tst.w	r3, #24
   134f0:	d003      	beq.n	134fa <luaF_initupvals+0x4a>
   134f2:	4621      	mov	r1, r4
   134f4:	4630      	mov	r0, r6
   134f6:	f001 f802 	bl	144fe <luaC_barrier_>
  for (i = 0; i < cl->nupvalues; i++) {
   134fa:	3501      	adds	r5, #1
   134fc:	e7e0      	b.n	134c0 <luaF_initupvals+0x10>

000134fe <luaF_findupval>:
UpVal *luaF_findupval (lua_State *L, StkId level) {
   134fe:	b570      	push	{r4, r5, r6, lr}
   13500:	460e      	mov	r6, r1
   13502:	4604      	mov	r4, r0
  UpVal **pp = &L->openupval;
   13504:	f100 0520 	add.w	r5, r0, #32
   13508:	6a00      	ldr	r0, [r0, #32]
  while ((p = *pp) != NULL && uplevel(p) >= level) {  /* search for it */
   1350a:	b9b0      	cbnz	r0, 1353a <luaF_findupval+0x3c>
  GCObject *o = luaC_newobj(L, LUA_VUPVAL, sizeof(UpVal));
   1350c:	2220      	movs	r2, #32
   1350e:	2109      	movs	r1, #9
   13510:	4620      	mov	r0, r4
   13512:	f001 f840 	bl	14596 <luaC_newobj>
  uv->tbc = tbc;
   13516:	2200      	movs	r2, #0
  UpVal *next = *prev;
   13518:	682b      	ldr	r3, [r5, #0]
  uv->v = s2v(level);  /* current value lives in the stack */
   1351a:	6086      	str	r6, [r0, #8]
  uv->u.open.previous = prev;
   1351c:	e9c0 3504 	strd	r3, r5, [r0, #16]
  uv->tbc = tbc;
   13520:	7182      	strb	r2, [r0, #6]
  if (next)
   13522:	b993      	cbnz	r3, 1354a <luaF_findupval+0x4c>
  if (!isintwups(L)) {  /* thread not in list of threads with upvalues? */
   13524:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  *prev = uv;
   13526:	6028      	str	r0, [r5, #0]
  if (!isintwups(L)) {  /* thread not in list of threads with upvalues? */
   13528:	429c      	cmp	r4, r3
    L->twups = G(L)->twups;  /* link it to the list */
   1352a:	bf01      	itttt	eq
   1352c:	6923      	ldreq	r3, [r4, #16]
   1352e:	f8d3 209c 	ldreq.w	r2, [r3, #156]	; 0x9c
   13532:	62e2      	streq	r2, [r4, #44]	; 0x2c
    G(L)->twups = L;
   13534:	f8c3 409c 	streq.w	r4, [r3, #156]	; 0x9c
}
   13538:	bd70      	pop	{r4, r5, r6, pc}
  while ((p = *pp) != NULL && uplevel(p) >= level) {  /* search for it */
   1353a:	6883      	ldr	r3, [r0, #8]
   1353c:	42b3      	cmp	r3, r6
   1353e:	d3e5      	bcc.n	1350c <luaF_findupval+0xe>
    if (uplevel(p) == level)  /* corresponding upvalue? */
   13540:	d0fa      	beq.n	13538 <luaF_findupval+0x3a>
    pp = &p->u.open.next;
   13542:	f100 0510 	add.w	r5, r0, #16
   13546:	6900      	ldr	r0, [r0, #16]
   13548:	e7df      	b.n	1350a <luaF_findupval+0xc>
    next->u.open.previous = &uv->u.open.next;
   1354a:	f100 0210 	add.w	r2, r0, #16
   1354e:	615a      	str	r2, [r3, #20]
   13550:	e7e8      	b.n	13524 <luaF_findupval+0x26>

00013552 <luaF_unlinkupval>:


void luaF_unlinkupval (UpVal *uv) {
  lua_assert(upisopen(uv));
  *uv->u.open.previous = uv->u.open.next;
   13552:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   13556:	6013      	str	r3, [r2, #0]
  if (uv->u.open.next)
   13558:	b10b      	cbz	r3, 1355e <luaF_unlinkupval+0xc>
    uv->u.open.next->u.open.previous = uv->u.open.previous;
   1355a:	6942      	ldr	r2, [r0, #20]
   1355c:	615a      	str	r2, [r3, #20]
}
   1355e:	4770      	bx	lr

00013560 <luaF_closeupval>:


/*
** Close all upvalues up to the given stack level.
*/
void luaF_closeupval (lua_State *L, StkId level) {
   13560:	b538      	push	{r3, r4, r5, lr}
   13562:	4604      	mov	r4, r0
   13564:	460d      	mov	r5, r1
  UpVal *uv;
  StkId upl;  /* stack index pointed by 'uv' */
  while ((uv = L->openupval) != NULL && (upl = uplevel(uv)) >= level) {
   13566:	6a21      	ldr	r1, [r4, #32]
   13568:	b111      	cbz	r1, 13570 <luaF_closeupval+0x10>
   1356a:	688b      	ldr	r3, [r1, #8]
   1356c:	42ab      	cmp	r3, r5
   1356e:	d200      	bcs.n	13572 <luaF_closeupval+0x12>
    if (!iswhite(uv)) {  /* neither white nor dead? */
      nw2black(uv);  /* closed upvalues cannot be gray */
      luaC_barrier(L, uv, slot);
    }
  }
}
   13570:	bd38      	pop	{r3, r4, r5, pc}
    luaF_unlinkupval(uv);  /* remove upvalue from 'openupval' list */
   13572:	4608      	mov	r0, r1
   13574:	f7ff ffed 	bl	13552 <luaF_unlinkupval>
    setobj(L, slot, uv->v);  /* move value to upvalue slot */
   13578:	6888      	ldr	r0, [r1, #8]
   1357a:	e9d0 2300 	ldrd	r2, r3, [r0]
   1357e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    TValue *slot = &uv->u.value;  /* new position for value */
   13582:	f101 0310 	add.w	r3, r1, #16
    setobj(L, slot, uv->v);  /* move value to upvalue slot */
   13586:	7a02      	ldrb	r2, [r0, #8]
    uv->v = slot;  /* now current value lives here */
   13588:	608b      	str	r3, [r1, #8]
    if (!iswhite(uv)) {  /* neither white nor dead? */
   1358a:	794b      	ldrb	r3, [r1, #5]
    setobj(L, slot, uv->v);  /* move value to upvalue slot */
   1358c:	760a      	strb	r2, [r1, #24]
    if (!iswhite(uv)) {  /* neither white nor dead? */
   1358e:	f013 0f18 	tst.w	r3, #24
   13592:	d1e8      	bne.n	13566 <luaF_closeupval+0x6>
      nw2black(uv);  /* closed upvalues cannot be gray */
   13594:	f043 0320 	orr.w	r3, r3, #32
   13598:	714b      	strb	r3, [r1, #5]
      luaC_barrier(L, uv, slot);
   1359a:	0653      	lsls	r3, r2, #25
   1359c:	d5e3      	bpl.n	13566 <luaF_closeupval+0x6>
   1359e:	690a      	ldr	r2, [r1, #16]
   135a0:	7953      	ldrb	r3, [r2, #5]
   135a2:	f013 0f18 	tst.w	r3, #24
   135a6:	d0de      	beq.n	13566 <luaF_closeupval+0x6>
   135a8:	4620      	mov	r0, r4
   135aa:	f000 ffa8 	bl	144fe <luaC_barrier_>
   135ae:	e7da      	b.n	13566 <luaF_closeupval+0x6>

000135b0 <luaF_close>:

/*
** Close all upvalues and to-be-closed variables up to the given stack
** level.
*/
void luaF_close (lua_State *L, StkId level, int status, int yy) {
   135b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   135b4:	461f      	mov	r7, r3
  ptrdiff_t levelrel = savestack(L, level);
   135b6:	69c3      	ldr	r3, [r0, #28]
void luaF_close (lua_State *L, StkId level, int status, int yy) {
   135b8:	4604      	mov	r4, r0
   135ba:	460d      	mov	r5, r1
   135bc:	4616      	mov	r6, r2
  ptrdiff_t levelrel = savestack(L, level);
   135be:	eba1 0803 	sub.w	r8, r1, r3
  luaF_closeupval(L, level);  /* first, close the upvalues */
   135c2:	f7ff ffcd 	bl	13560 <luaF_closeupval>
  while (L->tbclist >= level) {  /* traverse tbc's down to that level */
   135c6:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   135ca:	45a9      	cmp	r9, r5
   135cc:	d201      	bcs.n	135d2 <luaF_close+0x22>
    StkId tbc = L->tbclist;  /* get variable index */
    poptbclist(L);  /* remove it from list */
    prepcallclosemth(L, tbc, status, yy);  /* close variable */
    level = restorestack(L, levelrel);
  }
}
   135ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  tbc -= tbc->tbclist.delta;
   135d2:	f8b9 000a 	ldrh.w	r0, [r9, #10]
  while (tbc > L->stack && tbc->tbclist.delta == 0)
   135d6:	69e2      	ldr	r2, [r4, #28]
  tbc -= tbc->tbclist.delta;
   135d8:	eba9 1000 	sub.w	r0, r9, r0, lsl #4
  while (tbc > L->stack && tbc->tbclist.delta == 0)
   135dc:	4290      	cmp	r0, r2
   135de:	d80a      	bhi.n	135f6 <luaF_close+0x46>
  if (status == CLOSEKTOP)
   135e0:	1c73      	adds	r3, r6, #1
  L->tbclist = tbc;
   135e2:	6260      	str	r0, [r4, #36]	; 0x24
  if (status == CLOSEKTOP)
   135e4:	d00f      	beq.n	13606 <luaF_close+0x56>
    errobj = s2v(level + 1);  /* error object goes after 'uv' */
   135e6:	f109 0a10 	add.w	sl, r9, #16
    luaD_seterrorobj(L, status, level + 1);  /* set error object */
   135ea:	4652      	mov	r2, sl
   135ec:	4631      	mov	r1, r6
   135ee:	4620      	mov	r0, r4
   135f0:	f7f1 ff24 	bl	543c <luaD_seterrorobj>
   135f4:	e00a      	b.n	1360c <luaF_close+0x5c>
  while (tbc > L->stack && tbc->tbclist.delta == 0)
   135f6:	8943      	ldrh	r3, [r0, #10]
   135f8:	2b00      	cmp	r3, #0
   135fa:	d1f1      	bne.n	135e0 <luaF_close+0x30>
    tbc -= MAXDELTA;  /* remove dummy nodes */
   135fc:	f5a0 207f 	sub.w	r0, r0, #1044480	; 0xff000
   13600:	f5a0 607f 	sub.w	r0, r0, #4080	; 0xff0
   13604:	e7ea      	b.n	135dc <luaF_close+0x2c>
    errobj = &G(L)->nilvalue;  /* error object is nil */
   13606:	6923      	ldr	r3, [r4, #16]
   13608:	f103 0a38 	add.w	sl, r3, #56	; 0x38
  const TValue *tm = luaT_gettmbyobj(L, obj, TM_CLOSE);
   1360c:	2218      	movs	r2, #24
   1360e:	4649      	mov	r1, r9
   13610:	4620      	mov	r0, r4
  StkId top = L->top;
   13612:	68e5      	ldr	r5, [r4, #12]
  const TValue *tm = luaT_gettmbyobj(L, obj, TM_CLOSE);
   13614:	f002 fc5c 	bl	15ed0 <luaT_gettmbyobj>
  setobj2s(L, top, tm);  /* will call metamethod... */
   13618:	e9d0 2300 	ldrd	r2, r3, [r0]
   1361c:	e9c5 2300 	strd	r2, r3, [r5]
   13620:	7a03      	ldrb	r3, [r0, #8]
   13622:	722b      	strb	r3, [r5, #8]
  setobj2s(L, top + 1, obj);  /* with 'self' as the 1st argument */
   13624:	e9d9 2300 	ldrd	r2, r3, [r9]
   13628:	e9c5 2304 	strd	r2, r3, [r5, #16]
   1362c:	f899 3008 	ldrb.w	r3, [r9, #8]
   13630:	762b      	strb	r3, [r5, #24]
  setobj2s(L, top + 2, err);  /* and error msg. as 2nd argument */
   13632:	e9da 2300 	ldrd	r2, r3, [sl]
   13636:	e9c5 2308 	strd	r2, r3, [r5, #32]
   1363a:	f89a 3008 	ldrb.w	r3, [sl, #8]
   1363e:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
  L->top = top + 3;  /* add function and arguments */
   13642:	f105 0330 	add.w	r3, r5, #48	; 0x30
   13646:	60e3      	str	r3, [r4, #12]
  if (yy)
   13648:	b13f      	cbz	r7, 1365a <luaF_close+0xaa>
    luaD_call(L, top, 0);
   1364a:	2200      	movs	r2, #0
   1364c:	4629      	mov	r1, r5
   1364e:	4620      	mov	r0, r4
   13650:	f7ff feef 	bl	13432 <luaD_call>
    level = restorestack(L, levelrel);
   13654:	69e5      	ldr	r5, [r4, #28]
   13656:	4445      	add	r5, r8
   13658:	e7b5      	b.n	135c6 <luaF_close+0x16>
    luaD_callnoyield(L, top, 0);
   1365a:	463a      	mov	r2, r7
   1365c:	4629      	mov	r1, r5
   1365e:	4620      	mov	r0, r4
   13660:	f7ff feea 	bl	13438 <luaD_callnoyield>
   13664:	e7f6      	b.n	13654 <luaF_close+0xa4>

00013666 <luaF_newproto>:


Proto *luaF_newproto (lua_State *L) {
  GCObject *o = luaC_newobj(L, LUA_VPROTO, sizeof(Proto));
   13666:	2254      	movs	r2, #84	; 0x54
   13668:	210a      	movs	r1, #10
Proto *luaF_newproto (lua_State *L) {
   1366a:	b508      	push	{r3, lr}
  GCObject *o = luaC_newobj(L, LUA_VPROTO, sizeof(Proto));
   1366c:	f000 ff93 	bl	14596 <luaC_newobj>
  Proto *f = gco2p(o);
  f->k = NULL;
   13670:	2200      	movs	r2, #0
  f->sizelineinfo = 0;
  f->abslineinfo = NULL;
  f->sizeabslineinfo = 0;
  f->upvalues = NULL;
  f->sizeupvalues = 0;
  f->numparams = 0;
   13672:	80c2      	strh	r2, [r0, #6]
  f->is_vararg = 0;
  f->maxstacksize = 0;
   13674:	7202      	strb	r2, [r0, #8]
  f->locvars = NULL;
  f->sizelocvars = 0;
  f->linedefined = 0;
  f->lastlinedefined = 0;
   13676:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
  f->k = NULL;
   1367a:	6302      	str	r2, [r0, #48]	; 0x30
  f->sizek = 0;
   1367c:	6102      	str	r2, [r0, #16]
  f->p = NULL;
   1367e:	6382      	str	r2, [r0, #56]	; 0x38
  f->sizep = 0;
   13680:	61c2      	str	r2, [r0, #28]
  f->code = NULL;
   13682:	6342      	str	r2, [r0, #52]	; 0x34
  f->sizecode = 0;
   13684:	6142      	str	r2, [r0, #20]
  f->lineinfo = NULL;
   13686:	6402      	str	r2, [r0, #64]	; 0x40
  f->sizelineinfo = 0;
   13688:	6182      	str	r2, [r0, #24]
  f->abslineinfo = NULL;
   1368a:	6442      	str	r2, [r0, #68]	; 0x44
  f->sizeabslineinfo = 0;
   1368c:	6242      	str	r2, [r0, #36]	; 0x24
  f->upvalues = NULL;
   1368e:	63c2      	str	r2, [r0, #60]	; 0x3c
  f->sizeupvalues = 0;
   13690:	60c2      	str	r2, [r0, #12]
  f->locvars = NULL;
   13692:	6482      	str	r2, [r0, #72]	; 0x48
  f->sizelocvars = 0;
   13694:	6202      	str	r2, [r0, #32]
  f->source = NULL;
   13696:	64c2      	str	r2, [r0, #76]	; 0x4c
  return f;
}
   13698:	bd08      	pop	{r3, pc}

0001369a <luaF_freeproto>:


void luaF_freeproto (lua_State *L, Proto *f) {
   1369a:	b538      	push	{r3, r4, r5, lr}
   1369c:	460c      	mov	r4, r1
   1369e:	4605      	mov	r5, r0
  luaM_freearray(L, f->code, f->sizecode);
   136a0:	694a      	ldr	r2, [r1, #20]
   136a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
   136a4:	0092      	lsls	r2, r2, #2
   136a6:	f001 fa0e 	bl	14ac6 <luaM_free_>
  luaM_freearray(L, f->p, f->sizep);
   136aa:	69e2      	ldr	r2, [r4, #28]
   136ac:	4628      	mov	r0, r5
   136ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   136b0:	0092      	lsls	r2, r2, #2
   136b2:	f001 fa08 	bl	14ac6 <luaM_free_>
  luaM_freearray(L, f->k, f->sizek);
   136b6:	6922      	ldr	r2, [r4, #16]
   136b8:	4628      	mov	r0, r5
   136ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
   136bc:	0112      	lsls	r2, r2, #4
   136be:	f001 fa02 	bl	14ac6 <luaM_free_>
  luaM_freearray(L, f->lineinfo, f->sizelineinfo);
   136c2:	4628      	mov	r0, r5
   136c4:	69a2      	ldr	r2, [r4, #24]
   136c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
   136c8:	f001 f9fd 	bl	14ac6 <luaM_free_>
  luaM_freearray(L, f->abslineinfo, f->sizeabslineinfo);
   136cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   136ce:	4628      	mov	r0, r5
   136d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   136d2:	00d2      	lsls	r2, r2, #3
   136d4:	f001 f9f7 	bl	14ac6 <luaM_free_>
  luaM_freearray(L, f->locvars, f->sizelocvars);
   136d8:	220c      	movs	r2, #12
   136da:	6a23      	ldr	r3, [r4, #32]
   136dc:	4628      	mov	r0, r5
   136de:	435a      	muls	r2, r3
   136e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   136e2:	f001 f9f0 	bl	14ac6 <luaM_free_>
  luaM_freearray(L, f->upvalues, f->sizeupvalues);
   136e6:	68e2      	ldr	r2, [r4, #12]
   136e8:	4628      	mov	r0, r5
   136ea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   136ec:	00d2      	lsls	r2, r2, #3
   136ee:	f001 f9ea 	bl	14ac6 <luaM_free_>
  luaM_free(L, f);
   136f2:	4621      	mov	r1, r4
   136f4:	4628      	mov	r0, r5
}
   136f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  luaM_free(L, f);
   136fa:	2254      	movs	r2, #84	; 0x54
   136fc:	f001 b9e3 	b.w	14ac6 <luaM_free_>

00013700 <luaF_getlocalname>:

/*
** Look for n-th local variable at line 'line' in function 'func'.
** Returns NULL if not found.
*/
const char *luaF_getlocalname (const Proto *f, int local_number, int pc) {
   13700:	b5f0      	push	{r4, r5, r6, r7, lr}
  int i;
  for (i = 0; i<f->sizelocvars && f->locvars[i].startpc <= pc; i++) {
   13702:	2400      	movs	r4, #0
   13704:	260c      	movs	r6, #12
   13706:	6a07      	ldr	r7, [r0, #32]
   13708:	42a7      	cmp	r7, r4
   1370a:	dd05      	ble.n	13718 <luaF_getlocalname+0x18>
   1370c:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1370e:	fb06 3304 	mla	r3, r6, r4, r3
   13712:	685d      	ldr	r5, [r3, #4]
   13714:	4295      	cmp	r5, r2
   13716:	dd01      	ble.n	1371c <luaF_getlocalname+0x1c>
      local_number--;
      if (local_number == 0)
        return getstr(f->locvars[i].varname);
    }
  }
  return NULL;  /* not found */
   13718:	2000      	movs	r0, #0
   1371a:	e006      	b.n	1372a <luaF_getlocalname+0x2a>
    if (pc < f->locvars[i].endpc) {  /* is variable active? */
   1371c:	689d      	ldr	r5, [r3, #8]
   1371e:	4295      	cmp	r5, r2
   13720:	dd04      	ble.n	1372c <luaF_getlocalname+0x2c>
      if (local_number == 0)
   13722:	3901      	subs	r1, #1
   13724:	d102      	bne.n	1372c <luaF_getlocalname+0x2c>
        return getstr(f->locvars[i].varname);
   13726:	6818      	ldr	r0, [r3, #0]
   13728:	3010      	adds	r0, #16
}
   1372a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (i = 0; i<f->sizelocvars && f->locvars[i].startpc <= pc; i++) {
   1372c:	3401      	adds	r4, #1
   1372e:	e7eb      	b.n	13708 <luaF_getlocalname+0x8>

00013730 <getgclist>:
  switch (o->tt) {
   13730:	7903      	ldrb	r3, [r0, #4]
   13732:	2b0a      	cmp	r3, #10
   13734:	d809      	bhi.n	1374a <getgclist+0x1a>
   13736:	2b04      	cmp	r3, #4
   13738:	d909      	bls.n	1374e <getgclist+0x1e>
   1373a:	3b05      	subs	r3, #5
   1373c:	2b05      	cmp	r3, #5
   1373e:	d806      	bhi.n	1374e <getgclist+0x1e>
   13740:	e8df f003 	tbb	[pc, r3]
   13744:	0b0f0907 	.word	0x0b0f0907
   13748:	0d05      	.short	0x0d05
   1374a:	2b26      	cmp	r3, #38	; 0x26
   1374c:	d003      	beq.n	13756 <getgclist+0x26>
   1374e:	2000      	movs	r0, #0
}
   13750:	4770      	bx	lr
    case LUA_VTABLE: return &gco2t(o)->gclist;
   13752:	301c      	adds	r0, #28
   13754:	4770      	bx	lr
    case LUA_VLCL: return &gco2lcl(o)->gclist;
   13756:	3008      	adds	r0, #8
   13758:	4770      	bx	lr
    case LUA_VTHREAD: return &gco2th(o)->gclist;
   1375a:	3028      	adds	r0, #40	; 0x28
   1375c:	4770      	bx	lr
    case LUA_VPROTO: return &gco2p(o)->gclist;
   1375e:	3050      	adds	r0, #80	; 0x50
   13760:	4770      	bx	lr
      return &u->gclist;
   13762:	3010      	adds	r0, #16
   13764:	4770      	bx	lr

00013766 <clearkey>:
  if (keyiscollectable(n))
   13766:	7a43      	ldrb	r3, [r0, #9]
   13768:	065b      	lsls	r3, r3, #25
    setdeadkey(n);  /* unused key; remove it */
   1376a:	bf44      	itt	mi
   1376c:	230b      	movmi	r3, #11
   1376e:	7243      	strbmi	r3, [r0, #9]
}
   13770:	4770      	bx	lr

00013772 <reallymarkobject>:
static void reallymarkobject (global_State *g, GCObject *o) {
   13772:	b538      	push	{r3, r4, r5, lr}
   13774:	4605      	mov	r5, r0
   13776:	460c      	mov	r4, r1
  switch (o->tt) {
   13778:	7923      	ldrb	r3, [r4, #4]
   1377a:	2b14      	cmp	r3, #20
   1377c:	d80f      	bhi.n	1379e <reallymarkobject+0x2c>
   1377e:	2b03      	cmp	r3, #3
   13780:	d92d      	bls.n	137de <reallymarkobject+0x6c>
   13782:	3b04      	subs	r3, #4
   13784:	2b10      	cmp	r3, #16
   13786:	d82a      	bhi.n	137de <reallymarkobject+0x6c>
   13788:	e8df f003 	tbb	[pc, r3]
   1378c:	2a0b0b36 	.word	0x2a0b0b36
   13790:	290b150b 	.word	0x290b150b
   13794:	29292929 	.word	0x29292929
   13798:	29292929 	.word	0x29292929
   1379c:	36          	.byte	0x36
   1379d:	00          	.byte	0x00
   1379e:	2b26      	cmp	r3, #38	; 0x26
   137a0:	d11d      	bne.n	137de <reallymarkobject+0x6c>
      linkobjgclist(o, g->gray);  /* to be visited later */
   137a2:	4620      	mov	r0, r4
   137a4:	f7ff ffc4 	bl	13730 <getgclist>
  *pnext = *list;
   137a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   137aa:	6003      	str	r3, [r0, #0]
  *list = o;
   137ac:	666c      	str	r4, [r5, #100]	; 0x64
  set2gray(o);  /* now it is */
   137ae:	7963      	ldrb	r3, [r4, #5]
   137b0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
   137b4:	e025      	b.n	13802 <reallymarkobject+0x90>
      if (upisopen(uv))
   137b6:	68a2      	ldr	r2, [r4, #8]
      set2black(o);  /* nothing to visit */
   137b8:	7963      	ldrb	r3, [r4, #5]
      if (upisopen(uv))
   137ba:	f104 0110 	add.w	r1, r4, #16
   137be:	f023 0338 	bic.w	r3, r3, #56	; 0x38
   137c2:	428a      	cmp	r2, r1
        set2gray(uv);  /* open upvalues are kept gray */
   137c4:	bf14      	ite	ne
   137c6:	b2db      	uxtbne	r3, r3
        set2black(uv);  /* closed upvalues are visited here */
   137c8:	f043 0320 	orreq.w	r3, r3, #32
   137cc:	7163      	strb	r3, [r4, #5]
      markvalue(g, uv->v);  /* mark its content */
   137ce:	7a13      	ldrb	r3, [r2, #8]
   137d0:	065b      	lsls	r3, r3, #25
   137d2:	d504      	bpl.n	137de <reallymarkobject+0x6c>
   137d4:	6814      	ldr	r4, [r2, #0]
   137d6:	7963      	ldrb	r3, [r4, #5]
   137d8:	f013 0f18 	tst.w	r3, #24
   137dc:	d1cc      	bne.n	13778 <reallymarkobject+0x6>
}
   137de:	bd38      	pop	{r3, r4, r5, pc}
      if (u->nuvalue == 0) {  /* no user values? */
   137e0:	88e3      	ldrh	r3, [r4, #6]
   137e2:	2b00      	cmp	r3, #0
   137e4:	d1dd      	bne.n	137a2 <reallymarkobject+0x30>
        markobjectN(g, u->metatable);  /* mark its metatable */
   137e6:	68e1      	ldr	r1, [r4, #12]
   137e8:	b131      	cbz	r1, 137f8 <reallymarkobject+0x86>
   137ea:	794b      	ldrb	r3, [r1, #5]
   137ec:	f013 0f18 	tst.w	r3, #24
   137f0:	d002      	beq.n	137f8 <reallymarkobject+0x86>
   137f2:	4628      	mov	r0, r5
   137f4:	f7ff ffbd 	bl	13772 <reallymarkobject>
        set2black(u);  /* nothing else to mark */
   137f8:	7963      	ldrb	r3, [r4, #5]
   137fa:	f023 0338 	bic.w	r3, r3, #56	; 0x38
   137fe:	f043 0320 	orr.w	r3, r3, #32
  set2gray(o);  /* now it is */
   13802:	7163      	strb	r3, [r4, #5]
}
   13804:	e7eb      	b.n	137de <reallymarkobject+0x6c>

00013806 <markmt>:
static void markmt (global_State *g) {
   13806:	b570      	push	{r4, r5, r6, lr}
   13808:	4604      	mov	r4, r0
   1380a:	f500 7588 	add.w	r5, r0, #272	; 0x110
   1380e:	f500 769a 	add.w	r6, r0, #308	; 0x134
    markobjectN(g, g->mt[i]);
   13812:	f855 1b04 	ldr.w	r1, [r5], #4
   13816:	b131      	cbz	r1, 13826 <markmt+0x20>
   13818:	794b      	ldrb	r3, [r1, #5]
   1381a:	f013 0f18 	tst.w	r3, #24
   1381e:	d002      	beq.n	13826 <markmt+0x20>
   13820:	4620      	mov	r0, r4
   13822:	f7ff ffa6 	bl	13772 <reallymarkobject>
  for (i=0; i < LUA_NUMTAGS; i++)
   13826:	42b5      	cmp	r5, r6
   13828:	d1f3      	bne.n	13812 <markmt+0xc>
}
   1382a:	bd70      	pop	{r4, r5, r6, pc}

0001382c <markbeingfnz>:
static lu_mem markbeingfnz (global_State *g) {
   1382c:	b570      	push	{r4, r5, r6, lr}
   1382e:	4605      	mov	r5, r0
  lu_mem count = 0;
   13830:	2600      	movs	r6, #0
  for (o = g->tobefnz; o != NULL; o = o->next) {
   13832:	6f84      	ldr	r4, [r0, #120]	; 0x78
   13834:	b90c      	cbnz	r4, 1383a <markbeingfnz+0xe>
}
   13836:	4630      	mov	r0, r6
   13838:	bd70      	pop	{r4, r5, r6, pc}
    markobject(g, o);
   1383a:	7963      	ldrb	r3, [r4, #5]
    count++;
   1383c:	3601      	adds	r6, #1
    markobject(g, o);
   1383e:	f013 0f18 	tst.w	r3, #24
   13842:	d003      	beq.n	1384c <markbeingfnz+0x20>
   13844:	4621      	mov	r1, r4
   13846:	4628      	mov	r0, r5
   13848:	f7ff ff93 	bl	13772 <reallymarkobject>
  for (o = g->tobefnz; o != NULL; o = o->next) {
   1384c:	6824      	ldr	r4, [r4, #0]
   1384e:	e7f1      	b.n	13834 <markbeingfnz+0x8>

00013850 <genlink>:
static void genlink (global_State *g, GCObject *o) {
   13850:	b538      	push	{r3, r4, r5, lr}
  if (getage(o) == G_TOUCHED1) {  /* touched in this cycle? */
   13852:	794c      	ldrb	r4, [r1, #5]
static void genlink (global_State *g, GCObject *o) {
   13854:	4605      	mov	r5, r0
   13856:	f004 0307 	and.w	r3, r4, #7
  if (getage(o) == G_TOUCHED1) {  /* touched in this cycle? */
   1385a:	2b05      	cmp	r3, #5
   1385c:	d109      	bne.n	13872 <genlink+0x22>
    linkobjgclist(o, g->grayagain);  /* link it back in 'grayagain' */
   1385e:	4608      	mov	r0, r1
   13860:	f7ff ff66 	bl	13730 <getgclist>
  *pnext = *list;
   13864:	6eab      	ldr	r3, [r5, #104]	; 0x68
  set2gray(o);  /* now it is */
   13866:	f024 0438 	bic.w	r4, r4, #56	; 0x38
  *pnext = *list;
   1386a:	6003      	str	r3, [r0, #0]
  *list = o;
   1386c:	66a9      	str	r1, [r5, #104]	; 0x68
    changeage(o, G_TOUCHED2, G_OLD);  /* advance age */
   1386e:	714c      	strb	r4, [r1, #5]
}
   13870:	bd38      	pop	{r3, r4, r5, pc}
  else if (getage(o) == G_TOUCHED2)
   13872:	2b06      	cmp	r3, #6
   13874:	d1fc      	bne.n	13870 <genlink+0x20>
    changeage(o, G_TOUCHED2, G_OLD);  /* advance age */
   13876:	f084 0402 	eor.w	r4, r4, #2
   1387a:	e7f8      	b.n	1386e <genlink+0x1e>

0001387c <separatetobefnz>:
  GCObject **lastnext = findlast(&g->tobefnz);
   1387c:	6f83      	ldr	r3, [r0, #120]	; 0x78
static void separatetobefnz (global_State *g, int all) {
   1387e:	b570      	push	{r4, r5, r6, lr}
  GCObject **p = &g->finobj;
   13880:	f100 0260 	add.w	r2, r0, #96	; 0x60
  GCObject **lastnext = findlast(&g->tobefnz);
   13884:	f100 0478 	add.w	r4, r0, #120	; 0x78
  while (*p != NULL)
   13888:	b92b      	cbnz	r3, 13896 <separatetobefnz+0x1a>
  while ((curr = *p) != g->finobjold1) {  /* traverse all finalizable objects */
   1388a:	6813      	ldr	r3, [r2, #0]
   1388c:	f8d0 5094 	ldr.w	r5, [r0, #148]	; 0x94
   13890:	429d      	cmp	r5, r3
   13892:	d103      	bne.n	1389c <separatetobefnz+0x20>
}
   13894:	bd70      	pop	{r4, r5, r6, pc}
    p = &(*p)->next;
   13896:	461c      	mov	r4, r3
   13898:	681b      	ldr	r3, [r3, #0]
   1389a:	e7f5      	b.n	13888 <separatetobefnz+0xc>
    if (!(iswhite(curr) || all))  /* not being collected? */
   1389c:	795e      	ldrb	r6, [r3, #5]
      p = &curr->next;  /* don't bother with it */
   1389e:	461d      	mov	r5, r3
    if (!(iswhite(curr) || all))  /* not being collected? */
   138a0:	f016 0f18 	tst.w	r6, #24
   138a4:	d100      	bne.n	138a8 <separatetobefnz+0x2c>
   138a6:	b161      	cbz	r1, 138c2 <separatetobefnz+0x46>
      if (curr == g->finobjsur)  /* removing 'finobjsur'? */
   138a8:	f8d0 6090 	ldr.w	r6, [r0, #144]	; 0x90
        g->finobjsur = curr->next;  /* correct it */
   138ac:	681d      	ldr	r5, [r3, #0]
      if (curr == g->finobjsur)  /* removing 'finobjsur'? */
   138ae:	429e      	cmp	r6, r3
        g->finobjsur = curr->next;  /* correct it */
   138b0:	bf08      	it	eq
   138b2:	f8c0 5090 	streq.w	r5, [r0, #144]	; 0x90
      *p = curr->next;  /* remove 'curr' from 'finobj' list */
   138b6:	6015      	str	r5, [r2, #0]
      curr->next = *lastnext;  /* link at the end of 'tobefnz' list */
   138b8:	6825      	ldr	r5, [r4, #0]
   138ba:	601d      	str	r5, [r3, #0]
      *lastnext = curr;
   138bc:	6023      	str	r3, [r4, #0]
   138be:	4615      	mov	r5, r2
      lastnext = &curr->next;
   138c0:	461c      	mov	r4, r3
      *lastnext = curr;
   138c2:	462a      	mov	r2, r5
   138c4:	e7e1      	b.n	1388a <separatetobefnz+0xe>

000138c6 <correctgraylist>:
** be turned white and still be in the list. They are only removed.
** 'TOUCHED1' objects are advanced to 'TOUCHED2' and remain on the list;
** Non-white threads also remain on the list; 'TOUCHED2' objects become
** regular old; they and anything else are removed from the list.
*/
static GCObject **correctgraylist (GCObject **p) {
   138c6:	b538      	push	{r3, r4, r5, lr}
  GCObject *curr;
  while ((curr = *p) != NULL) {
   138c8:	6801      	ldr	r1, [r0, #0]
      if (getage(curr) == G_TOUCHED2)  /* advance from TOUCHED2... */
        changeage(curr, G_TOUCHED2, G_OLD);  /* ... to OLD */
      nw2black(curr);  /* make object black (to be removed) */
      goto remove;
    }
    remove: *p = *next; continue;
   138ca:	4604      	mov	r4, r0
  while ((curr = *p) != NULL) {
   138cc:	b901      	cbnz	r1, 138d0 <correctgraylist+0xa>
    remain: p = next; continue;
  }
  return p;
}
   138ce:	bd38      	pop	{r3, r4, r5, pc}
    GCObject **next = getgclist(curr);
   138d0:	4608      	mov	r0, r1
   138d2:	f7ff ff2d 	bl	13730 <getgclist>
    if (iswhite(curr))
   138d6:	794b      	ldrb	r3, [r1, #5]
   138d8:	f013 0f18 	tst.w	r3, #24
   138dc:	d115      	bne.n	1390a <correctgraylist+0x44>
    else if (getage(curr) == G_TOUCHED1) {  /* touched in this cycle? */
   138de:	f003 0207 	and.w	r2, r3, #7
   138e2:	2a05      	cmp	r2, #5
   138e4:	d105      	bne.n	138f2 <correctgraylist+0x2c>
      nw2black(curr);  /* make it black, for next barrier */
   138e6:	f043 0320 	orr.w	r3, r3, #32
      changeage(curr, G_TOUCHED1, G_TOUCHED2);
   138ea:	f083 0303 	eor.w	r3, r3, #3
   138ee:	714b      	strb	r3, [r1, #5]
      goto remain;  /* keep it in the list and go to next element */
   138f0:	e7ea      	b.n	138c8 <correctgraylist+0x2>
    else if (curr->tt == LUA_VTHREAD) {
   138f2:	790d      	ldrb	r5, [r1, #4]
   138f4:	2d08      	cmp	r5, #8
   138f6:	d0e7      	beq.n	138c8 <correctgraylist+0x2>
      if (getage(curr) == G_TOUCHED2)  /* advance from TOUCHED2... */
   138f8:	2a06      	cmp	r2, #6
        changeage(curr, G_TOUCHED2, G_OLD);  /* ... to OLD */
   138fa:	bf04      	itt	eq
   138fc:	f083 0302 	eoreq.w	r3, r3, #2
   13900:	714b      	strbeq	r3, [r1, #5]
      nw2black(curr);  /* make object black (to be removed) */
   13902:	794b      	ldrb	r3, [r1, #5]
   13904:	f043 0320 	orr.w	r3, r3, #32
   13908:	714b      	strb	r3, [r1, #5]
    remove: *p = *next; continue;
   1390a:	6803      	ldr	r3, [r0, #0]
   1390c:	4620      	mov	r0, r4
   1390e:	6023      	str	r3, [r4, #0]
   13910:	e7da      	b.n	138c8 <correctgraylist+0x2>

00013912 <markold>:
/*
** Mark black 'OLD1' objects when starting a new young collection.
** Gray objects are already in some gray list, and so will be visited
** in the atomic step.
*/
static void markold (global_State *g, GCObject *from, GCObject *to) {
   13912:	b570      	push	{r4, r5, r6, lr}
   13914:	4606      	mov	r6, r0
   13916:	460c      	mov	r4, r1
   13918:	4615      	mov	r5, r2
  GCObject *p;
  for (p = from; p != to; p = p->next) {
   1391a:	42ac      	cmp	r4, r5
   1391c:	d100      	bne.n	13920 <markold+0xe>
      changeage(p, G_OLD1, G_OLD);  /* now they are old */
      if (isblack(p))
        reallymarkobject(g, p);
    }
  }
}
   1391e:	bd70      	pop	{r4, r5, r6, pc}
    if (getage(p) == G_OLD1) {
   13920:	7963      	ldrb	r3, [r4, #5]
   13922:	f003 0207 	and.w	r2, r3, #7
   13926:	2a03      	cmp	r2, #3
   13928:	d108      	bne.n	1393c <markold+0x2a>
      changeage(p, G_OLD1, G_OLD);  /* now they are old */
   1392a:	f083 0307 	eor.w	r3, r3, #7
   1392e:	7163      	strb	r3, [r4, #5]
      if (isblack(p))
   13930:	069b      	lsls	r3, r3, #26
   13932:	d503      	bpl.n	1393c <markold+0x2a>
        reallymarkobject(g, p);
   13934:	4621      	mov	r1, r4
   13936:	4630      	mov	r0, r6
   13938:	f7ff ff1b 	bl	13772 <reallymarkobject>
  for (p = from; p != to; p = p->next) {
   1393c:	6824      	ldr	r4, [r4, #0]
   1393e:	e7ec      	b.n	1391a <markold+0x8>

00013940 <freeobj>:
static void freeobj (lua_State *L, GCObject *o) {
   13940:	b538      	push	{r3, r4, r5, lr}
  switch (o->tt) {
   13942:	790b      	ldrb	r3, [r1, #4]
static void freeobj (lua_State *L, GCObject *o) {
   13944:	4605      	mov	r5, r0
  switch (o->tt) {
   13946:	2b14      	cmp	r3, #20
static void freeobj (lua_State *L, GCObject *o) {
   13948:	460c      	mov	r4, r1
  switch (o->tt) {
   1394a:	d80f      	bhi.n	1396c <freeobj+0x2c>
   1394c:	2b03      	cmp	r3, #3
   1394e:	d90f      	bls.n	13970 <freeobj+0x30>
   13950:	3b04      	subs	r3, #4
   13952:	2b10      	cmp	r3, #16
   13954:	d80c      	bhi.n	13970 <freeobj+0x30>
   13956:	e8df f003 	tbb	[pc, r3]
   1395a:	2738      	.short	0x2738
   1395c:	102b2f1c 	.word	0x102b2f1c
   13960:	0b0b0b0c 	.word	0x0b0b0b0c
   13964:	0b0b0b0b 	.word	0x0b0b0b0b
   13968:	0b0b      	.short	0x0b0b
   1396a:	3d          	.byte	0x3d
   1396b:	00          	.byte	0x00
   1396c:	2b26      	cmp	r3, #38	; 0x26
   1396e:	d014      	beq.n	1399a <freeobj+0x5a>
}
   13970:	bd38      	pop	{r3, r4, r5, pc}
   13972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      luaF_freeproto(L, gco2p(o));
   13976:	f7ff be90 	b.w	1369a <luaF_freeproto>
  if (upisopen(uv))
   1397a:	688a      	ldr	r2, [r1, #8]
   1397c:	f101 0310 	add.w	r3, r1, #16
   13980:	429a      	cmp	r2, r3
   13982:	d002      	beq.n	1398a <freeobj+0x4a>
    luaF_unlinkupval(uv);
   13984:	4608      	mov	r0, r1
   13986:	f7ff fde4 	bl	13552 <luaF_unlinkupval>
  luaM_free(L, uv);
   1398a:	2220      	movs	r2, #32
      luaM_freemem(L, ts, sizelstring(ts->u.lnglen));
   1398c:	4621      	mov	r1, r4
   1398e:	4628      	mov	r0, r5
   13990:	e006      	b.n	139a0 <freeobj+0x60>
      luaM_freemem(L, cl, sizeLclosure(cl->nupvalues));
   13992:	798a      	ldrb	r2, [r1, #6]
   13994:	3204      	adds	r2, #4
   13996:	0092      	lsls	r2, r2, #2
   13998:	e7f8      	b.n	1398c <freeobj+0x4c>
      luaM_freemem(L, cl, sizeCclosure(cl->nupvalues));
   1399a:	798a      	ldrb	r2, [r1, #6]
   1399c:	3201      	adds	r2, #1
   1399e:	0112      	lsls	r2, r2, #4
}
   139a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      luaM_freemem(L, ts, sizelstring(ts->u.lnglen));
   139a4:	f001 b88f 	b.w	14ac6 <luaM_free_>
}
   139a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      luaH_free(L, gco2t(o));
   139ac:	f002 b934 	b.w	15c18 <luaH_free>
}
   139b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      luaE_freethread(L, gco2th(o));
   139b4:	f001 bf43 	b.w	1583e <luaE_freethread>
      luaM_freemem(L, o, sizeudata(u->nuvalue, u->len));
   139b8:	88cb      	ldrh	r3, [r1, #6]
   139ba:	b123      	cbz	r3, 139c6 <freeobj+0x86>
   139bc:	011b      	lsls	r3, r3, #4
   139be:	3318      	adds	r3, #24
   139c0:	68a2      	ldr	r2, [r4, #8]
   139c2:	441a      	add	r2, r3
   139c4:	e7e2      	b.n	1398c <freeobj+0x4c>
   139c6:	2310      	movs	r3, #16
   139c8:	e7fa      	b.n	139c0 <freeobj+0x80>
      luaS_remove(L, ts);  /* remove it from hash table */
   139ca:	f002 f893 	bl	15af4 <luaS_remove>
      luaM_freemem(L, ts, sizelstring(ts->shrlen));
   139ce:	79e2      	ldrb	r2, [r4, #7]
      luaM_freemem(L, ts, sizelstring(ts->u.lnglen));
   139d0:	3211      	adds	r2, #17
   139d2:	e7db      	b.n	1398c <freeobj+0x4c>
   139d4:	68ca      	ldr	r2, [r1, #12]
   139d6:	e7fb      	b.n	139d0 <freeobj+0x90>

000139d8 <sweeplist>:
                             int *countout) {
   139d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   139dc:	4607      	mov	r7, r0
   139de:	4690      	mov	r8, r2
  for (i = 0; *p != NULL && i < countin; i++) {
   139e0:	460c      	mov	r4, r1
   139e2:	f04f 0a00 	mov.w	sl, #0
                             int *countout) {
   139e6:	461d      	mov	r5, r3
  int ow = otherwhite(g);
   139e8:	6903      	ldr	r3, [r0, #16]
   139ea:	f893 604c 	ldrb.w	r6, [r3, #76]	; 0x4c
   139ee:	f086 0918 	eor.w	r9, r6, #24
  int white = luaC_white(g);  /* current white */
   139f2:	f006 0618 	and.w	r6, r6, #24
  for (i = 0; *p != NULL && i < countin; i++) {
   139f6:	6821      	ldr	r1, [r4, #0]
   139f8:	b1e9      	cbz	r1, 13a36 <sweeplist+0x5e>
   139fa:	45c2      	cmp	sl, r8
   139fc:	d103      	bne.n	13a06 <sweeplist+0x2e>
  if (countout)
   139fe:	b1bd      	cbz	r5, 13a30 <sweeplist+0x58>
    *countout = i;  /* number of elements traversed */
   13a00:	f8c5 a000 	str.w	sl, [r5]
  return (*p == NULL) ? NULL : p;
   13a04:	e014      	b.n	13a30 <sweeplist+0x58>
    int marked = curr->marked;
   13a06:	794b      	ldrb	r3, [r1, #5]
    if (isdeadm(ow, marked)) {  /* is 'curr' dead? */
   13a08:	ea19 0f03 	tst.w	r9, r3
   13a0c:	d007      	beq.n	13a1e <sweeplist+0x46>
      *p = curr->next;  /* remove 'curr' from list */
   13a0e:	680b      	ldr	r3, [r1, #0]
      freeobj(L, curr);  /* erase 'curr' */
   13a10:	4638      	mov	r0, r7
      *p = curr->next;  /* remove 'curr' from list */
   13a12:	6023      	str	r3, [r4, #0]
      freeobj(L, curr);  /* erase 'curr' */
   13a14:	f7ff ff94 	bl	13940 <freeobj>
  for (i = 0; *p != NULL && i < countin; i++) {
   13a18:	f10a 0a01 	add.w	sl, sl, #1
   13a1c:	e7eb      	b.n	139f6 <sweeplist+0x1e>
      curr->marked = cast_byte((marked & ~maskgcbits) | white);
   13a1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   13a22:	4333      	orrs	r3, r6
      p = &curr->next;  /* go to next element */
   13a24:	460c      	mov	r4, r1
      curr->marked = cast_byte((marked & ~maskgcbits) | white);
   13a26:	714b      	strb	r3, [r1, #5]
      p = &curr->next;  /* go to next element */
   13a28:	e7f6      	b.n	13a18 <sweeplist+0x40>
  return (*p == NULL) ? NULL : p;
   13a2a:	460c      	mov	r4, r1
    *countout = i;  /* number of elements traversed */
   13a2c:	f8c5 a000 	str.w	sl, [r5]
}
   13a30:	4620      	mov	r0, r4
   13a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (countout)
   13a36:	2d00      	cmp	r5, #0
   13a38:	d1f7      	bne.n	13a2a <sweeplist+0x52>
  return (*p == NULL) ? NULL : p;
   13a3a:	462c      	mov	r4, r5
   13a3c:	e7f8      	b.n	13a30 <sweeplist+0x58>

00013a3e <entersweep>:
** The call to 'sweeptolive' makes the pointer point to an object
** inside the list (instead of to the header), so that the real sweep do
** not need to skip objects created between "now" and the start of the
** real sweep.
*/
static void entersweep (lua_State *L) {
   13a3e:	b570      	push	{r4, r5, r6, lr}
  global_State *g = G(L);
   13a40:	6905      	ldr	r5, [r0, #16]
  g->gcstate = GCSswpallgc;
   13a42:	2303      	movs	r3, #3
  lua_assert(g->sweepgc == NULL);
  g->sweepgc = sweeptolive(L, &g->allgc);
   13a44:	f105 0658 	add.w	r6, r5, #88	; 0x58
static void entersweep (lua_State *L) {
   13a48:	4604      	mov	r4, r0
  g->sweepgc = sweeptolive(L, &g->allgc);
   13a4a:	4631      	mov	r1, r6
  g->gcstate = GCSswpallgc;
   13a4c:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
    p = sweeplist(L, p, 1, NULL);
   13a50:	2300      	movs	r3, #0
   13a52:	2201      	movs	r2, #1
   13a54:	4620      	mov	r0, r4
   13a56:	f7ff ffbf 	bl	139d8 <sweeplist>
  } while (p == old);
   13a5a:	4286      	cmp	r6, r0
    p = sweeplist(L, p, 1, NULL);
   13a5c:	4601      	mov	r1, r0
  } while (p == old);
   13a5e:	d0f7      	beq.n	13a50 <entersweep+0x12>
  g->sweepgc = sweeptolive(L, &g->allgc);
   13a60:	65e8      	str	r0, [r5, #92]	; 0x5c
}
   13a62:	bd70      	pop	{r4, r5, r6, pc}

00013a64 <sweep2old>:
static void sweep2old (lua_State *L, GCObject **p) {
   13a64:	b570      	push	{r4, r5, r6, lr}
   13a66:	4605      	mov	r5, r0
   13a68:	460c      	mov	r4, r1
  global_State *g = G(L);
   13a6a:	6906      	ldr	r6, [r0, #16]
  while ((curr = *p) != NULL) {
   13a6c:	6821      	ldr	r1, [r4, #0]
   13a6e:	b901      	cbnz	r1, 13a72 <sweep2old+0xe>
}
   13a70:	bd70      	pop	{r4, r5, r6, pc}
    if (iswhite(curr)) {  /* is 'curr' dead? */
   13a72:	794b      	ldrb	r3, [r1, #5]
   13a74:	f013 0f18 	tst.w	r3, #24
   13a78:	d005      	beq.n	13a86 <sweep2old+0x22>
      *p = curr->next;  /* remove 'curr' from list */
   13a7a:	680b      	ldr	r3, [r1, #0]
      freeobj(L, curr);  /* erase 'curr' */
   13a7c:	4628      	mov	r0, r5
      *p = curr->next;  /* remove 'curr' from list */
   13a7e:	6023      	str	r3, [r4, #0]
      freeobj(L, curr);  /* erase 'curr' */
   13a80:	f7ff ff5e 	bl	13940 <freeobj>
   13a84:	e7f2      	b.n	13a6c <sweep2old+0x8>
      if (curr->tt == LUA_VTHREAD) {  /* threads must be watched */
   13a86:	790a      	ldrb	r2, [r1, #4]
      setage(curr, G_OLD);
   13a88:	f023 0307 	bic.w	r3, r3, #7
      if (curr->tt == LUA_VTHREAD) {  /* threads must be watched */
   13a8c:	2a08      	cmp	r2, #8
        linkgclist(th, g->grayagain);  /* insert into 'grayagain' list */
   13a8e:	460c      	mov	r4, r1
      setage(curr, G_OLD);
   13a90:	f043 0304 	orr.w	r3, r3, #4
      if (curr->tt == LUA_VTHREAD) {  /* threads must be watched */
   13a94:	d106      	bne.n	13aa4 <sweep2old+0x40>
  *pnext = *list;
   13a96:	6eb2      	ldr	r2, [r6, #104]	; 0x68
   13a98:	628a      	str	r2, [r1, #40]	; 0x28
  *list = o;
   13a9a:	66b1      	str	r1, [r6, #104]	; 0x68
        set2gray(curr);  /* open upvalues are always gray */
   13a9c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
        nw2black(curr);
   13aa0:	714b      	strb	r3, [r1, #5]
      p = &curr->next;  /* go to next element */
   13aa2:	e7e3      	b.n	13a6c <sweep2old+0x8>
      else if (curr->tt == LUA_VUPVAL && upisopen(gco2upv(curr)))
   13aa4:	2a09      	cmp	r2, #9
   13aa6:	d104      	bne.n	13ab2 <sweep2old+0x4e>
   13aa8:	6888      	ldr	r0, [r1, #8]
   13aaa:	f101 0210 	add.w	r2, r1, #16
   13aae:	4290      	cmp	r0, r2
   13ab0:	d1f4      	bne.n	13a9c <sweep2old+0x38>
        nw2black(curr);
   13ab2:	f043 0320 	orr.w	r3, r3, #32
   13ab6:	e7f3      	b.n	13aa0 <sweep2old+0x3c>

00013ab8 <dothecall>:
  luaD_callnoyield(L, L->top - 2, 0);
   13ab8:	68c1      	ldr	r1, [r0, #12]
   13aba:	2200      	movs	r2, #0
   13abc:	3920      	subs	r1, #32
   13abe:	f7ff bcbb 	b.w	13438 <luaD_callnoyield>

00013ac2 <setpause>:
  l_mem estimate = g->GCestimate / PAUSEADJ;  /* adjust 'estimate' */
   13ac2:	2164      	movs	r1, #100	; 0x64
   13ac4:	6903      	ldr	r3, [r0, #16]
static void setpause (global_State *g) {
   13ac6:	b430      	push	{r4, r5}
  l_mem estimate = g->GCestimate / PAUSEADJ;  /* adjust 'estimate' */
   13ac8:	fbb3 f3f1 	udiv	r3, r3, r1
  threshold = (pause < MAX_LMEM / estimate)  /* overflow? */
   13acc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   13ad0:	fbb1 f5f3 	udiv	r5, r1, r3
  int pause = getgcparam(g->gcpause);
   13ad4:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
            : MAX_LMEM;  /* overflow; truncate to maximum */
   13ad8:	ebb5 0f82 	cmp.w	r5, r2, lsl #2
   13adc:	bfd8      	it	le
   13ade:	460b      	movle	r3, r1
  int pause = getgcparam(g->gcpause);
   13ae0:	ea4f 0482 	mov.w	r4, r2, lsl #2
            : MAX_LMEM;  /* overflow; truncate to maximum */
   13ae4:	bfc8      	it	gt
   13ae6:	4363      	mulgt	r3, r4
  debt = gettotalbytes(g) - threshold;
   13ae8:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
}
   13aec:	bc30      	pop	{r4, r5}
  debt = gettotalbytes(g) - threshold;
   13aee:	4411      	add	r1, r2
   13af0:	1ac9      	subs	r1, r1, r3
  luaE_setdebt(g, debt);
   13af2:	ea01 71e1 	and.w	r1, r1, r1, asr #31
   13af6:	f001 be1b 	b.w	15730 <luaE_setdebt>

00013afa <setminordebt>:
  luaE_setdebt(g, -(cast(l_mem, (gettotalbytes(g) / 100)) * g->genminormul));
   13afa:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   13afe:	4411      	add	r1, r2
   13b00:	2264      	movs	r2, #100	; 0x64
   13b02:	fbb1 f1f2 	udiv	r1, r1, r2
   13b06:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   13b0a:	4359      	muls	r1, r3
   13b0c:	4249      	negs	r1, r1
   13b0e:	f001 be0f 	b.w	15730 <luaE_setdebt>

00013b12 <iscleared>:
static int iscleared (global_State *g, const GCObject *o) {
   13b12:	b508      	push	{r3, lr}
  if (o == NULL) return 0;  /* non-collectable value */
   13b14:	b151      	cbz	r1, 13b2c <iscleared+0x1a>
  else if (novariant(o->tt) == LUA_TSTRING) {
   13b16:	790a      	ldrb	r2, [r1, #4]
   13b18:	794b      	ldrb	r3, [r1, #5]
   13b1a:	f002 020f 	and.w	r2, r2, #15
   13b1e:	2a04      	cmp	r2, #4
   13b20:	f003 0318 	and.w	r3, r3, #24
   13b24:	d104      	bne.n	13b30 <iscleared+0x1e>
    markobject(g, o);  /* strings are 'values', so are never weak */
   13b26:	b11b      	cbz	r3, 13b30 <iscleared+0x1e>
   13b28:	f7ff fe23 	bl	13772 <reallymarkobject>
   13b2c:	2000      	movs	r0, #0
}
   13b2e:	bd08      	pop	{r3, pc}
  if (o == NULL) return 0;  /* non-collectable value */
   13b30:	4618      	mov	r0, r3
   13b32:	e7fc      	b.n	13b2e <iscleared+0x1c>

00013b34 <clearbykeys>:
static void clearbykeys (global_State *g, GCObject *l) {
   13b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13b38:	4607      	mov	r7, r0
   13b3a:	460d      	mov	r5, r1
    Node *limit = gnodelast(h);
   13b3c:	f04f 0818 	mov.w	r8, #24
        setempty(gval(n));  /* remove entry */
   13b40:	f04f 0910 	mov.w	r9, #16
  for (; l; l = gco2t(l)->gclist) {
   13b44:	b90d      	cbnz	r5, 13b4a <clearbykeys+0x16>
}
   13b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    Node *limit = gnodelast(h);
   13b4a:	79ee      	ldrb	r6, [r5, #7]
   13b4c:	692c      	ldr	r4, [r5, #16]
   13b4e:	fa08 f606 	lsl.w	r6, r8, r6
   13b52:	4426      	add	r6, r4
    for (n = gnode(h, 0); n < limit; n++) {
   13b54:	42b4      	cmp	r4, r6
   13b56:	d301      	bcc.n	13b5c <clearbykeys+0x28>
  for (; l; l = gco2t(l)->gclist) {
   13b58:	69ed      	ldr	r5, [r5, #28]
   13b5a:	e7f3      	b.n	13b44 <clearbykeys+0x10>
      if (iscleared(g, gckeyN(n)))  /* unmarked key? */
   13b5c:	7a61      	ldrb	r1, [r4, #9]
   13b5e:	4638      	mov	r0, r7
   13b60:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   13b64:	bf18      	it	ne
   13b66:	6921      	ldrne	r1, [r4, #16]
   13b68:	f7ff ffd3 	bl	13b12 <iscleared>
   13b6c:	b128      	cbz	r0, 13b7a <clearbykeys+0x46>
        setempty(gval(n));  /* remove entry */
   13b6e:	f884 9008 	strb.w	r9, [r4, #8]
        clearkey(n);  /* clear its key */
   13b72:	4620      	mov	r0, r4
   13b74:	f7ff fdf7 	bl	13766 <clearkey>
   13b78:	e002      	b.n	13b80 <clearbykeys+0x4c>
      if (isempty(gval(n)))  /* is entry empty? */
   13b7a:	7a23      	ldrb	r3, [r4, #8]
   13b7c:	071b      	lsls	r3, r3, #28
   13b7e:	d0f8      	beq.n	13b72 <clearbykeys+0x3e>
    for (n = gnode(h, 0); n < limit; n++) {
   13b80:	3418      	adds	r4, #24
   13b82:	e7e7      	b.n	13b54 <clearbykeys+0x20>

00013b84 <traverseephemeron>:
static int traverseephemeron (global_State *g, Table *h, int inv) {
   13b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b88:	4605      	mov	r5, r0
   13b8a:	b085      	sub	sp, #20
  unsigned int asize = luaH_realasize(h);
   13b8c:	4608      	mov	r0, r1
static int traverseephemeron (global_State *g, Table *h, int inv) {
   13b8e:	460c      	mov	r4, r1
  for (i = 0; i < asize; i++) {
   13b90:	2700      	movs	r7, #0
static int traverseephemeron (global_State *g, Table *h, int inv) {
   13b92:	9202      	str	r2, [sp, #8]
  unsigned int asize = luaH_realasize(h);
   13b94:	f002 f82b 	bl	15bee <luaH_realasize>
  unsigned int nsize = sizenode(h);
   13b98:	2301      	movs	r3, #1
  unsigned int asize = luaH_realasize(h);
   13b9a:	4681      	mov	r9, r0
  int marked = 0;  /* true if an object is marked in this traversal */
   13b9c:	46b8      	mov	r8, r7
  unsigned int nsize = sizenode(h);
   13b9e:	79e6      	ldrb	r6, [r4, #7]
   13ba0:	40b3      	lsls	r3, r6
   13ba2:	9301      	str	r3, [sp, #4]
  for (i = 0; i < asize; i++) {
   13ba4:	454f      	cmp	r7, r9
   13ba6:	d11a      	bne.n	13bde <traverseephemeron+0x5a>
  for (i = 0; i < nsize; i++) {
   13ba8:	f04f 0a00 	mov.w	sl, #0
   13bac:	f04f 0b18 	mov.w	fp, #24
  int hasww = 0;  /* true if table has entry "white-key -> white-value" */
   13bb0:	46d1      	mov	r9, sl
  int hasclears = 0;  /* true if table has white keys */
   13bb2:	4657      	mov	r7, sl
   13bb4:	fa0b f606 	lsl.w	r6, fp, r6
   13bb8:	3e18      	subs	r6, #24
  for (i = 0; i < nsize; i++) {
   13bba:	9b01      	ldr	r3, [sp, #4]
   13bbc:	459a      	cmp	sl, r3
   13bbe:	d121      	bne.n	13c04 <traverseephemeron+0x80>
  if (g->gcstate == GCSpropagate)
   13bc0:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
   13bc4:	2b00      	cmp	r3, #0
   13bc6:	d152      	bne.n	13c6e <traverseephemeron+0xea>
  *pnext = *list;
   13bc8:	6eab      	ldr	r3, [r5, #104]	; 0x68
   13bca:	61e3      	str	r3, [r4, #28]
  *list = o;
   13bcc:	66ac      	str	r4, [r5, #104]	; 0x68
  set2gray(o);  /* now it is */
   13bce:	7963      	ldrb	r3, [r4, #5]
   13bd0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
   13bd4:	7163      	strb	r3, [r4, #5]
}
   13bd6:	4640      	mov	r0, r8
   13bd8:	b005      	add	sp, #20
   13bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (valiswhite(&h->array[i])) {
   13bde:	68e3      	ldr	r3, [r4, #12]
   13be0:	013a      	lsls	r2, r7, #4
   13be2:	eb03 1107 	add.w	r1, r3, r7, lsl #4
   13be6:	7a09      	ldrb	r1, [r1, #8]
   13be8:	0649      	lsls	r1, r1, #25
   13bea:	d509      	bpl.n	13c00 <traverseephemeron+0x7c>
   13bec:	5899      	ldr	r1, [r3, r2]
   13bee:	794b      	ldrb	r3, [r1, #5]
   13bf0:	f013 0f18 	tst.w	r3, #24
   13bf4:	d004      	beq.n	13c00 <traverseephemeron+0x7c>
      reallymarkobject(g, gcvalue(&h->array[i]));
   13bf6:	4628      	mov	r0, r5
   13bf8:	f7ff fdbb 	bl	13772 <reallymarkobject>
      marked = 1;
   13bfc:	f04f 0801 	mov.w	r8, #1
  for (i = 0; i < asize; i++) {
   13c00:	3701      	adds	r7, #1
   13c02:	e7cf      	b.n	13ba4 <traverseephemeron+0x20>
    Node *n = inv ? gnode(h, nsize - 1 - i) : gnode(h, i);
   13c04:	9a02      	ldr	r2, [sp, #8]
   13c06:	6923      	ldr	r3, [r4, #16]
   13c08:	b152      	cbz	r2, 13c20 <traverseephemeron+0x9c>
   13c0a:	4433      	add	r3, r6
    if (isempty(gval(n)))  /* entry is empty? */
   13c0c:	7a19      	ldrb	r1, [r3, #8]
   13c0e:	0708      	lsls	r0, r1, #28
   13c10:	d109      	bne.n	13c26 <traverseephemeron+0xa2>
      clearkey(n);  /* clear its key */
   13c12:	4618      	mov	r0, r3
   13c14:	f7ff fda7 	bl	13766 <clearkey>
  for (i = 0; i < nsize; i++) {
   13c18:	f10a 0a01 	add.w	sl, sl, #1
   13c1c:	3e18      	subs	r6, #24
   13c1e:	e7cc      	b.n	13bba <traverseephemeron+0x36>
    Node *n = inv ? gnode(h, nsize - 1 - i) : gnode(h, i);
   13c20:	fb0b 330a 	mla	r3, fp, sl, r3
   13c24:	e7f2      	b.n	13c0c <traverseephemeron+0x88>
    else if (iscleared(g, gckeyN(n))) {  /* key is not marked (yet)? */
   13c26:	7a59      	ldrb	r1, [r3, #9]
   13c28:	4628      	mov	r0, r5
   13c2a:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   13c2e:	bf18      	it	ne
   13c30:	6919      	ldrne	r1, [r3, #16]
   13c32:	9303      	str	r3, [sp, #12]
   13c34:	f7ff ff6d 	bl	13b12 <iscleared>
   13c38:	9b03      	ldr	r3, [sp, #12]
   13c3a:	7a19      	ldrb	r1, [r3, #8]
   13c3c:	b150      	cbz	r0, 13c54 <traverseephemeron+0xd0>
      if (valiswhite(gval(n)))  /* value not marked yet? */
   13c3e:	0649      	lsls	r1, r1, #25
   13c40:	d506      	bpl.n	13c50 <traverseephemeron+0xcc>
   13c42:	681b      	ldr	r3, [r3, #0]
   13c44:	795b      	ldrb	r3, [r3, #5]
   13c46:	f013 0f18 	tst.w	r3, #24
   13c4a:	d001      	beq.n	13c50 <traverseephemeron+0xcc>
        hasww = 1;  /* white-white entry */
   13c4c:	f04f 0901 	mov.w	r9, #1
      hasclears = 1;  /* table must be cleared */
   13c50:	2701      	movs	r7, #1
   13c52:	e7e1      	b.n	13c18 <traverseephemeron+0x94>
    else if (valiswhite(gval(n))) {  /* value not marked yet? */
   13c54:	064a      	lsls	r2, r1, #25
   13c56:	d5df      	bpl.n	13c18 <traverseephemeron+0x94>
   13c58:	6819      	ldr	r1, [r3, #0]
   13c5a:	794b      	ldrb	r3, [r1, #5]
   13c5c:	f013 0f18 	tst.w	r3, #24
   13c60:	d0da      	beq.n	13c18 <traverseephemeron+0x94>
      reallymarkobject(g, gcvalue(gval(n)));  /* mark it now */
   13c62:	4628      	mov	r0, r5
   13c64:	f7ff fd85 	bl	13772 <reallymarkobject>
      marked = 1;
   13c68:	f04f 0801 	mov.w	r8, #1
   13c6c:	e7d4      	b.n	13c18 <traverseephemeron+0x94>
  else if (hasww)  /* table has white->white entries? */
   13c6e:	f1b9 0f00 	cmp.w	r9, #0
   13c72:	d003      	beq.n	13c7c <traverseephemeron+0xf8>
  *pnext = *list;
   13c74:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   13c76:	61e3      	str	r3, [r4, #28]
  *list = o;
   13c78:	672c      	str	r4, [r5, #112]	; 0x70
  set2gray(o);  /* now it is */
   13c7a:	e7a8      	b.n	13bce <traverseephemeron+0x4a>
  else if (hasclears)  /* table has white keys? */
   13c7c:	b11f      	cbz	r7, 13c86 <traverseephemeron+0x102>
  *pnext = *list;
   13c7e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   13c80:	61e3      	str	r3, [r4, #28]
  *list = o;
   13c82:	676c      	str	r4, [r5, #116]	; 0x74
   13c84:	e7a3      	b.n	13bce <traverseephemeron+0x4a>
    genlink(g, obj2gco(h));  /* check whether collector still needs to see it */
   13c86:	4621      	mov	r1, r4
   13c88:	4628      	mov	r0, r5
   13c8a:	f7ff fde1 	bl	13850 <genlink>
  return marked;
   13c8e:	e7a2      	b.n	13bd6 <traverseephemeron+0x52>

00013c90 <propagatemark>:
static lu_mem propagatemark (global_State *g) {
   13c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GCObject *o = g->gray;
   13c94:	6e44      	ldr	r4, [r0, #100]	; 0x64
static lu_mem propagatemark (global_State *g) {
   13c96:	4605      	mov	r5, r0
  nw2black(o);
   13c98:	7961      	ldrb	r1, [r4, #5]
  g->gray = *getgclist(o);  /* remove from 'gray' list */
   13c9a:	4620      	mov	r0, r4
  nw2black(o);
   13c9c:	f041 0320 	orr.w	r3, r1, #32
   13ca0:	7163      	strb	r3, [r4, #5]
  g->gray = *getgclist(o);  /* remove from 'gray' list */
   13ca2:	f7ff fd45 	bl	13730 <getgclist>
   13ca6:	6803      	ldr	r3, [r0, #0]
   13ca8:	666b      	str	r3, [r5, #100]	; 0x64
  switch (o->tt) {
   13caa:	7923      	ldrb	r3, [r4, #4]
   13cac:	2b0a      	cmp	r3, #10
   13cae:	d80e      	bhi.n	13cce <propagatemark+0x3e>
   13cb0:	2b04      	cmp	r3, #4
   13cb2:	f240 81cf 	bls.w	14054 <propagatemark+0x3c4>
   13cb6:	3b05      	subs	r3, #5
   13cb8:	2b05      	cmp	r3, #5
   13cba:	f200 81cb 	bhi.w	14054 <propagatemark+0x3c4>
   13cbe:	e8df f013 	tbh	[pc, r3, lsl #1]
   13cc2:	001d      	.short	0x001d
   13cc4:	00e20106 	.word	0x00e20106
   13cc8:	01c9017c 	.word	0x01c9017c
   13ccc:	0122      	.short	0x0122
   13cce:	2b26      	cmp	r3, #38	; 0x26
   13cd0:	f040 81c0 	bne.w	14054 <propagatemark+0x3c4>
   13cd4:	4626      	mov	r6, r4
  for (i = 0; i < cl->nupvalues; i++)  /* mark its upvalues */
   13cd6:	2700      	movs	r7, #0
   13cd8:	79a0      	ldrb	r0, [r4, #6]
   13cda:	4287      	cmp	r7, r0
   13cdc:	f280 80f5 	bge.w	13eca <propagatemark+0x23a>
    markvalue(g, &cl->upvalue[i]);
   13ce0:	7e33      	ldrb	r3, [r6, #24]
   13ce2:	0658      	lsls	r0, r3, #25
   13ce4:	d507      	bpl.n	13cf6 <propagatemark+0x66>
   13ce6:	6931      	ldr	r1, [r6, #16]
   13ce8:	794b      	ldrb	r3, [r1, #5]
   13cea:	f013 0f18 	tst.w	r3, #24
   13cee:	d002      	beq.n	13cf6 <propagatemark+0x66>
   13cf0:	4628      	mov	r0, r5
   13cf2:	f7ff fd3e 	bl	13772 <reallymarkobject>
  for (i = 0; i < cl->nupvalues; i++)  /* mark its upvalues */
   13cf6:	3701      	adds	r7, #1
   13cf8:	3610      	adds	r6, #16
   13cfa:	e7ed      	b.n	13cd8 <propagatemark+0x48>
  const TValue *mode = gfasttm(g, h->metatable, TM_MODE);
   13cfc:	69a6      	ldr	r6, [r4, #24]
   13cfe:	b14e      	cbz	r6, 13d14 <propagatemark+0x84>
   13d00:	79b3      	ldrb	r3, [r6, #6]
   13d02:	0719      	lsls	r1, r3, #28
   13d04:	d44a      	bmi.n	13d9c <propagatemark+0x10c>
   13d06:	4630      	mov	r0, r6
   13d08:	2103      	movs	r1, #3
   13d0a:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
   13d0e:	f002 f8ce 	bl	15eae <luaT_gettm>
   13d12:	4606      	mov	r6, r0
  markobjectN(g, h->metatable);
   13d14:	69a1      	ldr	r1, [r4, #24]
   13d16:	b131      	cbz	r1, 13d26 <propagatemark+0x96>
   13d18:	794b      	ldrb	r3, [r1, #5]
   13d1a:	f013 0f18 	tst.w	r3, #24
   13d1e:	d002      	beq.n	13d26 <propagatemark+0x96>
   13d20:	4628      	mov	r0, r5
   13d22:	f7ff fd26 	bl	13772 <reallymarkobject>
  if (mode && ttisstring(mode) &&  /* is there a weak mode? */
   13d26:	2e00      	cmp	r6, #0
   13d28:	d069      	beq.n	13dfe <propagatemark+0x16e>
   13d2a:	7a33      	ldrb	r3, [r6, #8]
   13d2c:	f003 030f 	and.w	r3, r3, #15
   13d30:	2b04      	cmp	r3, #4
   13d32:	d164      	bne.n	13dfe <propagatemark+0x16e>
      (cast_void(weakkey = strchr(svalue(mode), 'k')),
   13d34:	6830      	ldr	r0, [r6, #0]
   13d36:	216b      	movs	r1, #107	; 0x6b
   13d38:	3010      	adds	r0, #16
   13d3a:	f003 f822 	bl	16d82 <strchr>
   13d3e:	4607      	mov	r7, r0
       cast_void(weakvalue = strchr(svalue(mode), 'v')),
   13d40:	6830      	ldr	r0, [r6, #0]
   13d42:	2176      	movs	r1, #118	; 0x76
   13d44:	3010      	adds	r0, #16
   13d46:	f003 f81c 	bl	16d82 <strchr>
   13d4a:	4602      	mov	r2, r0
       (weakkey || weakvalue))) {  /* is really weak? */
   13d4c:	2f00      	cmp	r7, #0
   13d4e:	d14c      	bne.n	13dea <propagatemark+0x15a>
   13d50:	2800      	cmp	r0, #0
   13d52:	d054      	beq.n	13dfe <propagatemark+0x16e>
  int hasclears = (h->alimit > 0);
   13d54:	68a6      	ldr	r6, [r4, #8]
  Node *n, *limit = gnodelast(h);
   13d56:	2318      	movs	r3, #24
  int hasclears = (h->alimit > 0);
   13d58:	3e00      	subs	r6, #0
   13d5a:	bf18      	it	ne
   13d5c:	2601      	movne	r6, #1
  Node *n, *limit = gnodelast(h);
   13d5e:	79e2      	ldrb	r2, [r4, #7]
   13d60:	6927      	ldr	r7, [r4, #16]
   13d62:	4093      	lsls	r3, r2
   13d64:	eb07 0803 	add.w	r8, r7, r3
  for (n = gnode(h, 0); n < limit; n++) {  /* traverse hash part */
   13d68:	4547      	cmp	r7, r8
   13d6a:	d319      	bcc.n	13da0 <propagatemark+0x110>
  if (g->gcstate == GCSatomic && hasclears)
   13d6c:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
   13d70:	2b02      	cmp	r3, #2
   13d72:	d136      	bne.n	13de2 <propagatemark+0x152>
   13d74:	2e00      	cmp	r6, #0
   13d76:	d034      	beq.n	13de2 <propagatemark+0x152>
  *pnext = *list;
   13d78:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   13d7a:	61e3      	str	r3, [r4, #28]
  *list = o;
   13d7c:	66ec      	str	r4, [r5, #108]	; 0x6c
  set2gray(o);  /* now it is */
   13d7e:	7963      	ldrb	r3, [r4, #5]
   13d80:	f023 0338 	bic.w	r3, r3, #56	; 0x38
   13d84:	7163      	strb	r3, [r4, #5]
  return 1 + h->alimit + 2 * allocsizenode(h);
   13d86:	6962      	ldr	r2, [r4, #20]
   13d88:	68a3      	ldr	r3, [r4, #8]
   13d8a:	b11a      	cbz	r2, 13d94 <propagatemark+0x104>
   13d8c:	2002      	movs	r0, #2
   13d8e:	79e2      	ldrb	r2, [r4, #7]
   13d90:	fa00 f202 	lsl.w	r2, r0, r2
   13d94:	1c58      	adds	r0, r3, #1
  return 1 + f->sizek + f->sizeupvalues + f->sizep + f->sizelocvars;
   13d96:	4410      	add	r0, r2
}
   13d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  const TValue *mode = gfasttm(g, h->metatable, TM_MODE);
   13d9c:	2600      	movs	r6, #0
   13d9e:	e7b9      	b.n	13d14 <propagatemark+0x84>
    if (isempty(gval(n)))  /* entry is empty? */
   13da0:	7a3b      	ldrb	r3, [r7, #8]
   13da2:	071a      	lsls	r2, r3, #28
   13da4:	d104      	bne.n	13db0 <propagatemark+0x120>
      clearkey(n);  /* clear its key */
   13da6:	4638      	mov	r0, r7
   13da8:	f7ff fcdd 	bl	13766 <clearkey>
  for (n = gnode(h, 0); n < limit; n++) {  /* traverse hash part */
   13dac:	3718      	adds	r7, #24
   13dae:	e7db      	b.n	13d68 <propagatemark+0xd8>
      markkey(g, n);
   13db0:	7a7b      	ldrb	r3, [r7, #9]
   13db2:	065b      	lsls	r3, r3, #25
   13db4:	d507      	bpl.n	13dc6 <propagatemark+0x136>
   13db6:	6939      	ldr	r1, [r7, #16]
   13db8:	794b      	ldrb	r3, [r1, #5]
   13dba:	f013 0f18 	tst.w	r3, #24
   13dbe:	d002      	beq.n	13dc6 <propagatemark+0x136>
   13dc0:	4628      	mov	r0, r5
   13dc2:	f7ff fcd6 	bl	13772 <reallymarkobject>
      if (!hasclears && iscleared(g, gcvalueN(gval(n))))  /* a white value? */
   13dc6:	2e00      	cmp	r6, #0
   13dc8:	d1f0      	bne.n	13dac <propagatemark+0x11c>
   13dca:	7a3b      	ldrb	r3, [r7, #8]
   13dcc:	0658      	lsls	r0, r3, #25
   13dce:	bf54      	ite	pl
   13dd0:	4631      	movpl	r1, r6
   13dd2:	6839      	ldrmi	r1, [r7, #0]
   13dd4:	4628      	mov	r0, r5
   13dd6:	f7ff fe9c 	bl	13b12 <iscleared>
   13dda:	1e06      	subs	r6, r0, #0
   13ddc:	bf18      	it	ne
   13dde:	2601      	movne	r6, #1
   13de0:	e7e4      	b.n	13dac <propagatemark+0x11c>
  *pnext = *list;
   13de2:	6eab      	ldr	r3, [r5, #104]	; 0x68
   13de4:	61e3      	str	r3, [r4, #28]
  *list = o;
   13de6:	66ac      	str	r4, [r5, #104]	; 0x68
   13de8:	e7c9      	b.n	13d7e <propagatemark+0xee>
    else if (!weakvalue)  /* strong values? */
   13dea:	b920      	cbnz	r0, 13df6 <propagatemark+0x166>
      traverseephemeron(g, h, 0);
   13dec:	4621      	mov	r1, r4
   13dee:	4628      	mov	r0, r5
   13df0:	f7ff fec8 	bl	13b84 <traverseephemeron>
   13df4:	e7c7      	b.n	13d86 <propagatemark+0xf6>
  *pnext = *list;
   13df6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   13df8:	61e3      	str	r3, [r4, #28]
  *list = o;
   13dfa:	676c      	str	r4, [r5, #116]	; 0x74
  set2gray(o);  /* now it is */
   13dfc:	e7bf      	b.n	13d7e <propagatemark+0xee>
  Node *n, *limit = gnodelast(h);
   13dfe:	2318      	movs	r3, #24
   13e00:	79e2      	ldrb	r2, [r4, #7]
   13e02:	6927      	ldr	r7, [r4, #16]
   13e04:	4093      	lsls	r3, r2
  unsigned int asize = luaH_realasize(h);
   13e06:	4620      	mov	r0, r4
  Node *n, *limit = gnodelast(h);
   13e08:	441f      	add	r7, r3
  unsigned int asize = luaH_realasize(h);
   13e0a:	f001 fef0 	bl	15bee <luaH_realasize>
  for (i = 0; i < asize; i++)  /* traverse array part */
   13e0e:	2600      	movs	r6, #0
  unsigned int asize = luaH_realasize(h);
   13e10:	4680      	mov	r8, r0
  for (i = 0; i < asize; i++)  /* traverse array part */
   13e12:	45b0      	cmp	r8, r6
   13e14:	d107      	bne.n	13e26 <propagatemark+0x196>
  for (n = gnode(h, 0); n < limit; n++) {  /* traverse hash part */
   13e16:	6926      	ldr	r6, [r4, #16]
   13e18:	42b7      	cmp	r7, r6
   13e1a:	d815      	bhi.n	13e48 <propagatemark+0x1b8>
  genlink(g, obj2gco(h));
   13e1c:	4621      	mov	r1, r4
   13e1e:	4628      	mov	r0, r5
   13e20:	f7ff fd16 	bl	13850 <genlink>
}
   13e24:	e7af      	b.n	13d86 <propagatemark+0xf6>
    markvalue(g, &h->array[i]);
   13e26:	68e3      	ldr	r3, [r4, #12]
   13e28:	0132      	lsls	r2, r6, #4
   13e2a:	eb03 1106 	add.w	r1, r3, r6, lsl #4
   13e2e:	7a09      	ldrb	r1, [r1, #8]
   13e30:	0649      	lsls	r1, r1, #25
   13e32:	d507      	bpl.n	13e44 <propagatemark+0x1b4>
   13e34:	5899      	ldr	r1, [r3, r2]
   13e36:	794b      	ldrb	r3, [r1, #5]
   13e38:	f013 0f18 	tst.w	r3, #24
   13e3c:	d002      	beq.n	13e44 <propagatemark+0x1b4>
   13e3e:	4628      	mov	r0, r5
   13e40:	f7ff fc97 	bl	13772 <reallymarkobject>
  for (i = 0; i < asize; i++)  /* traverse array part */
   13e44:	3601      	adds	r6, #1
   13e46:	e7e4      	b.n	13e12 <propagatemark+0x182>
    if (isempty(gval(n)))  /* entry is empty? */
   13e48:	7a33      	ldrb	r3, [r6, #8]
   13e4a:	0718      	lsls	r0, r3, #28
   13e4c:	d104      	bne.n	13e58 <propagatemark+0x1c8>
      clearkey(n);  /* clear its key */
   13e4e:	4630      	mov	r0, r6
   13e50:	f7ff fc89 	bl	13766 <clearkey>
  for (n = gnode(h, 0); n < limit; n++) {  /* traverse hash part */
   13e54:	3618      	adds	r6, #24
   13e56:	e7df      	b.n	13e18 <propagatemark+0x188>
      markkey(g, n);
   13e58:	7a73      	ldrb	r3, [r6, #9]
   13e5a:	0659      	lsls	r1, r3, #25
   13e5c:	d507      	bpl.n	13e6e <propagatemark+0x1de>
   13e5e:	6931      	ldr	r1, [r6, #16]
   13e60:	794b      	ldrb	r3, [r1, #5]
   13e62:	f013 0f18 	tst.w	r3, #24
   13e66:	d002      	beq.n	13e6e <propagatemark+0x1de>
   13e68:	4628      	mov	r0, r5
   13e6a:	f7ff fc82 	bl	13772 <reallymarkobject>
      markvalue(g, gval(n));
   13e6e:	7a33      	ldrb	r3, [r6, #8]
   13e70:	065a      	lsls	r2, r3, #25
   13e72:	d5ef      	bpl.n	13e54 <propagatemark+0x1c4>
   13e74:	6831      	ldr	r1, [r6, #0]
   13e76:	794b      	ldrb	r3, [r1, #5]
   13e78:	f013 0f18 	tst.w	r3, #24
   13e7c:	d0ea      	beq.n	13e54 <propagatemark+0x1c4>
   13e7e:	4628      	mov	r0, r5
   13e80:	f7ff fc77 	bl	13772 <reallymarkobject>
   13e84:	e7e6      	b.n	13e54 <propagatemark+0x1c4>
  markobjectN(g, u->metatable);  /* mark its metatable */
   13e86:	68e1      	ldr	r1, [r4, #12]
   13e88:	b131      	cbz	r1, 13e98 <propagatemark+0x208>
   13e8a:	794b      	ldrb	r3, [r1, #5]
   13e8c:	f013 0f18 	tst.w	r3, #24
   13e90:	d002      	beq.n	13e98 <propagatemark+0x208>
   13e92:	4628      	mov	r0, r5
   13e94:	f7ff fc6d 	bl	13772 <reallymarkobject>
   13e98:	4626      	mov	r6, r4
  return 1 + h->alimit + 2 * allocsizenode(h);
   13e9a:	2700      	movs	r7, #0
   13e9c:	e00d      	b.n	13eba <propagatemark+0x22a>
    markvalue(g, &u->uv[i].uv);
   13e9e:	f896 3020 	ldrb.w	r3, [r6, #32]
   13ea2:	065b      	lsls	r3, r3, #25
   13ea4:	d507      	bpl.n	13eb6 <propagatemark+0x226>
   13ea6:	69b1      	ldr	r1, [r6, #24]
   13ea8:	794b      	ldrb	r3, [r1, #5]
   13eaa:	f013 0f18 	tst.w	r3, #24
   13eae:	d002      	beq.n	13eb6 <propagatemark+0x226>
   13eb0:	4628      	mov	r0, r5
   13eb2:	f7ff fc5e 	bl	13772 <reallymarkobject>
  for (i = 0; i < u->nuvalue; i++)
   13eb6:	3701      	adds	r7, #1
   13eb8:	3610      	adds	r6, #16
   13eba:	88e3      	ldrh	r3, [r4, #6]
   13ebc:	429f      	cmp	r7, r3
   13ebe:	dbee      	blt.n	13e9e <propagatemark+0x20e>
  genlink(g, obj2gco(u));
   13ec0:	4628      	mov	r0, r5
   13ec2:	4621      	mov	r1, r4
   13ec4:	f7ff fcc4 	bl	13850 <genlink>
  return 1 + u->nuvalue;
   13ec8:	88e0      	ldrh	r0, [r4, #6]
  return 1 + stacksize(th);
   13eca:	3001      	adds	r0, #1
   13ecc:	e764      	b.n	13d98 <propagatemark+0x108>
  markobjectN(g, cl->p);  /* mark its prototype */
   13ece:	68e1      	ldr	r1, [r4, #12]
   13ed0:	b131      	cbz	r1, 13ee0 <propagatemark+0x250>
   13ed2:	794b      	ldrb	r3, [r1, #5]
   13ed4:	f013 0f18 	tst.w	r3, #24
   13ed8:	d002      	beq.n	13ee0 <propagatemark+0x250>
   13eda:	4628      	mov	r0, r5
   13edc:	f7ff fc49 	bl	13772 <reallymarkobject>
  return 1 + h->alimit + 2 * allocsizenode(h);
   13ee0:	2600      	movs	r6, #0
   13ee2:	f104 0710 	add.w	r7, r4, #16
   13ee6:	e00a      	b.n	13efe <propagatemark+0x26e>
    UpVal *uv = cl->upvals[i];
   13ee8:	f857 1b04 	ldr.w	r1, [r7], #4
    markobjectN(g, uv);  /* mark upvalue */
   13eec:	b131      	cbz	r1, 13efc <propagatemark+0x26c>
   13eee:	794b      	ldrb	r3, [r1, #5]
   13ef0:	f013 0f18 	tst.w	r3, #24
   13ef4:	d002      	beq.n	13efc <propagatemark+0x26c>
   13ef6:	4628      	mov	r0, r5
   13ef8:	f7ff fc3b 	bl	13772 <reallymarkobject>
  for (i = 0; i < cl->nupvalues; i++) {  /* visit its upvalues */
   13efc:	3601      	adds	r6, #1
   13efe:	79a0      	ldrb	r0, [r4, #6]
   13f00:	4286      	cmp	r6, r0
   13f02:	dbf1      	blt.n	13ee8 <propagatemark+0x258>
   13f04:	e7e1      	b.n	13eca <propagatemark+0x23a>
  markobjectN(g, f->source);
   13f06:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   13f08:	b131      	cbz	r1, 13f18 <propagatemark+0x288>
   13f0a:	794b      	ldrb	r3, [r1, #5]
   13f0c:	f013 0f18 	tst.w	r3, #24
   13f10:	d002      	beq.n	13f18 <propagatemark+0x288>
   13f12:	4628      	mov	r0, r5
   13f14:	f7ff fc2d 	bl	13772 <reallymarkobject>
  for (i = 0; i < cl->nupvalues; i++)  /* mark its upvalues */
   13f18:	2600      	movs	r6, #0
   13f1a:	e00f      	b.n	13f3c <propagatemark+0x2ac>
    markvalue(g, &f->k[i]);
   13f1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13f1e:	0132      	lsls	r2, r6, #4
   13f20:	eb03 1106 	add.w	r1, r3, r6, lsl #4
   13f24:	7a09      	ldrb	r1, [r1, #8]
   13f26:	0649      	lsls	r1, r1, #25
   13f28:	d507      	bpl.n	13f3a <propagatemark+0x2aa>
   13f2a:	5899      	ldr	r1, [r3, r2]
   13f2c:	794b      	ldrb	r3, [r1, #5]
   13f2e:	f013 0f18 	tst.w	r3, #24
   13f32:	d002      	beq.n	13f3a <propagatemark+0x2aa>
   13f34:	4628      	mov	r0, r5
   13f36:	f7ff fc1c 	bl	13772 <reallymarkobject>
  for (i = 0; i < f->sizek; i++)  /* mark literals */
   13f3a:	3601      	adds	r6, #1
   13f3c:	6923      	ldr	r3, [r4, #16]
   13f3e:	429e      	cmp	r6, r3
   13f40:	dbec      	blt.n	13f1c <propagatemark+0x28c>
  for (i = 0; i < f->sizeupvalues; i++)  /* mark upvalue names */
   13f42:	2600      	movs	r6, #0
   13f44:	68e3      	ldr	r3, [r4, #12]
   13f46:	429e      	cmp	r6, r3
   13f48:	db0f      	blt.n	13f6a <propagatemark+0x2da>
  for (i = 0; i < f->sizep; i++)  /* mark nested protos */
   13f4a:	2600      	movs	r6, #0
   13f4c:	69e3      	ldr	r3, [r4, #28]
   13f4e:	429e      	cmp	r6, r3
   13f50:	db18      	blt.n	13f84 <propagatemark+0x2f4>
  for (i = 0; i < f->sizelocvars; i++)  /* mark local-variable names */
   13f52:	2600      	movs	r6, #0
    markobjectN(g, f->locvars[i].varname);
   13f54:	270c      	movs	r7, #12
  for (i = 0; i < f->sizelocvars; i++)  /* mark local-variable names */
   13f56:	6a22      	ldr	r2, [r4, #32]
   13f58:	4296      	cmp	r6, r2
   13f5a:	db20      	blt.n	13f9e <propagatemark+0x30e>
  return 1 + f->sizek + f->sizeupvalues + f->sizep + f->sizelocvars;
   13f5c:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
   13f60:	4418      	add	r0, r3
   13f62:	69e3      	ldr	r3, [r4, #28]
   13f64:	3001      	adds	r0, #1
   13f66:	4418      	add	r0, r3
   13f68:	e715      	b.n	13d96 <propagatemark+0x106>
    markobjectN(g, f->upvalues[i].name);
   13f6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13f6c:	f853 1036 	ldr.w	r1, [r3, r6, lsl #3]
   13f70:	b131      	cbz	r1, 13f80 <propagatemark+0x2f0>
   13f72:	794b      	ldrb	r3, [r1, #5]
   13f74:	f013 0f18 	tst.w	r3, #24
   13f78:	d002      	beq.n	13f80 <propagatemark+0x2f0>
   13f7a:	4628      	mov	r0, r5
   13f7c:	f7ff fbf9 	bl	13772 <reallymarkobject>
  for (i = 0; i < f->sizeupvalues; i++)  /* mark upvalue names */
   13f80:	3601      	adds	r6, #1
   13f82:	e7df      	b.n	13f44 <propagatemark+0x2b4>
    markobjectN(g, f->p[i]);
   13f84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13f86:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   13f8a:	b131      	cbz	r1, 13f9a <propagatemark+0x30a>
   13f8c:	794b      	ldrb	r3, [r1, #5]
   13f8e:	f013 0f18 	tst.w	r3, #24
   13f92:	d002      	beq.n	13f9a <propagatemark+0x30a>
   13f94:	4628      	mov	r0, r5
   13f96:	f7ff fbec 	bl	13772 <reallymarkobject>
  for (i = 0; i < f->sizep; i++)  /* mark nested protos */
   13f9a:	3601      	adds	r6, #1
   13f9c:	e7d6      	b.n	13f4c <propagatemark+0x2bc>
    markobjectN(g, f->locvars[i].varname);
   13f9e:	fb07 f306 	mul.w	r3, r7, r6
   13fa2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   13fa4:	58d1      	ldr	r1, [r2, r3]
   13fa6:	b131      	cbz	r1, 13fb6 <propagatemark+0x326>
   13fa8:	794b      	ldrb	r3, [r1, #5]
   13faa:	f013 0f18 	tst.w	r3, #24
   13fae:	d002      	beq.n	13fb6 <propagatemark+0x326>
   13fb0:	4628      	mov	r0, r5
   13fb2:	f7ff fbde 	bl	13772 <reallymarkobject>
  for (i = 0; i < f->sizelocvars; i++)  /* mark local-variable names */
   13fb6:	3601      	adds	r6, #1
   13fb8:	e7cd      	b.n	13f56 <propagatemark+0x2c6>
  if (isold(th) || g->gcstate == GCSpropagate)
   13fba:	f011 0f06 	tst.w	r1, #6
  StkId o = th->stack;
   13fbe:	69e7      	ldr	r7, [r4, #28]
  if (isold(th) || g->gcstate == GCSpropagate)
   13fc0:	d102      	bne.n	13fc8 <propagatemark+0x338>
   13fc2:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
   13fc6:	b92b      	cbnz	r3, 13fd4 <propagatemark+0x344>
  *pnext = *list;
   13fc8:	6eab      	ldr	r3, [r5, #104]	; 0x68
  set2gray(o);  /* now it is */
   13fca:	f021 0138 	bic.w	r1, r1, #56	; 0x38
  *pnext = *list;
   13fce:	62a3      	str	r3, [r4, #40]	; 0x28
  *list = o;
   13fd0:	66ac      	str	r4, [r5, #104]	; 0x68
  set2gray(o);  /* now it is */
   13fd2:	7161      	strb	r1, [r4, #5]
  if (o == NULL)
   13fd4:	b96f      	cbnz	r7, 13ff2 <propagatemark+0x362>
    return 1;  /* stack not completely built yet */
   13fd6:	2001      	movs	r0, #1
    case LUA_VTHREAD: return traversethread(g, gco2th(o));
   13fd8:	e6de      	b.n	13d98 <propagatemark+0x108>
    markvalue(g, s2v(o));
   13fda:	7a3b      	ldrb	r3, [r7, #8]
   13fdc:	065b      	lsls	r3, r3, #25
   13fde:	d507      	bpl.n	13ff0 <propagatemark+0x360>
   13fe0:	6839      	ldr	r1, [r7, #0]
   13fe2:	794b      	ldrb	r3, [r1, #5]
   13fe4:	f013 0f18 	tst.w	r3, #24
   13fe8:	d002      	beq.n	13ff0 <propagatemark+0x360>
   13fea:	4628      	mov	r0, r5
   13fec:	f7ff fbc1 	bl	13772 <reallymarkobject>
  for (; o < th->top; o++)  /* mark live elements in the stack */
   13ff0:	3710      	adds	r7, #16
   13ff2:	68e3      	ldr	r3, [r4, #12]
   13ff4:	429f      	cmp	r7, r3
   13ff6:	d3f0      	bcc.n	13fda <propagatemark+0x34a>
  for (uv = th->openupval; uv != NULL; uv = uv->u.open.next)
   13ff8:	6a26      	ldr	r6, [r4, #32]
   13ffa:	b9b6      	cbnz	r6, 1402a <propagatemark+0x39a>
  if (g->gcstate == GCSatomic) {  /* final traversal? */
   13ffc:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
   14000:	2b02      	cmp	r3, #2
   14002:	d11f      	bne.n	14044 <propagatemark+0x3b4>
    for (; o < th->stack_last + EXTRA_STACK; o++)
   14004:	69a3      	ldr	r3, [r4, #24]
   14006:	3350      	adds	r3, #80	; 0x50
   14008:	429f      	cmp	r7, r3
   1400a:	d318      	bcc.n	1403e <propagatemark+0x3ae>
    if (!isintwups(th) && th->openupval != NULL) {
   1400c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1400e:	429c      	cmp	r4, r3
   14010:	d106      	bne.n	14020 <propagatemark+0x390>
   14012:	6a23      	ldr	r3, [r4, #32]
   14014:	b123      	cbz	r3, 14020 <propagatemark+0x390>
      th->twups = g->twups;  /* link it back to the list */
   14016:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
   1401a:	62e3      	str	r3, [r4, #44]	; 0x2c
      g->twups = th;
   1401c:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  return 1 + stacksize(th);
   14020:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
   14024:	1ac0      	subs	r0, r0, r3
   14026:	1100      	asrs	r0, r0, #4
   14028:	e74f      	b.n	13eca <propagatemark+0x23a>
    markobject(g, uv);  /* open upvalues cannot be collected */
   1402a:	7973      	ldrb	r3, [r6, #5]
   1402c:	f013 0f18 	tst.w	r3, #24
   14030:	d003      	beq.n	1403a <propagatemark+0x3aa>
   14032:	4631      	mov	r1, r6
   14034:	4628      	mov	r0, r5
   14036:	f7ff fb9c 	bl	13772 <reallymarkobject>
  for (uv = th->openupval; uv != NULL; uv = uv->u.open.next)
   1403a:	6936      	ldr	r6, [r6, #16]
   1403c:	e7dd      	b.n	13ffa <propagatemark+0x36a>
      setnilvalue(s2v(o));  /* clear dead stack slice */
   1403e:	723e      	strb	r6, [r7, #8]
    for (; o < th->stack_last + EXTRA_STACK; o++)
   14040:	3710      	adds	r7, #16
   14042:	e7e1      	b.n	14008 <propagatemark+0x378>
  else if (!g->gcemergency)
   14044:	f895 3053 	ldrb.w	r3, [r5, #83]	; 0x53
   14048:	2b00      	cmp	r3, #0
   1404a:	d1e9      	bne.n	14020 <propagatemark+0x390>
    luaD_shrinkstack(th); /* do not change stack in emergency cycle */
   1404c:	4620      	mov	r0, r4
   1404e:	f7f1 fa9f 	bl	5590 <luaD_shrinkstack>
   14052:	e7e5      	b.n	14020 <propagatemark+0x390>
  switch (o->tt) {
   14054:	2000      	movs	r0, #0
   14056:	e69f      	b.n	13d98 <propagatemark+0x108>

00014058 <propagateall>:
static lu_mem propagateall (global_State *g) {
   14058:	b538      	push	{r3, r4, r5, lr}
   1405a:	4604      	mov	r4, r0
  lu_mem tot = 0;
   1405c:	2500      	movs	r5, #0
  while (g->gray)
   1405e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14060:	b90b      	cbnz	r3, 14066 <propagateall+0xe>
}
   14062:	4628      	mov	r0, r5
   14064:	bd38      	pop	{r3, r4, r5, pc}
    tot += propagatemark(g);
   14066:	4620      	mov	r0, r4
   14068:	f7ff fe12 	bl	13c90 <propagatemark>
   1406c:	4405      	add	r5, r0
   1406e:	e7f6      	b.n	1405e <propagateall+0x6>

00014070 <convergeephemerons>:
static void convergeephemerons (global_State *g) {
   14070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int dir = 0;
   14074:	2500      	movs	r5, #0
static void convergeephemerons (global_State *g) {
   14076:	4604      	mov	r4, r0
    g->ephemeron = NULL;  /* tables may return to this list when traversed */
   14078:	462f      	mov	r7, r5
    changed = 0;
   1407a:	2600      	movs	r6, #0
    GCObject *next = g->ephemeron;  /* get ephemeron list */
   1407c:	6f21      	ldr	r1, [r4, #112]	; 0x70
    g->ephemeron = NULL;  /* tables may return to this list when traversed */
   1407e:	6727      	str	r7, [r4, #112]	; 0x70
    while ((w = next) != NULL) {  /* for each ephemeron table */
   14080:	b929      	cbnz	r1, 1408e <convergeephemerons+0x1e>
    dir = !dir;  /* invert direction next time */
   14082:	f085 0501 	eor.w	r5, r5, #1
  } while (changed);  /* repeat until no more changes */
   14086:	2e00      	cmp	r6, #0
   14088:	d1f7      	bne.n	1407a <convergeephemerons+0xa>
}
   1408a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      nw2black(h);  /* out of the list (for now) */
   1408e:	794b      	ldrb	r3, [r1, #5]
      if (traverseephemeron(g, h, dir)) {  /* marked some value? */
   14090:	462a      	mov	r2, r5
      nw2black(h);  /* out of the list (for now) */
   14092:	f043 0320 	orr.w	r3, r3, #32
      if (traverseephemeron(g, h, dir)) {  /* marked some value? */
   14096:	4620      	mov	r0, r4
      nw2black(h);  /* out of the list (for now) */
   14098:	714b      	strb	r3, [r1, #5]
      next = h->gclist;  /* list is rebuilt during loop */
   1409a:	f8d1 801c 	ldr.w	r8, [r1, #28]
      if (traverseephemeron(g, h, dir)) {  /* marked some value? */
   1409e:	f7ff fd71 	bl	13b84 <traverseephemeron>
   140a2:	b118      	cbz	r0, 140ac <convergeephemerons+0x3c>
        propagateall(g);  /* propagate changes */
   140a4:	4620      	mov	r0, r4
   140a6:	f7ff ffd7 	bl	14058 <propagateall>
        changed = 1;  /* will have to revisit all ephemeron tables */
   140aa:	2601      	movs	r6, #1
   140ac:	4641      	mov	r1, r8
   140ae:	e7e7      	b.n	14080 <convergeephemerons+0x10>

000140b0 <clearbyvalues>:
static void clearbyvalues (global_State *g, GCObject *l, GCObject *f) {
   140b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140b4:	4606      	mov	r6, r0
   140b6:	460c      	mov	r4, r1
   140b8:	4617      	mov	r7, r2
    Node *n, *limit = gnodelast(h);
   140ba:	f04f 0a18 	mov.w	sl, #24
        setempty(o);  /* remove entry */
   140be:	f04f 0910 	mov.w	r9, #16
  for (; l != f; l = gco2t(l)->gclist) {
   140c2:	42bc      	cmp	r4, r7
   140c4:	d102      	bne.n	140cc <clearbyvalues+0x1c>
}
   140c6:	b003      	add	sp, #12
   140c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Node *n, *limit = gnodelast(h);
   140cc:	f894 8007 	ldrb.w	r8, [r4, #7]
   140d0:	6923      	ldr	r3, [r4, #16]
    unsigned int asize = luaH_realasize(h);
   140d2:	4620      	mov	r0, r4
    Node *n, *limit = gnodelast(h);
   140d4:	fa0a f808 	lsl.w	r8, sl, r8
   140d8:	4498      	add	r8, r3
    unsigned int asize = luaH_realasize(h);
   140da:	f001 fd88 	bl	15bee <luaH_realasize>
    for (i = 0; i < asize; i++) {
   140de:	2500      	movs	r5, #0
    unsigned int asize = luaH_realasize(h);
   140e0:	4683      	mov	fp, r0
    for (i = 0; i < asize; i++) {
   140e2:	455d      	cmp	r5, fp
   140e4:	d104      	bne.n	140f0 <clearbyvalues+0x40>
    for (n = gnode(h, 0); n < limit; n++) {
   140e6:	6925      	ldr	r5, [r4, #16]
   140e8:	4545      	cmp	r5, r8
   140ea:	d314      	bcc.n	14116 <clearbyvalues+0x66>
  for (; l != f; l = gco2t(l)->gclist) {
   140ec:	69e4      	ldr	r4, [r4, #28]
   140ee:	e7e8      	b.n	140c2 <clearbyvalues+0x12>
      TValue *o = &h->array[i];
   140f0:	68e2      	ldr	r2, [r4, #12]
   140f2:	0128      	lsls	r0, r5, #4
   140f4:	eb02 1305 	add.w	r3, r2, r5, lsl #4
      if (iscleared(g, gcvalueN(o)))  /* value was collected? */
   140f8:	7a19      	ldrb	r1, [r3, #8]
   140fa:	9301      	str	r3, [sp, #4]
   140fc:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   14100:	bf18      	it	ne
   14102:	5811      	ldrne	r1, [r2, r0]
   14104:	4630      	mov	r0, r6
   14106:	f7ff fd04 	bl	13b12 <iscleared>
   1410a:	b110      	cbz	r0, 14112 <clearbyvalues+0x62>
        setempty(o);  /* remove entry */
   1410c:	9b01      	ldr	r3, [sp, #4]
   1410e:	f883 9008 	strb.w	r9, [r3, #8]
    for (i = 0; i < asize; i++) {
   14112:	3501      	adds	r5, #1
   14114:	e7e5      	b.n	140e2 <clearbyvalues+0x32>
      if (iscleared(g, gcvalueN(gval(n))))  /* unmarked value? */
   14116:	7a29      	ldrb	r1, [r5, #8]
   14118:	4630      	mov	r0, r6
   1411a:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   1411e:	bf18      	it	ne
   14120:	6829      	ldrne	r1, [r5, #0]
   14122:	f7ff fcf6 	bl	13b12 <iscleared>
   14126:	b128      	cbz	r0, 14134 <clearbyvalues+0x84>
        setempty(gval(n));  /* remove entry */
   14128:	f885 9008 	strb.w	r9, [r5, #8]
        clearkey(n);  /* clear its key */
   1412c:	4628      	mov	r0, r5
   1412e:	f7ff fb1a 	bl	13766 <clearkey>
   14132:	e002      	b.n	1413a <clearbyvalues+0x8a>
      if (isempty(gval(n)))  /* is entry empty? */
   14134:	7a2b      	ldrb	r3, [r5, #8]
   14136:	071b      	lsls	r3, r3, #28
   14138:	d0f8      	beq.n	1412c <clearbyvalues+0x7c>
    for (n = gnode(h, 0); n < limit; n++) {
   1413a:	3518      	adds	r5, #24
   1413c:	e7d4      	b.n	140e8 <clearbyvalues+0x38>

0001413e <atomic>:
static lu_mem atomic (lua_State *L) {
  global_State *g = G(L);
  lu_mem work = 0;
  GCObject *origweak, *origall;
  GCObject *grayagain = g->grayagain;  /* save original list */
  g->grayagain = NULL;
   1413e:	2300      	movs	r3, #0
static lu_mem atomic (lua_State *L) {
   14140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  global_State *g = G(L);
   14144:	6904      	ldr	r4, [r0, #16]
static lu_mem atomic (lua_State *L) {
   14146:	4601      	mov	r1, r0
  GCObject *grayagain = g->grayagain;  /* save original list */
   14148:	f8d4 9068 	ldr.w	r9, [r4, #104]	; 0x68
  g->grayagain = NULL;
   1414c:	66a3      	str	r3, [r4, #104]	; 0x68
  lua_assert(g->ephemeron == NULL && g->weak == NULL);
  lua_assert(!iswhite(g->mainthread));
  g->gcstate = GCSatomic;
   1414e:	2302      	movs	r3, #2
   14150:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  markobject(g, L);  /* mark running thread */
   14154:	7943      	ldrb	r3, [r0, #5]
   14156:	f013 0f18 	tst.w	r3, #24
   1415a:	d002      	beq.n	14162 <atomic+0x24>
   1415c:	4620      	mov	r0, r4
   1415e:	f7ff fb08 	bl	13772 <reallymarkobject>
  /* registry and global metatables may be changed by API */
  markvalue(g, &g->l_registry);
   14162:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   14166:	0659      	lsls	r1, r3, #25
   14168:	d507      	bpl.n	1417a <atomic+0x3c>
   1416a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1416c:	794b      	ldrb	r3, [r1, #5]
   1416e:	f013 0f18 	tst.w	r3, #24
   14172:	d002      	beq.n	1417a <atomic+0x3c>
   14174:	4620      	mov	r0, r4
   14176:	f7ff fafc 	bl	13772 <reallymarkobject>
  markmt(g);  /* mark global metatables */
   1417a:	4620      	mov	r0, r4
   1417c:	f7ff fb43 	bl	13806 <markmt>
  work += propagateall(g);  /* empties 'gray' list */
   14180:	4620      	mov	r0, r4
   14182:	f7ff ff69 	bl	14058 <propagateall>
  int work = 0;  /* estimate of how much work was done here */
   14186:	f04f 0800 	mov.w	r8, #0
  work += propagateall(g);  /* empties 'gray' list */
   1418a:	4606      	mov	r6, r0
  lua_State **p = &g->twups;
   1418c:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
  while ((thread = *p) != NULL) {
   14190:	f8da 5000 	ldr.w	r5, [sl]
   14194:	2d00      	cmp	r5, #0
   14196:	d147      	bne.n	14228 <atomic+0xea>
  /* remark occasional upvalues of (maybe) dead threads */
  work += remarkupvals(g);
  work += propagateall(g);  /* propagate changes */
   14198:	4620      	mov	r0, r4
   1419a:	f7ff ff5d 	bl	14058 <propagateall>
  g->gray = grayagain;
   1419e:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  work += propagateall(g);  /* propagate changes */
   141a2:	4607      	mov	r7, r0
  work += propagateall(g);  /* traverse 'grayagain' list */
   141a4:	4620      	mov	r0, r4
   141a6:	f7ff ff57 	bl	14058 <propagateall>
   141aa:	4407      	add	r7, r0
  convergeephemerons(g);
   141ac:	4620      	mov	r0, r4
   141ae:	f7ff ff5f 	bl	14070 <convergeephemerons>
  /* at this point, all strongly accessible objects are marked. */
  /* Clear values from weak tables, before checking finalizers */
  clearbyvalues(g, g->weak, NULL);
   141b2:	462a      	mov	r2, r5
   141b4:	4620      	mov	r0, r4
   141b6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   141b8:	f7ff ff7a 	bl	140b0 <clearbyvalues>
  clearbyvalues(g, g->allweak, NULL);
   141bc:	462a      	mov	r2, r5
   141be:	4620      	mov	r0, r4
   141c0:	6f61      	ldr	r1, [r4, #116]	; 0x74
   141c2:	f7ff ff75 	bl	140b0 <clearbyvalues>
  origweak = g->weak; origall = g->allweak;
  separatetobefnz(g, 0);  /* separate objects to be finalized */
   141c6:	4629      	mov	r1, r5
   141c8:	4620      	mov	r0, r4
  origweak = g->weak; origall = g->allweak;
   141ca:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
   141ce:	443e      	add	r6, r7
   141d0:	6f67      	ldr	r7, [r4, #116]	; 0x74
  separatetobefnz(g, 0);  /* separate objects to be finalized */
   141d2:	f7ff fb53 	bl	1387c <separatetobefnz>
  work += markbeingfnz(g);  /* mark objects that will be finalized */
   141d6:	f7ff fb29 	bl	1382c <markbeingfnz>
   141da:	4406      	add	r6, r0
  work += propagateall(g);  /* remark, to propagate 'resurrection' */
   141dc:	4620      	mov	r0, r4
   141de:	f7ff ff3b 	bl	14058 <propagateall>
   141e2:	4406      	add	r6, r0
  convergeephemerons(g);
   141e4:	4620      	mov	r0, r4
   141e6:	f7ff ff43 	bl	14070 <convergeephemerons>
  /* at this point, all resurrected objects are marked. */
  /* remove dead objects from weak tables */
  clearbykeys(g, g->ephemeron);  /* clear keys from all ephemeron tables */
   141ea:	4620      	mov	r0, r4
   141ec:	6f21      	ldr	r1, [r4, #112]	; 0x70
   141ee:	f7ff fca1 	bl	13b34 <clearbykeys>
  clearbykeys(g, g->allweak);  /* clear keys from all 'allweak' tables */
   141f2:	4620      	mov	r0, r4
   141f4:	6f61      	ldr	r1, [r4, #116]	; 0x74
   141f6:	f7ff fc9d 	bl	13b34 <clearbykeys>
  /* clear values from resurrected weak tables */
  clearbyvalues(g, g->weak, origweak);
   141fa:	464a      	mov	r2, r9
   141fc:	4620      	mov	r0, r4
   141fe:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   14200:	f7ff ff56 	bl	140b0 <clearbyvalues>
  clearbyvalues(g, g->allweak, origall);
   14204:	463a      	mov	r2, r7
   14206:	4620      	mov	r0, r4
   14208:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1420a:	f7ff ff51 	bl	140b0 <clearbyvalues>
  luaS_clearcache(g);
   1420e:	4620      	mov	r0, r4
   14210:	f001 fc45 	bl	15a9e <luaS_clearcache>
  g->currentwhite = cast_byte(otherwhite(g));  /* flip current white */
   14214:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
  work += propagateall(g);  /* remark, to propagate 'resurrection' */
   14218:	4446      	add	r6, r8
  g->currentwhite = cast_byte(otherwhite(g));  /* flip current white */
   1421a:	f083 0318 	eor.w	r3, r3, #24
   1421e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  lua_assert(g->gray == NULL);
  return work;  /* estimate of slots marked by 'atomic' */
}
   14222:	4630      	mov	r0, r6
   14224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!iswhite(thread) && thread->openupval != NULL)
   14228:	796b      	ldrb	r3, [r5, #5]
   1422a:	6a2f      	ldr	r7, [r5, #32]
   1422c:	f013 0f18 	tst.w	r3, #24
    work++;
   14230:	f108 0801 	add.w	r8, r8, #1
    if (!iswhite(thread) && thread->openupval != NULL)
   14234:	d103      	bne.n	1423e <atomic+0x100>
   14236:	b117      	cbz	r7, 1423e <atomic+0x100>
      p = &thread->twups;  /* keep marked thread with upvalues in the list */
   14238:	f105 0a2c 	add.w	sl, r5, #44	; 0x2c
   1423c:	e7a8      	b.n	14190 <atomic+0x52>
      *p = thread->twups;  /* remove thread from the list */
   1423e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14240:	f8ca 3000 	str.w	r3, [sl]
      thread->twups = thread;  /* mark that it is out of list */
   14244:	62ed      	str	r5, [r5, #44]	; 0x2c
      for (uv = thread->openupval; uv != NULL; uv = uv->u.open.next) {
   14246:	2f00      	cmp	r7, #0
   14248:	d0a2      	beq.n	14190 <atomic+0x52>
        if (!iswhite(uv)) {  /* upvalue already visited? */
   1424a:	797b      	ldrb	r3, [r7, #5]
        work++;
   1424c:	f108 0801 	add.w	r8, r8, #1
        if (!iswhite(uv)) {  /* upvalue already visited? */
   14250:	f013 0f18 	tst.w	r3, #24
   14254:	d10b      	bne.n	1426e <atomic+0x130>
          markvalue(g, uv->v);  /* mark its value */
   14256:	68bb      	ldr	r3, [r7, #8]
   14258:	7a1a      	ldrb	r2, [r3, #8]
   1425a:	0652      	lsls	r2, r2, #25
   1425c:	d507      	bpl.n	1426e <atomic+0x130>
   1425e:	6819      	ldr	r1, [r3, #0]
   14260:	794b      	ldrb	r3, [r1, #5]
   14262:	f013 0f18 	tst.w	r3, #24
   14266:	d002      	beq.n	1426e <atomic+0x130>
   14268:	4620      	mov	r0, r4
   1426a:	f7ff fa82 	bl	13772 <reallymarkobject>
      for (uv = thread->openupval; uv != NULL; uv = uv->u.open.next) {
   1426e:	693f      	ldr	r7, [r7, #16]
   14270:	e7e9      	b.n	14246 <atomic+0x108>

00014272 <sweepstep.constprop.0>:


static int sweepstep (lua_State *L, global_State *g,
   14272:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14274:	460c      	mov	r4, r1
                      int nextstate, GCObject **nextlist) {
  if (g->sweepgc) {
   14276:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
   14278:	b169      	cbz	r1, 14296 <sweepstep.constprop.0+0x24>
    l_mem olddebt = g->GCdebt;
    int count;
    g->sweepgc = sweeplist(L, g->sweepgc, GCSWEEPMAX, &count);
   1427a:	2264      	movs	r2, #100	; 0x64
   1427c:	ab01      	add	r3, sp, #4
    l_mem olddebt = g->GCdebt;
   1427e:	68e5      	ldr	r5, [r4, #12]
    g->sweepgc = sweeplist(L, g->sweepgc, GCSWEEPMAX, &count);
   14280:	f7ff fbaa 	bl	139d8 <sweeplist>
    g->GCestimate += g->GCdebt - olddebt;  /* update estimate */
   14284:	68e3      	ldr	r3, [r4, #12]
    g->sweepgc = sweeplist(L, g->sweepgc, GCSWEEPMAX, &count);
   14286:	65e0      	str	r0, [r4, #92]	; 0x5c
    g->GCestimate += g->GCdebt - olddebt;  /* update estimate */
   14288:	1b5a      	subs	r2, r3, r5
   1428a:	6923      	ldr	r3, [r4, #16]
    return count;
   1428c:	9801      	ldr	r0, [sp, #4]
    g->GCestimate += g->GCdebt - olddebt;  /* update estimate */
   1428e:	4413      	add	r3, r2
   14290:	6123      	str	r3, [r4, #16]
  else {  /* enter next state */
    g->gcstate = nextstate;
    g->sweepgc = nextlist;
    return 0;  /* no work done */
  }
}
   14292:	b003      	add	sp, #12
   14294:	bd30      	pop	{r4, r5, pc}
    return 0;  /* no work done */
   14296:	4608      	mov	r0, r1
    g->gcstate = nextstate;
   14298:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    g->sweepgc = nextlist;
   1429c:	65e3      	str	r3, [r4, #92]	; 0x5c
    return 0;  /* no work done */
   1429e:	e7f8      	b.n	14292 <sweepstep.constprop.0+0x20>

000142a0 <whitelist.isra.0>:
  int white = luaC_white(g);
   142a0:	f000 0018 	and.w	r0, r0, #24
  for (; p != NULL; p = p->next)
   142a4:	b901      	cbnz	r1, 142a8 <whitelist.isra.0+0x8>
}
   142a6:	4770      	bx	lr
    p->marked = cast_byte((p->marked & ~maskgcbits) | white);
   142a8:	794b      	ldrb	r3, [r1, #5]
   142aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   142ae:	4303      	orrs	r3, r0
   142b0:	714b      	strb	r3, [r1, #5]
  for (; p != NULL; p = p->next)
   142b2:	6809      	ldr	r1, [r1, #0]
   142b4:	e7f6      	b.n	142a4 <whitelist.isra.0+0x4>

000142b6 <enterinc>:
static void enterinc (global_State *g) {
   142b6:	4602      	mov	r2, r0
   142b8:	b510      	push	{r4, lr}
  g->reallyold = g->old1 = g->survival = NULL;
   142ba:	2400      	movs	r4, #0
  whitelist(g, g->allgc);
   142bc:	6d81      	ldr	r1, [r0, #88]	; 0x58
   142be:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   142c2:	f7ff ffed 	bl	142a0 <whitelist.isra.0>
  whitelist(g, g->finobj);
   142c6:	6e11      	ldr	r1, [r2, #96]	; 0x60
   142c8:	f892 004c 	ldrb.w	r0, [r2, #76]	; 0x4c
  g->reallyold = g->old1 = g->survival = NULL;
   142cc:	e9c2 4420 	strd	r4, r4, [r2, #128]	; 0x80
   142d0:	f8c2 4088 	str.w	r4, [r2, #136]	; 0x88
  whitelist(g, g->finobj);
   142d4:	f7ff ffe4 	bl	142a0 <whitelist.isra.0>
  whitelist(g, g->tobefnz);
   142d8:	6f91      	ldr	r1, [r2, #120]	; 0x78
   142da:	f892 004c 	ldrb.w	r0, [r2, #76]	; 0x4c
   142de:	f7ff ffdf 	bl	142a0 <whitelist.isra.0>
  g->gcstate = GCSpause;
   142e2:	2308      	movs	r3, #8
  g->finobjrold = g->finobjold1 = g->finobjsur = NULL;
   142e4:	e9c2 4424 	strd	r4, r4, [r2, #144]	; 0x90
   142e8:	f8c2 4098 	str.w	r4, [r2, #152]	; 0x98
  g->gcstate = GCSpause;
   142ec:	f882 304d 	strb.w	r3, [r2, #77]	; 0x4d
  g->gckind = KGC_INC;
   142f0:	f882 404e 	strb.w	r4, [r2, #78]	; 0x4e
  g->lastatomic = 0;
   142f4:	6154      	str	r4, [r2, #20]
}
   142f6:	bd10      	pop	{r4, pc}

000142f8 <singlestep>:

static lu_mem singlestep (lua_State *L) {
  global_State *g = G(L);
  lu_mem work;
  lua_assert(!g->gcstopem);  /* collector is not reentrant */
  g->gcstopem = 1;  /* no emergency collections while collecting */
   142f8:	2201      	movs	r2, #1
static lu_mem singlestep (lua_State *L) {
   142fa:	b570      	push	{r4, r5, r6, lr}
  global_State *g = G(L);
   142fc:	6904      	ldr	r4, [r0, #16]
static lu_mem singlestep (lua_State *L) {
   142fe:	4606      	mov	r6, r0
  switch (g->gcstate) {
   14300:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
   14304:	2300      	movs	r3, #0
  g->gcstopem = 1;  /* no emergency collections while collecting */
   14306:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
  switch (g->gcstate) {
   1430a:	2908      	cmp	r1, #8
   1430c:	f200 8087 	bhi.w	1441e <singlestep+0x126>
   14310:	e8df f001 	tbb	[pc, r1]
   14314:	4485382e 	.word	0x4485382e
   14318:	7053504c 	.word	0x7053504c
   1431c:	05          	.byte	0x05
   1431d:	00          	.byte	0x00
  g->gray = g->grayagain = NULL;
   1431e:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  g->weak = g->allweak = g->ephemeron = NULL;
   14322:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  markobject(g, g->mainthread);
   14326:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
  g->weak = g->allweak = g->ephemeron = NULL;
   1432a:	66e3      	str	r3, [r4, #108]	; 0x6c
  markobject(g, g->mainthread);
   1432c:	794b      	ldrb	r3, [r1, #5]
   1432e:	f013 0f18 	tst.w	r3, #24
   14332:	d002      	beq.n	1433a <singlestep+0x42>
   14334:	4620      	mov	r0, r4
   14336:	f7ff fa1c 	bl	13772 <reallymarkobject>
  markvalue(g, &g->l_registry);
   1433a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1433e:	065b      	lsls	r3, r3, #25
   14340:	d507      	bpl.n	14352 <singlestep+0x5a>
   14342:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   14344:	794b      	ldrb	r3, [r1, #5]
   14346:	f013 0f18 	tst.w	r3, #24
   1434a:	d002      	beq.n	14352 <singlestep+0x5a>
   1434c:	4620      	mov	r0, r4
   1434e:	f7ff fa10 	bl	13772 <reallymarkobject>
  markmt(g);
   14352:	4620      	mov	r0, r4
   14354:	f7ff fa57 	bl	13806 <markmt>
  markbeingfnz(g);  /* mark any finalizing object left from previous cycle */
   14358:	4620      	mov	r0, r4
   1435a:	f7ff fa67 	bl	1382c <markbeingfnz>
    case GCSpause: {
      restartcollection(g);
      g->gcstate = GCSpropagate;
   1435e:	2300      	movs	r3, #0
      work = 1;
   14360:	2501      	movs	r5, #1
      g->gcstate = GCSpropagate;
   14362:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
      }
      break;
    }
    default: lua_assert(0); return 0;
  }
  g->gcstopem = 0;
   14366:	2300      	movs	r3, #0
   14368:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
  return work;
}
   1436c:	4628      	mov	r0, r5
   1436e:	bd70      	pop	{r4, r5, r6, pc}
      if (g->gray == NULL) {  /* no more gray objects? */
   14370:	6e65      	ldr	r5, [r4, #100]	; 0x64
   14372:	b915      	cbnz	r5, 1437a <singlestep+0x82>
        g->gcstate = GCSenteratomic;  /* finish propagate phase */
   14374:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
        work = 0;
   14378:	e7f5      	b.n	14366 <singlestep+0x6e>
        work = propagatemark(g);  /* traverse one gray object */
   1437a:	4620      	mov	r0, r4
   1437c:	f7ff fc88 	bl	13c90 <propagatemark>
      work = sweepstep(L, g, GCSswpfinobj, &g->finobj);
   14380:	4605      	mov	r5, r0
      break;
   14382:	e7f0      	b.n	14366 <singlestep+0x6e>
      work = atomic(L);  /* work is what was traversed by 'atomic' */
   14384:	4630      	mov	r0, r6
   14386:	f7ff feda 	bl	1413e <atomic>
   1438a:	4605      	mov	r5, r0
      entersweep(L);
   1438c:	4630      	mov	r0, r6
   1438e:	f7ff fb56 	bl	13a3e <entersweep>
      g->GCestimate = gettotalbytes(g);  /* first estimate */;
   14392:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   14396:	4413      	add	r3, r2
   14398:	6123      	str	r3, [r4, #16]
      break;
   1439a:	e7e4      	b.n	14366 <singlestep+0x6e>
      work = sweepstep(L, g, GCSswpfinobj, &g->finobj);
   1439c:	2204      	movs	r2, #4
   1439e:	f104 0360 	add.w	r3, r4, #96	; 0x60
   143a2:	4621      	mov	r1, r4
   143a4:	4630      	mov	r0, r6
   143a6:	f7ff ff64 	bl	14272 <sweepstep.constprop.0>
   143aa:	e7e9      	b.n	14380 <singlestep+0x88>
      work = sweepstep(L, g, GCSswptobefnz, &g->tobefnz);
   143ac:	2205      	movs	r2, #5
   143ae:	f104 0378 	add.w	r3, r4, #120	; 0x78
   143b2:	e7f6      	b.n	143a2 <singlestep+0xaa>
      work = sweepstep(L, g, GCSswpend, NULL);
   143b4:	2300      	movs	r3, #0
   143b6:	2206      	movs	r2, #6
   143b8:	e7f3      	b.n	143a2 <singlestep+0xaa>
  if (!g->gcemergency) {
   143ba:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
   143be:	b9a3      	cbnz	r3, 143ea <singlestep+0xf2>
    if (g->strt.nuse < g->strt.size / 4) {  /* string table too big? */
   143c0:	6a21      	ldr	r1, [r4, #32]
   143c2:	69e2      	ldr	r2, [r4, #28]
   143c4:	460b      	mov	r3, r1
   143c6:	2900      	cmp	r1, #0
   143c8:	bfb8      	it	lt
   143ca:	1ccb      	addlt	r3, r1, #3
   143cc:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   143d0:	da0b      	bge.n	143ea <singlestep+0xf2>
      luaS_resize(L, g->strt.size / 2);
   143d2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   143d6:	4630      	mov	r0, r6
   143d8:	1049      	asrs	r1, r1, #1
      l_mem olddebt = g->GCdebt;
   143da:	68e5      	ldr	r5, [r4, #12]
      luaS_resize(L, g->strt.size / 2);
   143dc:	f001 face 	bl	1597c <luaS_resize>
      g->GCestimate += g->GCdebt - olddebt;  /* correct estimate */
   143e0:	68e3      	ldr	r3, [r4, #12]
   143e2:	1b5a      	subs	r2, r3, r5
   143e4:	6923      	ldr	r3, [r4, #16]
   143e6:	4413      	add	r3, r2
   143e8:	6123      	str	r3, [r4, #16]
      g->gcstate = GCScallfin;
   143ea:	2307      	movs	r3, #7
        work = 0;
   143ec:	2500      	movs	r5, #0
        g->gcstate = GCSpause;  /* finish collection */
   143ee:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        work = 0;
   143f2:	e7b8      	b.n	14366 <singlestep+0x6e>
      if (g->tobefnz && !g->gcemergency) {
   143f4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   143f6:	b183      	cbz	r3, 1441a <singlestep+0x122>
   143f8:	f894 5053 	ldrb.w	r5, [r4, #83]	; 0x53
   143fc:	b96d      	cbnz	r5, 1441a <singlestep+0x122>
        g->gcstopem = 0;  /* ok collections during finalizers */
   143fe:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
    GCTM(L);  /* call one finalizer */
   14402:	4630      	mov	r0, r6
  for (i = 0; i < n && g->tobefnz; i++)
   14404:	3501      	adds	r5, #1
    GCTM(L);  /* call one finalizer */
   14406:	f7f1 f987 	bl	5718 <GCTM>
  for (i = 0; i < n && g->tobefnz; i++)
   1440a:	2d0a      	cmp	r5, #10
   1440c:	d002      	beq.n	14414 <singlestep+0x11c>
   1440e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   14410:	2b00      	cmp	r3, #0
   14412:	d1f6      	bne.n	14402 <singlestep+0x10a>
        work = runafewfinalizers(L, GCFINMAX) * GCFINALIZECOST;
   14414:	2032      	movs	r0, #50	; 0x32
   14416:	4345      	muls	r5, r0
   14418:	e7a5      	b.n	14366 <singlestep+0x6e>
        g->gcstate = GCSpause;  /* finish collection */
   1441a:	2308      	movs	r3, #8
   1441c:	e7e6      	b.n	143ec <singlestep+0xf4>
  switch (g->gcstate) {
   1441e:	2500      	movs	r5, #0
   14420:	e7a4      	b.n	1436c <singlestep+0x74>

00014422 <finishgencycle>:
static void finishgencycle (lua_State *L, global_State *g) {
   14422:	b570      	push	{r4, r5, r6, lr}
   14424:	460c      	mov	r4, r1
   14426:	4605      	mov	r5, r0
  GCObject **list = correctgraylist(&g->grayagain);
   14428:	f101 0068 	add.w	r0, r1, #104	; 0x68
   1442c:	f7ff fa4b 	bl	138c6 <correctgraylist>
  *list = g->weak; g->weak = NULL;
   14430:	2600      	movs	r6, #0
   14432:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   14434:	6003      	str	r3, [r0, #0]
   14436:	66e6      	str	r6, [r4, #108]	; 0x6c
  list = correctgraylist(list);
   14438:	f7ff fa45 	bl	138c6 <correctgraylist>
  *list = g->allweak; g->allweak = NULL;
   1443c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1443e:	6003      	str	r3, [r0, #0]
   14440:	6766      	str	r6, [r4, #116]	; 0x74
  list = correctgraylist(list);
   14442:	f7ff fa40 	bl	138c6 <correctgraylist>
  *list = g->ephemeron; g->ephemeron = NULL;
   14446:	6f23      	ldr	r3, [r4, #112]	; 0x70
   14448:	6003      	str	r3, [r0, #0]
   1444a:	6726      	str	r6, [r4, #112]	; 0x70
  correctgraylist(list);
   1444c:	f7ff fa3b 	bl	138c6 <correctgraylist>
  if (!g->gcemergency) {
   14450:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
   14454:	b9a3      	cbnz	r3, 14480 <finishgencycle+0x5e>
    if (g->strt.nuse < g->strt.size / 4) {  /* string table too big? */
   14456:	6a21      	ldr	r1, [r4, #32]
   14458:	69e2      	ldr	r2, [r4, #28]
   1445a:	460b      	mov	r3, r1
   1445c:	42b1      	cmp	r1, r6
   1445e:	bfb8      	it	lt
   14460:	1ccb      	addlt	r3, r1, #3
   14462:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   14466:	da0b      	bge.n	14480 <finishgencycle+0x5e>
      luaS_resize(L, g->strt.size / 2);
   14468:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   1446c:	4628      	mov	r0, r5
   1446e:	1049      	asrs	r1, r1, #1
      l_mem olddebt = g->GCdebt;
   14470:	68e6      	ldr	r6, [r4, #12]
      luaS_resize(L, g->strt.size / 2);
   14472:	f001 fa83 	bl	1597c <luaS_resize>
      g->GCestimate += g->GCdebt - olddebt;  /* correct estimate */
   14476:	68e3      	ldr	r3, [r4, #12]
   14478:	1b9a      	subs	r2, r3, r6
   1447a:	6923      	ldr	r3, [r4, #16]
   1447c:	4413      	add	r3, r2
   1447e:	6123      	str	r3, [r4, #16]
  g->gcstate = GCSpropagate;  /* skip restart */
   14480:	2300      	movs	r3, #0
   14482:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  if (!g->gcemergency)
   14486:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
   1448a:	b913      	cbnz	r3, 14492 <finishgencycle+0x70>
  global_State *g = G(L);
   1448c:	692c      	ldr	r4, [r5, #16]
  while (g->tobefnz)
   1448e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   14490:	b903      	cbnz	r3, 14494 <finishgencycle+0x72>
}
   14492:	bd70      	pop	{r4, r5, r6, pc}
    GCTM(L);
   14494:	4628      	mov	r0, r5
   14496:	f7f1 f93f 	bl	5718 <GCTM>
   1449a:	e7f8      	b.n	1448e <finishgencycle+0x6c>

0001449c <atomic2gen>:
static void atomic2gen (lua_State *L, global_State *g) {
   1449c:	b570      	push	{r4, r5, r6, lr}
  g->gcstate = GCSswpallgc;
   1449e:	2303      	movs	r3, #3
  g->gray = g->grayagain = NULL;
   144a0:	2500      	movs	r5, #0
static void atomic2gen (lua_State *L, global_State *g) {
   144a2:	460c      	mov	r4, r1
   144a4:	4606      	mov	r6, r0
  g->weak = g->allweak = g->ephemeron = NULL;
   144a6:	66cd      	str	r5, [r1, #108]	; 0x6c
  g->gcstate = GCSswpallgc;
   144a8:	f881 304d 	strb.w	r3, [r1, #77]	; 0x4d
  g->gray = g->grayagain = NULL;
   144ac:	e9c1 5519 	strd	r5, r5, [r1, #100]	; 0x64
  g->weak = g->allweak = g->ephemeron = NULL;
   144b0:	e9c1 551c 	strd	r5, r5, [r1, #112]	; 0x70
  sweep2old(L, &g->allgc);
   144b4:	3158      	adds	r1, #88	; 0x58
   144b6:	f7ff fad5 	bl	13a64 <sweep2old>
  g->reallyold = g->old1 = g->survival = g->allgc;
   144ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
  sweep2old(L, &g->finobj);
   144bc:	4630      	mov	r0, r6
  g->reallyold = g->old1 = g->survival = g->allgc;
   144be:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
  g->firstold1 = NULL;  /* there are no OLD1 objects anywhere */
   144c2:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
  sweep2old(L, &g->finobj);
   144c6:	f104 0160 	add.w	r1, r4, #96	; 0x60
   144ca:	f7ff facb 	bl	13a64 <sweep2old>
  g->finobjrold = g->finobjold1 = g->finobjsur = g->finobj;
   144ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
  sweep2old(L, &g->tobefnz);
   144d0:	4630      	mov	r0, r6
  g->finobjrold = g->finobjold1 = g->finobjsur = g->finobj;
   144d2:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
   144d6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  sweep2old(L, &g->tobefnz);
   144da:	f104 0178 	add.w	r1, r4, #120	; 0x78
   144de:	f7ff fac1 	bl	13a64 <sweep2old>
  g->gckind = KGC_GEN;
   144e2:	2301      	movs	r3, #1
   144e4:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  g->GCestimate = gettotalbytes(g);  /* base for memory control */
   144e8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   144ec:	4413      	add	r3, r2
  finishgencycle(L, g);
   144ee:	4621      	mov	r1, r4
   144f0:	4630      	mov	r0, r6
  g->lastatomic = 0;
   144f2:	6165      	str	r5, [r4, #20]
  g->GCestimate = gettotalbytes(g);  /* base for memory control */
   144f4:	6123      	str	r3, [r4, #16]
}
   144f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  finishgencycle(L, g);
   144fa:	f7ff bf92 	b.w	14422 <finishgencycle>

000144fe <luaC_barrier_>:
void luaC_barrier_ (lua_State *L, GCObject *o, GCObject *v) {
   144fe:	b538      	push	{r3, r4, r5, lr}
  global_State *g = G(L);
   14500:	6900      	ldr	r0, [r0, #16]
void luaC_barrier_ (lua_State *L, GCObject *o, GCObject *v) {
   14502:	460c      	mov	r4, r1
  if (keepinvariant(g)) {  /* must keep invariant? */
   14504:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
void luaC_barrier_ (lua_State *L, GCObject *o, GCObject *v) {
   14508:	4615      	mov	r5, r2
  if (keepinvariant(g)) {  /* must keep invariant? */
   1450a:	2b02      	cmp	r3, #2
   1450c:	d80d      	bhi.n	1452a <luaC_barrier_+0x2c>
    reallymarkobject(g, v);  /* restore invariant */
   1450e:	4611      	mov	r1, r2
   14510:	f7ff f92f 	bl	13772 <reallymarkobject>
    if (isold(o)) {
   14514:	7963      	ldrb	r3, [r4, #5]
   14516:	f013 0f06 	tst.w	r3, #6
   1451a:	d005      	beq.n	14528 <luaC_barrier_+0x2a>
      setage(v, G_OLD0);  /* restore generational invariant */
   1451c:	796b      	ldrb	r3, [r5, #5]
   1451e:	f023 0307 	bic.w	r3, r3, #7
   14522:	f043 0302 	orr.w	r3, r3, #2
   14526:	716b      	strb	r3, [r5, #5]
}
   14528:	bd38      	pop	{r3, r4, r5, pc}
    if (g->gckind == KGC_INC)  /* incremental mode? */
   1452a:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1452e:	2b00      	cmp	r3, #0
   14530:	d1fa      	bne.n	14528 <luaC_barrier_+0x2a>
      makewhite(g, o);  /* mark 'o' as white to avoid other barriers */
   14532:	794b      	ldrb	r3, [r1, #5]
   14534:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   14538:	f023 0338 	bic.w	r3, r3, #56	; 0x38
   1453c:	f002 0218 	and.w	r2, r2, #24
   14540:	4313      	orrs	r3, r2
   14542:	714b      	strb	r3, [r1, #5]
}
   14544:	e7f0      	b.n	14528 <luaC_barrier_+0x2a>

00014546 <luaC_barrierback_>:
void luaC_barrierback_ (lua_State *L, GCObject *o) {
   14546:	b538      	push	{r3, r4, r5, lr}
  if (getage(o) == G_TOUCHED2)  /* already in gray list? */
   14548:	794b      	ldrb	r3, [r1, #5]
    set2gray(o);  /* make it gray to become touched1 */
   1454a:	f003 04c7 	and.w	r4, r3, #199	; 0xc7
  if (getage(o) == G_TOUCHED2)  /* already in gray list? */
   1454e:	f003 0307 	and.w	r3, r3, #7
   14552:	2b06      	cmp	r3, #6
   14554:	d10a      	bne.n	1456c <luaC_barrierback_+0x26>
  set2gray(o);  /* now it is */
   14556:	714c      	strb	r4, [r1, #5]
  if (isold(o))  /* generational mode? */
   14558:	794b      	ldrb	r3, [r1, #5]
   1455a:	f013 0f06 	tst.w	r3, #6
    setage(o, G_TOUCHED1);  /* touched in current cycle */
   1455e:	bf1e      	ittt	ne
   14560:	f023 0307 	bicne.w	r3, r3, #7
   14564:	f043 0305 	orrne.w	r3, r3, #5
   14568:	714b      	strbne	r3, [r1, #5]
}
   1456a:	bd38      	pop	{r3, r4, r5, pc}
  global_State *g = G(L);
   1456c:	6905      	ldr	r5, [r0, #16]
    linkobjgclist(o, g->grayagain);
   1456e:	4608      	mov	r0, r1
   14570:	f7ff f8de 	bl	13730 <getgclist>
  *pnext = *list;
   14574:	6eab      	ldr	r3, [r5, #104]	; 0x68
   14576:	6003      	str	r3, [r0, #0]
  *list = o;
   14578:	66a9      	str	r1, [r5, #104]	; 0x68
   1457a:	e7ec      	b.n	14556 <luaC_barrierback_+0x10>

0001457c <luaC_fix>:
  set2gray(o);  /* they will be gray forever */
   1457c:	794b      	ldrb	r3, [r1, #5]
  global_State *g = G(L);
   1457e:	6902      	ldr	r2, [r0, #16]
  setage(o, G_OLD);  /* and old forever */
   14580:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14584:	f043 0304 	orr.w	r3, r3, #4
   14588:	714b      	strb	r3, [r1, #5]
  g->allgc = o->next;  /* remove object from 'allgc' list */
   1458a:	680b      	ldr	r3, [r1, #0]
   1458c:	6593      	str	r3, [r2, #88]	; 0x58
  o->next = g->fixedgc;  /* link it to 'fixedgc' list */
   1458e:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   14590:	600b      	str	r3, [r1, #0]
  g->fixedgc = o;
   14592:	67d1      	str	r1, [r2, #124]	; 0x7c
}
   14594:	4770      	bx	lr

00014596 <luaC_newobj>:
GCObject *luaC_newobj (lua_State *L, int tt, size_t sz) {
   14596:	b538      	push	{r3, r4, r5, lr}
   14598:	460c      	mov	r4, r1
   1459a:	4611      	mov	r1, r2
  GCObject *o = cast(GCObject *, luaM_newobject(L, novariant(tt), sz));
   1459c:	f004 020f 	and.w	r2, r4, #15
  global_State *g = G(L);
   145a0:	6905      	ldr	r5, [r0, #16]
  GCObject *o = cast(GCObject *, luaM_newobject(L, novariant(tt), sz));
   145a2:	f000 facb 	bl	14b3c <luaM_malloc_>
  o->marked = luaC_white(g);
   145a6:	f895 204c 	ldrb.w	r2, [r5, #76]	; 0x4c
  o->tt = tt;
   145aa:	7104      	strb	r4, [r0, #4]
  o->marked = luaC_white(g);
   145ac:	f002 0218 	and.w	r2, r2, #24
   145b0:	7142      	strb	r2, [r0, #5]
  o->next = g->allgc;
   145b2:	6daa      	ldr	r2, [r5, #88]	; 0x58
   145b4:	6002      	str	r2, [r0, #0]
  g->allgc = o;
   145b6:	65a8      	str	r0, [r5, #88]	; 0x58
}
   145b8:	bd38      	pop	{r3, r4, r5, pc}

000145ba <luaC_runtilstate>:

/*
** advances the garbage collector until it reaches a state allowed
** by 'statemask'
*/
void luaC_runtilstate (lua_State *L, int statesmask) {
   145ba:	b570      	push	{r4, r5, r6, lr}
   145bc:	4604      	mov	r4, r0
   145be:	460d      	mov	r5, r1
  global_State *g = G(L);
   145c0:	6906      	ldr	r6, [r0, #16]
  while (!testbit(statesmask, g->gcstate))
   145c2:	f896 304d 	ldrb.w	r3, [r6, #77]	; 0x4d
   145c6:	fa45 f303 	asr.w	r3, r5, r3
   145ca:	07db      	lsls	r3, r3, #31
   145cc:	d500      	bpl.n	145d0 <luaC_runtilstate+0x16>
    singlestep(L);
}
   145ce:	bd70      	pop	{r4, r5, r6, pc}
    singlestep(L);
   145d0:	4620      	mov	r0, r4
   145d2:	f7ff fe91 	bl	142f8 <singlestep>
   145d6:	e7f4      	b.n	145c2 <luaC_runtilstate+0x8>

000145d8 <entergen>:
static lu_mem entergen (lua_State *L, global_State *g) {
   145d8:	b570      	push	{r4, r5, r6, lr}
   145da:	4604      	mov	r4, r0
   145dc:	460e      	mov	r6, r1
  luaC_runtilstate(L, bitmask(GCSpause));  /* prepare to start a new cycle */
   145de:	f44f 7180 	mov.w	r1, #256	; 0x100
   145e2:	f7ff ffea 	bl	145ba <luaC_runtilstate>
  luaC_runtilstate(L, bitmask(GCSpropagate));  /* start new cycle */
   145e6:	2101      	movs	r1, #1
   145e8:	4620      	mov	r0, r4
   145ea:	f7ff ffe6 	bl	145ba <luaC_runtilstate>
  numobjs = atomic(L);  /* propagates all and then do the atomic stuff */
   145ee:	4620      	mov	r0, r4
   145f0:	f7ff fda5 	bl	1413e <atomic>
   145f4:	4605      	mov	r5, r0
  atomic2gen(L, g);
   145f6:	4631      	mov	r1, r6
   145f8:	4620      	mov	r0, r4
   145fa:	f7ff ff4f 	bl	1449c <atomic2gen>
}
   145fe:	4628      	mov	r0, r5
   14600:	bd70      	pop	{r4, r5, r6, pc}

00014602 <luaC_changemode>:
void luaC_changemode (lua_State *L, int newmode) {
   14602:	b510      	push	{r4, lr}
  global_State *g = G(L);
   14604:	6904      	ldr	r4, [r0, #16]
  if (newmode != g->gckind) {
   14606:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   1460a:	428b      	cmp	r3, r1
   1460c:	d004      	beq.n	14618 <luaC_changemode+0x16>
    if (newmode == KGC_GEN)  /* entering generational mode? */
   1460e:	2901      	cmp	r1, #1
   14610:	d105      	bne.n	1461e <luaC_changemode+0x1c>
      entergen(L, g);
   14612:	4621      	mov	r1, r4
   14614:	f7ff ffe0 	bl	145d8 <entergen>
  g->lastatomic = 0;
   14618:	2300      	movs	r3, #0
   1461a:	6163      	str	r3, [r4, #20]
}
   1461c:	bd10      	pop	{r4, pc}
      enterinc(g);  /* entering incremental mode */
   1461e:	4620      	mov	r0, r4
   14620:	f7ff fe49 	bl	142b6 <enterinc>
   14624:	e7f8      	b.n	14618 <luaC_changemode+0x16>

00014626 <luaC_freeallobjects>:
void luaC_freeallobjects (lua_State *L) {
   14626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  g->gcstp = GCSTPCLS;  /* no extra finalizers after here */
   14628:	2304      	movs	r3, #4
void luaC_freeallobjects (lua_State *L) {
   1462a:	4604      	mov	r4, r0
  global_State *g = G(L);
   1462c:	6905      	ldr	r5, [r0, #16]
  luaC_changemode(L, KGC_INC);
   1462e:	2100      	movs	r1, #0
  g->gcstp = GCSTPCLS;  /* no extra finalizers after here */
   14630:	f885 3052 	strb.w	r3, [r5, #82]	; 0x52
  luaC_changemode(L, KGC_INC);
   14634:	f7ff ffe5 	bl	14602 <luaC_changemode>
  separatetobefnz(g, 1);  /* separate all objects with finalizers */
   14638:	2101      	movs	r1, #1
   1463a:	4628      	mov	r0, r5
   1463c:	f7ff f91e 	bl	1387c <separatetobefnz>
  global_State *g = G(L);
   14640:	6926      	ldr	r6, [r4, #16]
  while (g->tobefnz)
   14642:	6fb3      	ldr	r3, [r6, #120]	; 0x78
   14644:	b93b      	cbnz	r3, 14656 <luaC_freeallobjects+0x30>
  deletelist(L, g->allgc, obj2gco(g->mainthread));
   14646:	6da9      	ldr	r1, [r5, #88]	; 0x58
   14648:	f8d5 60a4 	ldr.w	r6, [r5, #164]	; 0xa4
  while (p != limit) {
   1464c:	428e      	cmp	r6, r1
   1464e:	d106      	bne.n	1465e <luaC_freeallobjects+0x38>
  deletelist(L, g->fixedgc, NULL);  /* collect fixed objects */
   14650:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
  while (p != limit) {
   14652:	b951      	cbnz	r1, 1466a <luaC_freeallobjects+0x44>
}
   14654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    GCTM(L);
   14656:	4620      	mov	r0, r4
   14658:	f7f1 f85e 	bl	5718 <GCTM>
   1465c:	e7f1      	b.n	14642 <luaC_freeallobjects+0x1c>
    GCObject *next = p->next;
   1465e:	680f      	ldr	r7, [r1, #0]
    freeobj(L, p);
   14660:	4620      	mov	r0, r4
   14662:	f7ff f96d 	bl	13940 <freeobj>
    p = next;
   14666:	4639      	mov	r1, r7
   14668:	e7f0      	b.n	1464c <luaC_freeallobjects+0x26>
    GCObject *next = p->next;
   1466a:	680d      	ldr	r5, [r1, #0]
    freeobj(L, p);
   1466c:	4620      	mov	r0, r4
   1466e:	f7ff f967 	bl	13940 <freeobj>
    p = next;
   14672:	4629      	mov	r1, r5
   14674:	e7ed      	b.n	14652 <luaC_freeallobjects+0x2c>

00014676 <luaC_step>:
}

/*
** performs a basic GC step if collector is running
*/
void luaC_step (lua_State *L) {
   14676:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  global_State *g = G(L);
   1467a:	6904      	ldr	r4, [r0, #16]
void luaC_step (lua_State *L) {
   1467c:	4605      	mov	r5, r0
  lua_assert(!g->gcemergency);
  if (gcrunning(g)) {  /* running? */
   1467e:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
void luaC_step (lua_State *L) {
   14682:	b085      	sub	sp, #20
  if (gcrunning(g)) {  /* running? */
   14684:	2b00      	cmp	r3, #0
   14686:	d13b      	bne.n	14700 <luaC_step+0x8a>
    if(isdecGCmodegen(g))
   14688:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   1468c:	6966      	ldr	r6, [r4, #20]
   1468e:	2b01      	cmp	r3, #1
   14690:	f000 80e2 	beq.w	14858 <luaC_step+0x1e2>
   14694:	2e00      	cmp	r6, #0
   14696:	f040 80e5 	bne.w	14864 <luaC_step+0x1ee>
  l_mem stepsize = (g->gcstepsize <= log2maxs(l_mem))
   1469a:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
  int stepmul = (getgcparam(g->gcstepmul) | 1);  /* avoid division by 0 */
   1469e:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
                 : MAX_LMEM;  /* overflow; keep maximum value */
   146a2:	2a1e      	cmp	r2, #30
                 ? ((cast(l_mem, 1) << g->gcstepsize) / WORK2MEM) * stepmul
   146a4:	bf96      	itet	ls
   146a6:	2301      	movls	r3, #1
                 : MAX_LMEM;  /* overflow; keep maximum value */
   146a8:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
                 ? ((cast(l_mem, 1) << g->gcstepsize) / WORK2MEM) * stepmul
   146ac:	4093      	lslls	r3, r2
  l_mem debt = (g->GCdebt / WORK2MEM) * stepmul;
   146ae:	68e6      	ldr	r6, [r4, #12]
  int stepmul = (getgcparam(g->gcstepmul) | 1);  /* avoid division by 0 */
   146b0:	ea4f 0181 	mov.w	r1, r1, lsl #2
   146b4:	f041 0801 	orr.w	r8, r1, #1
                 ? ((cast(l_mem, 1) << g->gcstepsize) / WORK2MEM) * stepmul
   146b8:	bf9c      	itt	ls
   146ba:	091b      	lsrls	r3, r3, #4
   146bc:	fb08 f303 	mulls.w	r3, r8, r3
  l_mem debt = (g->GCdebt / WORK2MEM) * stepmul;
   146c0:	0936      	lsrs	r6, r6, #4
   146c2:	fb08 f606 	mul.w	r6, r8, r6
  } while (debt > -stepsize && g->gcstate != GCSpause);
   146c6:	425f      	negs	r7, r3
    lu_mem work = singlestep(L);  /* perform one single step */
   146c8:	4628      	mov	r0, r5
   146ca:	f7ff fe15 	bl	142f8 <singlestep>
    debt -= work;
   146ce:	1a36      	subs	r6, r6, r0
  } while (debt > -stepsize && g->gcstate != GCSpause);
   146d0:	42be      	cmp	r6, r7
   146d2:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
   146d6:	f340 80b4 	ble.w	14842 <luaC_step+0x1cc>
   146da:	2b08      	cmp	r3, #8
   146dc:	d1f4      	bne.n	146c8 <luaC_step+0x52>
   146de:	e033      	b.n	14748 <luaC_step+0xd2>
    g->GCestimate = gettotalbytes(g);  /* first estimate */;
   146e0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   146e4:	4413      	add	r3, r2
   146e6:	6123      	str	r3, [r4, #16]
    entersweep(L);
   146e8:	4628      	mov	r0, r5
   146ea:	f7ff f9a8 	bl	13a3e <entersweep>
    luaC_runtilstate(L, bitmask(GCSpause));  /* finish collection */
   146ee:	f44f 7180 	mov.w	r1, #256	; 0x100
   146f2:	4628      	mov	r0, r5
   146f4:	f7ff ff61 	bl	145ba <luaC_runtilstate>
    setpause(g);
   146f8:	4620      	mov	r0, r4
   146fa:	f7ff f9e2 	bl	13ac2 <setpause>
    g->lastatomic = newatomic;
   146fe:	6167      	str	r7, [r4, #20]
      genstep(L, g);
    else
      incstep(L, g);
  }
}
   14700:	b005      	add	sp, #20
   14702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (g->GCdebt > 0 && gettotalbytes(g) > majorbase + majorinc) {
   14706:	e9d4 2603 	ldrd	r2, r6, [r4, #12]
   1470a:	2a00      	cmp	r2, #0
   1470c:	dd22      	ble.n	14754 <luaC_step+0xde>
    lu_mem majorinc = (majorbase / 100) * getgcparam(g->genmajormul);
   1470e:	2364      	movs	r3, #100	; 0x64
   14710:	fbb6 f3f3 	udiv	r3, r6, r3
   14714:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
   14718:	434b      	muls	r3, r1
    if (g->GCdebt > 0 && gettotalbytes(g) > majorbase + majorinc) {
   1471a:	68a1      	ldr	r1, [r4, #8]
    lu_mem majorinc = (majorbase / 100) * getgcparam(g->genmajormul);
   1471c:	009f      	lsls	r7, r3, #2
    if (g->GCdebt > 0 && gettotalbytes(g) > majorbase + majorinc) {
   1471e:	440a      	add	r2, r1
   14720:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   14724:	429a      	cmp	r2, r3
   14726:	d915      	bls.n	14754 <luaC_step+0xde>
  enterinc(g);
   14728:	4620      	mov	r0, r4
   1472a:	f7ff fdc4 	bl	142b6 <enterinc>
  return entergen(L, g);
   1472e:	4621      	mov	r1, r4
   14730:	4628      	mov	r0, r5
   14732:	f7ff ff51 	bl	145d8 <entergen>
      if (gettotalbytes(g) < majorbase + (majorinc / 2)) {
   14736:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1473a:	eb06 0657 	add.w	r6, r6, r7, lsr #1
   1473e:	4413      	add	r3, r2
   14740:	42b3      	cmp	r3, r6
   14742:	f0c0 80a0 	bcc.w	14886 <luaC_step+0x210>
        g->lastatomic = numobjs;  /* signal that last collection was bad */
   14746:	6160      	str	r0, [r4, #20]
    setpause(g);  /* pause until next cycle */
   14748:	4620      	mov	r0, r4
}
   1474a:	b005      	add	sp, #20
   1474c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    setpause(g);  /* pause until next cycle */
   14750:	f7ff b9b7 	b.w	13ac2 <setpause>
  if (g->firstold1) {  /* are there regular OLD1 objects? */
   14754:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
   14758:	b139      	cbz	r1, 1476a <luaC_step+0xf4>
    markold(g, g->firstold1, g->reallyold);  /* mark them */
   1475a:	4620      	mov	r0, r4
   1475c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   14760:	f7ff f8d7 	bl	13912 <markold>
    g->firstold1 = NULL;  /* no more OLD1 objects (for now) */
   14764:	2300      	movs	r3, #0
   14766:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  markold(g, g->finobj, g->finobjrold);
   1476a:	4620      	mov	r0, r4
   1476c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   14770:	6e21      	ldr	r1, [r4, #96]	; 0x60
   14772:	f7ff f8ce 	bl	13912 <markold>
  markold(g, g->tobefnz, NULL);
   14776:	2200      	movs	r2, #0
   14778:	6fa1      	ldr	r1, [r4, #120]	; 0x78
   1477a:	4620      	mov	r0, r4
   1477c:	f7ff f8c9 	bl	13912 <markold>
  atomic(L);
   14780:	4628      	mov	r0, r5
   14782:	f7ff fcdc 	bl	1413e <atomic>
  g->gcstate = GCSswpallgc;
   14786:	2303      	movs	r3, #3
  psurvival = sweepgen(L, g, &g->allgc, g->survival, &g->firstold1);
   14788:	f104 088c 	add.w	r8, r4, #140	; 0x8c
   1478c:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
  g->gcstate = GCSswpallgc;
   14790:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  psurvival = sweepgen(L, g, &g->allgc, g->survival, &g->firstold1);
   14794:	f8cd 8000 	str.w	r8, [sp]
   14798:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   1479c:	f104 0258 	add.w	r2, r4, #88	; 0x58
   147a0:	4628      	mov	r0, r5
   147a2:	f7f1 f827 	bl	57f4 <sweepgen.isra.0>
   147a6:	4607      	mov	r7, r0
  dummy = NULL;  /* no 'firstold1' optimization for 'finobj' lists */
   147a8:	f04f 0900 	mov.w	r9, #0
  sweepgen(L, g, psurvival, g->old1, &g->firstold1);
   147ac:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   147b0:	f8cd 8000 	str.w	r8, [sp]
   147b4:	4602      	mov	r2, r0
   147b6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   147ba:	4628      	mov	r0, r5
   147bc:	f7f1 f81a 	bl	57f4 <sweepgen.isra.0>
  g->reallyold = g->old1;
   147c0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  psurvival = sweepgen(L, g, &g->finobj, g->finobjsur, &dummy);
   147c4:	f10d 080c 	add.w	r8, sp, #12
  g->reallyold = g->old1;
   147c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  g->old1 = *psurvival;  /* 'survival' survivals are old now */
   147cc:	683b      	ldr	r3, [r7, #0]
  psurvival = sweepgen(L, g, &g->finobj, g->finobjsur, &dummy);
   147ce:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
  g->old1 = *psurvival;  /* 'survival' survivals are old now */
   147d2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  g->survival = g->allgc;  /* all news are survivals */
   147d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
  psurvival = sweepgen(L, g, &g->finobj, g->finobjsur, &dummy);
   147d8:	f104 0260 	add.w	r2, r4, #96	; 0x60
  g->survival = g->allgc;  /* all news are survivals */
   147dc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  psurvival = sweepgen(L, g, &g->finobj, g->finobjsur, &dummy);
   147e0:	f8cd 8000 	str.w	r8, [sp]
   147e4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   147e8:	4628      	mov	r0, r5
  dummy = NULL;  /* no 'firstold1' optimization for 'finobj' lists */
   147ea:	f8cd 900c 	str.w	r9, [sp, #12]
  psurvival = sweepgen(L, g, &g->finobj, g->finobjsur, &dummy);
   147ee:	f7f1 f801 	bl	57f4 <sweepgen.isra.0>
   147f2:	4607      	mov	r7, r0
  sweepgen(L, g, psurvival, g->finobjold1, &dummy);
   147f4:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   147f8:	f8cd 8000 	str.w	r8, [sp]
   147fc:	4602      	mov	r2, r0
   147fe:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   14802:	4628      	mov	r0, r5
   14804:	f7f0 fff6 	bl	57f4 <sweepgen.isra.0>
  g->finobjrold = g->finobjold1;
   14808:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  sweepgen(L, g, &g->tobefnz, NULL, &dummy);
   1480c:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
  g->finobjrold = g->finobjold1;
   14810:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  g->finobjold1 = *psurvival;  /* 'survival' survivals are old now */
   14814:	683b      	ldr	r3, [r7, #0]
  sweepgen(L, g, &g->tobefnz, NULL, &dummy);
   14816:	f104 0278 	add.w	r2, r4, #120	; 0x78
  g->finobjold1 = *psurvival;  /* 'survival' survivals are old now */
   1481a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  g->finobjsur = g->finobj;  /* all news are survivals */
   1481e:	6e23      	ldr	r3, [r4, #96]	; 0x60
  sweepgen(L, g, &g->tobefnz, NULL, &dummy);
   14820:	4628      	mov	r0, r5
  g->finobjsur = g->finobj;  /* all news are survivals */
   14822:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  sweepgen(L, g, &g->tobefnz, NULL, &dummy);
   14826:	464b      	mov	r3, r9
   14828:	f8cd 8000 	str.w	r8, [sp]
   1482c:	f7f0 ffe2 	bl	57f4 <sweepgen.isra.0>
  finishgencycle(L, g);
   14830:	4621      	mov	r1, r4
   14832:	4628      	mov	r0, r5
   14834:	f7ff fdf5 	bl	14422 <finishgencycle>
      setminordebt(g);
   14838:	4620      	mov	r0, r4
   1483a:	f7ff f95e 	bl	13afa <setminordebt>
      g->GCestimate = majorbase;  /* preserve base value */
   1483e:	6126      	str	r6, [r4, #16]
   14840:	e75e      	b.n	14700 <luaC_step+0x8a>
  if (g->gcstate == GCSpause)
   14842:	2b08      	cmp	r3, #8
   14844:	d080      	beq.n	14748 <luaC_step+0xd2>
    debt = (debt / stepmul) * WORK2MEM;  /* convert 'work units' to bytes */
   14846:	fb96 f1f8 	sdiv	r1, r6, r8
    luaE_setdebt(g, debt);
   1484a:	4620      	mov	r0, r4
   1484c:	0109      	lsls	r1, r1, #4
}
   1484e:	b005      	add	sp, #20
   14850:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    luaE_setdebt(g, debt);
   14854:	f000 bf6c 	b.w	15730 <luaE_setdebt>
  if (g->lastatomic != 0)  /* last collection was a bad one? */
   14858:	2e00      	cmp	r6, #0
   1485a:	f43f af54 	beq.w	14706 <luaC_step+0x90>
    enterinc(g);  /* enter incremental mode */
   1485e:	4620      	mov	r0, r4
   14860:	f7ff fd29 	bl	142b6 <enterinc>
  luaC_runtilstate(L, bitmask(GCSpropagate));  /* start new cycle */
   14864:	2101      	movs	r1, #1
   14866:	4628      	mov	r0, r5
   14868:	f7ff fea7 	bl	145ba <luaC_runtilstate>
  newatomic = atomic(L);  /* mark everybody */
   1486c:	4628      	mov	r0, r5
   1486e:	f7ff fc66 	bl	1413e <atomic>
  if (newatomic < lastatomic + (lastatomic >> 3)) {  /* good collection? */
   14872:	eb06 06d6 	add.w	r6, r6, r6, lsr #3
   14876:	42b0      	cmp	r0, r6
  newatomic = atomic(L);  /* mark everybody */
   14878:	4607      	mov	r7, r0
  if (newatomic < lastatomic + (lastatomic >> 3)) {  /* good collection? */
   1487a:	f4bf af31 	bcs.w	146e0 <luaC_step+0x6a>
    atomic2gen(L, g);  /* return to generational mode */
   1487e:	4621      	mov	r1, r4
   14880:	4628      	mov	r0, r5
   14882:	f7ff fe0b 	bl	1449c <atomic2gen>
        setminordebt(g);
   14886:	4620      	mov	r0, r4
}
   14888:	b005      	add	sp, #20
   1488a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        setminordebt(g);
   1488e:	f7ff b934 	b.w	13afa <setminordebt>

00014892 <luaC_fullgc>:
/*
** Performs a full GC cycle; if 'isemergency', set a flag to avoid
** some operations which could change the interpreter state in some
** unexpected ways (running finalizers and shrinking some structures).
*/
void luaC_fullgc (lua_State *L, int isemergency) {
   14892:	b538      	push	{r3, r4, r5, lr}
  global_State *g = G(L);
   14894:	6904      	ldr	r4, [r0, #16]
void luaC_fullgc (lua_State *L, int isemergency) {
   14896:	4605      	mov	r5, r0
  lua_assert(!g->gcemergency);
  g->gcemergency = isemergency;  /* set flag */
  if (g->gckind == KGC_INC)
   14898:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
  g->gcemergency = isemergency;  /* set flag */
   1489c:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
  if (g->gckind == KGC_INC)
   148a0:	b9d3      	cbnz	r3, 148d8 <luaC_fullgc+0x46>
  if (keepinvariant(g))  /* black objects? */
   148a2:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
   148a6:	2b02      	cmp	r3, #2
   148a8:	d801      	bhi.n	148ae <luaC_fullgc+0x1c>
    entersweep(L); /* sweep everything to turn them back to white */
   148aa:	f7ff f8c8 	bl	13a3e <entersweep>
  luaC_runtilstate(L, bitmask(GCSpause));
   148ae:	f44f 7180 	mov.w	r1, #256	; 0x100
   148b2:	4628      	mov	r0, r5
   148b4:	f7ff fe81 	bl	145ba <luaC_runtilstate>
  luaC_runtilstate(L, bitmask(GCScallfin));  /* run up to finalizers */
   148b8:	2180      	movs	r1, #128	; 0x80
   148ba:	4628      	mov	r0, r5
   148bc:	f7ff fe7d 	bl	145ba <luaC_runtilstate>
  luaC_runtilstate(L, bitmask(GCSpause));  /* finish collection */
   148c0:	4628      	mov	r0, r5
   148c2:	f44f 7180 	mov.w	r1, #256	; 0x100
   148c6:	f7ff fe78 	bl	145ba <luaC_runtilstate>
  setpause(g);
   148ca:	4620      	mov	r0, r4
   148cc:	f7ff f8f9 	bl	13ac2 <setpause>
    fullinc(L, g);
  else
    fullgen(L, g);
  g->gcemergency = 0;
   148d0:	2300      	movs	r3, #0
   148d2:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
}
   148d6:	bd38      	pop	{r3, r4, r5, pc}
  enterinc(g);
   148d8:	4620      	mov	r0, r4
   148da:	f7ff fcec 	bl	142b6 <enterinc>
  return entergen(L, g);
   148de:	4621      	mov	r1, r4
   148e0:	4628      	mov	r0, r5
   148e2:	f7ff fe79 	bl	145d8 <entergen>
   148e6:	e7f3      	b.n	148d0 <luaC_fullgc+0x3e>

000148e8 <check_next1>:
  if (ls->current == c) {
   148e8:	6803      	ldr	r3, [r0, #0]
static int check_next1 (LexState *ls, int c) {
   148ea:	b510      	push	{r4, lr}
  if (ls->current == c) {
   148ec:	428b      	cmp	r3, r1
static int check_next1 (LexState *ls, int c) {
   148ee:	4604      	mov	r4, r0
  if (ls->current == c) {
   148f0:	d10e      	bne.n	14910 <check_next1+0x28>
    next(ls);
   148f2:	6b80      	ldr	r0, [r0, #56]	; 0x38
   148f4:	6803      	ldr	r3, [r0, #0]
   148f6:	1e5a      	subs	r2, r3, #1
   148f8:	6002      	str	r2, [r0, #0]
   148fa:	b133      	cbz	r3, 1490a <check_next1+0x22>
   148fc:	6843      	ldr	r3, [r0, #4]
   148fe:	1c5a      	adds	r2, r3, #1
   14900:	6042      	str	r2, [r0, #4]
   14902:	7818      	ldrb	r0, [r3, #0]
   14904:	6020      	str	r0, [r4, #0]
   14906:	2001      	movs	r0, #1
}
   14908:	bd10      	pop	{r4, pc}
    next(ls);
   1490a:	f001 ff83 	bl	16814 <luaZ_fill>
   1490e:	e7f9      	b.n	14904 <check_next1+0x1c>
  else return 0;
   14910:	2000      	movs	r0, #0
   14912:	e7f9      	b.n	14908 <check_next1+0x20>

00014914 <skip_sep>:
static size_t skip_sep (LexState *ls) {
   14914:	b570      	push	{r4, r5, r6, lr}
   14916:	4605      	mov	r5, r0
  int s = ls->current;
   14918:	6806      	ldr	r6, [r0, #0]
  save_and_next(ls);
   1491a:	4631      	mov	r1, r6
   1491c:	f7f1 f81a 	bl	5954 <save>
   14920:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   14922:	6803      	ldr	r3, [r0, #0]
   14924:	1e5a      	subs	r2, r3, #1
   14926:	6002      	str	r2, [r0, #0]
   14928:	b17b      	cbz	r3, 1494a <skip_sep+0x36>
   1492a:	6843      	ldr	r3, [r0, #4]
   1492c:	1c5a      	adds	r2, r3, #1
   1492e:	6042      	str	r2, [r0, #4]
   14930:	7818      	ldrb	r0, [r3, #0]
  size_t count = 0;
   14932:	2400      	movs	r4, #0
  save_and_next(ls);
   14934:	6028      	str	r0, [r5, #0]
  while (ls->current == '=') {
   14936:	6829      	ldr	r1, [r5, #0]
   14938:	293d      	cmp	r1, #61	; 0x3d
   1493a:	d009      	beq.n	14950 <skip_sep+0x3c>
         : (count == 0) ? 1
   1493c:	42b1      	cmp	r1, r6
         : 0;
   1493e:	bf16      	itet	ne
   14940:	fab4 f084 	clzne	r0, r4
         : (count == 0) ? 1
   14944:	1ca0      	addeq	r0, r4, #2
         : 0;
   14946:	0940      	lsrne	r0, r0, #5
}
   14948:	bd70      	pop	{r4, r5, r6, pc}
  save_and_next(ls);
   1494a:	f001 ff63 	bl	16814 <luaZ_fill>
   1494e:	e7f0      	b.n	14932 <skip_sep+0x1e>
    save_and_next(ls);
   14950:	4628      	mov	r0, r5
   14952:	f7f0 ffff 	bl	5954 <save>
   14956:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   14958:	6803      	ldr	r3, [r0, #0]
   1495a:	1e5a      	subs	r2, r3, #1
   1495c:	6002      	str	r2, [r0, #0]
   1495e:	b133      	cbz	r3, 1496e <skip_sep+0x5a>
   14960:	6843      	ldr	r3, [r0, #4]
   14962:	1c5a      	adds	r2, r3, #1
   14964:	6042      	str	r2, [r0, #4]
   14966:	7818      	ldrb	r0, [r3, #0]
   14968:	6028      	str	r0, [r5, #0]
    count++;
   1496a:	3401      	adds	r4, #1
   1496c:	e7e3      	b.n	14936 <skip_sep+0x22>
    save_and_next(ls);
   1496e:	f001 ff51 	bl	16814 <luaZ_fill>
   14972:	e7f9      	b.n	14968 <skip_sep+0x54>

00014974 <check_next2>:
static int check_next2 (LexState *ls, const char *set) {
   14974:	460b      	mov	r3, r1
   14976:	b510      	push	{r4, lr}
  if (ls->current == set[0] || ls->current == set[1]) {
   14978:	6801      	ldr	r1, [r0, #0]
   1497a:	781a      	ldrb	r2, [r3, #0]
static int check_next2 (LexState *ls, const char *set) {
   1497c:	4604      	mov	r4, r0
  if (ls->current == set[0] || ls->current == set[1]) {
   1497e:	4291      	cmp	r1, r2
   14980:	d002      	beq.n	14988 <check_next2+0x14>
   14982:	785b      	ldrb	r3, [r3, #1]
   14984:	4299      	cmp	r1, r3
   14986:	d111      	bne.n	149ac <check_next2+0x38>
    save_and_next(ls);
   14988:	4620      	mov	r0, r4
   1498a:	f7f0 ffe3 	bl	5954 <save>
   1498e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   14990:	6803      	ldr	r3, [r0, #0]
   14992:	1e5a      	subs	r2, r3, #1
   14994:	6002      	str	r2, [r0, #0]
   14996:	b133      	cbz	r3, 149a6 <check_next2+0x32>
   14998:	6843      	ldr	r3, [r0, #4]
   1499a:	1c5a      	adds	r2, r3, #1
   1499c:	6042      	str	r2, [r0, #4]
   1499e:	7818      	ldrb	r0, [r3, #0]
   149a0:	6020      	str	r0, [r4, #0]
    return 1;
   149a2:	2001      	movs	r0, #1
}
   149a4:	bd10      	pop	{r4, pc}
    save_and_next(ls);
   149a6:	f001 ff35 	bl	16814 <luaZ_fill>
   149aa:	e7f9      	b.n	149a0 <check_next2+0x2c>
  else return 0;
   149ac:	2000      	movs	r0, #0
   149ae:	e7f9      	b.n	149a4 <check_next2+0x30>

000149b0 <esccheck>:
static void esccheck (LexState *ls, int c, const char *msg) {
   149b0:	b538      	push	{r3, r4, r5, lr}
   149b2:	4604      	mov	r4, r0
   149b4:	4615      	mov	r5, r2
  if (!c) {
   149b6:	b9b9      	cbnz	r1, 149e8 <esccheck+0x38>
    if (ls->current != EOZ)
   149b8:	6801      	ldr	r1, [r0, #0]
   149ba:	1c4b      	adds	r3, r1, #1
   149bc:	d00b      	beq.n	149d6 <esccheck+0x26>
      save_and_next(ls);  /* add current to buffer for error message */
   149be:	f7f0 ffc9 	bl	5954 <save>
   149c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   149c4:	6803      	ldr	r3, [r0, #0]
   149c6:	1e5a      	subs	r2, r3, #1
   149c8:	6002      	str	r2, [r0, #0]
   149ca:	b153      	cbz	r3, 149e2 <esccheck+0x32>
   149cc:	6843      	ldr	r3, [r0, #4]
   149ce:	1c5a      	adds	r2, r3, #1
   149d0:	6042      	str	r2, [r0, #4]
   149d2:	7818      	ldrb	r0, [r3, #0]
   149d4:	6020      	str	r0, [r4, #0]
    lexerror(ls, msg, TK_STRING);
   149d6:	f44f 7292 	mov.w	r2, #292	; 0x124
   149da:	4629      	mov	r1, r5
   149dc:	4620      	mov	r0, r4
   149de:	f7f0 ff8b 	bl	58f8 <lexerror>
      save_and_next(ls);  /* add current to buffer for error message */
   149e2:	f001 ff17 	bl	16814 <luaZ_fill>
   149e6:	e7f5      	b.n	149d4 <esccheck+0x24>
}
   149e8:	bd38      	pop	{r3, r4, r5, pc}

000149ea <luaX_syntaxerror>:
l_noret luaX_syntaxerror (LexState *ls, const char *msg) {
   149ea:	b508      	push	{r3, lr}
  lexerror(ls, msg, ls->t.token);
   149ec:	6902      	ldr	r2, [r0, #16]
   149ee:	f7f0 ff83 	bl	58f8 <lexerror>

000149f2 <luaX_newstring>:
TString *luaX_newstring (LexState *ls, const char *str, size_t l) {
   149f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  lua_State *L = ls->L;
   149f4:	6b44      	ldr	r4, [r0, #52]	; 0x34
TString *luaX_newstring (LexState *ls, const char *str, size_t l) {
   149f6:	4606      	mov	r6, r0
  TString *ts = luaS_newlstr(L, str, l);  /* create new string */
   149f8:	4620      	mov	r0, r4
   149fa:	f001 f88f 	bl	15b1c <luaS_newlstr>
  const TValue *o = luaH_getstr(ls->h, ts);
   149fe:	4601      	mov	r1, r0
  TString *ts = luaS_newlstr(L, str, l);  /* create new string */
   14a00:	4605      	mov	r5, r0
  const TValue *o = luaH_getstr(ls->h, ts);
   14a02:	6c30      	ldr	r0, [r6, #64]	; 0x40
   14a04:	f001 f91c 	bl	15c40 <luaH_getstr>
  if (!ttisnil(o))  /* string already present? */
   14a08:	7a02      	ldrb	r2, [r0, #8]
  const TValue *o = luaH_getstr(ls->h, ts);
   14a0a:	4603      	mov	r3, r0
  if (!ttisnil(o))  /* string already present? */
   14a0c:	0712      	lsls	r2, r2, #28
   14a0e:	d003      	beq.n	14a18 <luaX_newstring+0x26>
    ts = keystrval(nodefromval(o));  /* get saved copy */
   14a10:	6905      	ldr	r5, [r0, #16]
}
   14a12:	4628      	mov	r0, r5
   14a14:	b002      	add	sp, #8
   14a16:	bd70      	pop	{r4, r5, r6, pc}
    TValue *stv = s2v(L->top++);  /* reserve stack space for string */
   14a18:	68e2      	ldr	r2, [r4, #12]
    luaH_finishset(L, ls->h, stv, o, stv);  /* t[string] = string */
   14a1a:	4620      	mov	r0, r4
    TValue *stv = s2v(L->top++);  /* reserve stack space for string */
   14a1c:	f102 0110 	add.w	r1, r2, #16
   14a20:	60e1      	str	r1, [r4, #12]
    setsvalue(L, stv, ts);  /* temporarily anchor the string */
   14a22:	6015      	str	r5, [r2, #0]
   14a24:	7929      	ldrb	r1, [r5, #4]
   14a26:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   14a2a:	7211      	strb	r1, [r2, #8]
    luaH_finishset(L, ls->h, stv, o, stv);  /* t[string] = string */
   14a2c:	6c31      	ldr	r1, [r6, #64]	; 0x40
   14a2e:	9200      	str	r2, [sp, #0]
   14a30:	f001 f946 	bl	15cc0 <luaH_finishset>
    luaC_checkGC(L);
   14a34:	6923      	ldr	r3, [r4, #16]
   14a36:	68db      	ldr	r3, [r3, #12]
   14a38:	2b00      	cmp	r3, #0
   14a3a:	dd02      	ble.n	14a42 <luaX_newstring+0x50>
   14a3c:	4620      	mov	r0, r4
   14a3e:	f7ff fe1a 	bl	14676 <luaC_step>
    L->top--;  /* remove string from stack */
   14a42:	68e3      	ldr	r3, [r4, #12]
   14a44:	3b10      	subs	r3, #16
   14a46:	60e3      	str	r3, [r4, #12]
  return ts;
   14a48:	e7e3      	b.n	14a12 <luaX_newstring+0x20>

00014a4a <luaX_next>:


void luaX_next (LexState *ls) {
   14a4a:	b538      	push	{r3, r4, r5, lr}
  ls->lastline = ls->linenumber;
   14a4c:	6843      	ldr	r3, [r0, #4]
void luaX_next (LexState *ls) {
   14a4e:	4604      	mov	r4, r0
  ls->lastline = ls->linenumber;
   14a50:	6083      	str	r3, [r0, #8]
  if (ls->lookahead.token != TK_EOS) {  /* is there a look-ahead token? */
   14a52:	6a03      	ldr	r3, [r0, #32]
   14a54:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
   14a58:	d00a      	beq.n	14a70 <luaX_next+0x26>
    ls->t = ls->lookahead;  /* use this one */
   14a5a:	f100 0510 	add.w	r5, r0, #16
   14a5e:	f100 0320 	add.w	r3, r0, #32
   14a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14a64:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    ls->lookahead.token = TK_EOS;  /* and discharge it */
   14a68:	f44f 7390 	mov.w	r3, #288	; 0x120
   14a6c:	6223      	str	r3, [r4, #32]
  }
  else
    ls->t.token = llex(ls, &ls->t.seminfo);  /* read next token */
}
   14a6e:	bd38      	pop	{r3, r4, r5, pc}
    ls->t.token = llex(ls, &ls->t.seminfo);  /* read next token */
   14a70:	f100 0118 	add.w	r1, r0, #24
   14a74:	f7f1 f8ec 	bl	5c50 <llex>
   14a78:	6120      	str	r0, [r4, #16]
}
   14a7a:	e7f8      	b.n	14a6e <luaX_next+0x24>

00014a7c <luaX_lookahead>:


int luaX_lookahead (LexState *ls) {
   14a7c:	b510      	push	{r4, lr}
  lua_assert(ls->lookahead.token == TK_EOS);
  ls->lookahead.token = llex(ls, &ls->lookahead.seminfo);
   14a7e:	f100 0128 	add.w	r1, r0, #40	; 0x28
int luaX_lookahead (LexState *ls) {
   14a82:	4604      	mov	r4, r0
  ls->lookahead.token = llex(ls, &ls->lookahead.seminfo);
   14a84:	f7f1 f8e4 	bl	5c50 <llex>
   14a88:	6220      	str	r0, [r4, #32]
  return ls->lookahead.token;
}
   14a8a:	bd10      	pop	{r4, pc}

00014a8c <tryagain>:
** collector is not yet fully initialized. Also, it should not be called
** when 'gcstopem' is true, because then the interpreter is in the
** middle of a collection step.
*/
static void *tryagain (lua_State *L, void *block,
                       size_t osize, size_t nsize) {
   14a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  global_State *g = G(L);
   14a90:	6904      	ldr	r4, [r0, #16]
                       size_t osize, size_t nsize) {
   14a92:	461f      	mov	r7, r3
  if (completestate(g) && !g->gcstopem) {
   14a94:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
                       size_t osize, size_t nsize) {
   14a98:	460d      	mov	r5, r1
  if (completestate(g) && !g->gcstopem) {
   14a9a:	071b      	lsls	r3, r3, #28
                       size_t osize, size_t nsize) {
   14a9c:	4616      	mov	r6, r2
  if (completestate(g) && !g->gcstopem) {
   14a9e:	d10f      	bne.n	14ac0 <tryagain+0x34>
   14aa0:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
   14aa4:	b963      	cbnz	r3, 14ac0 <tryagain+0x34>
    luaC_fullgc(L, 1);  /* try to free some memory... */
   14aa6:	2101      	movs	r1, #1
   14aa8:	f7ff fef3 	bl	14892 <luaC_fullgc>
    return (*g->frealloc)(g->ud, block, osize, nsize);  /* try again */
   14aac:	f8d4 e000 	ldr.w	lr, [r4]
   14ab0:	463b      	mov	r3, r7
   14ab2:	4632      	mov	r2, r6
   14ab4:	4629      	mov	r1, r5
   14ab6:	46f4      	mov	ip, lr
   14ab8:	6860      	ldr	r0, [r4, #4]
  }
  else return NULL;  /* cannot free any memory without a full state */
}
   14aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return (*g->frealloc)(g->ud, block, osize, nsize);  /* try again */
   14abe:	4760      	bx	ip
}
   14ac0:	2000      	movs	r0, #0
   14ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014ac6 <luaM_free_>:
void luaM_free_ (lua_State *L, void *block, size_t osize) {
   14ac6:	b570      	push	{r4, r5, r6, lr}
   14ac8:	4615      	mov	r5, r2
  global_State *g = G(L);
   14aca:	6904      	ldr	r4, [r0, #16]
  (*g->frealloc)(g->ud, block, osize, 0);
   14acc:	2300      	movs	r3, #0
   14ace:	6826      	ldr	r6, [r4, #0]
   14ad0:	6860      	ldr	r0, [r4, #4]
   14ad2:	47b0      	blx	r6
  g->GCdebt -= osize;
   14ad4:	68e3      	ldr	r3, [r4, #12]
   14ad6:	1b5b      	subs	r3, r3, r5
   14ad8:	60e3      	str	r3, [r4, #12]
}
   14ada:	bd70      	pop	{r4, r5, r6, pc}

00014adc <luaM_realloc_>:


/*
** Generic allocation routine.
*/
void *luaM_realloc_ (lua_State *L, void *block, size_t osize, size_t nsize) {
   14adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  void *newblock;
  global_State *g = G(L);
   14ae0:	6905      	ldr	r5, [r0, #16]
void *luaM_realloc_ (lua_State *L, void *block, size_t osize, size_t nsize) {
   14ae2:	4680      	mov	r8, r0
  lua_assert((osize == 0) == (block == NULL));
  newblock = firsttry(g, block, osize, nsize);
   14ae4:	e9d5 7000 	ldrd	r7, r0, [r5]
void *luaM_realloc_ (lua_State *L, void *block, size_t osize, size_t nsize) {
   14ae8:	4689      	mov	r9, r1
   14aea:	4616      	mov	r6, r2
   14aec:	461c      	mov	r4, r3
  newblock = firsttry(g, block, osize, nsize);
   14aee:	47b8      	blx	r7
  if (l_unlikely(newblock == NULL && nsize > 0)) {
   14af0:	b938      	cbnz	r0, 14b02 <luaM_realloc_+0x26>
   14af2:	b134      	cbz	r4, 14b02 <luaM_realloc_+0x26>
    newblock = tryagain(L, block, osize, nsize);
   14af4:	4623      	mov	r3, r4
   14af6:	4632      	mov	r2, r6
   14af8:	4649      	mov	r1, r9
   14afa:	4640      	mov	r0, r8
   14afc:	f7ff ffc6 	bl	14a8c <tryagain>
    if (newblock == NULL)  /* still no memory? */
   14b00:	b118      	cbz	r0, 14b0a <luaM_realloc_+0x2e>
      return NULL;  /* do not update 'GCdebt' */
  }
  lua_assert((nsize == 0) == (newblock == NULL));
  g->GCdebt = (g->GCdebt + nsize) - osize;
   14b02:	68eb      	ldr	r3, [r5, #12]
   14b04:	1ba4      	subs	r4, r4, r6
   14b06:	441c      	add	r4, r3
   14b08:	60ec      	str	r4, [r5, #12]
  return newblock;
}
   14b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014b0e <luaM_saferealloc_>:


void *luaM_saferealloc_ (lua_State *L, void *block, size_t osize,
                                                    size_t nsize) {
   14b0e:	b538      	push	{r3, r4, r5, lr}
   14b10:	4604      	mov	r4, r0
   14b12:	461d      	mov	r5, r3
  void *newblock = luaM_realloc_(L, block, osize, nsize);
   14b14:	f7ff ffe2 	bl	14adc <luaM_realloc_>
  if (l_unlikely(newblock == NULL && nsize > 0))  /* allocation failed? */
   14b18:	b920      	cbnz	r0, 14b24 <luaM_saferealloc_+0x16>
   14b1a:	b11d      	cbz	r5, 14b24 <luaM_saferealloc_+0x16>
    luaM_error(L);
   14b1c:	2104      	movs	r1, #4
   14b1e:	4620      	mov	r0, r4
   14b20:	f7fe f937 	bl	12d92 <luaD_throw>
  return newblock;
}
   14b24:	bd38      	pop	{r3, r4, r5, pc}

00014b26 <luaM_shrinkvector_>:
                          int final_n, int size_elem) {
   14b26:	b570      	push	{r4, r5, r6, lr}
   14b28:	4614      	mov	r4, r2
   14b2a:	461d      	mov	r5, r3
   14b2c:	9a04      	ldr	r2, [sp, #16]
  size_t oldsize = cast_sizet((*size) * size_elem);
   14b2e:	6826      	ldr	r6, [r4, #0]
  newblock = luaM_saferealloc_(L, block, oldsize, newsize);
   14b30:	4353      	muls	r3, r2
   14b32:	4372      	muls	r2, r6
   14b34:	f7ff ffeb 	bl	14b0e <luaM_saferealloc_>
  *size = final_n;
   14b38:	6025      	str	r5, [r4, #0]
}
   14b3a:	bd70      	pop	{r4, r5, r6, pc}

00014b3c <luaM_malloc_>:


void *luaM_malloc_ (lua_State *L, size_t size, int tag) {
   14b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b40:	4605      	mov	r5, r0
   14b42:	4690      	mov	r8, r2
  if (size == 0)
   14b44:	460c      	mov	r4, r1
   14b46:	b1b1      	cbz	r1, 14b76 <luaM_malloc_+0x3a>
    return NULL;  /* that's all */
  else {
    global_State *g = G(L);
   14b48:	6906      	ldr	r6, [r0, #16]
    void *newblock = firsttry(g, NULL, tag, size);
   14b4a:	460b      	mov	r3, r1
   14b4c:	6837      	ldr	r7, [r6, #0]
   14b4e:	2100      	movs	r1, #0
   14b50:	6870      	ldr	r0, [r6, #4]
   14b52:	47b8      	blx	r7
    if (l_unlikely(newblock == NULL)) {
   14b54:	b950      	cbnz	r0, 14b6c <luaM_malloc_+0x30>
      newblock = tryagain(L, NULL, tag, size);
   14b56:	4601      	mov	r1, r0
   14b58:	4623      	mov	r3, r4
   14b5a:	4642      	mov	r2, r8
   14b5c:	4628      	mov	r0, r5
   14b5e:	f7ff ff95 	bl	14a8c <tryagain>
      if (newblock == NULL)
   14b62:	b918      	cbnz	r0, 14b6c <luaM_malloc_+0x30>
        luaM_error(L);
   14b64:	2104      	movs	r1, #4
   14b66:	4628      	mov	r0, r5
   14b68:	f7fe f913 	bl	12d92 <luaD_throw>
    }
    g->GCdebt += size;
   14b6c:	68f1      	ldr	r1, [r6, #12]
   14b6e:	4421      	add	r1, r4
   14b70:	60f1      	str	r1, [r6, #12]
    return newblock;
  }
}
   14b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return NULL;  /* that's all */
   14b76:	4608      	mov	r0, r1
   14b78:	e7fb      	b.n	14b72 <luaM_malloc_+0x36>

00014b7a <intarith>:
                                                   lua_Integer v2) {
   14b7a:	b430      	push	{r4, r5}
   14b7c:	460d      	mov	r5, r1
   14b7e:	4614      	mov	r4, r2
   14b80:	4619      	mov	r1, r3
   14b82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  switch (op) {
   14b86:	2d0d      	cmp	r5, #13
   14b88:	d840      	bhi.n	14c0c <intarith+0x92>
   14b8a:	e8df f005 	tbb	[pc, r5]
   14b8e:	0c07      	.short	0x0c07
   14b90:	3f3f1710 	.word	0x3f3f1710
   14b94:	2d29251e 	.word	0x2d29251e
   14b98:	3c383134 	.word	0x3c383134
    case LUA_OPADD: return intop(+, v1, v2);
   14b9c:	18a0      	adds	r0, r4, r2
   14b9e:	eb41 0103 	adc.w	r1, r1, r3
}
   14ba2:	bc30      	pop	{r4, r5}
   14ba4:	4770      	bx	lr
    case LUA_OPSUB:return intop(-, v1, v2);
   14ba6:	1aa0      	subs	r0, r4, r2
   14ba8:	eb61 0103 	sbc.w	r1, r1, r3
   14bac:	e7f9      	b.n	14ba2 <intarith+0x28>
    case LUA_OPMUL:return intop(*, v1, v2);
   14bae:	4363      	muls	r3, r4
   14bb0:	fb02 3301 	mla	r3, r2, r1, r3
   14bb4:	fba4 0102 	umull	r0, r1, r4, r2
   14bb8:	4419      	add	r1, r3
   14bba:	e7f2      	b.n	14ba2 <intarith+0x28>
    case LUA_OPMOD: return luaV_mod(L, v1, v2);
   14bbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
   14bc0:	4622      	mov	r2, r4
}
   14bc2:	bc30      	pop	{r4, r5}
    case LUA_OPMOD: return luaV_mod(L, v1, v2);
   14bc4:	460b      	mov	r3, r1
   14bc6:	f7f4 bb3d 	b.w	9244 <luaV_mod>
    case LUA_OPIDIV: return luaV_idiv(L, v1, v2);
   14bca:	e9cd 2302 	strd	r2, r3, [sp, #8]
   14bce:	4622      	mov	r2, r4
}
   14bd0:	bc30      	pop	{r4, r5}
    case LUA_OPIDIV: return luaV_idiv(L, v1, v2);
   14bd2:	460b      	mov	r3, r1
   14bd4:	f7f4 bb0e 	b.w	91f4 <luaV_idiv>
    case LUA_OPBAND: return intop(&, v1, v2);
   14bd8:	ea04 0002 	and.w	r0, r4, r2
   14bdc:	4019      	ands	r1, r3
   14bde:	e7e0      	b.n	14ba2 <intarith+0x28>
    case LUA_OPBOR: return intop(|, v1, v2);
   14be0:	ea44 0002 	orr.w	r0, r4, r2
   14be4:	4319      	orrs	r1, r3
   14be6:	e7dc      	b.n	14ba2 <intarith+0x28>
    case LUA_OPBXOR: return intop(^, v1, v2);
   14be8:	ea84 0002 	eor.w	r0, r4, r2
   14bec:	4059      	eors	r1, r3
   14bee:	e7d8      	b.n	14ba2 <intarith+0x28>
    case LUA_OPSHR: return luaV_shiftl(v1, -v2);
   14bf0:	4252      	negs	r2, r2
   14bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   14bf6:	4620      	mov	r0, r4
}
   14bf8:	bc30      	pop	{r4, r5}
    case LUA_OPSHR: return luaV_shiftl(v1, -v2);
   14bfa:	f001 bde2 	b.w	167c2 <luaV_shiftl>
    case LUA_OPUNM: return intop(-, 0, v1);
   14bfe:	4260      	negs	r0, r4
   14c00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14c04:	e7cd      	b.n	14ba2 <intarith+0x28>
    case LUA_OPBNOT: return intop(^, ~l_castS2U(0), v1);
   14c06:	43e0      	mvns	r0, r4
   14c08:	43c9      	mvns	r1, r1
   14c0a:	e7ca      	b.n	14ba2 <intarith+0x28>
  switch (op) {
   14c0c:	2000      	movs	r0, #0
   14c0e:	4601      	mov	r1, r0
   14c10:	e7c7      	b.n	14ba2 <intarith+0x28>

00014c12 <numarith>:
                                                  lua_Number v2) {
   14c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c16:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   14c1a:	4614      	mov	r4, r2
   14c1c:	461d      	mov	r5, r3
  switch (op) {
   14c1e:	290c      	cmp	r1, #12
   14c20:	d850      	bhi.n	14cc4 <numarith+0xb2>
   14c22:	e8df f001 	tbb	[pc, r1]
   14c26:	1307      	.short	0x1307
   14c28:	2128481a 	.word	0x2128481a
   14c2c:	4f4f4f3b 	.word	0x4f4f4f3b
   14c30:	4f4f      	.short	0x4f4f
   14c32:	45          	.byte	0x45
   14c33:	00          	.byte	0x00
    case LUA_OPADD: return luai_numadd(L, v1, v2);
   14c34:	4632      	mov	r2, r6
   14c36:	463b      	mov	r3, r7
   14c38:	4620      	mov	r0, r4
   14c3a:	4629      	mov	r1, r5
   14c3c:	f7eb fa5e 	bl	fc <__adddf3>
    case LUA_OPPOW: return luai_numpow(L, v1, v2);
   14c40:	4604      	mov	r4, r0
   14c42:	460d      	mov	r5, r1
}
   14c44:	4620      	mov	r0, r4
   14c46:	4629      	mov	r1, r5
   14c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case LUA_OPSUB: return luai_numsub(L, v1, v2);
   14c4c:	4632      	mov	r2, r6
   14c4e:	463b      	mov	r3, r7
   14c50:	4620      	mov	r0, r4
   14c52:	4629      	mov	r1, r5
   14c54:	f7eb fa50 	bl	f8 <__aeabi_dsub>
   14c58:	e7f2      	b.n	14c40 <numarith+0x2e>
    case LUA_OPMUL: return luai_nummul(L, v1, v2);
   14c5a:	4632      	mov	r2, r6
   14c5c:	463b      	mov	r3, r7
    case LUA_OPPOW: return luai_numpow(L, v1, v2);
   14c5e:	4620      	mov	r0, r4
   14c60:	4629      	mov	r1, r5
   14c62:	f7eb fc01 	bl	468 <__aeabi_dmul>
   14c66:	e7eb      	b.n	14c40 <numarith+0x2e>
    case LUA_OPDIV: return luai_numdiv(L, v1, v2);
   14c68:	4632      	mov	r2, r6
   14c6a:	463b      	mov	r3, r7
   14c6c:	4620      	mov	r0, r4
   14c6e:	4629      	mov	r1, r5
   14c70:	f7eb fd24 	bl	6bc <__aeabi_ddiv>
   14c74:	e7e4      	b.n	14c40 <numarith+0x2e>
    case LUA_OPPOW: return luai_numpow(L, v1, v2);
   14c76:	2200      	movs	r2, #0
   14c78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14c7c:	4630      	mov	r0, r6
   14c7e:	4639      	mov	r1, r7
   14c80:	f7eb fe5a 	bl	938 <__aeabi_dcmpeq>
   14c84:	b110      	cbz	r0, 14c8c <numarith+0x7a>
   14c86:	4622      	mov	r2, r4
   14c88:	462b      	mov	r3, r5
   14c8a:	e7e8      	b.n	14c5e <numarith+0x4c>
   14c8c:	4632      	mov	r2, r6
   14c8e:	463b      	mov	r3, r7
   14c90:	4620      	mov	r0, r4
   14c92:	4629      	mov	r1, r5
}
   14c94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    case LUA_OPPOW: return luai_numpow(L, v1, v2);
   14c98:	f7f8 b894 	b.w	cdc4 <pow>
    case LUA_OPIDIV: return luai_numidiv(L, v1, v2);
   14c9c:	4632      	mov	r2, r6
   14c9e:	463b      	mov	r3, r7
   14ca0:	4620      	mov	r0, r4
   14ca2:	4629      	mov	r1, r5
   14ca4:	f7eb fd0a 	bl	6bc <__aeabi_ddiv>
}
   14ca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    case LUA_OPIDIV: return luai_numidiv(L, v1, v2);
   14cac:	f7ec b984 	b.w	fb8 <floor>
    case LUA_OPUNM: return luai_numunm(L, v1);
   14cb0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
   14cb4:	e7c6      	b.n	14c44 <numarith+0x32>
    case LUA_OPMOD: return luaV_modf(L, v1, v2);
   14cb6:	462b      	mov	r3, r5
   14cb8:	e9cd 6706 	strd	r6, r7, [sp, #24]
}
   14cbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    case LUA_OPMOD: return luaV_modf(L, v1, v2);
   14cc0:	f001 bd50 	b.w	16764 <luaV_modf>
  switch (op) {
   14cc4:	2400      	movs	r4, #0
   14cc6:	4625      	mov	r5, r4
   14cc8:	e7bc      	b.n	14c44 <numarith+0x32>

00014cca <pushstr>:
static void pushstr (BuffFS *buff, const char *str, size_t l) {
   14cca:	b570      	push	{r4, r5, r6, lr}
  lua_State *L = buff->L;
   14ccc:	6805      	ldr	r5, [r0, #0]
static void pushstr (BuffFS *buff, const char *str, size_t l) {
   14cce:	4604      	mov	r4, r0
  setsvalue2s(L, L->top, luaS_newlstr(L, str, l));
   14cd0:	4628      	mov	r0, r5
   14cd2:	68ee      	ldr	r6, [r5, #12]
   14cd4:	f000 ff22 	bl	15b1c <luaS_newlstr>
   14cd8:	6030      	str	r0, [r6, #0]
   14cda:	7903      	ldrb	r3, [r0, #4]
  luaV_concat(L, buff->pushed);  /* join partial results into one */
   14cdc:	4628      	mov	r0, r5
  setsvalue2s(L, L->top, luaS_newlstr(L, str, l));
   14cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14ce2:	7233      	strb	r3, [r6, #8]
  L->top++;  /* may use one extra slot */
   14ce4:	68eb      	ldr	r3, [r5, #12]
  buff->pushed++;
   14ce6:	6861      	ldr	r1, [r4, #4]
  L->top++;  /* may use one extra slot */
   14ce8:	3310      	adds	r3, #16
  buff->pushed++;
   14cea:	3101      	adds	r1, #1
  L->top++;  /* may use one extra slot */
   14cec:	60eb      	str	r3, [r5, #12]
  buff->pushed++;
   14cee:	6061      	str	r1, [r4, #4]
  luaV_concat(L, buff->pushed);  /* join partial results into one */
   14cf0:	f7f4 f99c 	bl	902c <luaV_concat>
  buff->pushed = 1;
   14cf4:	2301      	movs	r3, #1
   14cf6:	6063      	str	r3, [r4, #4]
}
   14cf8:	bd70      	pop	{r4, r5, r6, pc}

00014cfa <clearbuff>:
static void clearbuff (BuffFS *buff) {
   14cfa:	b510      	push	{r4, lr}
  pushstr(buff, buff->space, buff->blen);  /* push buffer contents */
   14cfc:	6882      	ldr	r2, [r0, #8]
   14cfe:	f100 010c 	add.w	r1, r0, #12
static void clearbuff (BuffFS *buff) {
   14d02:	4604      	mov	r4, r0
  pushstr(buff, buff->space, buff->blen);  /* push buffer contents */
   14d04:	f7ff ffe1 	bl	14cca <pushstr>
  buff->blen = 0;  /* space now is empty */
   14d08:	2300      	movs	r3, #0
   14d0a:	60a3      	str	r3, [r4, #8]
}
   14d0c:	bd10      	pop	{r4, pc}

00014d0e <addnum2buff>:
static void addnum2buff (BuffFS *buff, TValue *num) {
   14d0e:	b538      	push	{r3, r4, r5, lr}
  if (sz > BUFVFS - buff->blen)  /* not enough space? */
   14d10:	6883      	ldr	r3, [r0, #8]
static void addnum2buff (BuffFS *buff, TValue *num) {
   14d12:	4604      	mov	r4, r0
  if (sz > BUFVFS - buff->blen)  /* not enough space? */
   14d14:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
   14d18:	2b2b      	cmp	r3, #43	; 0x2b
static void addnum2buff (BuffFS *buff, TValue *num) {
   14d1a:	460d      	mov	r5, r1
  if (sz > BUFVFS - buff->blen)  /* not enough space? */
   14d1c:	dc01      	bgt.n	14d22 <addnum2buff+0x14>
    clearbuff(buff);
   14d1e:	f7ff ffec 	bl	14cfa <clearbuff>
  return buff->space + buff->blen;
   14d22:	68a3      	ldr	r3, [r4, #8]
   14d24:	f104 010c 	add.w	r1, r4, #12
  int len = tostringbuff(num, numbuff);  /* format number into 'numbuff' */
   14d28:	4419      	add	r1, r3
   14d2a:	4628      	mov	r0, r5
   14d2c:	f7f1 fbd8 	bl	64e0 <tostringbuff>
  addsize(buff, len);
   14d30:	68a3      	ldr	r3, [r4, #8]
   14d32:	4403      	add	r3, r0
   14d34:	60a3      	str	r3, [r4, #8]
}
   14d36:	bd38      	pop	{r3, r4, r5, pc}

00014d38 <addstr2buff.part.0>:
  if (sz > BUFVFS - buff->blen)  /* not enough space? */
   14d38:	6883      	ldr	r3, [r0, #8]
static void addstr2buff (BuffFS *buff, const char *str, size_t slen) {
   14d3a:	b570      	push	{r4, r5, r6, lr}
  if (sz > BUFVFS - buff->blen)  /* not enough space? */
   14d3c:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
   14d40:	429a      	cmp	r2, r3
static void addstr2buff (BuffFS *buff, const char *str, size_t slen) {
   14d42:	4604      	mov	r4, r0
   14d44:	460e      	mov	r6, r1
   14d46:	4615      	mov	r5, r2
  if (sz > BUFVFS - buff->blen)  /* not enough space? */
   14d48:	dd01      	ble.n	14d4e <addstr2buff.part.0+0x16>
    clearbuff(buff);
   14d4a:	f7ff ffd6 	bl	14cfa <clearbuff>
  return buff->space + buff->blen;
   14d4e:	68a3      	ldr	r3, [r4, #8]
   14d50:	f104 000c 	add.w	r0, r4, #12
   14d54:	462a      	mov	r2, r5
   14d56:	4631      	mov	r1, r6
   14d58:	4418      	add	r0, r3
   14d5a:	f001 ff8f 	bl	16c7c <memcpy>
    addsize(buff, cast_int(slen));
   14d5e:	68a2      	ldr	r2, [r4, #8]
   14d60:	442a      	add	r2, r5
   14d62:	60a2      	str	r2, [r4, #8]
}
   14d64:	bd70      	pop	{r4, r5, r6, pc}

00014d66 <addstr2buff>:
  if (slen <= BUFVFS) {  /* does string fit into buffer? */
   14d66:	2ac8      	cmp	r2, #200	; 0xc8
static void addstr2buff (BuffFS *buff, const char *str, size_t slen) {
   14d68:	b570      	push	{r4, r5, r6, lr}
   14d6a:	4605      	mov	r5, r0
   14d6c:	460e      	mov	r6, r1
   14d6e:	4614      	mov	r4, r2
  if (slen <= BUFVFS) {  /* does string fit into buffer? */
   14d70:	d803      	bhi.n	14d7a <addstr2buff+0x14>
}
   14d72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14d76:	f7ff bfdf 	b.w	14d38 <addstr2buff.part.0>
    clearbuff(buff);  /* string comes after buffer's content */
   14d7a:	f7ff ffbe 	bl	14cfa <clearbuff>
    pushstr(buff, str, slen);  /* push string */
   14d7e:	4622      	mov	r2, r4
   14d80:	4631      	mov	r1, r6
   14d82:	4628      	mov	r0, r5
}
   14d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pushstr(buff, str, slen);  /* push string */
   14d88:	f7ff bf9f 	b.w	14cca <pushstr>

00014d8c <luaO_rawarith>:
                   TValue *res) {
   14d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (op) {
   14d90:	290b      	cmp	r1, #11
                   TValue *res) {
   14d92:	b087      	sub	sp, #28
   14d94:	4607      	mov	r7, r0
   14d96:	460c      	mov	r4, r1
   14d98:	4610      	mov	r0, r2
   14d9a:	4698      	mov	r8, r3
   14d9c:	9d10      	ldr	r5, [sp, #64]	; 0x40
      if (tointegerns(p1, &i1) && tointegerns(p2, &i2)) {
   14d9e:	7a16      	ldrb	r6, [r2, #8]
  switch (op) {
   14da0:	dc1b      	bgt.n	14dda <luaO_rawarith+0x4e>
   14da2:	2906      	cmp	r1, #6
   14da4:	dc1b      	bgt.n	14dde <luaO_rawarith+0x52>
   14da6:	1f0b      	subs	r3, r1, #4
   14da8:	2b01      	cmp	r3, #1
   14daa:	d945      	bls.n	14e38 <luaO_rawarith+0xac>
      if (ttisinteger(p1) && ttisinteger(p2)) {
   14dac:	2e03      	cmp	r6, #3
   14dae:	d16c      	bne.n	14e8a <luaO_rawarith+0xfe>
      if (tointegerns(p1, &i1) && tointegerns(p2, &i2)) {
   14db0:	e9d0 2300 	ldrd	r2, r3, [r0]
      if (ttisinteger(p1) && ttisinteger(p2)) {
   14db4:	f898 1008 	ldrb.w	r1, [r8, #8]
   14db8:	2903      	cmp	r1, #3
   14dba:	d15c      	bne.n	14e76 <luaO_rawarith+0xea>
        setivalue(res, intarith(L, op, ivalue(p1), ivalue(p2)));
   14dbc:	e898 0300 	ldmia.w	r8, {r8, r9}
   14dc0:	4621      	mov	r1, r4
   14dc2:	4638      	mov	r0, r7
   14dc4:	e9cd 8900 	strd	r8, r9, [sp]
   14dc8:	f7ff fed7 	bl	14b7a <intarith>
   14dcc:	e9c5 0100 	strd	r0, r1, [r5]
   14dd0:	722e      	strb	r6, [r5, #8]
        return 1;
   14dd2:	2001      	movs	r0, #1
}
   14dd4:	b007      	add	sp, #28
   14dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (op) {
   14dda:	290d      	cmp	r1, #13
   14ddc:	d1e6      	bne.n	14dac <luaO_rawarith+0x20>
      if (tointegerns(p1, &i1) && tointegerns(p2, &i2)) {
   14dde:	2e03      	cmp	r6, #3
   14de0:	d11a      	bne.n	14e18 <luaO_rawarith+0x8c>
   14de2:	e9d0 2300 	ldrd	r2, r3, [r0]
   14de6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   14dea:	f898 3008 	ldrb.w	r3, [r8, #8]
   14dee:	2b03      	cmp	r3, #3
   14df0:	d11a      	bne.n	14e28 <luaO_rawarith+0x9c>
   14df2:	e9d8 2300 	ldrd	r2, r3, [r8]
   14df6:	e9cd 2304 	strd	r2, r3, [sp, #16]
        setivalue(res, intarith(L, op, i1, i2));
   14dfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   14dfe:	4621      	mov	r1, r4
   14e00:	e9cd 2300 	strd	r2, r3, [sp]
   14e04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14e08:	4638      	mov	r0, r7
   14e0a:	f7ff feb6 	bl	14b7a <intarith>
   14e0e:	2303      	movs	r3, #3
   14e10:	e9c5 0100 	strd	r0, r1, [r5]
        setfltvalue(res, numarith(L, op, n1, n2));
   14e14:	722b      	strb	r3, [r5, #8]
   14e16:	e7dc      	b.n	14dd2 <luaO_rawarith+0x46>
      if (tointegerns(p1, &i1) && tointegerns(p2, &i2)) {
   14e18:	2200      	movs	r2, #0
   14e1a:	a902      	add	r1, sp, #8
   14e1c:	f001 fbd8 	bl	165d0 <luaV_tointegerns>
   14e20:	2800      	cmp	r0, #0
   14e22:	d1e2      	bne.n	14dea <luaO_rawarith+0x5e>
      else return 0;  /* fail */
   14e24:	2000      	movs	r0, #0
   14e26:	e7d5      	b.n	14dd4 <luaO_rawarith+0x48>
      if (tointegerns(p1, &i1) && tointegerns(p2, &i2)) {
   14e28:	2200      	movs	r2, #0
   14e2a:	4640      	mov	r0, r8
   14e2c:	a904      	add	r1, sp, #16
   14e2e:	f001 fbcf 	bl	165d0 <luaV_tointegerns>
   14e32:	2800      	cmp	r0, #0
   14e34:	d0f6      	beq.n	14e24 <luaO_rawarith+0x98>
   14e36:	e7e0      	b.n	14dfa <luaO_rawarith+0x6e>
      if (tonumberns(p1, n1) && tonumberns(p2, n2)) {
   14e38:	2e13      	cmp	r6, #19
   14e3a:	d113      	bne.n	14e64 <luaO_rawarith+0xd8>
      else if (tonumberns(p1, n1) && tonumberns(p2, n2)) {
   14e3c:	e9d0 ab00 	ldrd	sl, fp, [r0]
   14e40:	f898 3008 	ldrb.w	r3, [r8, #8]
   14e44:	2b13      	cmp	r3, #19
   14e46:	d119      	bne.n	14e7c <luaO_rawarith+0xf0>
   14e48:	e9d8 0100 	ldrd	r0, r1, [r8]
        setfltvalue(res, numarith(L, op, n1, n2));
   14e4c:	e9cd 0100 	strd	r0, r1, [sp]
   14e50:	465b      	mov	r3, fp
   14e52:	4652      	mov	r2, sl
   14e54:	4621      	mov	r1, r4
   14e56:	4638      	mov	r0, r7
   14e58:	f7ff fedb 	bl	14c12 <numarith>
   14e5c:	2313      	movs	r3, #19
   14e5e:	e9c5 0100 	strd	r0, r1, [r5]
   14e62:	e7d7      	b.n	14e14 <luaO_rawarith+0x88>
      if (tonumberns(p1, n1) && tonumberns(p2, n2)) {
   14e64:	2e03      	cmp	r6, #3
   14e66:	d1dd      	bne.n	14e24 <luaO_rawarith+0x98>
   14e68:	e9d2 0100 	ldrd	r0, r1, [r2]
      else if (tonumberns(p1, n1) && tonumberns(p2, n2)) {
   14e6c:	f7eb face 	bl	40c <__aeabi_l2d>
   14e70:	4682      	mov	sl, r0
   14e72:	468b      	mov	fp, r1
   14e74:	e7e4      	b.n	14e40 <luaO_rawarith+0xb4>
   14e76:	4610      	mov	r0, r2
   14e78:	4619      	mov	r1, r3
   14e7a:	e7f7      	b.n	14e6c <luaO_rawarith+0xe0>
   14e7c:	2b03      	cmp	r3, #3
   14e7e:	d1d1      	bne.n	14e24 <luaO_rawarith+0x98>
   14e80:	e9d8 0100 	ldrd	r0, r1, [r8]
   14e84:	f7eb fac2 	bl	40c <__aeabi_l2d>
   14e88:	e7e0      	b.n	14e4c <luaO_rawarith+0xc0>
   14e8a:	2e13      	cmp	r6, #19
   14e8c:	d0d6      	beq.n	14e3c <luaO_rawarith+0xb0>
   14e8e:	e7c9      	b.n	14e24 <luaO_rawarith+0x98>

00014e90 <luaO_utf8esc>:
  if (x < 0x80)  /* ascii? */
   14e90:	297f      	cmp	r1, #127	; 0x7f
int luaO_utf8esc (char *buff, unsigned long x) {
   14e92:	4603      	mov	r3, r0
   14e94:	b570      	push	{r4, r5, r6, lr}
  if (x < 0x80)  /* ascii? */
   14e96:	d802      	bhi.n	14e9e <luaO_utf8esc+0xe>
    buff[UTF8BUFFSZ - 1] = cast_char(x);
   14e98:	71c1      	strb	r1, [r0, #7]
  int n = 1;  /* number of bytes put in buffer (backwards) */
   14e9a:	2001      	movs	r0, #1
}
   14e9c:	bd70      	pop	{r4, r5, r6, pc}
    unsigned int mfb = 0x3f;  /* maximum that fits in first byte */
   14e9e:	223f      	movs	r2, #63	; 0x3f
   14ea0:	f100 0408 	add.w	r4, r0, #8
   14ea4:	f100 060a 	add.w	r6, r0, #10
      buff[UTF8BUFFSZ - (n++)] = cast_char(0x80 | (x & 0x3f));
   14ea8:	f001 053f 	and.w	r5, r1, #63	; 0x3f
      mfb >>= 1;  /* now there is one less bit available in first byte */
   14eac:	0852      	lsrs	r2, r2, #1
      x >>= 6;  /* remove added bits */
   14eae:	0989      	lsrs	r1, r1, #6
      buff[UTF8BUFFSZ - (n++)] = cast_char(0x80 | (x & 0x3f));
   14eb0:	f065 057f 	orn	r5, r5, #127	; 0x7f
    } while (x > mfb);  /* still needs continuation byte? */
   14eb4:	4291      	cmp	r1, r2
   14eb6:	eba6 0004 	sub.w	r0, r6, r4
      buff[UTF8BUFFSZ - (n++)] = cast_char(0x80 | (x & 0x3f));
   14eba:	f804 5d01 	strb.w	r5, [r4, #-1]!
    } while (x > mfb);  /* still needs continuation byte? */
   14ebe:	d8f3      	bhi.n	14ea8 <luaO_utf8esc+0x18>
    buff[UTF8BUFFSZ - n] = cast_char((~mfb << 1) | x);  /* add first byte */
   14ec0:	43d2      	mvns	r2, r2
   14ec2:	f1c0 0408 	rsb	r4, r0, #8
   14ec6:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
   14eca:	5519      	strb	r1, [r3, r4]
  return n;
   14ecc:	e7e6      	b.n	14e9c <luaO_utf8esc+0xc>

00014ece <luaO_tostring>:
void luaO_tostring (lua_State *L, TValue *obj) {
   14ece:	b530      	push	{r4, r5, lr}
   14ed0:	460c      	mov	r4, r1
   14ed2:	b08d      	sub	sp, #52	; 0x34
   14ed4:	4605      	mov	r5, r0
  int len = tostringbuff(obj, buff);
   14ed6:	a901      	add	r1, sp, #4
   14ed8:	4620      	mov	r0, r4
   14eda:	f7f1 fb01 	bl	64e0 <tostringbuff>
  setsvalue(L, obj, luaS_newlstr(L, buff, len));
   14ede:	a901      	add	r1, sp, #4
  int len = tostringbuff(obj, buff);
   14ee0:	4602      	mov	r2, r0
  setsvalue(L, obj, luaS_newlstr(L, buff, len));
   14ee2:	4628      	mov	r0, r5
   14ee4:	f000 fe1a 	bl	15b1c <luaS_newlstr>
   14ee8:	6020      	str	r0, [r4, #0]
   14eea:	7903      	ldrb	r3, [r0, #4]
   14eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14ef0:	7223      	strb	r3, [r4, #8]
}
   14ef2:	b00d      	add	sp, #52	; 0x34
   14ef4:	bd30      	pop	{r4, r5, pc}

00014ef6 <luaO_pushfstring>:
const char *luaO_pushfstring (lua_State *L, const char *fmt, ...) {
   14ef6:	b40e      	push	{r1, r2, r3}
   14ef8:	b503      	push	{r0, r1, lr}
   14efa:	aa03      	add	r2, sp, #12
   14efc:	f852 1b04 	ldr.w	r1, [r2], #4
  va_start(argp, fmt);
   14f00:	9201      	str	r2, [sp, #4]
  msg = luaO_pushvfstring(L, fmt, argp);
   14f02:	f7f1 fc07 	bl	6714 <luaO_pushvfstring>
}
   14f06:	b002      	add	sp, #8
   14f08:	f85d eb04 	ldr.w	lr, [sp], #4
   14f0c:	b003      	add	sp, #12
   14f0e:	4770      	bx	lr

00014f10 <getlocalvardesc>:
  return &fs->ls->dyd->actvar.arr[fs->firstlocal + vidx];
   14f10:	6883      	ldr	r3, [r0, #8]
   14f12:	6a80      	ldr	r0, [r0, #40]	; 0x28
   14f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   14f16:	4401      	add	r1, r0
}
   14f18:	2018      	movs	r0, #24
  return &fs->ls->dyd->actvar.arr[fs->firstlocal + vidx];
   14f1a:	681b      	ldr	r3, [r3, #0]
}
   14f1c:	fb00 3001 	mla	r0, r0, r1, r3
   14f20:	4770      	bx	lr

00014f22 <reglevel>:
static int reglevel (FuncState *fs, int nvar) {
   14f22:	b510      	push	{r4, lr}
   14f24:	460a      	mov	r2, r1
   14f26:	4604      	mov	r4, r0
  while (nvar-- > 0) {
   14f28:	2a00      	cmp	r2, #0
   14f2a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   14f2e:	dc01      	bgt.n	14f34 <reglevel+0x12>
  return 0;  /* no variables in registers */
   14f30:	2000      	movs	r0, #0
   14f32:	e008      	b.n	14f46 <reglevel+0x24>
    Vardesc *vd = getlocalvardesc(fs, nvar);  /* get previous variable */
   14f34:	4611      	mov	r1, r2
   14f36:	4620      	mov	r0, r4
   14f38:	f7ff ffea 	bl	14f10 <getlocalvardesc>
    if (vd->vd.kind != RDKCTC)  /* is in a register? */
   14f3c:	7a43      	ldrb	r3, [r0, #9]
   14f3e:	2b03      	cmp	r3, #3
   14f40:	d0f2      	beq.n	14f28 <reglevel+0x6>
      return vd->vd.ridx + 1;
   14f42:	7a80      	ldrb	r0, [r0, #10]
   14f44:	3001      	adds	r0, #1
}
   14f46:	bd10      	pop	{r4, pc}

00014f48 <localdebuginfo>:
static LocVar *localdebuginfo (FuncState *fs, int vidx) {
   14f48:	b508      	push	{r3, lr}
   14f4a:	4602      	mov	r2, r0
  Vardesc *vd = getlocalvardesc(fs,  vidx);
   14f4c:	f7ff ffe0 	bl	14f10 <getlocalvardesc>
  if (vd->vd.kind == RDKCTC)
   14f50:	7a43      	ldrb	r3, [r0, #9]
   14f52:	2b03      	cmp	r3, #3
    return &fs->f->locvars[idx];
   14f54:	bf1f      	itttt	ne
   14f56:	6812      	ldrne	r2, [r2, #0]
   14f58:	f9b0 300c 	ldrshne.w	r3, [r0, #12]
   14f5c:	6c90      	ldrne	r0, [r2, #72]	; 0x48
   14f5e:	220c      	movne	r2, #12
    return NULL;  /* no debug info. for constants */
   14f60:	bf0c      	ite	eq
   14f62:	2000      	moveq	r0, #0
    return &fs->f->locvars[idx];
   14f64:	fb02 0003 	mlane	r0, r2, r3, r0
}
   14f68:	bd08      	pop	{r3, pc}

00014f6a <enterblock>:
  bl->isloop = isloop;
   14f6a:	738a      	strb	r2, [r1, #14]
  bl->nactvar = fs->nactvar;
   14f6c:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   14f70:	730b      	strb	r3, [r1, #12]
  bl->firstlabel = fs->ls->dyd->label.n;
   14f72:	6883      	ldr	r3, [r0, #8]
   14f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   14f76:	69da      	ldr	r2, [r3, #28]
  bl->firstgoto = fs->ls->dyd->gt.n;
   14f78:	691b      	ldr	r3, [r3, #16]
  bl->firstlabel = fs->ls->dyd->label.n;
   14f7a:	604a      	str	r2, [r1, #4]
  bl->firstgoto = fs->ls->dyd->gt.n;
   14f7c:	608b      	str	r3, [r1, #8]
  bl->upval = 0;
   14f7e:	2300      	movs	r3, #0
   14f80:	734b      	strb	r3, [r1, #13]
  bl->insidetbc = (fs->bl != NULL && fs->bl->insidetbc);
   14f82:	68c3      	ldr	r3, [r0, #12]
   14f84:	b13b      	cbz	r3, 14f96 <enterblock+0x2c>
   14f86:	7bda      	ldrb	r2, [r3, #15]
   14f88:	3a00      	subs	r2, #0
   14f8a:	bf18      	it	ne
   14f8c:	2201      	movne	r2, #1
   14f8e:	73ca      	strb	r2, [r1, #15]
  bl->previous = fs->bl;
   14f90:	600b      	str	r3, [r1, #0]
  fs->bl = bl;
   14f92:	60c1      	str	r1, [r0, #12]
}
   14f94:	4770      	bx	lr
  bl->insidetbc = (fs->bl != NULL && fs->bl->insidetbc);
   14f96:	461a      	mov	r2, r3
   14f98:	e7f9      	b.n	14f8e <enterblock+0x24>

00014f9a <open_func>:
  fs->prev = ls->fs;  /* linked list of funcstates */
   14f9a:	6b03      	ldr	r3, [r0, #48]	; 0x30
static void open_func (LexState *ls, FuncState *fs, BlockCnt *bl) {
   14f9c:	b570      	push	{r4, r5, r6, lr}
  fs->ls = ls;
   14f9e:	e9c1 3001 	strd	r3, r0, [r1, #4]
  fs->pc = 0;
   14fa2:	2300      	movs	r3, #0
static void open_func (LexState *ls, FuncState *fs, BlockCnt *bl) {
   14fa4:	460c      	mov	r4, r1
  Proto *f = fs->f;
   14fa6:	680d      	ldr	r5, [r1, #0]
static void open_func (LexState *ls, FuncState *fs, BlockCnt *bl) {
   14fa8:	4616      	mov	r6, r2
  fs->previousline = f->linedefined;
   14faa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  ls->fs = fs;
   14fac:	6301      	str	r1, [r0, #48]	; 0x30
  fs->ndebugvars = 0;
   14fae:	630b      	str	r3, [r1, #48]	; 0x30
  fs->freereg = 0;
   14fb0:	868b      	strh	r3, [r1, #52]	; 0x34
  fs->needclose = 0;
   14fb2:	f881 3036 	strb.w	r3, [r1, #54]	; 0x36
  fs->lasttarget = 0;
   14fb6:	e9c1 3205 	strd	r3, r2, [r1, #20]
  fs->firstlocal = ls->dyd->actvar.n;
   14fba:	6c42      	ldr	r2, [r0, #68]	; 0x44
  fs->np = 0;
   14fbc:	e9c1 3308 	strd	r3, r3, [r1, #32]
  fs->pc = 0;
   14fc0:	610b      	str	r3, [r1, #16]
  fs->nk = 0;
   14fc2:	61cb      	str	r3, [r1, #28]
  fs->firstlocal = ls->dyd->actvar.n;
   14fc4:	6851      	ldr	r1, [r2, #4]
  fs->firstlabel = ls->dyd->label.n;
   14fc6:	69d2      	ldr	r2, [r2, #28]
  fs->firstlocal = ls->dyd->actvar.n;
   14fc8:	62a1      	str	r1, [r4, #40]	; 0x28
  fs->firstlabel = ls->dyd->label.n;
   14fca:	62e2      	str	r2, [r4, #44]	; 0x2c
  fs->bl = NULL;
   14fcc:	60e3      	str	r3, [r4, #12]
  luaC_objbarrier(ls->L, f, f->source);
   14fce:	796b      	ldrb	r3, [r5, #5]
  f->source = ls->source;
   14fd0:	6c82      	ldr	r2, [r0, #72]	; 0x48
  luaC_objbarrier(ls->L, f, f->source);
   14fd2:	069b      	lsls	r3, r3, #26
  f->source = ls->source;
   14fd4:	64ea      	str	r2, [r5, #76]	; 0x4c
  luaC_objbarrier(ls->L, f, f->source);
   14fd6:	d507      	bpl.n	14fe8 <open_func+0x4e>
   14fd8:	7953      	ldrb	r3, [r2, #5]
   14fda:	f013 0f18 	tst.w	r3, #24
   14fde:	d003      	beq.n	14fe8 <open_func+0x4e>
   14fe0:	4629      	mov	r1, r5
   14fe2:	6b40      	ldr	r0, [r0, #52]	; 0x34
   14fe4:	f7ff fa8b 	bl	144fe <luaC_barrier_>
  f->maxstacksize = 2;  /* registers 0/1 are always valid */
   14fe8:	2302      	movs	r3, #2
   14fea:	722b      	strb	r3, [r5, #8]
  enterblock(fs, bl, 0);
   14fec:	4631      	mov	r1, r6
   14fee:	4620      	mov	r0, r4
}
   14ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  enterblock(fs, bl, 0);
   14ff4:	2200      	movs	r2, #0
   14ff6:	f7ff bfb8 	b.w	14f6a <enterblock>

00014ffa <testnext>:
static int testnext (LexState *ls, int c) {
   14ffa:	b508      	push	{r3, lr}
  if (ls->t.token == c) {
   14ffc:	6903      	ldr	r3, [r0, #16]
   14ffe:	428b      	cmp	r3, r1
   15000:	d103      	bne.n	1500a <testnext+0x10>
    luaX_next(ls);
   15002:	f7ff fd22 	bl	14a4a <luaX_next>
    return 1;
   15006:	2001      	movs	r0, #1
}
   15008:	bd08      	pop	{r3, pc}
  else return 0;
   1500a:	2000      	movs	r0, #0
   1500c:	e7fc      	b.n	15008 <testnext+0xe>

0001500e <checknext>:
static void checknext (LexState *ls, int c) {
   1500e:	b508      	push	{r3, lr}
  if (ls->t.token != c)
   15010:	6903      	ldr	r3, [r0, #16]
   15012:	4299      	cmp	r1, r3
   15014:	d001      	beq.n	1501a <checknext+0xc>
    error_expected(ls, c);
   15016:	f7f1 fd7b 	bl	6b10 <error_expected>
}
   1501a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  luaX_next(ls);
   1501e:	f7ff bd14 	b.w	14a4a <luaX_next>

00015022 <singlevaraux>:
static void singlevaraux (FuncState *fs, TString *n, expdesc *var, int base) {
   15022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15026:	460f      	mov	r7, r1
   15028:	4614      	mov	r4, r2
   1502a:	4698      	mov	r8, r3
  if (fs == NULL)  /* no more levels? */
   1502c:	4605      	mov	r5, r0
   1502e:	b938      	cbnz	r0, 15040 <singlevaraux+0x1e>
  e->f = e->t = NO_JUMP;
   15030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15034:	e9c2 3304 	strd	r3, r3, [r2, #16]
  e->k = k;
   15038:	7010      	strb	r0, [r2, #0]
  e->u.info = i;
   1503a:	6090      	str	r0, [r2, #8]
}
   1503c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (i = cast_int(fs->nactvar) - 1; i >= 0; i--) {
   15040:	f890 6032 	ldrb.w	r6, [r0, #50]	; 0x32
   15044:	3e01      	subs	r6, #1
   15046:	d205      	bcs.n	15054 <singlevaraux+0x32>
  Upvaldesc *up = fs->f->upvalues;
   15048:	682b      	ldr	r3, [r5, #0]
  for (i = 0; i < fs->nups; i++) {
   1504a:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
  Upvaldesc *up = fs->f->upvalues;
   1504e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  for (i = 0; i < fs->nups; i++) {
   15050:	2300      	movs	r3, #0
   15052:	e032      	b.n	150ba <singlevaraux+0x98>
    Vardesc *vd = getlocalvardesc(fs, i);
   15054:	4631      	mov	r1, r6
   15056:	4628      	mov	r0, r5
   15058:	f7ff ff5a 	bl	14f10 <getlocalvardesc>
    if (eqstr(n, vd->vd.name)) {  /* found? */
   1505c:	6903      	ldr	r3, [r0, #16]
   1505e:	429f      	cmp	r7, r3
   15060:	d1f0      	bne.n	15044 <singlevaraux+0x22>
      if (vd->vd.kind == RDKCTC)  /* compile-time constant? */
   15062:	7a43      	ldrb	r3, [r0, #9]
   15064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15068:	2b03      	cmp	r3, #3
   1506a:	d107      	bne.n	1507c <singlevaraux+0x5a>
        init_exp(var, VCONST, fs->firstlocal + i);
   1506c:	6aab      	ldr	r3, [r5, #40]	; 0x28
  e->f = e->t = NO_JUMP;
   1506e:	e9c4 2204 	strd	r2, r2, [r4, #16]
  e->k = k;
   15072:	220b      	movs	r2, #11
        init_exp(var, VCONST, fs->firstlocal + i);
   15074:	4433      	add	r3, r6
  e->k = k;
   15076:	7022      	strb	r2, [r4, #0]
  e->u.info = i;
   15078:	60a3      	str	r3, [r4, #8]
}
   1507a:	e7df      	b.n	1503c <singlevaraux+0x1a>
  e->k = VLOCAL;
   1507c:	2309      	movs	r3, #9
  e->f = e->t = NO_JUMP;
   1507e:	e9c4 2204 	strd	r2, r2, [r4, #16]
  e->u.var.vidx = vidx;
   15082:	b2b2      	uxth	r2, r6
  e->k = VLOCAL;
   15084:	7023      	strb	r3, [r4, #0]
  e->u.var.ridx = getlocalvardesc(fs, vidx)->vd.ridx;
   15086:	4631      	mov	r1, r6
   15088:	4628      	mov	r0, r5
  e->u.var.vidx = vidx;
   1508a:	8162      	strh	r2, [r4, #10]
  e->u.var.ridx = getlocalvardesc(fs, vidx)->vd.ridx;
   1508c:	f7ff ff40 	bl	14f10 <getlocalvardesc>
   15090:	7a83      	ldrb	r3, [r0, #10]
   15092:	7223      	strb	r3, [r4, #8]
      if (v == VLOCAL && !base)
   15094:	f1b8 0f00 	cmp.w	r8, #0
   15098:	d1d0      	bne.n	1503c <singlevaraux+0x1a>
  BlockCnt *bl = fs->bl;
   1509a:	68eb      	ldr	r3, [r5, #12]
  while (bl->nactvar > level)
   1509c:	7b19      	ldrb	r1, [r3, #12]
   1509e:	4291      	cmp	r1, r2
   150a0:	d804      	bhi.n	150ac <singlevaraux+0x8a>
  bl->upval = 1;
   150a2:	2201      	movs	r2, #1
   150a4:	735a      	strb	r2, [r3, #13]
  fs->needclose = 1;
   150a6:	f885 2036 	strb.w	r2, [r5, #54]	; 0x36
}
   150aa:	e7c7      	b.n	1503c <singlevaraux+0x1a>
    bl = bl->previous;
   150ac:	681b      	ldr	r3, [r3, #0]
   150ae:	e7f5      	b.n	1509c <singlevaraux+0x7a>
    if (eqstr(up[i].name, name)) return i;
   150b0:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
   150b4:	4287      	cmp	r7, r0
   150b6:	d02e      	beq.n	15116 <singlevaraux+0xf4>
  for (i = 0; i < fs->nups; i++) {
   150b8:	3301      	adds	r3, #1
   150ba:	4293      	cmp	r3, r2
   150bc:	dbf8      	blt.n	150b0 <singlevaraux+0x8e>
        singlevaraux(fs->prev, n, var, 0);  /* try upper levels */
   150be:	2300      	movs	r3, #0
   150c0:	4622      	mov	r2, r4
   150c2:	4639      	mov	r1, r7
   150c4:	6868      	ldr	r0, [r5, #4]
   150c6:	f7ff ffac 	bl	15022 <singlevaraux>
        if (var->k == VLOCAL || var->k == VUPVAL)  /* local or upvalue? */
   150ca:	7823      	ldrb	r3, [r4, #0]
   150cc:	3b09      	subs	r3, #9
   150ce:	2b01      	cmp	r3, #1
   150d0:	d8b4      	bhi.n	1503c <singlevaraux+0x1a>
  Upvaldesc *up = allocupvalue(fs);
   150d2:	4628      	mov	r0, r5
   150d4:	f7f1 fc82 	bl	69dc <allocupvalue>
  if (v->k == VLOCAL) {
   150d8:	7823      	ldrb	r3, [r4, #0]
  Upvaldesc *up = allocupvalue(fs);
   150da:	4606      	mov	r6, r0
  if (v->k == VLOCAL) {
   150dc:	2b09      	cmp	r3, #9
  FuncState *prev = fs->prev;
   150de:	6868      	ldr	r0, [r5, #4]
  if (v->k == VLOCAL) {
   150e0:	d11f      	bne.n	15122 <singlevaraux+0x100>
    up->instack = 1;
   150e2:	2301      	movs	r3, #1
   150e4:	7133      	strb	r3, [r6, #4]
    up->idx = v->u.var.ridx;
   150e6:	7a23      	ldrb	r3, [r4, #8]
   150e8:	7173      	strb	r3, [r6, #5]
    up->kind = getlocalvardesc(prev, v->u.var.vidx)->vd.kind;
   150ea:	8961      	ldrh	r1, [r4, #10]
   150ec:	f7ff ff10 	bl	14f10 <getlocalvardesc>
   150f0:	7a43      	ldrb	r3, [r0, #9]
    up->kind = prev->f->upvalues[v->u.info].kind;
   150f2:	71b3      	strb	r3, [r6, #6]
  luaC_objbarrier(fs->ls->L, fs->f, name);
   150f4:	6829      	ldr	r1, [r5, #0]
  up->name = name;
   150f6:	6037      	str	r7, [r6, #0]
  luaC_objbarrier(fs->ls->L, fs->f, name);
   150f8:	794b      	ldrb	r3, [r1, #5]
   150fa:	069b      	lsls	r3, r3, #26
   150fc:	d508      	bpl.n	15110 <singlevaraux+0xee>
   150fe:	797b      	ldrb	r3, [r7, #5]
   15100:	f013 0f18 	tst.w	r3, #24
   15104:	d004      	beq.n	15110 <singlevaraux+0xee>
   15106:	68ab      	ldr	r3, [r5, #8]
   15108:	463a      	mov	r2, r7
   1510a:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1510c:	f7ff f9f7 	bl	144fe <luaC_barrier_>
  return fs->nups - 1;
   15110:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   15114:	3b01      	subs	r3, #1
  e->f = e->t = NO_JUMP;
   15116:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1511a:	e9c4 2204 	strd	r2, r2, [r4, #16]
  e->k = k;
   1511e:	220a      	movs	r2, #10
   15120:	e7a9      	b.n	15076 <singlevaraux+0x54>
    up->instack = 0;
   15122:	2300      	movs	r3, #0
   15124:	7133      	strb	r3, [r6, #4]
    up->idx = cast_byte(v->u.info);
   15126:	68a2      	ldr	r2, [r4, #8]
   15128:	7172      	strb	r2, [r6, #5]
    up->kind = prev->f->upvalues[v->u.info].kind;
   1512a:	6803      	ldr	r3, [r0, #0]
   1512c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1512e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   15132:	799b      	ldrb	r3, [r3, #6]
   15134:	e7dd      	b.n	150f2 <singlevaraux+0xd0>

00015136 <block_follow.isra.0>:
static int block_follow (LexState *ls, int withuntil) {
   15136:	4603      	mov	r3, r0
  switch (ls->t.token) {
   15138:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
static int block_follow (LexState *ls, int withuntil) {
   1513c:	4608      	mov	r0, r1
  switch (ls->t.token) {
   1513e:	d00c      	beq.n	1515a <block_follow.isra.0+0x24>
   15140:	dc07      	bgt.n	15152 <block_follow.isra.0+0x1c>
   15142:	f46f 7281 	mvn.w	r2, #258	; 0x102
   15146:	4413      	add	r3, r2
   15148:	2b02      	cmp	r3, #2
   1514a:	bf8c      	ite	hi
   1514c:	2000      	movhi	r0, #0
   1514e:	2001      	movls	r0, #1
   15150:	4770      	bx	lr
   15152:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
   15156:	4258      	negs	r0, r3
   15158:	4158      	adcs	r0, r3
}
   1515a:	4770      	bx	lr

0001515c <adjust_assign.isra.0>:
static void adjust_assign (LexState *ls, int nvars, int nexps, expdesc *e) {
   1515c:	b538      	push	{r3, r4, r5, lr}
   1515e:	460c      	mov	r4, r1
   15160:	4619      	mov	r1, r3
  if (hasmultret(e->k)) {  /* last expression has multiple returns? */
   15162:	781b      	ldrb	r3, [r3, #0]
  int needed = nvars - nexps;  /* extra values needed */
   15164:	1aa4      	subs	r4, r4, r2
  if (hasmultret(e->k)) {  /* last expression has multiple returns? */
   15166:	f1a3 0212 	sub.w	r2, r3, #18
   1516a:	2a01      	cmp	r2, #1
static void adjust_assign (LexState *ls, int nvars, int nexps, expdesc *e) {
   1516c:	4605      	mov	r5, r0
  if (hasmultret(e->k)) {  /* last expression has multiple returns? */
   1516e:	d80c      	bhi.n	1518a <adjust_assign.isra.0+0x2e>
    int extra = needed + 1;  /* discount last expression itself */
   15170:	1c62      	adds	r2, r4, #1
    luaK_setreturns(fs, e, extra);  /* last exp. provides the difference */
   15172:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   15176:	f7fd f806 	bl	12186 <luaK_setreturns>
  if (needed > 0)
   1517a:	2c00      	cmp	r4, #0
   1517c:	dd11      	ble.n	151a2 <adjust_assign.isra.0+0x46>
    luaK_reserveregs(fs, needed);  /* registers for extra values */
   1517e:	4621      	mov	r1, r4
   15180:	4628      	mov	r0, r5
}
   15182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    luaK_reserveregs(fs, needed);  /* registers for extra values */
   15186:	f7fc bfcd 	b.w	12124 <luaK_reserveregs>
    if (e->k != VVOID)  /* at least one expression? */
   1518a:	b10b      	cbz	r3, 15190 <adjust_assign.isra.0+0x34>
      luaK_exp2nextreg(fs, e);  /* close last expression */
   1518c:	f7fd f9d8 	bl	12540 <luaK_exp2nextreg>
    if (needed > 0)  /* missing values? */
   15190:	2c00      	cmp	r4, #0
   15192:	dd06      	ble.n	151a2 <adjust_assign.isra.0+0x46>
      luaK_nil(fs, fs->freereg, needed);  /* complete with nils */
   15194:	4622      	mov	r2, r4
   15196:	4628      	mov	r0, r5
   15198:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   1519c:	f7ef fb66 	bl	486c <luaK_nil>
  if (needed > 0)
   151a0:	e7ed      	b.n	1517e <adjust_assign.isra.0+0x22>
    fs->freereg += needed;  /* remove extra values */
   151a2:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
   151a6:	4414      	add	r4, r2
   151a8:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
}
   151ac:	bd38      	pop	{r3, r4, r5, pc}

000151ae <str_checkname>:
  if (ls->t.token != c)
   151ae:	f240 1123 	movw	r1, #291	; 0x123
   151b2:	6902      	ldr	r2, [r0, #16]
static TString *str_checkname (LexState *ls) {
   151b4:	b510      	push	{r4, lr}
  if (ls->t.token != c)
   151b6:	428a      	cmp	r2, r1
   151b8:	d001      	beq.n	151be <str_checkname+0x10>
    error_expected(ls, c);
   151ba:	f7f1 fca9 	bl	6b10 <error_expected>
  ts = ls->t.seminfo.ts;
   151be:	6984      	ldr	r4, [r0, #24]
  luaX_next(ls);
   151c0:	f7ff fc43 	bl	14a4a <luaX_next>
}
   151c4:	4620      	mov	r0, r4
   151c6:	bd10      	pop	{r4, pc}

000151c8 <fieldsel>:
static void fieldsel (LexState *ls, expdesc *v) {
   151c8:	b570      	push	{r4, r5, r6, lr}
   151ca:	4604      	mov	r4, r0
  FuncState *fs = ls->fs;
   151cc:	6b06      	ldr	r6, [r0, #48]	; 0x30
static void fieldsel (LexState *ls, expdesc *v) {
   151ce:	b086      	sub	sp, #24
  luaK_exp2anyregup(fs, v);
   151d0:	4630      	mov	r0, r6
static void fieldsel (LexState *ls, expdesc *v) {
   151d2:	460d      	mov	r5, r1
  luaK_exp2anyregup(fs, v);
   151d4:	f7fd fa36 	bl	12644 <luaK_exp2anyregup>
  luaX_next(ls);  /* skip the dot or colon */
   151d8:	4620      	mov	r0, r4
   151da:	f7ff fc36 	bl	14a4a <luaX_next>
  codestring(e, str_checkname(ls));
   151de:	4620      	mov	r0, r4
   151e0:	f7ff ffe5 	bl	151ae <str_checkname>
  e->f = e->t = NO_JUMP;
   151e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   151e8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  e->k = VKSTR;
   151ec:	2307      	movs	r3, #7
  e->u.strval = s;
   151ee:	9002      	str	r0, [sp, #8]
  luaK_indexed(fs, v, &key);
   151f0:	466a      	mov	r2, sp
   151f2:	4629      	mov	r1, r5
   151f4:	4630      	mov	r0, r6
  e->k = VKSTR;
   151f6:	f88d 3000 	strb.w	r3, [sp]
  luaK_indexed(fs, v, &key);
   151fa:	f7fd fb34 	bl	12866 <luaK_indexed>
}
   151fe:	b006      	add	sp, #24
   15200:	bd70      	pop	{r4, r5, r6, pc}

00015202 <singlevar>:
static void singlevar (LexState *ls, expdesc *var) {
   15202:	b5f0      	push	{r4, r5, r6, r7, lr}
   15204:	4606      	mov	r6, r0
   15206:	b087      	sub	sp, #28
   15208:	460c      	mov	r4, r1
  TString *varname = str_checkname(ls);
   1520a:	f7ff ffd0 	bl	151ae <str_checkname>
  FuncState *fs = ls->fs;
   1520e:	6b37      	ldr	r7, [r6, #48]	; 0x30
  singlevaraux(fs, varname, var, 1);
   15210:	2301      	movs	r3, #1
   15212:	4601      	mov	r1, r0
  TString *varname = str_checkname(ls);
   15214:	4605      	mov	r5, r0
  singlevaraux(fs, varname, var, 1);
   15216:	4622      	mov	r2, r4
   15218:	4638      	mov	r0, r7
   1521a:	f7ff ff02 	bl	15022 <singlevaraux>
  if (var->k == VVOID) {  /* global name? */
   1521e:	7823      	ldrb	r3, [r4, #0]
   15220:	b993      	cbnz	r3, 15248 <singlevar+0x46>
    singlevaraux(fs, ls->envn, var, 1);  /* get environment variable */
   15222:	2301      	movs	r3, #1
   15224:	4622      	mov	r2, r4
   15226:	4638      	mov	r0, r7
   15228:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
   1522a:	f7ff fefa 	bl	15022 <singlevaraux>
  e->f = e->t = NO_JUMP;
   1522e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15232:	e9cd 3304 	strd	r3, r3, [sp, #16]
  e->k = VKSTR;
   15236:	2307      	movs	r3, #7
    luaK_indexed(fs, var, &key);  /* env[varname] */
   15238:	466a      	mov	r2, sp
   1523a:	4621      	mov	r1, r4
   1523c:	4638      	mov	r0, r7
  e->k = VKSTR;
   1523e:	f88d 3000 	strb.w	r3, [sp]
  e->u.strval = s;
   15242:	9502      	str	r5, [sp, #8]
    luaK_indexed(fs, var, &key);  /* env[varname] */
   15244:	f7fd fb0f 	bl	12866 <luaK_indexed>
}
   15248:	b007      	add	sp, #28
   1524a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001524c <luaY_nvarstack>:
  return reglevel(fs, fs->nactvar);
   1524c:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
   15250:	f7ff be67 	b.w	14f22 <reglevel>

00015254 <close_func>:
static void close_func (LexState *ls) {
   15254:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  FuncState *fs = ls->fs;
   15258:	e9d0 560c 	ldrd	r5, r6, [r0, #48]	; 0x30
static void close_func (LexState *ls) {
   1525c:	4607      	mov	r7, r0
  luaK_ret(fs, luaY_nvarstack(fs), 0);  /* final return */
   1525e:	4628      	mov	r0, r5
   15260:	f7ff fff4 	bl	1524c <luaY_nvarstack>
  luaM_shrinkvector(L, f->code, f->sizecode, fs->pc, Instruction);
   15264:	f04f 0904 	mov.w	r9, #4
  luaK_ret(fs, luaY_nvarstack(fs), 0);  /* final return */
   15268:	4601      	mov	r1, r0
   1526a:	2200      	movs	r2, #0
   1526c:	4628      	mov	r0, r5
  Proto *f = fs->f;
   1526e:	682c      	ldr	r4, [r5, #0]
  luaK_ret(fs, luaY_nvarstack(fs), 0);  /* final return */
   15270:	f7fc ff1d 	bl	120ae <luaK_ret>
  leaveblock(fs);
   15274:	4628      	mov	r0, r5
   15276:	f7f1 fd65 	bl	6d44 <leaveblock>
  luaK_finish(fs);
   1527a:	4628      	mov	r0, r5
   1527c:	f7fd fcb4 	bl	12be8 <luaK_finish>
  luaM_shrinkvector(L, f->code, f->sizecode, fs->pc, Instruction);
   15280:	f8cd 9000 	str.w	r9, [sp]
   15284:	692b      	ldr	r3, [r5, #16]
   15286:	6b61      	ldr	r1, [r4, #52]	; 0x34
   15288:	f104 0214 	add.w	r2, r4, #20
   1528c:	4630      	mov	r0, r6
   1528e:	f7ff fc4a 	bl	14b26 <luaM_shrinkvector_>
  luaM_shrinkvector(L, f->lineinfo, f->sizelineinfo, fs->pc, ls_byte);
   15292:	2301      	movs	r3, #1
  luaM_shrinkvector(L, f->code, f->sizecode, fs->pc, Instruction);
   15294:	6360      	str	r0, [r4, #52]	; 0x34
  luaM_shrinkvector(L, f->lineinfo, f->sizelineinfo, fs->pc, ls_byte);
   15296:	9300      	str	r3, [sp, #0]
   15298:	692b      	ldr	r3, [r5, #16]
   1529a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1529c:	f104 0218 	add.w	r2, r4, #24
   152a0:	4630      	mov	r0, r6
   152a2:	f7ff fc40 	bl	14b26 <luaM_shrinkvector_>
  luaM_shrinkvector(L, f->abslineinfo, f->sizeabslineinfo,
   152a6:	f04f 0808 	mov.w	r8, #8
  luaM_shrinkvector(L, f->lineinfo, f->sizelineinfo, fs->pc, ls_byte);
   152aa:	6420      	str	r0, [r4, #64]	; 0x40
  luaM_shrinkvector(L, f->abslineinfo, f->sizeabslineinfo,
   152ac:	f8cd 8000 	str.w	r8, [sp]
   152b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   152b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   152b4:	f104 0224 	add.w	r2, r4, #36	; 0x24
   152b8:	4630      	mov	r0, r6
   152ba:	f7ff fc34 	bl	14b26 <luaM_shrinkvector_>
  luaM_shrinkvector(L, f->k, f->sizek, fs->nk, TValue);
   152be:	2310      	movs	r3, #16
  luaM_shrinkvector(L, f->abslineinfo, f->sizeabslineinfo,
   152c0:	6460      	str	r0, [r4, #68]	; 0x44
  luaM_shrinkvector(L, f->k, f->sizek, fs->nk, TValue);
   152c2:	9300      	str	r3, [sp, #0]
   152c4:	69eb      	ldr	r3, [r5, #28]
   152c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   152c8:	f104 0210 	add.w	r2, r4, #16
   152cc:	4630      	mov	r0, r6
   152ce:	f7ff fc2a 	bl	14b26 <luaM_shrinkvector_>
   152d2:	6320      	str	r0, [r4, #48]	; 0x30
  luaM_shrinkvector(L, f->p, f->sizep, fs->np, Proto *);
   152d4:	f8cd 9000 	str.w	r9, [sp]
   152d8:	6a2b      	ldr	r3, [r5, #32]
   152da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   152dc:	f104 021c 	add.w	r2, r4, #28
   152e0:	4630      	mov	r0, r6
   152e2:	f7ff fc20 	bl	14b26 <luaM_shrinkvector_>
  luaM_shrinkvector(L, f->locvars, f->sizelocvars, fs->ndebugvars, LocVar);
   152e6:	220c      	movs	r2, #12
   152e8:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
  luaM_shrinkvector(L, f->p, f->sizep, fs->np, Proto *);
   152ec:	63a0      	str	r0, [r4, #56]	; 0x38
  luaM_shrinkvector(L, f->locvars, f->sizelocvars, fs->ndebugvars, LocVar);
   152ee:	9200      	str	r2, [sp, #0]
   152f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   152f2:	f104 0220 	add.w	r2, r4, #32
   152f6:	4630      	mov	r0, r6
   152f8:	f7ff fc15 	bl	14b26 <luaM_shrinkvector_>
   152fc:	64a0      	str	r0, [r4, #72]	; 0x48
  luaM_shrinkvector(L, f->upvalues, f->sizeupvalues, fs->nups, Upvaldesc);
   152fe:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   15302:	f8cd 8000 	str.w	r8, [sp]
   15306:	4630      	mov	r0, r6
   15308:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   1530a:	f104 020c 	add.w	r2, r4, #12
   1530e:	f7ff fc0a 	bl	14b26 <luaM_shrinkvector_>
  ls->fs = fs->prev;
   15312:	686b      	ldr	r3, [r5, #4]
  luaM_shrinkvector(L, f->upvalues, f->sizeupvalues, fs->nups, Upvaldesc);
   15314:	63e0      	str	r0, [r4, #60]	; 0x3c
  ls->fs = fs->prev;
   15316:	633b      	str	r3, [r7, #48]	; 0x30
  luaC_checkGC(L);
   15318:	6933      	ldr	r3, [r6, #16]
   1531a:	68db      	ldr	r3, [r3, #12]
   1531c:	2b00      	cmp	r3, #0
   1531e:	dd05      	ble.n	1532c <close_func+0xd8>
   15320:	4630      	mov	r0, r6
}
   15322:	b003      	add	sp, #12
   15324:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  luaC_checkGC(L);
   15328:	f7ff b9a5 	b.w	14676 <luaC_step>
}
   1532c:	b003      	add	sp, #12
   1532e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00015332 <statlist>:
static void statlist (LexState *ls) {
   15332:	b570      	push	{r4, r5, r6, lr}
   15334:	4604      	mov	r4, r0
    if (ls->t.token == TK_RETURN) {
   15336:	f240 1611 	movw	r6, #273	; 0x111
  while (!block_follow(ls, 1)) {
   1533a:	6925      	ldr	r5, [r4, #16]
   1533c:	2101      	movs	r1, #1
   1533e:	4628      	mov	r0, r5
   15340:	f7ff fef9 	bl	15136 <block_follow.isra.0>
   15344:	b100      	cbz	r0, 15348 <statlist+0x16>
}
   15346:	bd70      	pop	{r4, r5, r6, pc}
    if (ls->t.token == TK_RETURN) {
   15348:	42b5      	cmp	r5, r6
      statement(ls);
   1534a:	4620      	mov	r0, r4
    if (ls->t.token == TK_RETURN) {
   1534c:	d103      	bne.n	15356 <statlist+0x24>
}
   1534e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      statement(ls);
   15352:	f7f1 bd8f 	b.w	6e74 <statement>
    statement(ls);
   15356:	f7f1 fd8d 	bl	6e74 <statement>
   1535a:	e7ee      	b.n	1533a <statlist+0x8>

0001535c <expr>:
  subexpr(ls, v, 0);
   1535c:	2200      	movs	r2, #0
   1535e:	f7f2 ba27 	b.w	77b0 <subexpr>

00015362 <yindex>:
static void yindex (LexState *ls, expdesc *v) {
   15362:	b538      	push	{r3, r4, r5, lr}
   15364:	4604      	mov	r4, r0
   15366:	460d      	mov	r5, r1
  luaX_next(ls);  /* skip the '[' */
   15368:	f7ff fb6f 	bl	14a4a <luaX_next>
  expr(ls, v);
   1536c:	4629      	mov	r1, r5
   1536e:	4620      	mov	r0, r4
   15370:	f7ff fff4 	bl	1535c <expr>
  luaK_exp2val(ls->fs, v);
   15374:	4629      	mov	r1, r5
   15376:	6b20      	ldr	r0, [r4, #48]	; 0x30
   15378:	f7fd f96e 	bl	12658 <luaK_exp2val>
  checknext(ls, ']');
   1537c:	4620      	mov	r0, r4
}
   1537e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  checknext(ls, ']');
   15382:	215d      	movs	r1, #93	; 0x5d
   15384:	f7ff be43 	b.w	1500e <checknext>

00015388 <explist>:
static int explist (LexState *ls, expdesc *v) {
   15388:	b570      	push	{r4, r5, r6, lr}
   1538a:	4604      	mov	r4, r0
   1538c:	460d      	mov	r5, r1
  int n = 1;  /* at least one expression */
   1538e:	2601      	movs	r6, #1
  expr(ls, v);
   15390:	f7ff ffe4 	bl	1535c <expr>
  while (testnext(ls, ',')) {
   15394:	212c      	movs	r1, #44	; 0x2c
   15396:	4620      	mov	r0, r4
   15398:	f7ff fe2f 	bl	14ffa <testnext>
   1539c:	b908      	cbnz	r0, 153a2 <explist+0x1a>
}
   1539e:	4630      	mov	r0, r6
   153a0:	bd70      	pop	{r4, r5, r6, pc}
    luaK_exp2nextreg(ls->fs, v);
   153a2:	4629      	mov	r1, r5
   153a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   153a6:	f7fd f8cb 	bl	12540 <luaK_exp2nextreg>
    expr(ls, v);
   153aa:	4629      	mov	r1, r5
   153ac:	4620      	mov	r0, r4
   153ae:	f7ff ffd5 	bl	1535c <expr>
    n++;
   153b2:	3601      	adds	r6, #1
   153b4:	e7ee      	b.n	15394 <explist+0xc>

000153b6 <cond>:
static int cond (LexState *ls) {
   153b6:	b510      	push	{r4, lr}
   153b8:	b086      	sub	sp, #24
  expr(ls, &v);  /* read condition */
   153ba:	4669      	mov	r1, sp
static int cond (LexState *ls) {
   153bc:	4604      	mov	r4, r0
  expr(ls, &v);  /* read condition */
   153be:	f7ff ffcd 	bl	1535c <expr>
  if (v.k == VNIL) v.k = VFALSE;  /* 'falses' are all equal here */
   153c2:	f89d 3000 	ldrb.w	r3, [sp]
  luaK_goiftrue(ls->fs, &v);
   153c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
  if (v.k == VNIL) v.k = VFALSE;  /* 'falses' are all equal here */
   153c8:	2b01      	cmp	r3, #1
   153ca:	bf08      	it	eq
   153cc:	2303      	moveq	r3, #3
  luaK_goiftrue(ls->fs, &v);
   153ce:	4669      	mov	r1, sp
  if (v.k == VNIL) v.k = VFALSE;  /* 'falses' are all equal here */
   153d0:	bf08      	it	eq
   153d2:	f88d 3000 	strbeq.w	r3, [sp]
  luaK_goiftrue(ls->fs, &v);
   153d6:	f7fd f9db 	bl	12790 <luaK_goiftrue>
}
   153da:	9805      	ldr	r0, [sp, #20]
   153dc:	b006      	add	sp, #24
   153de:	bd10      	pop	{r4, pc}

000153e0 <exp1>:
static void exp1 (LexState *ls) {
   153e0:	b510      	push	{r4, lr}
   153e2:	4604      	mov	r4, r0
   153e4:	b086      	sub	sp, #24
  expr(ls, &e);
   153e6:	4669      	mov	r1, sp
   153e8:	f7ff ffb8 	bl	1535c <expr>
  luaK_exp2nextreg(ls->fs, &e);
   153ec:	4669      	mov	r1, sp
   153ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
   153f0:	f7fd f8a6 	bl	12540 <luaK_exp2nextreg>
}
   153f4:	b006      	add	sp, #24
   153f6:	bd10      	pop	{r4, pc}

000153f8 <constructor>:
static void constructor (LexState *ls, expdesc *t) {
   153f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int pc = luaK_codeABC(fs, OP_NEWTABLE, 0, 0, 0);
   153fc:	2500      	movs	r5, #0
  FuncState *fs = ls->fs;
   153fe:	6b06      	ldr	r6, [r0, #48]	; 0x30
static void constructor (LexState *ls, expdesc *t) {
   15400:	b08c      	sub	sp, #48	; 0x30
   15402:	460f      	mov	r7, r1
  int pc = luaK_codeABC(fs, OP_NEWTABLE, 0, 0, 0);
   15404:	462b      	mov	r3, r5
   15406:	462a      	mov	r2, r5
  int line = ls->linenumber;
   15408:	f8d0 a004 	ldr.w	sl, [r0, #4]
static void constructor (LexState *ls, expdesc *t) {
   1540c:	4604      	mov	r4, r0
  int pc = luaK_codeABC(fs, OP_NEWTABLE, 0, 0, 0);
   1540e:	2113      	movs	r1, #19
   15410:	4630      	mov	r0, r6
   15412:	e9cd 5500 	strd	r5, r5, [sp]
   15416:	f7fc fe3c 	bl	12092 <luaK_codeABCk>
  luaK_code(fs, 0);  /* space for extra arg. */
   1541a:	4629      	mov	r1, r5
  int pc = luaK_codeABC(fs, OP_NEWTABLE, 0, 0, 0);
   1541c:	4681      	mov	r9, r0
  luaK_code(fs, 0);  /* space for extra arg. */
   1541e:	4630      	mov	r0, r6
   15420:	f7ef f9f8 	bl	4814 <luaK_code>
  e->f = e->t = NO_JUMP;
   15424:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  e->k = k;
   15428:	2208      	movs	r2, #8
  init_exp(t, VNONRELOC, fs->freereg);  /* table will be at stack top */
   1542a:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
  luaK_reserveregs(fs, 1);
   1542e:	2101      	movs	r1, #1
   15430:	4630      	mov	r0, r6
  e->f = e->t = NO_JUMP;
   15432:	e9c7 8804 	strd	r8, r8, [r7, #16]
  e->k = k;
   15436:	703a      	strb	r2, [r7, #0]
  e->u.info = i;
   15438:	60bb      	str	r3, [r7, #8]
  cc.na = cc.nh = cc.tostore = 0;
   1543a:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   1543e:	950b      	str	r5, [sp, #44]	; 0x2c
  cc.t = t;
   15440:	9708      	str	r7, [sp, #32]
  luaK_reserveregs(fs, 1);
   15442:	f7fc fe6f 	bl	12124 <luaK_reserveregs>
  checknext(ls, '{');
   15446:	217b      	movs	r1, #123	; 0x7b
   15448:	4620      	mov	r0, r4
  e->f = e->t = NO_JUMP;
   1544a:	e9cd 8806 	strd	r8, r8, [sp, #24]
  e->k = k;
   1544e:	f88d 5008 	strb.w	r5, [sp, #8]
  e->u.info = i;
   15452:	9504      	str	r5, [sp, #16]
  checknext(ls, '{');
   15454:	f7ff fddb 	bl	1500e <checknext>
    if (ls->t.token == '}') break;
   15458:	6923      	ldr	r3, [r4, #16]
   1545a:	2b7d      	cmp	r3, #125	; 0x7d
   1545c:	d03a      	beq.n	154d4 <constructor+0xdc>
  if (cc->v.k == VVOID) return;  /* there is no list item */
   1545e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   15462:	b19b      	cbz	r3, 1548c <constructor+0x94>
  luaK_exp2nextreg(fs, &cc->v);
   15464:	4630      	mov	r0, r6
   15466:	a902      	add	r1, sp, #8
   15468:	f7fd f86a 	bl	12540 <luaK_exp2nextreg>
  if (cc->tostore == LFIELDS_PER_FLUSH) {
   1546c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  cc->v.k = VVOID;
   1546e:	f88d 5008 	strb.w	r5, [sp, #8]
  if (cc->tostore == LFIELDS_PER_FLUSH) {
   15472:	2b32      	cmp	r3, #50	; 0x32
   15474:	d10a      	bne.n	1548c <constructor+0x94>
    luaK_setlist(fs, cc->t->u.info, cc->na, cc->tostore);  /* flush */
   15476:	9908      	ldr	r1, [sp, #32]
   15478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1547a:	4630      	mov	r0, r6
   1547c:	6889      	ldr	r1, [r1, #8]
   1547e:	f7fd fb8e 	bl	12b9e <luaK_setlist>
    cc->na += cc->tostore;
   15482:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   15486:	4413      	add	r3, r2
    cc->tostore = 0;  /* no more items pending */
   15488:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
  switch(ls->t.token) {
   1548c:	6923      	ldr	r3, [r4, #16]
   1548e:	2b5b      	cmp	r3, #91	; 0x5b
   15490:	d010      	beq.n	154b4 <constructor+0xbc>
   15492:	f240 1223 	movw	r2, #291	; 0x123
   15496:	4293      	cmp	r3, r2
   15498:	d14a      	bne.n	15530 <constructor+0x138>
      if (luaX_lookahead(ls) != '=')  /* expression? */
   1549a:	4620      	mov	r0, r4
   1549c:	f7ff faee 	bl	14a7c <luaX_lookahead>
   154a0:	283d      	cmp	r0, #61	; 0x3d
  expr(ls, &cc->v);
   154a2:	a902      	add	r1, sp, #8
   154a4:	4620      	mov	r0, r4
      if (luaX_lookahead(ls) != '=')  /* expression? */
   154a6:	d007      	beq.n	154b8 <constructor+0xc0>
  expr(ls, &cc->v);
   154a8:	f7ff ff58 	bl	1535c <expr>
  cc->tostore++;
   154ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   154ae:	3301      	adds	r3, #1
   154b0:	930b      	str	r3, [sp, #44]	; 0x2c
}
   154b2:	e003      	b.n	154bc <constructor+0xc4>
      recfield(ls, cc);
   154b4:	4620      	mov	r0, r4
   154b6:	a902      	add	r1, sp, #8
   154b8:	f7f2 fae8 	bl	7a8c <recfield>
  } while (testnext(ls, ',') || testnext(ls, ';'));
   154bc:	212c      	movs	r1, #44	; 0x2c
   154be:	4620      	mov	r0, r4
   154c0:	f7ff fd9b 	bl	14ffa <testnext>
   154c4:	2800      	cmp	r0, #0
   154c6:	d1c7      	bne.n	15458 <constructor+0x60>
   154c8:	213b      	movs	r1, #59	; 0x3b
   154ca:	4620      	mov	r0, r4
   154cc:	f7ff fd95 	bl	14ffa <testnext>
   154d0:	2800      	cmp	r0, #0
   154d2:	d1c1      	bne.n	15458 <constructor+0x60>
  check_match(ls, '}', '{', line);
   154d4:	4653      	mov	r3, sl
   154d6:	227b      	movs	r2, #123	; 0x7b
   154d8:	217d      	movs	r1, #125	; 0x7d
   154da:	4620      	mov	r0, r4
   154dc:	f7f1 fb28 	bl	6b30 <check_match>
  if (cc->tostore == 0) return;
   154e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   154e2:	b1d3      	cbz	r3, 1551a <constructor+0x122>
  if (hasmultret(cc->v.k)) {
   154e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   154e8:	f1a3 0212 	sub.w	r2, r3, #18
   154ec:	2a01      	cmp	r2, #1
   154ee:	d822      	bhi.n	15536 <constructor+0x13e>
    luaK_setmultret(fs, &cc->v);
   154f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   154f4:	4630      	mov	r0, r6
   154f6:	a902      	add	r1, sp, #8
   154f8:	f7fc fe45 	bl	12186 <luaK_setreturns>
    luaK_setlist(fs, cc->t->u.info, cc->na, LUA_MULTRET);
   154fc:	9908      	ldr	r1, [sp, #32]
   154fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15502:	4630      	mov	r0, r6
   15504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15506:	6889      	ldr	r1, [r1, #8]
   15508:	f7fd fb49 	bl	12b9e <luaK_setlist>
    cc->na--;  /* do not count last expression (unknown number of elements) */
   1550c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1550e:	3b01      	subs	r3, #1
   15510:	930a      	str	r3, [sp, #40]	; 0x28
  cc->na += cc->tostore;
   15512:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   15516:	4413      	add	r3, r2
   15518:	930a      	str	r3, [sp, #40]	; 0x28
  luaK_settablesize(fs, pc, t->u.info, cc.na, cc.nh);
   1551a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1551c:	4649      	mov	r1, r9
   1551e:	9300      	str	r3, [sp, #0]
   15520:	4630      	mov	r0, r6
   15522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15524:	68ba      	ldr	r2, [r7, #8]
   15526:	f7fd fb0c 	bl	12b42 <luaK_settablesize>
}
   1552a:	b00c      	add	sp, #48	; 0x30
   1552c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  expr(ls, &cc->v);
   15530:	4620      	mov	r0, r4
   15532:	a902      	add	r1, sp, #8
   15534:	e7b8      	b.n	154a8 <constructor+0xb0>
    if (cc->v.k != VVOID)
   15536:	b11b      	cbz	r3, 15540 <constructor+0x148>
      luaK_exp2nextreg(fs, &cc->v);
   15538:	4630      	mov	r0, r6
   1553a:	a902      	add	r1, sp, #8
   1553c:	f7fd f800 	bl	12540 <luaK_exp2nextreg>
    luaK_setlist(fs, cc->t->u.info, cc->na, cc->tostore);
   15540:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   15544:	9908      	ldr	r1, [sp, #32]
   15546:	4630      	mov	r0, r6
   15548:	6889      	ldr	r1, [r1, #8]
   1554a:	f7fd fb28 	bl	12b9e <luaK_setlist>
   1554e:	e7e0      	b.n	15512 <constructor+0x11a>

00015550 <block>:
static void block (LexState *ls) {
   15550:	b530      	push	{r4, r5, lr}
   15552:	4604      	mov	r4, r0
  FuncState *fs = ls->fs;
   15554:	6b05      	ldr	r5, [r0, #48]	; 0x30
static void block (LexState *ls) {
   15556:	b085      	sub	sp, #20
  enterblock(fs, &bl, 0);
   15558:	2200      	movs	r2, #0
   1555a:	4669      	mov	r1, sp
   1555c:	4628      	mov	r0, r5
   1555e:	f7ff fd04 	bl	14f6a <enterblock>
  statlist(ls);
   15562:	4620      	mov	r0, r4
   15564:	f7ff fee5 	bl	15332 <statlist>
  leaveblock(fs);
   15568:	4628      	mov	r0, r5
   1556a:	f7f1 fbeb 	bl	6d44 <leaveblock>
}
   1556e:	b005      	add	sp, #20
   15570:	bd30      	pop	{r4, r5, pc}

00015572 <luaY_parser>:
  close_func(ls);
}


LClosure *luaY_parser (lua_State *L, ZIO *z, Mbuffer *buff,
                       Dyndata *dyd, const char *name, int firstchar) {
   15572:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15576:	4604      	mov	r4, r0
   15578:	b0a9      	sub	sp, #164	; 0xa4
   1557a:	4688      	mov	r8, r1
  LexState lexstate;
  FuncState funcstate;
  LClosure *cl = luaF_newLclosure(L, 1);  /* create main closure */
   1557c:	2101      	movs	r1, #1
                       Dyndata *dyd, const char *name, int firstchar) {
   1557e:	4615      	mov	r5, r2
   15580:	461f      	mov	r7, r3
  LClosure *cl = luaF_newLclosure(L, 1);  /* create main closure */
   15582:	f7fd ff83 	bl	1348c <luaF_newLclosure>
  setclLvalue2s(L, L->top, cl);  /* anchor it (to avoid being collected) */
   15586:	2246      	movs	r2, #70	; 0x46
   15588:	68e3      	ldr	r3, [r4, #12]
  LClosure *cl = luaF_newLclosure(L, 1);  /* create main closure */
   1558a:	4606      	mov	r6, r0
  setclLvalue2s(L, L->top, cl);  /* anchor it (to avoid being collected) */
   1558c:	6018      	str	r0, [r3, #0]
   1558e:	721a      	strb	r2, [r3, #8]
  luaD_inctop(L);
   15590:	4620      	mov	r0, r4
   15592:	f7fd fca1 	bl	12ed8 <luaD_inctop>
  lexstate.h = luaH_new(L);  /* create table for scanner */
   15596:	4620      	mov	r0, r4
   15598:	f7f2 fee4 	bl	8364 <luaH_new>
  sethvalue2s(L, L->top, lexstate.h);  /* anchor it */
   1559c:	2245      	movs	r2, #69	; 0x45
   1559e:	68e3      	ldr	r3, [r4, #12]
  lexstate.h = luaH_new(L);  /* create table for scanner */
   155a0:	9024      	str	r0, [sp, #144]	; 0x90
  sethvalue2s(L, L->top, lexstate.h);  /* anchor it */
   155a2:	6018      	str	r0, [r3, #0]
   155a4:	721a      	strb	r2, [r3, #8]
  luaD_inctop(L);
   155a6:	4620      	mov	r0, r4
   155a8:	f7fd fc96 	bl	12ed8 <luaD_inctop>
  funcstate.f = cl->p = luaF_newproto(L);
   155ac:	4620      	mov	r0, r4
   155ae:	f7fe f85a 	bl	13666 <luaF_newproto>
  luaC_objbarrier(L, cl, cl->p);
   155b2:	7973      	ldrb	r3, [r6, #5]
  funcstate.f = cl->p = luaF_newproto(L);
   155b4:	4602      	mov	r2, r0
  luaC_objbarrier(L, cl, cl->p);
   155b6:	0699      	lsls	r1, r3, #26
  funcstate.f = cl->p = luaF_newproto(L);
   155b8:	60f0      	str	r0, [r6, #12]
   155ba:	9006      	str	r0, [sp, #24]
  luaC_objbarrier(L, cl, cl->p);
   155bc:	d507      	bpl.n	155ce <luaY_parser+0x5c>
   155be:	7943      	ldrb	r3, [r0, #5]
   155c0:	f013 0f18 	tst.w	r3, #24
   155c4:	d003      	beq.n	155ce <luaY_parser+0x5c>
   155c6:	4631      	mov	r1, r6
   155c8:	4620      	mov	r0, r4
   155ca:	f7fe ff98 	bl	144fe <luaC_barrier_>
  funcstate.f->source = luaS_new(L, name);  /* create and anchor TString */
   155ce:	9930      	ldr	r1, [sp, #192]	; 0xc0
   155d0:	4620      	mov	r0, r4
   155d2:	f8dd 9018 	ldr.w	r9, [sp, #24]
   155d6:	f000 faba 	bl	15b4e <luaS_new>
  luaC_objbarrier(L, funcstate.f, funcstate.f->source);
   155da:	9906      	ldr	r1, [sp, #24]
  funcstate.f->source = luaS_new(L, name);  /* create and anchor TString */
   155dc:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
  luaC_objbarrier(L, funcstate.f, funcstate.f->source);
   155e0:	794b      	ldrb	r3, [r1, #5]
   155e2:	069a      	lsls	r2, r3, #26
   155e4:	d507      	bpl.n	155f6 <luaY_parser+0x84>
   155e6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
   155e8:	7953      	ldrb	r3, [r2, #5]
   155ea:	f013 0f18 	tst.w	r3, #24
   155ee:	d002      	beq.n	155f6 <luaY_parser+0x84>
   155f0:	4620      	mov	r0, r4
   155f2:	f7fe ff84 	bl	144fe <luaC_barrier_>
  lexstate.buff = buff;
   155f6:	9523      	str	r5, [sp, #140]	; 0x8c
  lexstate.dyd = dyd;
  dyd->actvar.n = dyd->gt.n = dyd->label.n = 0;
   155f8:	2500      	movs	r5, #0
  lexstate.dyd = dyd;
   155fa:	9725      	str	r7, [sp, #148]	; 0x94
  dyd->actvar.n = dyd->gt.n = dyd->label.n = 0;
   155fc:	61fd      	str	r5, [r7, #28]
   155fe:	613d      	str	r5, [r7, #16]
   15600:	607d      	str	r5, [r7, #4]
  fs->f->is_vararg = 1;
   15602:	2701      	movs	r7, #1
  luaX_setinput(L, &lexstate, z, funcstate.f->source, firstchar);
   15604:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   15606:	4642      	mov	r2, r8
   15608:	9300      	str	r3, [sp, #0]
   1560a:	9b06      	ldr	r3, [sp, #24]
   1560c:	4620      	mov	r0, r4
   1560e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   15610:	a914      	add	r1, sp, #80	; 0x50
   15612:	f7f0 fef9 	bl	6408 <luaX_setinput>
  open_func(ls, fs, &bl);
   15616:	aa02      	add	r2, sp, #8
   15618:	a906      	add	r1, sp, #24
   1561a:	a814      	add	r0, sp, #80	; 0x50
   1561c:	f7ff fcbd 	bl	14f9a <open_func>
  fs->f->is_vararg = 1;
   15620:	9b06      	ldr	r3, [sp, #24]
  luaK_codeABC(fs, OP_VARARGPREP, nparams, 0, 0);
   15622:	462a      	mov	r2, r5
   15624:	2151      	movs	r1, #81	; 0x51
  fs->f->is_vararg = 1;
   15626:	71df      	strb	r7, [r3, #7]
  luaK_codeABC(fs, OP_VARARGPREP, nparams, 0, 0);
   15628:	a806      	add	r0, sp, #24
   1562a:	462b      	mov	r3, r5
   1562c:	e9cd 5500 	strd	r5, r5, [sp]
   15630:	f7fc fd2f 	bl	12092 <luaK_codeABCk>
  env = allocupvalue(fs);  /* ...set environment upvalue */
   15634:	a806      	add	r0, sp, #24
   15636:	f7f1 f9d1 	bl	69dc <allocupvalue>
  env->instack = 1;
   1563a:	8087      	strh	r7, [r0, #4]
  env->kind = VDKREG;
   1563c:	7185      	strb	r5, [r0, #6]
  env->name = ls->envn;
   1563e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  luaC_objbarrier(ls->L, fs->f, env->name);
   15640:	9906      	ldr	r1, [sp, #24]
  env->name = ls->envn;
   15642:	6002      	str	r2, [r0, #0]
  luaC_objbarrier(ls->L, fs->f, env->name);
   15644:	794b      	ldrb	r3, [r1, #5]
   15646:	069b      	lsls	r3, r3, #26
   15648:	d506      	bpl.n	15658 <luaY_parser+0xe6>
   1564a:	7953      	ldrb	r3, [r2, #5]
   1564c:	f013 0f18 	tst.w	r3, #24
   15650:	d002      	beq.n	15658 <luaY_parser+0xe6>
   15652:	9821      	ldr	r0, [sp, #132]	; 0x84
   15654:	f7fe ff53 	bl	144fe <luaC_barrier_>
  luaX_next(ls);  /* read first token */
   15658:	a814      	add	r0, sp, #80	; 0x50
   1565a:	f7ff f9f6 	bl	14a4a <luaX_next>
  statlist(ls);  /* parse main body */
   1565e:	a814      	add	r0, sp, #80	; 0x50
   15660:	f7ff fe67 	bl	15332 <statlist>
  if (ls->t.token != c)
   15664:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15666:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
   1566a:	d004      	beq.n	15676 <luaY_parser+0x104>
    error_expected(ls, c);
   1566c:	f44f 7190 	mov.w	r1, #288	; 0x120
   15670:	a814      	add	r0, sp, #80	; 0x50
   15672:	f7f1 fa4d 	bl	6b10 <error_expected>
  close_func(ls);
   15676:	a814      	add	r0, sp, #80	; 0x50
   15678:	f7ff fdec 	bl	15254 <close_func>
  lua_assert(!funcstate.prev && funcstate.nups == 1 && !lexstate.fs);
  /* all scopes should be correctly finished */
  lua_assert(dyd->actvar.n == 0 && dyd->gt.n == 0 && dyd->label.n == 0);
  L->top--;  /* remove scanner's table */
  return cl;  /* closure is on the stack, too */
}
   1567c:	4630      	mov	r0, r6
  L->top--;  /* remove scanner's table */
   1567e:	68e3      	ldr	r3, [r4, #12]
   15680:	3b10      	subs	r3, #16
   15682:	60e3      	str	r3, [r4, #12]
}
   15684:	b029      	add	sp, #164	; 0xa4
   15686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001568a <stack_init>:
  L1->stack = luaM_newvector(L, BASIC_STACK_SIZE + EXTRA_STACK, StackValue);
   1568a:	2200      	movs	r2, #0
static void stack_init (lua_State *L1, lua_State *L) {
   1568c:	b510      	push	{r4, lr}
   1568e:	4604      	mov	r4, r0
   15690:	4608      	mov	r0, r1
  L1->stack = luaM_newvector(L, BASIC_STACK_SIZE + EXTRA_STACK, StackValue);
   15692:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   15696:	f7ff fa51 	bl	14b3c <luaM_malloc_>
    setnilvalue(s2v(L1->stack + i));  /* erase new stack */
   1569a:	2300      	movs	r3, #0
   1569c:	4602      	mov	r2, r0
  L1->stack = luaM_newvector(L, BASIC_STACK_SIZE + EXTRA_STACK, StackValue);
   1569e:	61e0      	str	r0, [r4, #28]
  L1->tbclist = L1->stack;
   156a0:	6260      	str	r0, [r4, #36]	; 0x24
  for (i = 0; i < BASIC_STACK_SIZE + EXTRA_STACK; i++)
   156a2:	f500 7134 	add.w	r1, r0, #720	; 0x2d0
    setnilvalue(s2v(L1->stack + i));  /* erase new stack */
   156a6:	7213      	strb	r3, [r2, #8]
  for (i = 0; i < BASIC_STACK_SIZE + EXTRA_STACK; i++)
   156a8:	3210      	adds	r2, #16
   156aa:	428a      	cmp	r2, r1
   156ac:	d1fb      	bne.n	156a6 <stack_init+0x1c>
  L1->stack_last = L1->stack + BASIC_STACK_SIZE;
   156ae:	f500 7220 	add.w	r2, r0, #640	; 0x280
   156b2:	61a2      	str	r2, [r4, #24]
  ci->nresults = 0;
   156b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  ci->next = ci->previous = NULL;
   156b8:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  ci->func = L1->top;
   156bc:	6360      	str	r0, [r4, #52]	; 0x34
  ci->u.c.k = NULL;
   156be:	6463      	str	r3, [r4, #68]	; 0x44
  ci->nresults = 0;
   156c0:	6562      	str	r2, [r4, #84]	; 0x54
  setnilvalue(s2v(L1->top));  /* 'function' entry for this 'ci' */
   156c2:	7203      	strb	r3, [r0, #8]
  L1->top++;
   156c4:	f100 0310 	add.w	r3, r0, #16
   156c8:	60e3      	str	r3, [r4, #12]
  ci->top = L1->top + LUA_MINSTACK;
   156ca:	f500 70a8 	add.w	r0, r0, #336	; 0x150
  ci = &L1->base_ci;
   156ce:	f104 0334 	add.w	r3, r4, #52	; 0x34
  ci->top = L1->top + LUA_MINSTACK;
   156d2:	63a0      	str	r0, [r4, #56]	; 0x38
  L1->ci = ci;
   156d4:	6163      	str	r3, [r4, #20]
}
   156d6:	bd10      	pop	{r4, pc}

000156d8 <f_luaopen>:
static void f_luaopen (lua_State *L, void *ud) {
   156d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   156da:	4604      	mov	r4, r0
  stack_init(L, L);  /* init stack */
   156dc:	4601      	mov	r1, r0
  global_State *g = G(L);
   156de:	6906      	ldr	r6, [r0, #16]
  stack_init(L, L);  /* init stack */
   156e0:	f7ff ffd3 	bl	1568a <stack_init>
  Table *registry = luaH_new(L);
   156e4:	4620      	mov	r0, r4
   156e6:	f7f2 fe3d 	bl	8364 <luaH_new>
  sethvalue(L, &g->l_registry, registry);
   156ea:	2745      	movs	r7, #69	; 0x45
  Table *registry = luaH_new(L);
   156ec:	4605      	mov	r5, r0
  luaH_resize(L, registry, LUA_RIDX_LAST, 0);
   156ee:	4601      	mov	r1, r0
   156f0:	2202      	movs	r2, #2
   156f2:	2300      	movs	r3, #0
  sethvalue(L, &g->l_registry, registry);
   156f4:	62b0      	str	r0, [r6, #40]	; 0x28
   156f6:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
  luaH_resize(L, registry, LUA_RIDX_LAST, 0);
   156fa:	4620      	mov	r0, r4
   156fc:	f7f2 fece 	bl	849c <luaH_resize>
  setthvalue(L, &registry->array[LUA_RIDX_MAINTHREAD - 1], L);
   15700:	2348      	movs	r3, #72	; 0x48
   15702:	68ed      	ldr	r5, [r5, #12]
  sethvalue(L, &registry->array[LUA_RIDX_GLOBALS - 1], luaH_new(L));
   15704:	4620      	mov	r0, r4
  setthvalue(L, &registry->array[LUA_RIDX_MAINTHREAD - 1], L);
   15706:	722b      	strb	r3, [r5, #8]
   15708:	602c      	str	r4, [r5, #0]
  sethvalue(L, &registry->array[LUA_RIDX_GLOBALS - 1], luaH_new(L));
   1570a:	f7f2 fe2b 	bl	8364 <luaH_new>
   1570e:	762f      	strb	r7, [r5, #24]
   15710:	6128      	str	r0, [r5, #16]
  luaS_init(L);
   15712:	4620      	mov	r0, r4
   15714:	f7f2 fd3a 	bl	818c <luaS_init>
  luaT_init(L);
   15718:	4620      	mov	r0, r4
   1571a:	f7f3 f901 	bl	8920 <luaT_init>
  luaX_init(L);
   1571e:	4620      	mov	r0, r4
   15720:	f7f0 f8a4 	bl	586c <luaX_init>
  g->gcstp = 0;  /* allow gc */
   15724:	2300      	movs	r3, #0
   15726:	f886 3052 	strb.w	r3, [r6, #82]	; 0x52
  setnilvalue(&g->nilvalue);  /* now state is complete */
   1572a:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
}
   1572e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015730 <luaE_setdebt>:
  l_mem tb = gettotalbytes(g);
   15730:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   15734:	441a      	add	r2, r3
  if (debt < tb - MAX_LMEM)
   15736:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   1573a:	3301      	adds	r3, #1
   1573c:	428b      	cmp	r3, r1
   1573e:	bfb8      	it	lt
   15740:	460b      	movlt	r3, r1
  g->totalbytes = tb - debt;
   15742:	1ad2      	subs	r2, r2, r3
  g->GCdebt = debt;
   15744:	e9c0 2302 	strd	r2, r3, [r0, #8]
}
   15748:	4770      	bx	lr

0001574a <luaE_extendCI>:
CallInfo *luaE_extendCI (lua_State *L) {
   1574a:	b510      	push	{r4, lr}
   1574c:	4604      	mov	r4, r0
  ci = luaM_new(L, CallInfo);
   1574e:	2200      	movs	r2, #0
   15750:	2124      	movs	r1, #36	; 0x24
   15752:	f7ff f9f3 	bl	14b3c <luaM_malloc_>
  L->ci->next = ci;
   15756:	6962      	ldr	r2, [r4, #20]
  L->nci++;
   15758:	8923      	ldrh	r3, [r4, #8]
  L->ci->next = ci;
   1575a:	60d0      	str	r0, [r2, #12]
  ci->previous = L->ci;
   1575c:	6082      	str	r2, [r0, #8]
  ci->next = NULL;
   1575e:	2200      	movs	r2, #0
  L->nci++;
   15760:	3301      	adds	r3, #1
  ci->next = NULL;
   15762:	60c2      	str	r2, [r0, #12]
  ci->u.l.trap = 0;
   15764:	6142      	str	r2, [r0, #20]
  L->nci++;
   15766:	8123      	strh	r3, [r4, #8]
}
   15768:	bd10      	pop	{r4, pc}

0001576a <luaE_freeCI>:
  ci->next = NULL;
   1576a:	2200      	movs	r2, #0
void luaE_freeCI (lua_State *L) {
   1576c:	b538      	push	{r3, r4, r5, lr}
   1576e:	4604      	mov	r4, r0
  CallInfo *ci = L->ci;
   15770:	6943      	ldr	r3, [r0, #20]
  CallInfo *next = ci->next;
   15772:	68d9      	ldr	r1, [r3, #12]
  ci->next = NULL;
   15774:	60da      	str	r2, [r3, #12]
  while ((ci = next) != NULL) {
   15776:	b901      	cbnz	r1, 1577a <luaE_freeCI+0x10>
}
   15778:	bd38      	pop	{r3, r4, r5, pc}
    luaM_free(L, ci);
   1577a:	2224      	movs	r2, #36	; 0x24
   1577c:	4620      	mov	r0, r4
    next = ci->next;
   1577e:	68cd      	ldr	r5, [r1, #12]
    luaM_free(L, ci);
   15780:	f7ff f9a1 	bl	14ac6 <luaM_free_>
    L->nci--;
   15784:	8923      	ldrh	r3, [r4, #8]
    next = ci->next;
   15786:	4629      	mov	r1, r5
    L->nci--;
   15788:	3b01      	subs	r3, #1
   1578a:	8123      	strh	r3, [r4, #8]
   1578c:	e7f3      	b.n	15776 <luaE_freeCI+0xc>

0001578e <freestack.part.0>:
static void freestack (lua_State *L) {
   1578e:	b510      	push	{r4, lr}
   15790:	4604      	mov	r4, r0
  L->ci = &L->base_ci;  /* free the entire 'ci' list */
   15792:	f100 0334 	add.w	r3, r0, #52	; 0x34
   15796:	6143      	str	r3, [r0, #20]
  luaE_freeCI(L);
   15798:	f7ff ffe7 	bl	1576a <luaE_freeCI>
  luaM_freearray(L, L->stack, stacksize(L) + EXTRA_STACK);  /* free stack */
   1579c:	e9d4 2106 	ldrd	r2, r1, [r4, #24]
   157a0:	1a52      	subs	r2, r2, r1
   157a2:	4620      	mov	r0, r4
}
   157a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  luaM_freearray(L, L->stack, stacksize(L) + EXTRA_STACK);  /* free stack */
   157a8:	3250      	adds	r2, #80	; 0x50
   157aa:	f7ff b98c 	b.w	14ac6 <luaM_free_>

000157ae <close_state>:
static void close_state (lua_State *L) {
   157ae:	b570      	push	{r4, r5, r6, lr}
  global_State *g = G(L);
   157b0:	6905      	ldr	r5, [r0, #16]
static void close_state (lua_State *L) {
   157b2:	4604      	mov	r4, r0
  if (!completestate(g))  /* closing a partially built state? */
   157b4:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
   157b8:	f012 020f 	ands.w	r2, r2, #15
   157bc:	d017      	beq.n	157ee <close_state+0x40>
    luaC_freeallobjects(L);  /* collect all objects */
   157be:	f7fe ff32 	bl	14626 <luaC_freeallobjects>
  luaM_freearray(L, G(L)->strt.hash, G(L)->strt.size);
   157c2:	6923      	ldr	r3, [r4, #16]
   157c4:	4620      	mov	r0, r4
   157c6:	6a1a      	ldr	r2, [r3, #32]
   157c8:	6999      	ldr	r1, [r3, #24]
   157ca:	0092      	lsls	r2, r2, #2
   157cc:	f7ff f97b 	bl	14ac6 <luaM_free_>
  if (L->stack == NULL)
   157d0:	69e3      	ldr	r3, [r4, #28]
   157d2:	b113      	cbz	r3, 157da <close_state+0x2c>
   157d4:	4620      	mov	r0, r4
   157d6:	f7ff ffda 	bl	1578e <freestack.part.0>
  (*g->frealloc)(g->ud, fromstate(L), sizeof(LG), 0);  /* free main block */
   157da:	682e      	ldr	r6, [r5, #0]
   157dc:	6868      	ldr	r0, [r5, #4]
   157de:	46b4      	mov	ip, r6
   157e0:	1f21      	subs	r1, r4, #4
   157e2:	2300      	movs	r3, #0
}
   157e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*g->frealloc)(g->ud, fromstate(L), sizeof(LG), 0);  /* free main block */
   157e8:	f44f 7258 	mov.w	r2, #864	; 0x360
   157ec:	4760      	bx	ip
    L->ci = &L->base_ci;  /* unwind CallInfo list */
   157ee:	f100 0334 	add.w	r3, r0, #52	; 0x34
    luaD_closeprotected(L, 1, LUA_OK);  /* close all upvalues */
   157f2:	2101      	movs	r1, #1
    L->ci = &L->base_ci;  /* unwind CallInfo list */
   157f4:	6143      	str	r3, [r0, #20]
    luaD_closeprotected(L, 1, LUA_OK);  /* close all upvalues */
   157f6:	f7ef fefb 	bl	55f0 <luaD_closeprotected>
    luaC_freeallobjects(L);  /* collect all objects */
   157fa:	4620      	mov	r0, r4
   157fc:	e7df      	b.n	157be <close_state+0x10>

000157fe <luaE_shrinkCI>:
  CallInfo *ci = L->ci->next;  /* first free CallInfo */
   157fe:	6943      	ldr	r3, [r0, #20]
void luaE_shrinkCI (lua_State *L) {
   15800:	b570      	push	{r4, r5, r6, lr}
  CallInfo *ci = L->ci->next;  /* first free CallInfo */
   15802:	68dd      	ldr	r5, [r3, #12]
void luaE_shrinkCI (lua_State *L) {
   15804:	4604      	mov	r4, r0
  if (ci == NULL)
   15806:	b96d      	cbnz	r5, 15824 <luaE_shrinkCI+0x26>
}
   15808:	bd70      	pop	{r4, r5, r6, pc}
    L->nci--;
   1580a:	8923      	ldrh	r3, [r4, #8]
    CallInfo *next2 = next->next;  /* next's next */
   1580c:	68ce      	ldr	r6, [r1, #12]
    L->nci--;
   1580e:	3b01      	subs	r3, #1
    ci->next = next2;  /* remove next from the list */
   15810:	60ee      	str	r6, [r5, #12]
    luaM_free(L, next);  /* free next */
   15812:	2224      	movs	r2, #36	; 0x24
   15814:	4620      	mov	r0, r4
    L->nci--;
   15816:	8123      	strh	r3, [r4, #8]
    luaM_free(L, next);  /* free next */
   15818:	f7ff f955 	bl	14ac6 <luaM_free_>
    if (next2 == NULL)
   1581c:	2e00      	cmp	r6, #0
   1581e:	d0f3      	beq.n	15808 <luaE_shrinkCI+0xa>
      next2->previous = ci;
   15820:	60b5      	str	r5, [r6, #8]
   15822:	4635      	mov	r5, r6
  while ((next = ci->next) != NULL) {  /* two extra elements? */
   15824:	68e9      	ldr	r1, [r5, #12]
   15826:	2900      	cmp	r1, #0
   15828:	d1ef      	bne.n	1580a <luaE_shrinkCI+0xc>
   1582a:	e7ed      	b.n	15808 <luaE_shrinkCI+0xa>

0001582c <luaE_incCstack>:
  L->nCcalls++;
   1582c:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1582e:	3301      	adds	r3, #1
   15830:	6603      	str	r3, [r0, #96]	; 0x60
  if (l_unlikely(getCcalls(L) >= LUAI_MAXCCALLS))
   15832:	b29b      	uxth	r3, r3
   15834:	2bc7      	cmp	r3, #199	; 0xc7
   15836:	d901      	bls.n	1583c <luaE_incCstack+0x10>
    luaE_checkcstack(L);
   15838:	f7f2 bc66 	b.w	8108 <luaE_checkcstack>
}
   1583c:	4770      	bx	lr

0001583e <luaE_freethread>:
void luaE_freethread (lua_State *L, lua_State *L1) {
   1583e:	b570      	push	{r4, r5, r6, lr}
   15840:	460c      	mov	r4, r1
   15842:	4605      	mov	r5, r0
  LX *l = fromstate(L1);
   15844:	1f0e      	subs	r6, r1, #4
  luaF_closeupval(L1, L1->stack);  /* close all upvalues */
   15846:	4620      	mov	r0, r4
   15848:	69c9      	ldr	r1, [r1, #28]
   1584a:	f7fd fe89 	bl	13560 <luaF_closeupval>
  if (L->stack == NULL)
   1584e:	69e3      	ldr	r3, [r4, #28]
   15850:	b113      	cbz	r3, 15858 <luaE_freethread+0x1a>
   15852:	4620      	mov	r0, r4
   15854:	f7ff ff9b 	bl	1578e <freestack.part.0>
  luaM_free(L, l);
   15858:	4631      	mov	r1, r6
   1585a:	4628      	mov	r0, r5
}
   1585c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  luaM_free(L, l);
   15860:	2278      	movs	r2, #120	; 0x78
   15862:	f7ff b930 	b.w	14ac6 <luaM_free_>

00015866 <luaE_resetthread>:
int luaE_resetthread (lua_State *L, int status) {
   15866:	b538      	push	{r3, r4, r5, lr}
  CallInfo *ci = L->ci = &L->base_ci;  /* unwind CallInfo list */
   15868:	f100 0334 	add.w	r3, r0, #52	; 0x34
   1586c:	6143      	str	r3, [r0, #20]
  setnilvalue(s2v(L->stack));  /* 'function' entry for basic 'ci' */
   1586e:	2300      	movs	r3, #0
   15870:	69c2      	ldr	r2, [r0, #28]
    status = LUA_OK;
   15872:	2901      	cmp	r1, #1
  setnilvalue(s2v(L->stack));  /* 'function' entry for basic 'ci' */
   15874:	7213      	strb	r3, [r2, #8]
  ci->func = L->stack;
   15876:	6342      	str	r2, [r0, #52]	; 0x34
  ci->callstatus = CIST_C;
   15878:	f04f 0202 	mov.w	r2, #2
int luaE_resetthread (lua_State *L, int status) {
   1587c:	4604      	mov	r4, r0
  ci->callstatus = CIST_C;
   1587e:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
  L->status = LUA_OK;  /* so it can run __close metamethods */
   15882:	7183      	strb	r3, [r0, #6]
  status = luaD_closeprotected(L, 1, status);
   15884:	bf14      	ite	ne
   15886:	460a      	movne	r2, r1
   15888:	461a      	moveq	r2, r3
   1588a:	2101      	movs	r1, #1
   1588c:	f7ef feb0 	bl	55f0 <luaD_closeprotected>
  if (status != LUA_OK)  /* errors? */
   15890:	69e2      	ldr	r2, [r4, #28]
   15892:	4605      	mov	r5, r0
    luaD_seterrorobj(L, status, L->stack + 1);
   15894:	3210      	adds	r2, #16
  if (status != LUA_OK)  /* errors? */
   15896:	b180      	cbz	r0, 158ba <luaE_resetthread+0x54>
    luaD_seterrorobj(L, status, L->stack + 1);
   15898:	4601      	mov	r1, r0
   1589a:	4620      	mov	r0, r4
   1589c:	f7ef fdce 	bl	543c <luaD_seterrorobj>
  ci->top = L->top + LUA_MINSTACK;
   158a0:	68e1      	ldr	r1, [r4, #12]
  luaD_reallocstack(L, cast_int(ci->top - L->stack), 0);
   158a2:	69e3      	ldr	r3, [r4, #28]
  ci->top = L->top + LUA_MINSTACK;
   158a4:	f501 71a0 	add.w	r1, r1, #320	; 0x140
   158a8:	63a1      	str	r1, [r4, #56]	; 0x38
  luaD_reallocstack(L, cast_int(ci->top - L->stack), 0);
   158aa:	1ac9      	subs	r1, r1, r3
   158ac:	2200      	movs	r2, #0
   158ae:	4620      	mov	r0, r4
   158b0:	1109      	asrs	r1, r1, #4
   158b2:	f7fd fab3 	bl	12e1c <luaD_reallocstack>
}
   158b6:	4628      	mov	r0, r5
   158b8:	bd38      	pop	{r3, r4, r5, pc}
    L->top = L->stack + 1;
   158ba:	60e2      	str	r2, [r4, #12]
   158bc:	e7f0      	b.n	158a0 <luaE_resetthread+0x3a>

000158be <lua_close>:
  L = G(L)->mainthread;  /* only the main thread can be closed */
   158be:	6903      	ldr	r3, [r0, #16]
  close_state(L);
   158c0:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
   158c4:	f7ff bf73 	b.w	157ae <close_state>

000158c8 <luaE_warning>:
  lua_WarnFunction wf = G(L)->warnf;
   158c8:	6900      	ldr	r0, [r0, #16]
   158ca:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
  if (wf != NULL)
   158ce:	b113      	cbz	r3, 158d6 <luaE_warning+0xe>
    wf(G(L)->ud_warn, msg, tocont);
   158d0:	f8d0 02e0 	ldr.w	r0, [r0, #736]	; 0x2e0
   158d4:	4718      	bx	r3
}
   158d6:	4770      	bx	lr

000158d8 <tablerehash>:
static void tablerehash (TString **vect, int osize, int nsize) {
   158d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (i = osize; i < nsize; i++)  /* clear new elements */
   158da:	460b      	mov	r3, r1
   158dc:	2400      	movs	r4, #0
   158de:	4293      	cmp	r3, r2
   158e0:	db05      	blt.n	158ee <tablerehash+0x16>
  for (i = 0; i < osize; i++) {  /* rehash old part of the array */
   158e2:	2300      	movs	r3, #0
    vect[i] = NULL;
   158e4:	461e      	mov	r6, r3
      unsigned int h = lmod(p->hash, nsize);  /* new position */
   158e6:	3a01      	subs	r2, #1
  for (i = 0; i < osize; i++) {  /* rehash old part of the array */
   158e8:	428b      	cmp	r3, r1
   158ea:	db04      	blt.n	158f6 <tablerehash+0x1e>
}
   158ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    vect[i] = NULL;
   158ee:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for (i = osize; i < nsize; i++)  /* clear new elements */
   158f2:	3301      	adds	r3, #1
   158f4:	e7f3      	b.n	158de <tablerehash+0x6>
    TString *p = vect[i];
   158f6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    vect[i] = NULL;
   158fa:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
    while (p) {  /* for each string in the list */
   158fe:	b90c      	cbnz	r4, 15904 <tablerehash+0x2c>
  for (i = 0; i < osize; i++) {  /* rehash old part of the array */
   15900:	3301      	adds	r3, #1
   15902:	e7f1      	b.n	158e8 <tablerehash+0x10>
      unsigned int h = lmod(p->hash, nsize);  /* new position */
   15904:	e9d4 5702 	ldrd	r5, r7, [r4, #8]
   15908:	4015      	ands	r5, r2
      p->u.hnext = vect[h];  /* chain it into array */
   1590a:	f850 c025 	ldr.w	ip, [r0, r5, lsl #2]
   1590e:	f8c4 c00c 	str.w	ip, [r4, #12]
      vect[h] = p;
   15912:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      p = hnext;
   15916:	463c      	mov	r4, r7
   15918:	e7f1      	b.n	158fe <tablerehash+0x26>

0001591a <luaS_eqlngstr>:
  return (a == b) ||  /* same instance or... */
   1591a:	4288      	cmp	r0, r1
int luaS_eqlngstr (TString *a, TString *b) {
   1591c:	b508      	push	{r3, lr}
  return (a == b) ||  /* same instance or... */
   1591e:	d00b      	beq.n	15938 <luaS_eqlngstr+0x1e>
  size_t len = a->u.lnglen;
   15920:	68c3      	ldr	r3, [r0, #12]
  return (a == b) ||  /* same instance or... */
   15922:	68ca      	ldr	r2, [r1, #12]
   15924:	429a      	cmp	r2, r3
   15926:	d109      	bne.n	1593c <luaS_eqlngstr+0x22>
     (memcmp(getstr(a), getstr(b), len) == 0));  /* equal contents */
   15928:	3110      	adds	r1, #16
   1592a:	3010      	adds	r0, #16
   1592c:	f001 f996 	bl	16c5c <memcmp>
    ((len == b->u.lnglen) &&  /* equal length and ... */
   15930:	fab0 f080 	clz	r0, r0
   15934:	0940      	lsrs	r0, r0, #5
}
   15936:	bd08      	pop	{r3, pc}
  return (a == b) ||  /* same instance or... */
   15938:	2001      	movs	r0, #1
   1593a:	e7fc      	b.n	15936 <luaS_eqlngstr+0x1c>
   1593c:	2000      	movs	r0, #0
   1593e:	e7fa      	b.n	15936 <luaS_eqlngstr+0x1c>

00015940 <luaS_hash>:
unsigned int luaS_hash (const char *str, size_t l, unsigned int seed) {
   15940:	b510      	push	{r4, lr}
   15942:	4604      	mov	r4, r0
  unsigned int h = seed ^ cast_uint(l);
   15944:	ea82 0001 	eor.w	r0, r2, r1
  for (; l > 0; l--)
   15948:	4421      	add	r1, r4
   1594a:	42a1      	cmp	r1, r4
   1594c:	d100      	bne.n	15950 <luaS_hash+0x10>
}
   1594e:	bd10      	pop	{r4, pc}
    h ^= ((h<<5) + (h>>2) + cast_byte(str[l - 1]));
   15950:	0883      	lsrs	r3, r0, #2
   15952:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
   15956:	eb03 1340 	add.w	r3, r3, r0, lsl #5
   1595a:	4413      	add	r3, r2
   1595c:	4058      	eors	r0, r3
  for (; l > 0; l--)
   1595e:	e7f4      	b.n	1594a <luaS_hash+0xa>

00015960 <luaS_hashlongstr>:
unsigned int luaS_hashlongstr (TString *ts) {
   15960:	b510      	push	{r4, lr}
  if (ts->extra == 0) {  /* no hash? */
   15962:	7983      	ldrb	r3, [r0, #6]
unsigned int luaS_hashlongstr (TString *ts) {
   15964:	4604      	mov	r4, r0
  if (ts->extra == 0) {  /* no hash? */
   15966:	b93b      	cbnz	r3, 15978 <luaS_hashlongstr+0x18>
    ts->hash = luaS_hash(getstr(ts), len, ts->hash);
   15968:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
   1596c:	3010      	adds	r0, #16
   1596e:	f7ff ffe7 	bl	15940 <luaS_hash>
    ts->extra = 1;  /* now it has its hash */
   15972:	2301      	movs	r3, #1
    ts->hash = luaS_hash(getstr(ts), len, ts->hash);
   15974:	60a0      	str	r0, [r4, #8]
    ts->extra = 1;  /* now it has its hash */
   15976:	71a3      	strb	r3, [r4, #6]
}
   15978:	68a0      	ldr	r0, [r4, #8]
   1597a:	bd10      	pop	{r4, pc}

0001597c <luaS_resize>:
void luaS_resize (lua_State *L, int nsize) {
   1597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  stringtable *tb = &G(L)->strt;
   1597e:	6906      	ldr	r6, [r0, #16]
void luaS_resize (lua_State *L, int nsize) {
   15980:	4607      	mov	r7, r0
  int osize = tb->size;
   15982:	6a35      	ldr	r5, [r6, #32]
void luaS_resize (lua_State *L, int nsize) {
   15984:	460c      	mov	r4, r1
  if (nsize < osize)  /* shrinking table? */
   15986:	428d      	cmp	r5, r1
   15988:	dd04      	ble.n	15994 <luaS_resize+0x18>
    tablerehash(tb->hash, osize, nsize);  /* depopulate shrinking part */
   1598a:	460a      	mov	r2, r1
   1598c:	69b0      	ldr	r0, [r6, #24]
   1598e:	4629      	mov	r1, r5
   15990:	f7ff ffa2 	bl	158d8 <tablerehash>
  newvect = luaM_reallocvector(L, tb->hash, osize, nsize, TString*);
   15994:	4638      	mov	r0, r7
   15996:	69b1      	ldr	r1, [r6, #24]
   15998:	00a3      	lsls	r3, r4, #2
   1599a:	00aa      	lsls	r2, r5, #2
   1599c:	f7ff f89e 	bl	14adc <luaM_realloc_>
  if (l_unlikely(newvect == NULL)) {  /* reallocation failed? */
   159a0:	b940      	cbnz	r0, 159b4 <luaS_resize+0x38>
    if (nsize < osize)  /* was it shrinking table? */
   159a2:	42a5      	cmp	r5, r4
   159a4:	dd0d      	ble.n	159c2 <luaS_resize+0x46>
      tablerehash(tb->hash, nsize, osize);  /* restore to original size */
   159a6:	462a      	mov	r2, r5
   159a8:	4621      	mov	r1, r4
   159aa:	69b0      	ldr	r0, [r6, #24]
}
   159ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      tablerehash(newvect, osize, nsize);  /* rehash for new size */
   159b0:	f7ff bf92 	b.w	158d8 <tablerehash>
    if (nsize > osize)
   159b4:	42a5      	cmp	r5, r4
    tb->hash = newvect;
   159b6:	61b0      	str	r0, [r6, #24]
    tb->size = nsize;
   159b8:	6234      	str	r4, [r6, #32]
    if (nsize > osize)
   159ba:	da02      	bge.n	159c2 <luaS_resize+0x46>
      tablerehash(newvect, osize, nsize);  /* rehash for new size */
   159bc:	4622      	mov	r2, r4
   159be:	4629      	mov	r1, r5
   159c0:	e7f4      	b.n	159ac <luaS_resize+0x30>
}
   159c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000159c4 <internshrstr>:
static TString *internshrstr (lua_State *L, const char *str, size_t l) {
   159c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   159c8:	4688      	mov	r8, r1
   159ca:	4616      	mov	r6, r2
  global_State *g = G(L);
   159cc:	6905      	ldr	r5, [r0, #16]
static TString *internshrstr (lua_State *L, const char *str, size_t l) {
   159ce:	4607      	mov	r7, r0
  unsigned int h = luaS_hash(str, l, g->seed);
   159d0:	6caa      	ldr	r2, [r5, #72]	; 0x48
   159d2:	4631      	mov	r1, r6
   159d4:	4640      	mov	r0, r8
   159d6:	f7ff ffb3 	bl	15940 <luaS_hash>
   159da:	4681      	mov	r9, r0
  TString **list = &tb->hash[lmod(h, tb->size)];
   159dc:	6a2b      	ldr	r3, [r5, #32]
   159de:	69aa      	ldr	r2, [r5, #24]
   159e0:	3b01      	subs	r3, #1
   159e2:	4003      	ands	r3, r0
  for (ts = *list; ts != NULL; ts = ts->u.hnext) {
   159e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
  TString **list = &tb->hash[lmod(h, tb->size)];
   159e8:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
  for (ts = *list; ts != NULL; ts = ts->u.hnext) {
   159ec:	b994      	cbnz	r4, 15a14 <internshrstr+0x50>
  if (tb->nuse >= tb->size) {  /* need to grow string table? */
   159ee:	e9d5 4307 	ldrd	r4, r3, [r5, #28]
   159f2:	429c      	cmp	r4, r3
   159f4:	db37      	blt.n	15a66 <internshrstr+0xa2>
  if (l_unlikely(tb->nuse == MAX_INT)) {  /* too many strings? */
   159f6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   159fa:	429c      	cmp	r4, r3
   159fc:	d123      	bne.n	15a46 <internshrstr+0x82>
    luaC_fullgc(L, 1);  /* try to free some... */
   159fe:	2101      	movs	r1, #1
   15a00:	4638      	mov	r0, r7
   15a02:	f7fe ff46 	bl	14892 <luaC_fullgc>
    if (tb->nuse == MAX_INT)  /* still too many? */
   15a06:	69eb      	ldr	r3, [r5, #28]
   15a08:	42a3      	cmp	r3, r4
   15a0a:	d11c      	bne.n	15a46 <internshrstr+0x82>
      luaM_error(L);  /* cannot even create a message... */
   15a0c:	2104      	movs	r1, #4
   15a0e:	4638      	mov	r0, r7
   15a10:	f7fd f9bf 	bl	12d92 <luaD_throw>
    if (l == ts->shrlen && (memcmp(str, getstr(ts), l * sizeof(char)) == 0)) {
   15a14:	79e3      	ldrb	r3, [r4, #7]
   15a16:	42b3      	cmp	r3, r6
   15a18:	d113      	bne.n	15a42 <internshrstr+0x7e>
   15a1a:	4632      	mov	r2, r6
   15a1c:	4640      	mov	r0, r8
   15a1e:	f104 0110 	add.w	r1, r4, #16
   15a22:	f001 f91b 	bl	16c5c <memcmp>
   15a26:	b960      	cbnz	r0, 15a42 <internshrstr+0x7e>
      if (isdead(g, ts))  /* dead (but not collected yet)? */
   15a28:	f895 204c 	ldrb.w	r2, [r5, #76]	; 0x4c
   15a2c:	7963      	ldrb	r3, [r4, #5]
   15a2e:	f082 0218 	eor.w	r2, r2, #24
   15a32:	4213      	tst	r3, r2
   15a34:	d002      	beq.n	15a3c <internshrstr+0x78>
        changewhite(ts);  /* resurrect it */
   15a36:	f083 0318 	eor.w	r3, r3, #24
   15a3a:	7163      	strb	r3, [r4, #5]
}
   15a3c:	4620      	mov	r0, r4
   15a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (ts = *list; ts != NULL; ts = ts->u.hnext) {
   15a42:	68e4      	ldr	r4, [r4, #12]
   15a44:	e7d2      	b.n	159ec <internshrstr+0x28>
  if (tb->size <= MAXSTRTB / 2)  /* can grow string table? */
   15a46:	6a29      	ldr	r1, [r5, #32]
   15a48:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   15a4c:	da03      	bge.n	15a56 <internshrstr+0x92>
    luaS_resize(L, tb->size * 2);
   15a4e:	4638      	mov	r0, r7
   15a50:	0049      	lsls	r1, r1, #1
   15a52:	f7ff ff93 	bl	1597c <luaS_resize>
    list = &tb->hash[lmod(h, tb->size)];  /* rehash with new size */
   15a56:	6a2b      	ldr	r3, [r5, #32]
   15a58:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
   15a5c:	69ab      	ldr	r3, [r5, #24]
   15a5e:	ea0a 0a09 	and.w	sl, sl, r9
   15a62:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
  o = luaC_newobj(L, tag, totalsize);
   15a66:	2104      	movs	r1, #4
   15a68:	f106 0211 	add.w	r2, r6, #17
   15a6c:	4638      	mov	r0, r7
   15a6e:	f7fe fd92 	bl	14596 <luaC_newobj>
  ts->extra = 0;
   15a72:	2300      	movs	r3, #0
  o = luaC_newobj(L, tag, totalsize);
   15a74:	4604      	mov	r4, r0
  getstr(ts)[l] = '\0';  /* ending 0 */
   15a76:	1982      	adds	r2, r0, r6
  ts->extra = 0;
   15a78:	7183      	strb	r3, [r0, #6]
  ts->hash = h;
   15a7a:	f8c0 9008 	str.w	r9, [r0, #8]
   15a7e:	4641      	mov	r1, r8
  getstr(ts)[l] = '\0';  /* ending 0 */
   15a80:	7413      	strb	r3, [r2, #16]
   15a82:	3010      	adds	r0, #16
   15a84:	4632      	mov	r2, r6
   15a86:	f001 f8f9 	bl	16c7c <memcpy>
  ts->shrlen = cast_byte(l);
   15a8a:	71e6      	strb	r6, [r4, #7]
  ts->u.hnext = *list;
   15a8c:	f8da 3000 	ldr.w	r3, [sl]
   15a90:	60e3      	str	r3, [r4, #12]
  tb->nuse++;
   15a92:	69eb      	ldr	r3, [r5, #28]
  *list = ts;
   15a94:	f8ca 4000 	str.w	r4, [sl]
  tb->nuse++;
   15a98:	3301      	adds	r3, #1
   15a9a:	61eb      	str	r3, [r5, #28]
  return ts;
   15a9c:	e7ce      	b.n	15a3c <internshrstr+0x78>

00015a9e <luaS_clearcache>:
  for (i = 0; i < STRCACHE_N; i++)
   15a9e:	4603      	mov	r3, r0
   15aa0:	f500 72d4 	add.w	r2, r0, #424	; 0x1a8
      if (iswhite(g->strcache[i][j]))  /* will entry be collected? */
   15aa4:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
  for (i = 0; i < STRCACHE_N; i++)
   15aa8:	3308      	adds	r3, #8
      if (iswhite(g->strcache[i][j]))  /* will entry be collected? */
   15aaa:	7949      	ldrb	r1, [r1, #5]
   15aac:	f011 0f18 	tst.w	r1, #24
        g->strcache[i][j] = g->memerrmsg;  /* replace it with something fixed */
   15ab0:	bf1c      	itt	ne
   15ab2:	f8d0 10a8 	ldrne.w	r1, [r0, #168]	; 0xa8
   15ab6:	f8c3 112c 	strne.w	r1, [r3, #300]	; 0x12c
      if (iswhite(g->strcache[i][j]))  /* will entry be collected? */
   15aba:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
   15abe:	7949      	ldrb	r1, [r1, #5]
   15ac0:	f011 0f18 	tst.w	r1, #24
        g->strcache[i][j] = g->memerrmsg;  /* replace it with something fixed */
   15ac4:	bf1c      	itt	ne
   15ac6:	f8d0 10a8 	ldrne.w	r1, [r0, #168]	; 0xa8
   15aca:	f8c3 1130 	strne.w	r1, [r3, #304]	; 0x130
  for (i = 0; i < STRCACHE_N; i++)
   15ace:	429a      	cmp	r2, r3
   15ad0:	d1e8      	bne.n	15aa4 <luaS_clearcache+0x6>
}
   15ad2:	4770      	bx	lr

00015ad4 <luaS_createlngstrobj>:
TString *luaS_createlngstrobj (lua_State *L, size_t l) {
   15ad4:	b538      	push	{r3, r4, r5, lr}
  TString *ts = createstrobj(L, l, LUA_VLNGSTR, G(L)->seed);
   15ad6:	6903      	ldr	r3, [r0, #16]
TString *luaS_createlngstrobj (lua_State *L, size_t l) {
   15ad8:	460c      	mov	r4, r1
  o = luaC_newobj(L, tag, totalsize);
   15ada:	f101 0211 	add.w	r2, r1, #17
   15ade:	2114      	movs	r1, #20
  TString *ts = createstrobj(L, l, LUA_VLNGSTR, G(L)->seed);
   15ae0:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  o = luaC_newobj(L, tag, totalsize);
   15ae2:	f7fe fd58 	bl	14596 <luaC_newobj>
  ts->extra = 0;
   15ae6:	2200      	movs	r2, #0
  getstr(ts)[l] = '\0';  /* ending 0 */
   15ae8:	1901      	adds	r1, r0, r4
  ts->hash = h;
   15aea:	6085      	str	r5, [r0, #8]
  ts->extra = 0;
   15aec:	7182      	strb	r2, [r0, #6]
  getstr(ts)[l] = '\0';  /* ending 0 */
   15aee:	740a      	strb	r2, [r1, #16]
  ts->u.lnglen = l;
   15af0:	60c4      	str	r4, [r0, #12]
}
   15af2:	bd38      	pop	{r3, r4, r5, pc}

00015af4 <luaS_remove>:
  stringtable *tb = &G(L)->strt;
   15af4:	6900      	ldr	r0, [r0, #16]
  TString **p = &tb->hash[lmod(ts->hash, tb->size)];
   15af6:	688a      	ldr	r2, [r1, #8]
   15af8:	6a03      	ldr	r3, [r0, #32]
   15afa:	3b01      	subs	r3, #1
   15afc:	401a      	ands	r2, r3
   15afe:	6983      	ldr	r3, [r0, #24]
   15b00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  while (*p != ts)  /* find previous element */
   15b04:	681a      	ldr	r2, [r3, #0]
   15b06:	428a      	cmp	r2, r1
   15b08:	d105      	bne.n	15b16 <luaS_remove+0x22>
  *p = (*p)->u.hnext;  /* remove element from its list */
   15b0a:	68ca      	ldr	r2, [r1, #12]
   15b0c:	601a      	str	r2, [r3, #0]
  tb->nuse--;
   15b0e:	69c3      	ldr	r3, [r0, #28]
   15b10:	3b01      	subs	r3, #1
   15b12:	61c3      	str	r3, [r0, #28]
}
   15b14:	4770      	bx	lr
    p = &(*p)->u.hnext;
   15b16:	f102 030c 	add.w	r3, r2, #12
   15b1a:	e7f3      	b.n	15b04 <luaS_remove+0x10>

00015b1c <luaS_newlstr>:
  if (l <= LUAI_MAXSHORTLEN)  /* short string? */
   15b1c:	2a28      	cmp	r2, #40	; 0x28
TString *luaS_newlstr (lua_State *L, const char *str, size_t l) {
   15b1e:	b570      	push	{r4, r5, r6, lr}
   15b20:	460e      	mov	r6, r1
   15b22:	4614      	mov	r4, r2
  if (l <= LUAI_MAXSHORTLEN)  /* short string? */
   15b24:	d803      	bhi.n	15b2e <luaS_newlstr+0x12>
      luaM_toobig(L);
    ts = luaS_createlngstrobj(L, l);
    memcpy(getstr(ts), str, l * sizeof(char));
    return ts;
  }
}
   15b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return internshrstr(L, str, l);
   15b2a:	f7ff bf4b 	b.w	159c4 <internshrstr>
    if (l_unlikely(l >= (MAX_SIZE - sizeof(TString))/sizeof(char)))
   15b2e:	f112 0f16 	cmn.w	r2, #22
   15b32:	d901      	bls.n	15b38 <luaS_newlstr+0x1c>
      luaM_toobig(L);
   15b34:	f7f0 fc8c 	bl	6450 <luaM_toobig>
    ts = luaS_createlngstrobj(L, l);
   15b38:	4611      	mov	r1, r2
   15b3a:	f7ff ffcb 	bl	15ad4 <luaS_createlngstrobj>
   15b3e:	4605      	mov	r5, r0
   15b40:	4622      	mov	r2, r4
   15b42:	4631      	mov	r1, r6
   15b44:	3010      	adds	r0, #16
   15b46:	f001 f899 	bl	16c7c <memcpy>
}
   15b4a:	4628      	mov	r0, r5
   15b4c:	bd70      	pop	{r4, r5, r6, pc}

00015b4e <luaS_new>:
** cache (using the string address as a key). The cache can contain
** only zero-terminated strings, so it is safe to use 'strcmp' to
** check hits.
*/
TString *luaS_new (lua_State *L, const char *str) {
  unsigned int i = point2uint(str) % STRCACHE_N;  /* hash */
   15b4e:	2335      	movs	r3, #53	; 0x35
TString *luaS_new (lua_State *L, const char *str) {
   15b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned int i = point2uint(str) % STRCACHE_N;  /* hash */
   15b54:	fbb1 f4f3 	udiv	r4, r1, r3
TString *luaS_new (lua_State *L, const char *str) {
   15b58:	460e      	mov	r6, r1
  unsigned int i = point2uint(str) % STRCACHE_N;  /* hash */
   15b5a:	fb03 1414 	mls	r4, r3, r4, r1
  int j;
  TString **p = G(L)->strcache[i];
   15b5e:	6907      	ldr	r7, [r0, #16]
   15b60:	00e4      	lsls	r4, r4, #3
   15b62:	f504 749a 	add.w	r4, r4, #308	; 0x134
  for (j = 0; j < STRCACHE_M; j++) {
    if (strcmp(str, getstr(p[j])) == 0)  /* hit? */
   15b66:	5939      	ldr	r1, [r7, r4]
TString *luaS_new (lua_State *L, const char *str) {
   15b68:	4680      	mov	r8, r0
    if (strcmp(str, getstr(p[j])) == 0)  /* hit? */
   15b6a:	3110      	adds	r1, #16
   15b6c:	4630      	mov	r0, r6
  TString **p = G(L)->strcache[i];
   15b6e:	193d      	adds	r5, r7, r4
    if (strcmp(str, getstr(p[j])) == 0)  /* hit? */
   15b70:	f7eb f974 	bl	e5c <strcmp>
   15b74:	b130      	cbz	r0, 15b84 <luaS_new+0x36>
   15b76:	6869      	ldr	r1, [r5, #4]
   15b78:	4630      	mov	r0, r6
   15b7a:	3110      	adds	r1, #16
   15b7c:	f7eb f96e 	bl	e5c <strcmp>
   15b80:	b910      	cbnz	r0, 15b88 <luaS_new+0x3a>
   15b82:	3504      	adds	r5, #4
      return p[j];  /* that is it */
   15b84:	6828      	ldr	r0, [r5, #0]
   15b86:	e00a      	b.n	15b9e <luaS_new+0x50>
  }
  /* normal route */
  for (j = STRCACHE_M - 1; j > 0; j--)
    p[j] = p[j - 1];  /* move out last element */
   15b88:	593b      	ldr	r3, [r7, r4]
  /* new element is first in the list */
  p[0] = luaS_newlstr(L, str, strlen(str));
   15b8a:	4630      	mov	r0, r6
    p[j] = p[j - 1];  /* move out last element */
   15b8c:	606b      	str	r3, [r5, #4]
  p[0] = luaS_newlstr(L, str, strlen(str));
   15b8e:	f7eb f96f 	bl	e70 <strlen>
   15b92:	4631      	mov	r1, r6
   15b94:	4602      	mov	r2, r0
   15b96:	4640      	mov	r0, r8
   15b98:	f7ff ffc0 	bl	15b1c <luaS_newlstr>
   15b9c:	5138      	str	r0, [r7, r4]
  return p[0];
}
   15b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015ba2 <hashint>:
static Node *hashint (const Table *t, lua_Integer i) {
   15ba2:	b538      	push	{r3, r4, r5, lr}
   15ba4:	4604      	mov	r4, r0
   15ba6:	4610      	mov	r0, r2
    return hashmod(t, cast_int(ui));
   15ba8:	6925      	ldr	r5, [r4, #16]
   15baa:	79e2      	ldrb	r2, [r4, #7]
   15bac:	2401      	movs	r4, #1
static Node *hashint (const Table *t, lua_Integer i) {
   15bae:	4619      	mov	r1, r3
    return hashmod(t, cast_int(ui));
   15bb0:	4094      	lsls	r4, r2
  if (ui <= (unsigned int)INT_MAX)
   15bb2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    return hashmod(t, cast_int(ui));
   15bb6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
  if (ui <= (unsigned int)INT_MAX)
   15bba:	f171 0300 	sbcs.w	r3, r1, #0
    return hashmod(t, cast_int(ui));
   15bbe:	f044 0201 	orr.w	r2, r4, #1
  if (ui <= (unsigned int)INT_MAX)
   15bc2:	d207      	bcs.n	15bd4 <hashint+0x32>
    return hashmod(t, cast_int(ui));
   15bc4:	fb90 f3f2 	sdiv	r3, r0, r2
   15bc8:	fb02 0213 	mls	r2, r2, r3, r0
    return hashmod(t, ui);
   15bcc:	2018      	movs	r0, #24
   15bce:	fb00 5002 	mla	r0, r0, r2, r5
}
   15bd2:	bd38      	pop	{r3, r4, r5, pc}
    return hashmod(t, ui);
   15bd4:	17d3      	asrs	r3, r2, #31
   15bd6:	f7ea ff31 	bl	a3c <__aeabi_uldivmod>
   15bda:	e7f7      	b.n	15bcc <hashint+0x2a>

00015bdc <freehash>:
  if (!isdummy(t))
   15bdc:	694b      	ldr	r3, [r1, #20]
   15bde:	b12b      	cbz	r3, 15bec <freehash+0x10>
    luaM_freearray(L, t->node, cast_sizet(sizenode(t)));
   15be0:	2218      	movs	r2, #24
   15be2:	79cb      	ldrb	r3, [r1, #7]
   15be4:	6909      	ldr	r1, [r1, #16]
   15be6:	409a      	lsls	r2, r3
   15be8:	f7fe bf6d 	b.w	14ac6 <luaM_free_>
}
   15bec:	4770      	bx	lr

00015bee <luaH_realasize>:
LUAI_FUNC unsigned int luaH_realasize (const Table *t) {
   15bee:	4603      	mov	r3, r0
  if (limitequalsasize(t))
   15bf0:	f993 3006 	ldrsb.w	r3, [r3, #6]
   15bf4:	6880      	ldr	r0, [r0, #8]
   15bf6:	2b00      	cmp	r3, #0
   15bf8:	da0d      	bge.n	15c16 <luaH_realasize+0x28>
   15bfa:	1e43      	subs	r3, r0, #1
   15bfc:	4203      	tst	r3, r0
   15bfe:	d00a      	beq.n	15c16 <luaH_realasize+0x28>
    size |= (size >> 1);
   15c00:	ea40 0050 	orr.w	r0, r0, r0, lsr #1
    size |= (size >> 2);
   15c04:	ea40 0090 	orr.w	r0, r0, r0, lsr #2
    size |= (size >> 4);
   15c08:	ea40 1010 	orr.w	r0, r0, r0, lsr #4
    size |= (size >> 8);
   15c0c:	ea40 2010 	orr.w	r0, r0, r0, lsr #8
    size |= (size >> 16);
   15c10:	ea40 4010 	orr.w	r0, r0, r0, lsr #16
    size++;
   15c14:	3001      	adds	r0, #1
}
   15c16:	4770      	bx	lr

00015c18 <luaH_free>:
void luaH_free (lua_State *L, Table *t) {
   15c18:	b538      	push	{r3, r4, r5, lr}
   15c1a:	460c      	mov	r4, r1
   15c1c:	4605      	mov	r5, r0
  freehash(L, t);
   15c1e:	f7ff ffdd 	bl	15bdc <freehash>
  luaM_freearray(L, t->array, luaH_realasize(t));
   15c22:	4620      	mov	r0, r4
   15c24:	f7ff ffe3 	bl	15bee <luaH_realasize>
   15c28:	68e1      	ldr	r1, [r4, #12]
   15c2a:	0102      	lsls	r2, r0, #4
   15c2c:	4628      	mov	r0, r5
   15c2e:	f7fe ff4a 	bl	14ac6 <luaM_free_>
  luaM_free(L, t);
   15c32:	4621      	mov	r1, r4
   15c34:	4628      	mov	r0, r5
}
   15c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  luaM_free(L, t);
   15c3a:	2220      	movs	r2, #32
   15c3c:	f7fe bf43 	b.w	14ac6 <luaM_free_>

00015c40 <luaH_getstr>:
const TValue *luaH_getstr (Table *t, TString *key) {
   15c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (key->tt == LUA_VSHRSTR)
   15c42:	790b      	ldrb	r3, [r1, #4]
   15c44:	2b04      	cmp	r3, #4
   15c46:	d104      	bne.n	15c52 <luaH_getstr+0x12>
}
   15c48:	b005      	add	sp, #20
   15c4a:	f85d eb04 	ldr.w	lr, [sp], #4
    return luaH_getshortstr(t, key);
   15c4e:	f7f2 bbd7 	b.w	8400 <luaH_getshortstr>
    setsvalue(cast(lua_State *, NULL), &ko, key);
   15c52:	9100      	str	r1, [sp, #0]
   15c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    return getgeneric(t, &ko, 0);
   15c58:	2200      	movs	r2, #0
   15c5a:	4669      	mov	r1, sp
    setsvalue(cast(lua_State *, NULL), &ko, key);
   15c5c:	f88d 3008 	strb.w	r3, [sp, #8]
    return getgeneric(t, &ko, 0);
   15c60:	f7f2 fb3a 	bl	82d8 <getgeneric>
}
   15c64:	b005      	add	sp, #20
   15c66:	f85d fb04 	ldr.w	pc, [sp], #4

00015c6a <luaH_setint>:
  const TValue *slot = luaH_get(t, key);
  luaH_finishset(L, t, key, slot, value);
}


void luaH_setint (lua_State *L, Table *t, lua_Integer key, TValue *value) {
   15c6a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   15c6e:	4606      	mov	r6, r0
  const TValue *p = luaH_getint(t, key);
   15c70:	4608      	mov	r0, r1
void luaH_setint (lua_State *L, Table *t, lua_Integer key, TValue *value) {
   15c72:	461f      	mov	r7, r3
   15c74:	460c      	mov	r4, r1
   15c76:	4690      	mov	r8, r2
   15c78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  const TValue *p = luaH_getint(t, key);
   15c7a:	f7f2 fb85 	bl	8388 <luaH_getint>
  if (isabstkey(p)) {
   15c7e:	7a03      	ldrb	r3, [r0, #8]
   15c80:	2b20      	cmp	r3, #32
   15c82:	d10d      	bne.n	15ca0 <luaH_setint+0x36>
    TValue k;
    setivalue(&k, key);
   15c84:	2303      	movs	r3, #3
    luaH_newkey(L, t, &k, value);
   15c86:	466a      	mov	r2, sp
    setivalue(&k, key);
   15c88:	f88d 3008 	strb.w	r3, [sp, #8]
    luaH_newkey(L, t, &k, value);
   15c8c:	4621      	mov	r1, r4
   15c8e:	462b      	mov	r3, r5
   15c90:	4630      	mov	r0, r6
    setivalue(&k, key);
   15c92:	e9cd 8700 	strd	r8, r7, [sp]
    luaH_newkey(L, t, &k, value);
   15c96:	f7f2 fcd7 	bl	8648 <luaH_newkey>
  }
  else
    setobj2t(L, cast(TValue *, p), value);
}
   15c9a:	b004      	add	sp, #16
   15c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    setobj2t(L, cast(TValue *, p), value);
   15ca0:	e9d5 2300 	ldrd	r2, r3, [r5]
   15ca4:	e9c0 2300 	strd	r2, r3, [r0]
   15ca8:	7a2b      	ldrb	r3, [r5, #8]
   15caa:	7203      	strb	r3, [r0, #8]
}
   15cac:	e7f5      	b.n	15c9a <luaH_setint+0x30>

00015cae <luaH_resizearray>:
  int nsize = allocsizenode(t);
   15cae:	694b      	ldr	r3, [r1, #20]
void luaH_resizearray (lua_State *L, Table *t, unsigned int nasize) {
   15cb0:	b410      	push	{r4}
  int nsize = allocsizenode(t);
   15cb2:	b113      	cbz	r3, 15cba <luaH_resizearray+0xc>
   15cb4:	2301      	movs	r3, #1
   15cb6:	79cc      	ldrb	r4, [r1, #7]
   15cb8:	40a3      	lsls	r3, r4
}
   15cba:	bc10      	pop	{r4}
  luaH_resize(L, t, nasize, nsize);
   15cbc:	f7f2 bbee 	b.w	849c <luaH_resize>

00015cc0 <luaH_finishset>:
                                   const TValue *slot, TValue *value) {
   15cc0:	b430      	push	{r4, r5}
   15cc2:	461c      	mov	r4, r3
  if (isabstkey(slot))
   15cc4:	7a25      	ldrb	r5, [r4, #8]
                                   const TValue *slot, TValue *value) {
   15cc6:	9b02      	ldr	r3, [sp, #8]
  if (isabstkey(slot))
   15cc8:	2d20      	cmp	r5, #32
   15cca:	d102      	bne.n	15cd2 <luaH_finishset+0x12>
}
   15ccc:	bc30      	pop	{r4, r5}
    luaH_newkey(L, t, key, value);
   15cce:	f7f2 bcbb 	b.w	8648 <luaH_newkey>
    setobj2t(L, cast(TValue *, slot), value);
   15cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
   15cd6:	e9c4 0100 	strd	r0, r1, [r4]
   15cda:	7a1b      	ldrb	r3, [r3, #8]
   15cdc:	7223      	strb	r3, [r4, #8]
}
   15cde:	bc30      	pop	{r4, r5}
   15ce0:	4770      	bx	lr

00015ce2 <luaH_set>:
void luaH_set (lua_State *L, Table *t, const TValue *key, TValue *value) {
   15ce2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15ce4:	460c      	mov	r4, r1
   15ce6:	4606      	mov	r6, r0
  const TValue *slot = luaH_get(t, key);
   15ce8:	4611      	mov	r1, r2
   15cea:	4620      	mov	r0, r4
void luaH_set (lua_State *L, Table *t, const TValue *key, TValue *value) {
   15cec:	461f      	mov	r7, r3
   15cee:	4615      	mov	r5, r2
  const TValue *slot = luaH_get(t, key);
   15cf0:	f7f2 fb9e 	bl	8430 <luaH_get>
  luaH_finishset(L, t, key, slot, value);
   15cf4:	462a      	mov	r2, r5
  const TValue *slot = luaH_get(t, key);
   15cf6:	4603      	mov	r3, r0
  luaH_finishset(L, t, key, slot, value);
   15cf8:	4621      	mov	r1, r4
   15cfa:	4630      	mov	r0, r6
   15cfc:	9700      	str	r7, [sp, #0]
   15cfe:	f7ff ffdf 	bl	15cc0 <luaH_finishset>
}
   15d02:	b003      	add	sp, #12
   15d04:	bdf0      	pop	{r4, r5, r6, r7, pc}

00015d06 <luaH_getn>:
** or 'limit+1' is absent, 'limit' is a boundary.  Otherwise, call
** 'hash_search' to find a boundary in the hash part of the table.
** (In those cases, the boundary is not inside the array part, and
** therefore cannot be used as a new limit.)
*/
lua_Unsigned luaH_getn (Table *t) {
   15d06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  unsigned int limit = t->alimit;
   15d0a:	6885      	ldr	r5, [r0, #8]
lua_Unsigned luaH_getn (Table *t) {
   15d0c:	4607      	mov	r7, r0
  return (!isrealasize(t) || ispow2(t->alimit));
   15d0e:	7982      	ldrb	r2, [r0, #6]
   15d10:	f990 6006 	ldrsb.w	r6, [r0, #6]
  if (limit > 0 && isempty(&t->array[limit - 1])) {  /* (1)? */
   15d14:	2d00      	cmp	r5, #0
   15d16:	d059      	beq.n	15dcc <luaH_getn+0xc6>
   15d18:	f06f 4470 	mvn.w	r4, #4026531840	; 0xf0000000
   15d1c:	68c1      	ldr	r1, [r0, #12]
   15d1e:	192b      	adds	r3, r5, r4
   15d20:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   15d24:	f893 c008 	ldrb.w	ip, [r3, #8]
   15d28:	f01c 0f0f 	tst.w	ip, #15
   15d2c:	d135      	bne.n	15d9a <luaH_getn+0x94>
    /* there must be a boundary before 'limit' */
    if (limit >= 2 && !isempty(&t->array[limit - 2])) {
   15d2e:	2d01      	cmp	r5, #1
   15d30:	d02c      	beq.n	15d8c <luaH_getn+0x86>
   15d32:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   15d36:	0718      	lsls	r0, r3, #28
   15d38:	d028      	beq.n	15d8c <luaH_getn+0x86>
  return (!isrealasize(t) || ispow2(t->alimit));
   15d3a:	2e00      	cmp	r6, #0
   15d3c:	f105 34ff 	add.w	r4, r5, #4294967295	; 0xffffffff
   15d40:	db01      	blt.n	15d46 <luaH_getn+0x40>
   15d42:	4225      	tst	r5, r4
   15d44:	d120      	bne.n	15d88 <luaH_getn+0x82>
      /* 'limit - 1' is a boundary; can it be a new limit? */
      if (ispow2realasize(t) && !ispow2(limit - 1)) {
   15d46:	3d02      	subs	r5, #2
   15d48:	4225      	tst	r5, r4
   15d4a:	d01d      	beq.n	15d88 <luaH_getn+0x82>
    else {  /* must search for a boundary in [0, limit] */
      unsigned int boundary = binsearch(t->array, 0, limit);
      /* can this boundary represent the real size of the array? */
      if (ispow2realasize(t) && boundary > luaH_realasize(t) / 2) {
        t->alimit = boundary;  /* use it as the new limit */
        setnorealasize(t);
   15d4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
        t->alimit = boundary;  /* use it as the new limit */
   15d50:	60bc      	str	r4, [r7, #8]
        setnorealasize(t);
   15d52:	71ba      	strb	r2, [r7, #6]
      }
      return boundary;
   15d54:	e018      	b.n	15d88 <luaH_getn+0x82>
    unsigned int m = (i + j) / 2;
   15d56:	1903      	adds	r3, r0, r4
   15d58:	ea4f 0c53 	mov.w	ip, r3, lsr #1
    if (isempty(&array[m - 1])) j = m;
   15d5c:	eb0e 0353 	add.w	r3, lr, r3, lsr #1
   15d60:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   15d64:	7a1b      	ldrb	r3, [r3, #8]
   15d66:	071b      	lsls	r3, r3, #28
   15d68:	d015      	beq.n	15d96 <luaH_getn+0x90>
    unsigned int m = (i + j) / 2;
   15d6a:	4664      	mov	r4, ip
  while (j - i > 1u) {  /* binary search */
   15d6c:	1b03      	subs	r3, r0, r4
   15d6e:	2b01      	cmp	r3, #1
   15d70:	d8f1      	bhi.n	15d56 <luaH_getn+0x50>
  return (!isrealasize(t) || ispow2(t->alimit));
   15d72:	2e00      	cmp	r6, #0
   15d74:	db02      	blt.n	15d7c <luaH_getn+0x76>
   15d76:	1e6b      	subs	r3, r5, #1
   15d78:	422b      	tst	r3, r5
   15d7a:	d105      	bne.n	15d88 <luaH_getn+0x82>
      if (ispow2realasize(t) && boundary > luaH_realasize(t) / 2) {
   15d7c:	4638      	mov	r0, r7
   15d7e:	f7ff ff36 	bl	15bee <luaH_realasize>
   15d82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
   15d86:	d8e1      	bhi.n	15d4c <luaH_getn+0x46>
    if (isempty(&t->array[limit - 1])) {  /* empty? */
      /* there must be a boundary in the array after old limit,
         and it must be a valid new limit */
      unsigned int boundary = binsearch(t->array, t->alimit, limit);
      t->alimit = boundary;
      return boundary;
   15d88:	2600      	movs	r6, #0
   15d8a:	e012      	b.n	15db2 <luaH_getn+0xac>
   15d8c:	4628      	mov	r0, r5
   15d8e:	2400      	movs	r4, #0
    if (isempty(&array[m - 1])) j = m;
   15d90:	f06f 4e70 	mvn.w	lr, #4026531840	; 0xf0000000
   15d94:	e7ea      	b.n	15d6c <luaH_getn+0x66>
    unsigned int m = (i + j) / 2;
   15d96:	4660      	mov	r0, ip
   15d98:	e7e8      	b.n	15d6c <luaH_getn+0x66>
  if (!limitequalsasize(t)) {  /* (2)? */
   15d9a:	2e00      	cmp	r6, #0
   15d9c:	da16      	bge.n	15dcc <luaH_getn+0xc6>
   15d9e:	1e6b      	subs	r3, r5, #1
   15da0:	422b      	tst	r3, r5
   15da2:	d013      	beq.n	15dcc <luaH_getn+0xc6>
    if (isempty(&t->array[limit]))  /* 'limit + 1' is empty? */
   15da4:	eb01 1305 	add.w	r3, r1, r5, lsl #4
   15da8:	7a1e      	ldrb	r6, [r3, #8]
   15daa:	f016 060f 	ands.w	r6, r6, #15
   15dae:	d104      	bne.n	15dba <luaH_getn+0xb4>
      return limit;  /* this is the boundary */
   15db0:	462c      	mov	r4, r5
             (limit == 0 || !isempty(&t->array[limit - 1])));
  if (isdummy(t) || isempty(luaH_getint(t, cast(lua_Integer, limit + 1))))
    return limit;  /* 'limit + 1' is absent */
  else  /* 'limit + 1' is also present */
    return hash_search(t, limit);
}
   15db2:	4620      	mov	r0, r4
   15db4:	4631      	mov	r1, r6
   15db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    limit = luaH_realasize(t);
   15dba:	f7ff ff18 	bl	15bee <luaH_realasize>
    if (isempty(&t->array[limit - 1])) {  /* empty? */
   15dbe:	1903      	adds	r3, r0, r4
   15dc0:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   15dc4:	7a1b      	ldrb	r3, [r3, #8]
   15dc6:	071b      	lsls	r3, r3, #28
   15dc8:	d051      	beq.n	15e6e <luaH_getn+0x168>
    limit = luaH_realasize(t);
   15dca:	4605      	mov	r5, r0
  if (isdummy(t) || isempty(luaH_getint(t, cast(lua_Integer, limit + 1))))
   15dcc:	697b      	ldr	r3, [r7, #20]
    return hash_search(t, limit);
   15dce:	462c      	mov	r4, r5
   15dd0:	2600      	movs	r6, #0
  if (isdummy(t) || isempty(luaH_getint(t, cast(lua_Integer, limit + 1))))
   15dd2:	2b00      	cmp	r3, #0
   15dd4:	d0ed      	beq.n	15db2 <luaH_getn+0xac>
   15dd6:	4633      	mov	r3, r6
   15dd8:	4638      	mov	r0, r7
   15dda:	1c6a      	adds	r2, r5, #1
   15ddc:	f7f2 fad4 	bl	8388 <luaH_getint>
   15de0:	7a03      	ldrb	r3, [r0, #8]
   15de2:	0718      	lsls	r0, r3, #28
   15de4:	d0e5      	beq.n	15db2 <luaH_getn+0xac>
  if (j == 0) j++;  /* the caller ensures 'j + 1' is present */
   15de6:	42b5      	cmp	r5, r6
   15de8:	bf18      	it	ne
   15dea:	46a8      	movne	r8, r5
   15dec:	46b1      	mov	r9, r6
   15dee:	bf08      	it	eq
   15df0:	f04f 0801 	moveq.w	r8, #1
    if (j <= l_castS2U(LUA_MAXINTEGER) / 2)
   15df4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   15df8:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
      j *= 2;
   15dfc:	4644      	mov	r4, r8
   15dfe:	eb18 0808 	adds.w	r8, r8, r8
   15e02:	464e      	mov	r6, r9
   15e04:	eb49 0909 	adc.w	r9, r9, r9
  } while (!isempty(luaH_getint(t, j)));  /* repeat until an absent t[j] */
   15e08:	464b      	mov	r3, r9
   15e0a:	4642      	mov	r2, r8
   15e0c:	4638      	mov	r0, r7
   15e0e:	f7f2 fabb 	bl	8388 <luaH_getint>
   15e12:	7a03      	ldrb	r3, [r0, #8]
   15e14:	0719      	lsls	r1, r3, #28
   15e16:	d130      	bne.n	15e7a <luaH_getn+0x174>
  while (j - i > 1u) {  /* do a binary search between them */
   15e18:	ebb8 0204 	subs.w	r2, r8, r4
   15e1c:	eb69 0306 	sbc.w	r3, r9, r6
   15e20:	2a02      	cmp	r2, #2
   15e22:	f173 0300 	sbcs.w	r3, r3, #0
   15e26:	d3c4      	bcc.n	15db2 <luaH_getn+0xac>
    lua_Unsigned m = (i + j) / 2;
   15e28:	eb18 0504 	adds.w	r5, r8, r4
   15e2c:	eb49 0a06 	adc.w	sl, r9, r6
   15e30:	086d      	lsrs	r5, r5, #1
   15e32:	ea45 75ca 	orr.w	r5, r5, sl, lsl #31
   15e36:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    if (isempty(luaH_getint(t, m))) j = m;
   15e3a:	4653      	mov	r3, sl
   15e3c:	462a      	mov	r2, r5
   15e3e:	4638      	mov	r0, r7
   15e40:	f7f2 faa2 	bl	8388 <luaH_getint>
   15e44:	7a03      	ldrb	r3, [r0, #8]
   15e46:	071b      	lsls	r3, r3, #28
    else i = m;
   15e48:	bf1f      	itttt	ne
   15e4a:	462c      	movne	r4, r5
   15e4c:	4656      	movne	r6, sl
    if (isempty(luaH_getint(t, m))) j = m;
   15e4e:	4645      	movne	r5, r8
   15e50:	46ca      	movne	sl, r9
   15e52:	46a8      	mov	r8, r5
   15e54:	46d1      	mov	r9, sl
   15e56:	e7df      	b.n	15e18 <luaH_getn+0x112>
    unsigned int m = (i + j) / 2;
   15e58:	1943      	adds	r3, r0, r5
   15e5a:	085a      	lsrs	r2, r3, #1
    if (isempty(&array[m - 1])) j = m;
   15e5c:	eb04 0353 	add.w	r3, r4, r3, lsr #1
   15e60:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   15e64:	7a1b      	ldrb	r3, [r3, #8]
   15e66:	071e      	lsls	r6, r3, #28
    unsigned int m = (i + j) / 2;
   15e68:	bf14      	ite	ne
   15e6a:	4615      	movne	r5, r2
   15e6c:	4610      	moveq	r0, r2
  while (j - i > 1u) {  /* binary search */
   15e6e:	1b43      	subs	r3, r0, r5
   15e70:	2b01      	cmp	r3, #1
   15e72:	d8f1      	bhi.n	15e58 <luaH_getn+0x152>
      return boundary;
   15e74:	462c      	mov	r4, r5
      t->alimit = boundary;
   15e76:	60bd      	str	r5, [r7, #8]
      return boundary;
   15e78:	e786      	b.n	15d88 <luaH_getn+0x82>
    if (j <= l_castS2U(LUA_MAXINTEGER) / 2)
   15e7a:	4545      	cmp	r5, r8
   15e7c:	eb7a 0309 	sbcs.w	r3, sl, r9
   15e80:	d2bc      	bcs.n	15dfc <luaH_getn+0xf6>
      if (isempty(luaH_getint(t, j)))  /* t[j] not present? */
   15e82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15e86:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   15e8a:	4638      	mov	r0, r7
   15e8c:	f7f2 fa7c 	bl	8388 <luaH_getint>
   15e90:	7a03      	ldrb	r3, [r0, #8]
   15e92:	071a      	lsls	r2, r3, #28
   15e94:	d004      	beq.n	15ea0 <luaH_getn+0x19a>
        return j;  /* well, max integer is a boundary... */
   15e96:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15e9a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   15e9e:	e788      	b.n	15db2 <luaH_getn+0xac>
      j *= 2;
   15ea0:	4644      	mov	r4, r8
   15ea2:	464e      	mov	r6, r9
      j = LUA_MAXINTEGER;
   15ea4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   15ea8:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   15eac:	e7b4      	b.n	15e18 <luaH_getn+0x112>

00015eae <luaT_gettm>:
const TValue *luaT_gettm (Table *events, TMS event, TString *ename) {
   15eae:	b538      	push	{r3, r4, r5, lr}
   15eb0:	460d      	mov	r5, r1
  const TValue *tm = luaH_getshortstr(events, ename);
   15eb2:	4611      	mov	r1, r2
const TValue *luaT_gettm (Table *events, TMS event, TString *ename) {
   15eb4:	4604      	mov	r4, r0
  const TValue *tm = luaH_getshortstr(events, ename);
   15eb6:	f7f2 faa3 	bl	8400 <luaH_getshortstr>
  if (notm(tm)) {  /* no tag method? */
   15eba:	7a03      	ldrb	r3, [r0, #8]
   15ebc:	f013 030f 	ands.w	r3, r3, #15
   15ec0:	d105      	bne.n	15ece <luaT_gettm+0x20>
    events->flags |= cast_byte(1u<<event);  /* cache this fact */
   15ec2:	2201      	movs	r2, #1
    return NULL;
   15ec4:	4618      	mov	r0, r3
    events->flags |= cast_byte(1u<<event);  /* cache this fact */
   15ec6:	79a1      	ldrb	r1, [r4, #6]
   15ec8:	40aa      	lsls	r2, r5
   15eca:	4311      	orrs	r1, r2
   15ecc:	71a1      	strb	r1, [r4, #6]
}
   15ece:	bd38      	pop	{r3, r4, r5, pc}

00015ed0 <luaT_gettmbyobj>:
const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o, TMS event) {
   15ed0:	b410      	push	{r4}
   15ed2:	7a0b      	ldrb	r3, [r1, #8]
      mt = G(L)->mt[ttype(o)];
   15ed4:	6904      	ldr	r4, [r0, #16]
   15ed6:	f003 030f 	and.w	r3, r3, #15
  switch (ttype(o)) {
   15eda:	2b05      	cmp	r3, #5
   15edc:	d005      	beq.n	15eea <luaT_gettmbyobj+0x1a>
   15ede:	2b07      	cmp	r3, #7
   15ee0:	d00d      	beq.n	15efe <luaT_gettmbyobj+0x2e>
      mt = G(L)->mt[ttype(o)];
   15ee2:	3344      	adds	r3, #68	; 0x44
   15ee4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   15ee8:	e001      	b.n	15eee <luaT_gettmbyobj+0x1e>
      mt = hvalue(o)->metatable;
   15eea:	680b      	ldr	r3, [r1, #0]
   15eec:	6998      	ldr	r0, [r3, #24]
  return (mt ? luaH_getshortstr(mt, G(L)->tmname[event]) : &G(L)->nilvalue);
   15eee:	b148      	cbz	r0, 15f04 <luaT_gettmbyobj+0x34>
   15ef0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   15ef4:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
}
   15ef8:	bc10      	pop	{r4}
  return (mt ? luaH_getshortstr(mt, G(L)->tmname[event]) : &G(L)->nilvalue);
   15efa:	f7f2 ba81 	b.w	8400 <luaH_getshortstr>
      mt = uvalue(o)->metatable;
   15efe:	680b      	ldr	r3, [r1, #0]
   15f00:	68d8      	ldr	r0, [r3, #12]
      break;
   15f02:	e7f4      	b.n	15eee <luaT_gettmbyobj+0x1e>
}
   15f04:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15f08:	bc10      	pop	{r4}
   15f0a:	4770      	bx	lr

00015f0c <luaT_callTM>:
                  const TValue *p2, const TValue *p3) {
   15f0c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   15f10:	468e      	mov	lr, r1
   15f12:	461d      	mov	r5, r3
  setobj2s(L, func, f);  /* push function (assume EXTRA_STACK) */
   15f14:	e9de 8900 	ldrd	r8, r9, [lr]
  StkId func = L->top;
   15f18:	68c1      	ldr	r1, [r0, #12]
                  const TValue *p2, const TValue *p3) {
   15f1a:	9e06      	ldr	r6, [sp, #24]
  setobj2s(L, func, f);  /* push function (assume EXTRA_STACK) */
   15f1c:	e9c1 8900 	strd	r8, r9, [r1]
   15f20:	f89e 3008 	ldrb.w	r3, [lr, #8]
   15f24:	720b      	strb	r3, [r1, #8]
  setobj2s(L, func + 1, p1);  /* 1st argument */
   15f26:	e9d2 8900 	ldrd	r8, r9, [r2]
   15f2a:	e9c1 8904 	strd	r8, r9, [r1, #16]
   15f2e:	7a13      	ldrb	r3, [r2, #8]
   15f30:	760b      	strb	r3, [r1, #24]
  setobj2s(L, func + 2, p2);  /* 2nd argument */
   15f32:	e9d5 2300 	ldrd	r2, r3, [r5]
   15f36:	e9c1 2308 	strd	r2, r3, [r1, #32]
   15f3a:	7a2b      	ldrb	r3, [r5, #8]
   15f3c:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  setobj2s(L, func + 3, p3);  /* 3rd argument */
   15f40:	e9d6 2300 	ldrd	r2, r3, [r6]
   15f44:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
   15f48:	7a33      	ldrb	r3, [r6, #8]
   15f4a:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
  L->top = func + 4;
   15f4e:	f101 0340 	add.w	r3, r1, #64	; 0x40
   15f52:	60c3      	str	r3, [r0, #12]
  if (isLuacode(L->ci))
   15f54:	6943      	ldr	r3, [r0, #20]
   15f56:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   15f58:	f012 020a 	ands.w	r2, r2, #10
   15f5c:	d103      	bne.n	15f66 <luaT_callTM+0x5a>
}
   15f5e:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
    luaD_call(L, func, 0);
   15f62:	f7fd ba66 	b.w	13432 <luaD_call>
    luaD_callnoyield(L, func, 0);
   15f66:	2200      	movs	r2, #0
}
   15f68:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
    luaD_callnoyield(L, func, 0);
   15f6c:	f7fd ba64 	b.w	13438 <luaD_callnoyield>

00015f70 <luaT_callTMres>:
                     const TValue *p2, StkId res) {
   15f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15f72:	468e      	mov	lr, r1
   15f74:	469c      	mov	ip, r3
  setobj2s(L, func, f);  /* push function (assume EXTRA_STACK) */
   15f76:	e9de 6700 	ldrd	r6, r7, [lr]
  StkId func = L->top;
   15f7a:	68c1      	ldr	r1, [r0, #12]
  ptrdiff_t result = savestack(L, res);
   15f7c:	69c3      	ldr	r3, [r0, #28]
  setobj2s(L, func, f);  /* push function (assume EXTRA_STACK) */
   15f7e:	e9c1 6700 	strd	r6, r7, [r1]
  ptrdiff_t result = savestack(L, res);
   15f82:	9d06      	ldr	r5, [sp, #24]
                     const TValue *p2, StkId res) {
   15f84:	4604      	mov	r4, r0
  ptrdiff_t result = savestack(L, res);
   15f86:	1aed      	subs	r5, r5, r3
  setobj2s(L, func, f);  /* push function (assume EXTRA_STACK) */
   15f88:	f89e 3008 	ldrb.w	r3, [lr, #8]
   15f8c:	720b      	strb	r3, [r1, #8]
  setobj2s(L, func + 1, p1);  /* 1st argument */
   15f8e:	e9d2 6700 	ldrd	r6, r7, [r2]
   15f92:	e9c1 6704 	strd	r6, r7, [r1, #16]
   15f96:	7a13      	ldrb	r3, [r2, #8]
   15f98:	760b      	strb	r3, [r1, #24]
  setobj2s(L, func + 2, p2);  /* 2nd argument */
   15f9a:	e9dc 2300 	ldrd	r2, r3, [ip]
   15f9e:	e9c1 2308 	strd	r2, r3, [r1, #32]
   15fa2:	f89c 3008 	ldrb.w	r3, [ip, #8]
    luaD_call(L, func, 1);
   15fa6:	2201      	movs	r2, #1
  setobj2s(L, func + 2, p2);  /* 2nd argument */
   15fa8:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  L->top += 3;
   15fac:	f101 0330 	add.w	r3, r1, #48	; 0x30
   15fb0:	60c3      	str	r3, [r0, #12]
  if (isLuacode(L->ci))
   15fb2:	6943      	ldr	r3, [r0, #20]
   15fb4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   15fb6:	f003 030a 	and.w	r3, r3, #10
   15fba:	b97b      	cbnz	r3, 15fdc <luaT_callTMres+0x6c>
    luaD_call(L, func, 1);
   15fbc:	f7fd fa39 	bl	13432 <luaD_call>
  res = restorestack(L, result);
   15fc0:	69e3      	ldr	r3, [r4, #28]
   15fc2:	441d      	add	r5, r3
  setobjs2s(L, res, --L->top);  /* move result to its place */
   15fc4:	68e3      	ldr	r3, [r4, #12]
   15fc6:	f1a3 0210 	sub.w	r2, r3, #16
   15fca:	60e2      	str	r2, [r4, #12]
   15fcc:	e953 0104 	ldrd	r0, r1, [r3, #-16]
   15fd0:	e9c5 0100 	strd	r0, r1, [r5]
   15fd4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   15fd8:	722b      	strb	r3, [r5, #8]
}
   15fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    luaD_callnoyield(L, func, 1);
   15fdc:	f7fd fa2c 	bl	13438 <luaD_callnoyield>
   15fe0:	e7ee      	b.n	15fc0 <luaT_callTMres+0x50>

00015fe2 <callbinTM>:
                      StkId res, TMS event) {
   15fe2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15fe6:	f89d 4020 	ldrb.w	r4, [sp, #32]
   15fea:	4616      	mov	r6, r2
  const TValue *tm = luaT_gettmbyobj(L, p1, event);  /* try first operand */
   15fec:	4622      	mov	r2, r4
                      StkId res, TMS event) {
   15fee:	460f      	mov	r7, r1
   15ff0:	4698      	mov	r8, r3
   15ff2:	4605      	mov	r5, r0
  const TValue *tm = luaT_gettmbyobj(L, p1, event);  /* try first operand */
   15ff4:	f7ff ff6c 	bl	15ed0 <luaT_gettmbyobj>
  if (notm(tm))
   15ff8:	7a03      	ldrb	r3, [r0, #8]
  const TValue *tm = luaT_gettmbyobj(L, p1, event);  /* try first operand */
   15ffa:	4601      	mov	r1, r0
  if (notm(tm))
   15ffc:	071b      	lsls	r3, r3, #28
   15ffe:	d109      	bne.n	16014 <callbinTM+0x32>
    tm = luaT_gettmbyobj(L, p2, event);  /* try second operand */
   16000:	4622      	mov	r2, r4
   16002:	4631      	mov	r1, r6
   16004:	4628      	mov	r0, r5
   16006:	f7ff ff63 	bl	15ed0 <luaT_gettmbyobj>
  if (notm(tm)) return 0;
   1600a:	7a04      	ldrb	r4, [r0, #8]
    tm = luaT_gettmbyobj(L, p2, event);  /* try second operand */
   1600c:	4601      	mov	r1, r0
  if (notm(tm)) return 0;
   1600e:	f014 000f 	ands.w	r0, r4, #15
   16012:	d007      	beq.n	16024 <callbinTM+0x42>
  luaT_callTMres(L, tm, p1, p2, res);
   16014:	4628      	mov	r0, r5
   16016:	4633      	mov	r3, r6
   16018:	463a      	mov	r2, r7
   1601a:	f8cd 8000 	str.w	r8, [sp]
   1601e:	f7ff ffa7 	bl	15f70 <luaT_callTMres>
  return 1;
   16022:	2001      	movs	r0, #1
}
   16024:	b002      	add	sp, #8
   16026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001602a <luaT_tryconcatTM>:


void luaT_tryconcatTM (lua_State *L) {
  StkId top = L->top;
  if (l_unlikely(!callbinTM(L, s2v(top - 2), s2v(top - 1), top - 2,
   1602a:	2316      	movs	r3, #22
void luaT_tryconcatTM (lua_State *L) {
   1602c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  StkId top = L->top;
   1602e:	68c4      	ldr	r4, [r0, #12]
  if (l_unlikely(!callbinTM(L, s2v(top - 2), s2v(top - 1), top - 2,
   16030:	9300      	str	r3, [sp, #0]
   16032:	f1a4 0620 	sub.w	r6, r4, #32
   16036:	3c10      	subs	r4, #16
   16038:	4633      	mov	r3, r6
   1603a:	4622      	mov	r2, r4
   1603c:	4631      	mov	r1, r6
void luaT_tryconcatTM (lua_State *L) {
   1603e:	4605      	mov	r5, r0
  if (l_unlikely(!callbinTM(L, s2v(top - 2), s2v(top - 1), top - 2,
   16040:	f7ff ffcf 	bl	15fe2 <callbinTM>
   16044:	b920      	cbnz	r0, 16050 <luaT_tryconcatTM+0x26>
                               TM_CONCAT)))
    luaG_concaterror(L, s2v(top - 2), s2v(top - 1));
   16046:	4622      	mov	r2, r4
   16048:	4631      	mov	r1, r6
   1604a:	4628      	mov	r0, r5
   1604c:	f7ef f8ec 	bl	5228 <luaG_concaterror>
}
   16050:	b002      	add	sp, #8
   16052:	bd70      	pop	{r4, r5, r6, pc}

00016054 <luaT_trybinassocTM>:


void luaT_trybinassocTM (lua_State *L, const TValue *p1, const TValue *p2,
                                       int flip, StkId res, TMS event) {
   16054:	b4f0      	push	{r4, r5, r6, r7}
   16056:	461f      	mov	r7, r3
   16058:	f89d 6014 	ldrb.w	r6, [sp, #20]
   1605c:	9b04      	ldr	r3, [sp, #16]
   1605e:	4614      	mov	r4, r2
  if (flip)
    luaT_trybinTM(L, p2, p1, res, event);
   16060:	9604      	str	r6, [sp, #16]
  if (flip)
   16062:	b10f      	cbz	r7, 16068 <luaT_trybinassocTM+0x14>
    luaT_trybinTM(L, p2, p1, res, event);
   16064:	460a      	mov	r2, r1
   16066:	4621      	mov	r1, r4
  else
    luaT_trybinTM(L, p1, p2, res, event);
}
   16068:	bcf0      	pop	{r4, r5, r6, r7}
    luaT_trybinTM(L, p1, p2, res, event);
   1606a:	f7f2 bc9d 	b.w	89a8 <luaT_trybinTM>

0001606e <luaT_trybiniTM>:


void luaT_trybiniTM (lua_State *L, const TValue *p1, lua_Integer i2,
                                   int flip, StkId res, TMS event) {
   1606e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TValue aux;
  setivalue(&aux, i2);
   16070:	e9cd 2302 	strd	r2, r3, [sp, #8]
   16074:	2303      	movs	r3, #3
   16076:	f88d 3010 	strb.w	r3, [sp, #16]
  luaT_trybinassocTM(L, p1, &aux, flip, res, event);
   1607a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1607e:	aa02      	add	r2, sp, #8
   16080:	9301      	str	r3, [sp, #4]
   16082:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16084:	9300      	str	r3, [sp, #0]
   16086:	9b08      	ldr	r3, [sp, #32]
   16088:	f7ff ffe4 	bl	16054 <luaT_trybinassocTM>
}
   1608c:	b007      	add	sp, #28
   1608e:	f85d fb04 	ldr.w	pc, [sp], #4

00016092 <luaT_callorderTM>:
** this substitution, the continuation has to know about it (to negate
** the result of r<l); bit CIST_LEQ in the call status keeps that
** information.
*/
int luaT_callorderTM (lua_State *L, const TValue *p1, const TValue *p2,
                      TMS event) {
   16092:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (callbinTM(L, p1, p2, L->top, event))  /* try original event */
   16094:	9300      	str	r3, [sp, #0]
   16096:	68c3      	ldr	r3, [r0, #12]
                      TMS event) {
   16098:	4604      	mov	r4, r0
   1609a:	460d      	mov	r5, r1
   1609c:	4616      	mov	r6, r2
  if (callbinTM(L, p1, p2, L->top, event))  /* try original event */
   1609e:	f7ff ffa0 	bl	15fe2 <callbinTM>
   160a2:	b158      	cbz	r0, 160bc <luaT_callorderTM+0x2a>
    return !l_isfalse(s2v(L->top));
   160a4:	68e3      	ldr	r3, [r4, #12]
   160a6:	7a18      	ldrb	r0, [r3, #8]
   160a8:	2801      	cmp	r0, #1
   160aa:	d005      	beq.n	160b8 <luaT_callorderTM+0x26>
   160ac:	f010 000f 	ands.w	r0, r0, #15
   160b0:	bf18      	it	ne
   160b2:	2001      	movne	r0, #1
      /* else error will remove this 'ci'; no need to clear mark */
  }
#endif
  luaG_ordererror(L, p1, p2);  /* no metamethod found */
  return 0;  /* to avoid warnings */
}
   160b4:	b002      	add	sp, #8
   160b6:	bd70      	pop	{r4, r5, r6, pc}
    return !l_isfalse(s2v(L->top));
   160b8:	2000      	movs	r0, #0
   160ba:	e7fb      	b.n	160b4 <luaT_callorderTM+0x22>
  luaG_ordererror(L, p1, p2);  /* no metamethod found */
   160bc:	4632      	mov	r2, r6
   160be:	4629      	mov	r1, r5
   160c0:	4620      	mov	r0, r4
   160c2:	f7ef f8e5 	bl	5290 <luaG_ordererror>

000160c6 <luaT_callorderiTM>:


int luaT_callorderiTM (lua_State *L, const TValue *p1, int v2,
                       int flip, int isfloat, TMS event) {
   160c6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   160c8:	461e      	mov	r6, r3
   160ca:	9b08      	ldr	r3, [sp, #32]
   160cc:	4605      	mov	r5, r0
   160ce:	460c      	mov	r4, r1
   160d0:	4610      	mov	r0, r2
  TValue aux; const TValue *p2;
  if (isfloat) {
   160d2:	b18b      	cbz	r3, 160f8 <luaT_callorderiTM+0x32>
    setfltvalue(&aux, cast_num(v2));
   160d4:	f7ea f95e 	bl	394 <__aeabi_i2d>
   160d8:	2313      	movs	r3, #19
   160da:	e9cd 0100 	strd	r0, r1, [sp]
  }
  else
    setivalue(&aux, v2);
   160de:	f88d 3008 	strb.w	r3, [sp, #8]
  if (flip) {  /* arguments were exchanged? */
   160e2:	b976      	cbnz	r6, 16102 <luaT_callorderiTM+0x3c>
   160e4:	4621      	mov	r1, r4
    p2 = p1; p1 = &aux;  /* correct them */
  }
  else
    p2 = &aux;
   160e6:	466c      	mov	r4, sp
  return luaT_callorderTM(L, p1, p2, event);
   160e8:	4622      	mov	r2, r4
   160ea:	4628      	mov	r0, r5
   160ec:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   160f0:	f7ff ffcf 	bl	16092 <luaT_callorderTM>
}
   160f4:	b004      	add	sp, #16
   160f6:	bd70      	pop	{r4, r5, r6, pc}
    setivalue(&aux, v2);
   160f8:	17d3      	asrs	r3, r2, #31
   160fa:	e9cd 2300 	strd	r2, r3, [sp]
   160fe:	2303      	movs	r3, #3
   16100:	e7ed      	b.n	160de <luaT_callorderiTM+0x18>
    p2 = p1; p1 = &aux;  /* correct them */
   16102:	4669      	mov	r1, sp
   16104:	e7f0      	b.n	160e8 <luaT_callorderiTM+0x22>

00016106 <luaT_adjustvarargs>:


void luaT_adjustvarargs (lua_State *L, int nfixparams, CallInfo *ci,
                         const Proto *p) {
   16106:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
  int i;
  int actual = cast_int(L->top - ci->func) - 1;  /* number of arguments */
   1610a:	6817      	ldr	r7, [r2, #0]
                         const Proto *p) {
   1610c:	4614      	mov	r4, r2
  int nextra = actual - nfixparams;  /* number of extra arguments */
   1610e:	43ca      	mvns	r2, r1
  int actual = cast_int(L->top - ci->func) - 1;  /* number of arguments */
   16110:	f8d0 c00c 	ldr.w	ip, [r0, #12]
                         const Proto *p) {
   16114:	460e      	mov	r6, r1
  int actual = cast_int(L->top - ci->func) - 1;  /* number of arguments */
   16116:	ebac 0707 	sub.w	r7, ip, r7
  int nextra = actual - nfixparams;  /* number of extra arguments */
   1611a:	eb02 1227 	add.w	r2, r2, r7, asr #4
  ci->u.l.nextraargs = nextra;
   1611e:	61a2      	str	r2, [r4, #24]
  luaD_checkstack(L, p->maxstacksize + 1);
   16120:	7a19      	ldrb	r1, [r3, #8]
   16122:	6983      	ldr	r3, [r0, #24]
   16124:	3101      	adds	r1, #1
   16126:	eba3 030c 	sub.w	r3, r3, ip
   1612a:	ebb1 1f23 	cmp.w	r1, r3, asr #4
                         const Proto *p) {
   1612e:	4605      	mov	r5, r0
  luaD_checkstack(L, p->maxstacksize + 1);
   16130:	db02      	blt.n	16138 <luaT_adjustvarargs+0x32>
   16132:	2201      	movs	r2, #1
   16134:	f7ef f9f6 	bl	5524 <luaD_growstack>
  /* copy function to the top of the stack */
  setobjs2s(L, L->top++, ci->func);
  /* move fixed parameters to the top of the stack */
  for (i = 1; i <= nfixparams; i++) {
   16138:	f04f 0c01 	mov.w	ip, #1
    setobjs2s(L, L->top++, ci->func + i);
    setnilvalue(s2v(ci->func + i));  /* erase original parameter (for GC) */
   1613c:	f04f 0800 	mov.w	r8, #0
  setobjs2s(L, L->top++, ci->func);
   16140:	68e9      	ldr	r1, [r5, #12]
   16142:	6820      	ldr	r0, [r4, #0]
   16144:	f101 0310 	add.w	r3, r1, #16
   16148:	60eb      	str	r3, [r5, #12]
   1614a:	e9d0 2300 	ldrd	r2, r3, [r0]
   1614e:	e9c1 2300 	strd	r2, r3, [r1]
   16152:	7a03      	ldrb	r3, [r0, #8]
   16154:	720b      	strb	r3, [r1, #8]
  for (i = 1; i <= nfixparams; i++) {
   16156:	f100 0110 	add.w	r1, r0, #16
   1615a:	45b4      	cmp	ip, r6
   1615c:	f101 0110 	add.w	r1, r1, #16
   16160:	dd06      	ble.n	16170 <luaT_adjustvarargs+0x6a>
  }
  ci->func += actual + 1;
  ci->top += actual + 1;
   16162:	6863      	ldr	r3, [r4, #4]
  ci->func += actual + 1;
   16164:	4438      	add	r0, r7
  ci->top += actual + 1;
   16166:	443b      	add	r3, r7
  ci->func += actual + 1;
   16168:	6020      	str	r0, [r4, #0]
  ci->top += actual + 1;
   1616a:	6063      	str	r3, [r4, #4]
  lua_assert(L->top <= ci->top && ci->top <= L->stack_last);
}
   1616c:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
    setobjs2s(L, L->top++, ci->func + i);
   16170:	68ea      	ldr	r2, [r5, #12]
   16172:	e951 ab04 	ldrd	sl, fp, [r1, #-16]
   16176:	f102 0310 	add.w	r3, r2, #16
   1617a:	60eb      	str	r3, [r5, #12]
   1617c:	e9c2 ab00 	strd	sl, fp, [r2]
   16180:	f811 3c08 	ldrb.w	r3, [r1, #-8]
  for (i = 1; i <= nfixparams; i++) {
   16184:	f10c 0c01 	add.w	ip, ip, #1
    setobjs2s(L, L->top++, ci->func + i);
   16188:	7213      	strb	r3, [r2, #8]
    setnilvalue(s2v(ci->func + i));  /* erase original parameter (for GC) */
   1618a:	f801 8c08 	strb.w	r8, [r1, #-8]
  for (i = 1; i <= nfixparams; i++) {
   1618e:	e7e4      	b.n	1615a <luaT_adjustvarargs+0x54>

00016190 <luaT_getvarargs>:


void luaT_getvarargs (lua_State *L, CallInfo *ci, StkId where, int wanted) {
   16190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int i;
  int nextra = ci->u.l.nextraargs;
  if (wanted < 0) {
   16192:	2b00      	cmp	r3, #0
void luaT_getvarargs (lua_State *L, CallInfo *ci, StkId where, int wanted) {
   16194:	4604      	mov	r4, r0
   16196:	460e      	mov	r6, r1
  int nextra = ci->u.l.nextraargs;
   16198:	698d      	ldr	r5, [r1, #24]
  if (wanted < 0) {
   1619a:	da18      	bge.n	161ce <luaT_getvarargs+0x3e>
    wanted = nextra;  /* get all extra arguments available */
    checkstackGCp(L, nextra, where);  /* ensure stack space */
   1619c:	6983      	ldr	r3, [r0, #24]
   1619e:	68c1      	ldr	r1, [r0, #12]
   161a0:	1a5b      	subs	r3, r3, r1
   161a2:	ebb5 1f23 	cmp.w	r5, r3, asr #4
   161a6:	db0e      	blt.n	161c6 <luaT_getvarargs+0x36>
   161a8:	69c3      	ldr	r3, [r0, #28]
   161aa:	1ad7      	subs	r7, r2, r3
   161ac:	6903      	ldr	r3, [r0, #16]
   161ae:	68db      	ldr	r3, [r3, #12]
   161b0:	2b00      	cmp	r3, #0
   161b2:	dd01      	ble.n	161b8 <luaT_getvarargs+0x28>
   161b4:	f7fe fa5f 	bl	14676 <luaC_step>
   161b8:	2201      	movs	r2, #1
   161ba:	4629      	mov	r1, r5
   161bc:	4620      	mov	r0, r4
   161be:	f7ef f9b1 	bl	5524 <luaD_growstack>
   161c2:	69e2      	ldr	r2, [r4, #28]
   161c4:	443a      	add	r2, r7
    L->top = where + nextra;  /* next instruction will need top */
   161c6:	eb02 1305 	add.w	r3, r2, r5, lsl #4
   161ca:	60e3      	str	r3, [r4, #12]
  int nextra = ci->u.l.nextraargs;
   161cc:	462b      	mov	r3, r5
  }
  for (i = 0; i < wanted && i < nextra; i++)
   161ce:	f06f 040f 	mvn.w	r4, #15
   161d2:	4617      	mov	r7, r2
   161d4:	f04f 0e00 	mov.w	lr, #0
   161d8:	436c      	muls	r4, r5
   161da:	4573      	cmp	r3, lr
   161dc:	4670      	mov	r0, lr
   161de:	dd0a      	ble.n	161f6 <luaT_getvarargs+0x66>
   161e0:	45ae      	cmp	lr, r5
   161e2:	f107 0710 	add.w	r7, r7, #16
   161e6:	db07      	blt.n	161f8 <luaT_getvarargs+0x68>
    setobjs2s(L, where + i, ci->func - nextra + i);
  for (; i < wanted; i++)   /* complete required results with nil */
    setnilvalue(s2v(where + i));
   161e8:	2400      	movs	r4, #0
   161ea:	3208      	adds	r2, #8
   161ec:	0101      	lsls	r1, r0, #4
  for (; i < wanted; i++)   /* complete required results with nil */
   161ee:	3001      	adds	r0, #1
   161f0:	4283      	cmp	r3, r0
    setnilvalue(s2v(where + i));
   161f2:	5454      	strb	r4, [r2, r1]
  for (; i < wanted; i++)   /* complete required results with nil */
   161f4:	dcfa      	bgt.n	161ec <luaT_getvarargs+0x5c>
}
   161f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    setobjs2s(L, where + i, ci->func - nextra + i);
   161f8:	6831      	ldr	r1, [r6, #0]
   161fa:	f10e 0e01 	add.w	lr, lr, #1
   161fe:	eb01 0c04 	add.w	ip, r1, r4
   16202:	e9dc 0100 	ldrd	r0, r1, [ip]
   16206:	e947 0104 	strd	r0, r1, [r7, #-16]
   1620a:	f89c 1008 	ldrb.w	r1, [ip, #8]
   1620e:	3410      	adds	r4, #16
   16210:	f807 1c08 	strb.w	r1, [r7, #-8]
  for (i = 0; i < wanted && i < nextra; i++)
   16214:	e7e1      	b.n	161da <luaT_getvarargs+0x4a>

00016216 <checkliteral>:
static void checkliteral (LoadState *S, const char *s, const char *msg) {
   16216:	b5f0      	push	{r4, r5, r6, r7, lr}
   16218:	4604      	mov	r4, r0
   1621a:	b085      	sub	sp, #20
  size_t len = strlen(s);
   1621c:	4608      	mov	r0, r1
static void checkliteral (LoadState *S, const char *s, const char *msg) {
   1621e:	460d      	mov	r5, r1
   16220:	4617      	mov	r7, r2
  size_t len = strlen(s);
   16222:	f7ea fe25 	bl	e70 <strlen>
   16226:	4606      	mov	r6, r0
  loadVector(S, buff, len);
   16228:	4602      	mov	r2, r0
   1622a:	a901      	add	r1, sp, #4
   1622c:	4620      	mov	r0, r4
   1622e:	f7f2 fbf7 	bl	8a20 <loadBlock>
  if (memcmp(s, buff, len) != 0)
   16232:	4632      	mov	r2, r6
   16234:	4628      	mov	r0, r5
   16236:	a901      	add	r1, sp, #4
   16238:	f000 fd10 	bl	16c5c <memcmp>
   1623c:	b118      	cbz	r0, 16246 <checkliteral+0x30>
    error(S, msg);
   1623e:	4639      	mov	r1, r7
   16240:	4620      	mov	r0, r4
   16242:	f7f2 fbdf 	bl	8a04 <error>
}
   16246:	b005      	add	sp, #20
   16248:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001624a <loadInt>:
  return cast_int(loadUnsigned(S, INT_MAX));
   1624a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1624e:	f7f2 bc0d 	b.w	8a6c <loadUnsigned>

00016252 <loadStringN>:
static TString *loadStringN (LoadState *S, Proto *p) {
   16252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16256:	4688      	mov	r8, r1
   16258:	b08a      	sub	sp, #40	; 0x28
  return loadUnsigned(S, ~(size_t)0);
   1625a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
static TString *loadStringN (LoadState *S, Proto *p) {
   1625e:	4607      	mov	r7, r0
  lua_State *L = S->L;
   16260:	6806      	ldr	r6, [r0, #0]
  return loadUnsigned(S, ~(size_t)0);
   16262:	f7f2 fc03 	bl	8a6c <loadUnsigned>
  if (size == 0)  /* no string? */
   16266:	4604      	mov	r4, r0
   16268:	b1d0      	cbz	r0, 162a0 <loadStringN+0x4e>
  else if (--size <= LUAI_MAXSHORTLEN) {  /* short string? */
   1626a:	1e45      	subs	r5, r0, #1
   1626c:	2d28      	cmp	r5, #40	; 0x28
   1626e:	d81b      	bhi.n	162a8 <loadStringN+0x56>
    loadVector(S, buff, size);  /* load string into buffer */
   16270:	462a      	mov	r2, r5
   16272:	4669      	mov	r1, sp
   16274:	4638      	mov	r0, r7
   16276:	f7f2 fbd3 	bl	8a20 <loadBlock>
    ts = luaS_newlstr(L, buff, size);  /* create string */
   1627a:	462a      	mov	r2, r5
   1627c:	4669      	mov	r1, sp
   1627e:	4630      	mov	r0, r6
   16280:	f7ff fc4c 	bl	15b1c <luaS_newlstr>
   16284:	4604      	mov	r4, r0
  luaC_objbarrier(L, p, ts);
   16286:	f898 3005 	ldrb.w	r3, [r8, #5]
   1628a:	069b      	lsls	r3, r3, #26
   1628c:	d508      	bpl.n	162a0 <loadStringN+0x4e>
   1628e:	7963      	ldrb	r3, [r4, #5]
   16290:	f013 0f18 	tst.w	r3, #24
   16294:	d004      	beq.n	162a0 <loadStringN+0x4e>
   16296:	4622      	mov	r2, r4
   16298:	4641      	mov	r1, r8
   1629a:	4630      	mov	r0, r6
   1629c:	f7fe f92f 	bl	144fe <luaC_barrier_>
}
   162a0:	4620      	mov	r0, r4
   162a2:	b00a      	add	sp, #40	; 0x28
   162a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ts = luaS_createlngstrobj(L, size);  /* create string */
   162a8:	4629      	mov	r1, r5
   162aa:	4630      	mov	r0, r6
   162ac:	f7ff fc12 	bl	15ad4 <luaS_createlngstrobj>
   162b0:	4604      	mov	r4, r0
    setsvalue2s(L, L->top, ts);  /* anchor it ('loadVector' can GC) */
   162b2:	68f2      	ldr	r2, [r6, #12]
   162b4:	6010      	str	r0, [r2, #0]
   162b6:	7903      	ldrb	r3, [r0, #4]
    luaD_inctop(L);
   162b8:	4630      	mov	r0, r6
    setsvalue2s(L, L->top, ts);  /* anchor it ('loadVector' can GC) */
   162ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   162be:	7213      	strb	r3, [r2, #8]
    luaD_inctop(L);
   162c0:	f7fc fe0a 	bl	12ed8 <luaD_inctop>
    loadVector(S, getstr(ts), size);  /* load directly in final place */
   162c4:	462a      	mov	r2, r5
   162c6:	4638      	mov	r0, r7
   162c8:	f104 0110 	add.w	r1, r4, #16
   162cc:	f7f2 fba8 	bl	8a20 <loadBlock>
    L->top--;  /* pop string */
   162d0:	68f3      	ldr	r3, [r6, #12]
   162d2:	3b10      	subs	r3, #16
   162d4:	60f3      	str	r3, [r6, #12]
   162d6:	e7d6      	b.n	16286 <loadStringN+0x34>

000162d8 <l_strcmp>:
static int l_strcmp (const TString *ls, const TString *rs) {
   162d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t ll = tsslen(ls);
   162da:	7902      	ldrb	r2, [r0, #4]
  const char *l = getstr(ls);
   162dc:	f100 0610 	add.w	r6, r0, #16
  size_t ll = tsslen(ls);
   162e0:	2a04      	cmp	r2, #4
  size_t lr = tsslen(rs);
   162e2:	790a      	ldrb	r2, [r1, #4]
  size_t ll = tsslen(ls);
   162e4:	bf0c      	ite	eq
   162e6:	79c5      	ldrbeq	r5, [r0, #7]
   162e8:	68c5      	ldrne	r5, [r0, #12]
  size_t lr = tsslen(rs);
   162ea:	2a04      	cmp	r2, #4
   162ec:	bf0c      	ite	eq
   162ee:	79cc      	ldrbeq	r4, [r1, #7]
   162f0:	68cc      	ldrne	r4, [r1, #12]
  const char *r = getstr(rs);
   162f2:	f101 0710 	add.w	r7, r1, #16
    int temp = strcoll(l, r);
   162f6:	4639      	mov	r1, r7
   162f8:	4630      	mov	r0, r6
   162fa:	f000 fd4f 	bl	16d9c <strcoll>
    if (temp != 0)  /* not equal? */
   162fe:	b938      	cbnz	r0, 16310 <l_strcmp+0x38>
      size_t len = strlen(l);  /* index of first '\0' in both strings */
   16300:	4630      	mov	r0, r6
   16302:	f7ea fdb5 	bl	e70 <strlen>
      if (len == lr)  /* 'rs' is finished? */
   16306:	4284      	cmp	r4, r0
   16308:	d103      	bne.n	16312 <l_strcmp+0x3a>
        return (len == ll) ? 0 : 1;  /* check 'ls' */
   1630a:	1b28      	subs	r0, r5, r4
   1630c:	bf18      	it	ne
   1630e:	2001      	movne	r0, #1
}
   16310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if (len == ll)  /* 'ls' is finished? */
   16312:	4285      	cmp	r5, r0
   16314:	d005      	beq.n	16322 <l_strcmp+0x4a>
      len++;
   16316:	3001      	adds	r0, #1
      l += len; ll -= len; r += len; lr -= len;
   16318:	4406      	add	r6, r0
   1631a:	1a2d      	subs	r5, r5, r0
   1631c:	4407      	add	r7, r0
   1631e:	1a24      	subs	r4, r4, r0
  for (;;) {  /* for each segment */
   16320:	e7e9      	b.n	162f6 <l_strcmp+0x1e>
        return -1;  /* 'ls' is less than 'rs' ('rs' is not finished) */
   16322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16326:	e7f3      	b.n	16310 <l_strcmp+0x38>

00016328 <l_strton>:
static int l_strton (const TValue *obj, TValue *result) {
   16328:	b510      	push	{r4, lr}
  if (!cvt2num(obj))  /* is object not a string? */
   1632a:	7a03      	ldrb	r3, [r0, #8]
static int l_strton (const TValue *obj, TValue *result) {
   1632c:	4604      	mov	r4, r0
  if (!cvt2num(obj))  /* is object not a string? */
   1632e:	f003 030f 	and.w	r3, r3, #15
   16332:	2b04      	cmp	r3, #4
   16334:	d10e      	bne.n	16354 <l_strton+0x2c>
    return (luaO_str2num(svalue(obj), result) == vslen(obj) + 1);
   16336:	6800      	ldr	r0, [r0, #0]
   16338:	3010      	adds	r0, #16
   1633a:	f7f0 f91f 	bl	657c <luaO_str2num>
   1633e:	6823      	ldr	r3, [r4, #0]
   16340:	791a      	ldrb	r2, [r3, #4]
   16342:	2a04      	cmp	r2, #4
   16344:	bf0c      	ite	eq
   16346:	79db      	ldrbeq	r3, [r3, #7]
   16348:	68db      	ldrne	r3, [r3, #12]
   1634a:	3301      	adds	r3, #1
   1634c:	1ac3      	subs	r3, r0, r3
   1634e:	4258      	negs	r0, r3
   16350:	4158      	adcs	r0, r3
}
   16352:	bd10      	pop	{r4, pc}
    return 0;
   16354:	2000      	movs	r0, #0
   16356:	e7fc      	b.n	16352 <l_strton+0x2a>

00016358 <copy2buff>:
static void copy2buff (StkId top, int n, char *buff) {
   16358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1635c:	4680      	mov	r8, r0
   1635e:	460c      	mov	r4, r1
   16360:	4617      	mov	r7, r2
  size_t tl = 0;  /* size already copied */
   16362:	2500      	movs	r5, #0
    size_t l = vslen(s2v(top - n));  /* length of string being copied */
   16364:	f06f 090f 	mvn.w	r9, #15
   16368:	fb09 f304 	mul.w	r3, r9, r4
   1636c:	f858 1003 	ldr.w	r1, [r8, r3]
   16370:	1978      	adds	r0, r7, r5
   16372:	790b      	ldrb	r3, [r1, #4]
   16374:	3110      	adds	r1, #16
   16376:	2b04      	cmp	r3, #4
   16378:	bf0c      	ite	eq
   1637a:	f811 6c09 	ldrbeq.w	r6, [r1, #-9]
   1637e:	f851 6c04 	ldrne.w	r6, [r1, #-4]
   16382:	4632      	mov	r2, r6
   16384:	f000 fc7a 	bl	16c7c <memcpy>
  } while (--n > 0);
   16388:	3c01      	subs	r4, #1
    tl += l;
   1638a:	4435      	add	r5, r6
  } while (--n > 0);
   1638c:	d1ec      	bne.n	16368 <copy2buff+0x10>
}
   1638e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00016392 <lessequalothers>:
static int lessequalothers (lua_State *L, const TValue *l, const TValue *r) {
   16392:	b510      	push	{r4, lr}
  if (ttisstring(l) && ttisstring(r))  /* both are strings? */
   16394:	7a0b      	ldrb	r3, [r1, #8]
static int lessequalothers (lua_State *L, const TValue *l, const TValue *r) {
   16396:	460c      	mov	r4, r1
  if (ttisstring(l) && ttisstring(r))  /* both are strings? */
   16398:	f003 030f 	and.w	r3, r3, #15
   1639c:	2b04      	cmp	r3, #4
   1639e:	d104      	bne.n	163aa <lessequalothers+0x18>
   163a0:	7a13      	ldrb	r3, [r2, #8]
   163a2:	f003 030f 	and.w	r3, r3, #15
   163a6:	2b04      	cmp	r3, #4
   163a8:	d005      	beq.n	163b6 <lessequalothers+0x24>
    return luaT_callorderTM(L, l, r, TM_LE);
   163aa:	4621      	mov	r1, r4
}
   163ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return luaT_callorderTM(L, l, r, TM_LE);
   163b0:	2315      	movs	r3, #21
   163b2:	f7ff be6e 	b.w	16092 <luaT_callorderTM>
    return l_strcmp(tsvalue(l), tsvalue(r)) <= 0;
   163b6:	6811      	ldr	r1, [r2, #0]
   163b8:	6820      	ldr	r0, [r4, #0]
   163ba:	f7ff ff8d 	bl	162d8 <l_strcmp>
   163be:	2800      	cmp	r0, #0
   163c0:	bfcc      	ite	gt
   163c2:	2000      	movgt	r0, #0
   163c4:	2001      	movle	r0, #1
}
   163c6:	bd10      	pop	{r4, pc}

000163c8 <lessthanothers>:
static int lessthanothers (lua_State *L, const TValue *l, const TValue *r) {
   163c8:	b510      	push	{r4, lr}
  if (ttisstring(l) && ttisstring(r))  /* both are strings? */
   163ca:	7a0b      	ldrb	r3, [r1, #8]
static int lessthanothers (lua_State *L, const TValue *l, const TValue *r) {
   163cc:	460c      	mov	r4, r1
  if (ttisstring(l) && ttisstring(r))  /* both are strings? */
   163ce:	f003 030f 	and.w	r3, r3, #15
   163d2:	2b04      	cmp	r3, #4
   163d4:	d104      	bne.n	163e0 <lessthanothers+0x18>
   163d6:	7a13      	ldrb	r3, [r2, #8]
   163d8:	f003 030f 	and.w	r3, r3, #15
   163dc:	2b04      	cmp	r3, #4
   163de:	d005      	beq.n	163ec <lessthanothers+0x24>
    return luaT_callorderTM(L, l, r, TM_LT);
   163e0:	4621      	mov	r1, r4
}
   163e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return luaT_callorderTM(L, l, r, TM_LT);
   163e6:	2314      	movs	r3, #20
   163e8:	f7ff be53 	b.w	16092 <luaT_callorderTM>
    return l_strcmp(tsvalue(l), tsvalue(r)) < 0;
   163ec:	6811      	ldr	r1, [r2, #0]
   163ee:	6820      	ldr	r0, [r4, #0]
   163f0:	f7ff ff72 	bl	162d8 <l_strcmp>
   163f4:	0fc0      	lsrs	r0, r0, #31
}
   163f6:	bd10      	pop	{r4, pc}

000163f8 <luaV_tonumber_>:
int luaV_tonumber_ (const TValue *obj, lua_Number *n) {
   163f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (ttisinteger(obj)) {
   163fa:	7a02      	ldrb	r2, [r0, #8]
int luaV_tonumber_ (const TValue *obj, lua_Number *n) {
   163fc:	460c      	mov	r4, r1
  if (ttisinteger(obj)) {
   163fe:	2a03      	cmp	r2, #3
   16400:	d107      	bne.n	16412 <luaV_tonumber_+0x1a>
    *n = cast_num(ivalue(obj));
   16402:	c803      	ldmia	r0, {r0, r1}
    *n = nvalue(&v);  /* convert result of 'luaO_str2num' to a float */
   16404:	f7ea f802 	bl	40c <__aeabi_l2d>
   16408:	e9c4 0100 	strd	r0, r1, [r4]
    return 1;
   1640c:	2001      	movs	r0, #1
}
   1640e:	b004      	add	sp, #16
   16410:	bd10      	pop	{r4, pc}
  else if (l_strton(obj, &v)) {  /* string coercible to number? */
   16412:	4669      	mov	r1, sp
   16414:	f7ff ff88 	bl	16328 <l_strton>
   16418:	2800      	cmp	r0, #0
   1641a:	d0f8      	beq.n	1640e <luaV_tonumber_+0x16>
    *n = nvalue(&v);  /* convert result of 'luaO_str2num' to a float */
   1641c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   16420:	2b03      	cmp	r3, #3
   16422:	d102      	bne.n	1642a <luaV_tonumber_+0x32>
   16424:	e9dd 0100 	ldrd	r0, r1, [sp]
   16428:	e7ec      	b.n	16404 <luaV_tonumber_+0xc>
   1642a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1642e:	e7eb      	b.n	16408 <luaV_tonumber_+0x10>

00016430 <LTnum>:
l_sinline int LTnum (const TValue *l, const TValue *r) {
   16430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      return li < ivalue(r);  /* both are integers */
   16432:	e9d1 4500 	ldrd	r4, r5, [r1]
  if (ttisinteger(l)) {
   16436:	7a02      	ldrb	r2, [r0, #8]
    if (ttisinteger(r))
   16438:	7a0b      	ldrb	r3, [r1, #8]
  if (ttisinteger(l)) {
   1643a:	2a03      	cmp	r2, #3
   1643c:	d132      	bne.n	164a4 <LTnum+0x74>
    lua_Integer li = ivalue(l);
   1643e:	e9d0 7600 	ldrd	r7, r6, [r0]
    if (ttisinteger(r))
   16442:	2b03      	cmp	r3, #3
   16444:	d107      	bne.n	16456 <LTnum+0x26>
      return li < ivalue(r);  /* both are integers */
   16446:	42a7      	cmp	r7, r4
   16448:	eb76 0305 	sbcs.w	r3, r6, r5
      return fi < i;   /* compare them as integers */
   1644c:	bfb4      	ite	lt
   1644e:	2001      	movlt	r0, #1
   16450:	2000      	movge	r0, #0
}
   16452:	b003      	add	sp, #12
   16454:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (l_intfitsf(i))
   16456:	2200      	movs	r2, #0
   16458:	42ba      	cmp	r2, r7
   1645a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1645e:	f506 1300 	add.w	r3, r6, #2097152	; 0x200000
   16462:	eb72 0303 	sbcs.w	r3, r2, r3
   16466:	d30d      	bcc.n	16484 <LTnum+0x54>
    return luai_numlt(cast_num(i), f);  /* compare them as floats */
   16468:	4638      	mov	r0, r7
   1646a:	4631      	mov	r1, r6
   1646c:	f7e9 ffce 	bl	40c <__aeabi_l2d>
   16470:	4602      	mov	r2, r0
   16472:	460b      	mov	r3, r1
      return f > 0;  /* greater? */
   16474:	4620      	mov	r0, r4
   16476:	4629      	mov	r1, r5
   16478:	f7ea fa86 	bl	988 <__aeabi_dcmpgt>
      return f < 0;  /* less? */
   1647c:	3800      	subs	r0, #0
   1647e:	bf18      	it	ne
   16480:	2001      	movne	r0, #1
   16482:	e7e6      	b.n	16452 <LTnum+0x22>
    if (luaV_flttointeger(f, &fi, F2Iceil))  /* fi = ceil(f) */
   16484:	2302      	movs	r3, #2
   16486:	466a      	mov	r2, sp
   16488:	4620      	mov	r0, r4
   1648a:	4629      	mov	r1, r5
   1648c:	f7f2 fcb6 	bl	8dfc <luaV_flttointeger>
   16490:	b128      	cbz	r0, 1649e <LTnum+0x6e>
      return i < fi;   /* compare them as integers */
   16492:	9b00      	ldr	r3, [sp, #0]
   16494:	429f      	cmp	r7, r3
   16496:	9b01      	ldr	r3, [sp, #4]
   16498:	eb76 0303 	sbcs.w	r3, r6, r3
   1649c:	e7d6      	b.n	1644c <LTnum+0x1c>
      return f > 0;  /* greater? */
   1649e:	2200      	movs	r2, #0
   164a0:	2300      	movs	r3, #0
   164a2:	e7e7      	b.n	16474 <LTnum+0x44>
    if (ttisfloat(r))
   164a4:	2b13      	cmp	r3, #19
    lua_Number lf = fltvalue(l);  /* 'l' must be float */
   164a6:	e9d0 6700 	ldrd	r6, r7, [r0]
    if (ttisfloat(r))
   164aa:	d106      	bne.n	164ba <LTnum+0x8a>
      return luai_numlt(lf, fltvalue(r));  /* both are float */
   164ac:	4622      	mov	r2, r4
   164ae:	462b      	mov	r3, r5
      return f < 0;  /* less? */
   164b0:	4630      	mov	r0, r6
   164b2:	4639      	mov	r1, r7
   164b4:	f7ea fa4a 	bl	94c <__aeabi_dcmplt>
   164b8:	e7e0      	b.n	1647c <LTnum+0x4c>
  if (l_intfitsf(i))
   164ba:	2200      	movs	r2, #0
   164bc:	42a2      	cmp	r2, r4
   164be:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   164c2:	f505 1300 	add.w	r3, r5, #2097152	; 0x200000
   164c6:	eb72 0303 	sbcs.w	r3, r2, r3
   164ca:	d306      	bcc.n	164da <LTnum+0xaa>
    return luai_numlt(f, cast_num(i));  /* compare them as floats */
   164cc:	4620      	mov	r0, r4
   164ce:	4629      	mov	r1, r5
   164d0:	f7e9 ff9c 	bl	40c <__aeabi_l2d>
   164d4:	4602      	mov	r2, r0
   164d6:	460b      	mov	r3, r1
   164d8:	e7ea      	b.n	164b0 <LTnum+0x80>
    if (luaV_flttointeger(f, &fi, F2Ifloor))  /* fi = floor(f) */
   164da:	2301      	movs	r3, #1
   164dc:	466a      	mov	r2, sp
   164de:	4630      	mov	r0, r6
   164e0:	4639      	mov	r1, r7
   164e2:	f7f2 fc8b 	bl	8dfc <luaV_flttointeger>
   164e6:	b120      	cbz	r0, 164f2 <LTnum+0xc2>
      return fi < i;   /* compare them as integers */
   164e8:	9b00      	ldr	r3, [sp, #0]
   164ea:	42a3      	cmp	r3, r4
   164ec:	9b01      	ldr	r3, [sp, #4]
   164ee:	41ab      	sbcs	r3, r5
   164f0:	e7ac      	b.n	1644c <LTnum+0x1c>
      return f < 0;  /* less? */
   164f2:	2200      	movs	r2, #0
   164f4:	2300      	movs	r3, #0
   164f6:	e7db      	b.n	164b0 <LTnum+0x80>

000164f8 <LEnum>:
l_sinline int LEnum (const TValue *l, const TValue *r) {
   164f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      return li <= ivalue(r);  /* both are integers */
   164fa:	e9d1 4500 	ldrd	r4, r5, [r1]
  if (ttisinteger(l)) {
   164fe:	7a02      	ldrb	r2, [r0, #8]
    if (ttisinteger(r))
   16500:	7a0b      	ldrb	r3, [r1, #8]
  if (ttisinteger(l)) {
   16502:	2a03      	cmp	r2, #3
   16504:	d135      	bne.n	16572 <LEnum+0x7a>
    lua_Integer li = ivalue(l);
   16506:	e9d0 7600 	ldrd	r7, r6, [r0]
    if (ttisinteger(r))
   1650a:	2b03      	cmp	r3, #3
   1650c:	d107      	bne.n	1651e <LEnum+0x26>
      return li <= ivalue(r);  /* both are integers */
   1650e:	42bc      	cmp	r4, r7
   16510:	eb75 0306 	sbcs.w	r3, r5, r6
      return fi <= i;   /* compare them as integers */
   16514:	bfac      	ite	ge
   16516:	2001      	movge	r0, #1
   16518:	2000      	movlt	r0, #0
}
   1651a:	b003      	add	sp, #12
   1651c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (l_intfitsf(i))
   1651e:	2200      	movs	r2, #0
   16520:	42ba      	cmp	r2, r7
   16522:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   16526:	f506 1300 	add.w	r3, r6, #2097152	; 0x200000
   1652a:	eb72 0303 	sbcs.w	r3, r2, r3
   1652e:	d30d      	bcc.n	1654c <LEnum+0x54>
    return luai_numle(cast_num(i), f);  /* compare them as floats */
   16530:	4638      	mov	r0, r7
   16532:	4631      	mov	r1, r6
   16534:	f7e9 ff6a 	bl	40c <__aeabi_l2d>
   16538:	4602      	mov	r2, r0
   1653a:	460b      	mov	r3, r1
   1653c:	4620      	mov	r0, r4
   1653e:	4629      	mov	r1, r5
   16540:	f7ea fa18 	bl	974 <__aeabi_dcmpge>
      return f < 0;  /* less? */
   16544:	3800      	subs	r0, #0
   16546:	bf18      	it	ne
   16548:	2001      	movne	r0, #1
   1654a:	e7e6      	b.n	1651a <LEnum+0x22>
    if (luaV_flttointeger(f, &fi, F2Ifloor))  /* fi = floor(f) */
   1654c:	2301      	movs	r3, #1
   1654e:	466a      	mov	r2, sp
   16550:	4620      	mov	r0, r4
   16552:	4629      	mov	r1, r5
   16554:	f7f2 fc52 	bl	8dfc <luaV_flttointeger>
   16558:	b120      	cbz	r0, 16564 <LEnum+0x6c>
      return i <= fi;   /* compare them as integers */
   1655a:	9b00      	ldr	r3, [sp, #0]
   1655c:	42bb      	cmp	r3, r7
   1655e:	9b01      	ldr	r3, [sp, #4]
   16560:	41b3      	sbcs	r3, r6
   16562:	e7d7      	b.n	16514 <LEnum+0x1c>
      return f > 0;  /* greater? */
   16564:	2200      	movs	r2, #0
   16566:	2300      	movs	r3, #0
   16568:	4620      	mov	r0, r4
   1656a:	4629      	mov	r1, r5
   1656c:	f7ea fa0c 	bl	988 <__aeabi_dcmpgt>
   16570:	e7e8      	b.n	16544 <LEnum+0x4c>
    if (ttisfloat(r))
   16572:	2b13      	cmp	r3, #19
    lua_Number lf = fltvalue(l);  /* 'l' must be float */
   16574:	e9d0 6700 	ldrd	r6, r7, [r0]
    if (ttisfloat(r))
   16578:	d106      	bne.n	16588 <LEnum+0x90>
      return luai_numle(lf, fltvalue(r));  /* both are float */
   1657a:	4622      	mov	r2, r4
   1657c:	462b      	mov	r3, r5
    return luai_numle(f, cast_num(i));  /* compare them as floats */
   1657e:	4630      	mov	r0, r6
   16580:	4639      	mov	r1, r7
   16582:	f7ea f9ed 	bl	960 <__aeabi_dcmple>
   16586:	e7dd      	b.n	16544 <LEnum+0x4c>
  if (l_intfitsf(i))
   16588:	2200      	movs	r2, #0
   1658a:	42a2      	cmp	r2, r4
   1658c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   16590:	f505 1300 	add.w	r3, r5, #2097152	; 0x200000
   16594:	eb72 0303 	sbcs.w	r3, r2, r3
   16598:	d306      	bcc.n	165a8 <LEnum+0xb0>
    return luai_numle(f, cast_num(i));  /* compare them as floats */
   1659a:	4620      	mov	r0, r4
   1659c:	4629      	mov	r1, r5
   1659e:	f7e9 ff35 	bl	40c <__aeabi_l2d>
   165a2:	4602      	mov	r2, r0
   165a4:	460b      	mov	r3, r1
   165a6:	e7ea      	b.n	1657e <LEnum+0x86>
    if (luaV_flttointeger(f, &fi, F2Iceil))  /* fi = ceil(f) */
   165a8:	2302      	movs	r3, #2
   165aa:	466a      	mov	r2, sp
   165ac:	4630      	mov	r0, r6
   165ae:	4639      	mov	r1, r7
   165b0:	f7f2 fc24 	bl	8dfc <luaV_flttointeger>
   165b4:	b128      	cbz	r0, 165c2 <LEnum+0xca>
      return fi <= i;   /* compare them as integers */
   165b6:	9b00      	ldr	r3, [sp, #0]
   165b8:	429c      	cmp	r4, r3
   165ba:	9b01      	ldr	r3, [sp, #4]
   165bc:	eb75 0303 	sbcs.w	r3, r5, r3
   165c0:	e7a8      	b.n	16514 <LEnum+0x1c>
      return f < 0;  /* less? */
   165c2:	2200      	movs	r2, #0
   165c4:	2300      	movs	r3, #0
   165c6:	4630      	mov	r0, r6
   165c8:	4639      	mov	r1, r7
   165ca:	f7ea f9bf 	bl	94c <__aeabi_dcmplt>
   165ce:	e7b9      	b.n	16544 <LEnum+0x4c>

000165d0 <luaV_tointegerns>:
int luaV_tointegerns (const TValue *obj, lua_Integer *p, F2Imod mode) {
   165d0:	4613      	mov	r3, r2
  if (ttisfloat(obj))
   165d2:	7a02      	ldrb	r2, [r0, #8]
   165d4:	2a13      	cmp	r2, #19
   165d6:	d103      	bne.n	165e0 <luaV_tointegerns+0x10>
    return luaV_flttointeger(fltvalue(obj), p, mode);
   165d8:	460a      	mov	r2, r1
   165da:	c803      	ldmia	r0, {r0, r1}
   165dc:	f7f2 bc0e 	b.w	8dfc <luaV_flttointeger>
  else if (ttisinteger(obj)) {
   165e0:	2a03      	cmp	r2, #3
   165e2:	d105      	bne.n	165f0 <luaV_tointegerns+0x20>
    *p = ivalue(obj);
   165e4:	e9d0 2300 	ldrd	r2, r3, [r0]
    return 1;
   165e8:	2001      	movs	r0, #1
    *p = ivalue(obj);
   165ea:	e9c1 2300 	strd	r2, r3, [r1]
    return 1;
   165ee:	4770      	bx	lr
    return 0;
   165f0:	2000      	movs	r0, #0
}
   165f2:	4770      	bx	lr

000165f4 <luaV_tointeger>:
int luaV_tointeger (const TValue *obj, lua_Integer *p, F2Imod mode) {
   165f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   165f6:	b085      	sub	sp, #20
  if (l_strton(obj, &v))  /* does 'obj' point to a numerical string? */
   165f8:	466f      	mov	r7, sp
int luaV_tointeger (const TValue *obj, lua_Integer *p, F2Imod mode) {
   165fa:	460d      	mov	r5, r1
  if (l_strton(obj, &v))  /* does 'obj' point to a numerical string? */
   165fc:	4639      	mov	r1, r7
int luaV_tointeger (const TValue *obj, lua_Integer *p, F2Imod mode) {
   165fe:	4604      	mov	r4, r0
   16600:	4616      	mov	r6, r2
  if (l_strton(obj, &v))  /* does 'obj' point to a numerical string? */
   16602:	f7ff fe91 	bl	16328 <l_strton>
  return luaV_tointegerns(obj, p, mode);
   16606:	4632      	mov	r2, r6
   16608:	4629      	mov	r1, r5
   1660a:	2800      	cmp	r0, #0
   1660c:	bf0c      	ite	eq
   1660e:	4620      	moveq	r0, r4
   16610:	4638      	movne	r0, r7
   16612:	f7ff ffdd 	bl	165d0 <luaV_tointegerns>
}
   16616:	b005      	add	sp, #20
   16618:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001661a <luaV_equalobj>:
int luaV_equalobj (lua_State *L, const TValue *t1, const TValue *t2) {
   1661a:	b570      	push	{r4, r5, r6, lr}
   1661c:	4614      	mov	r4, r2
  if (ttypetag(t1) != ttypetag(t2)) {  /* not the same variant? */
   1661e:	7a0b      	ldrb	r3, [r1, #8]
   16620:	7a12      	ldrb	r2, [r2, #8]
int luaV_equalobj (lua_State *L, const TValue *t1, const TValue *t2) {
   16622:	460d      	mov	r5, r1
  if (ttypetag(t1) != ttypetag(t2)) {  /* not the same variant? */
   16624:	405a      	eors	r2, r3
   16626:	0691      	lsls	r1, r2, #26
int luaV_equalobj (lua_State *L, const TValue *t1, const TValue *t2) {
   16628:	4606      	mov	r6, r0
   1662a:	b086      	sub	sp, #24
  if (ttypetag(t1) != ttypetag(t2)) {  /* not the same variant? */
   1662c:	d021      	beq.n	16672 <luaV_equalobj+0x58>
    if (ttype(t1) != ttype(t2) || ttype(t1) != LUA_TNUMBER)
   1662e:	f012 060f 	ands.w	r6, r2, #15
   16632:	d109      	bne.n	16648 <luaV_equalobj+0x2e>
   16634:	f003 030f 	and.w	r3, r3, #15
   16638:	2b03      	cmp	r3, #3
   1663a:	d105      	bne.n	16648 <luaV_equalobj+0x2e>
      return (luaV_tointegerns(t1, &i1, F2Ieq) &&
   1663c:	4632      	mov	r2, r6
   1663e:	4628      	mov	r0, r5
   16640:	a902      	add	r1, sp, #8
   16642:	f7ff ffc5 	bl	165d0 <luaV_tointegerns>
              luaV_tointegerns(t2, &i2, F2Ieq) &&
   16646:	b908      	cbnz	r0, 1664c <luaV_equalobj+0x32>
    return !l_isfalse(s2v(L->top));
   16648:	2000      	movs	r0, #0
   1664a:	e010      	b.n	1666e <luaV_equalobj+0x54>
              luaV_tointegerns(t2, &i2, F2Ieq) &&
   1664c:	4632      	mov	r2, r6
   1664e:	4620      	mov	r0, r4
   16650:	a904      	add	r1, sp, #16
   16652:	f7ff ffbd 	bl	165d0 <luaV_tointegerns>
      return (luaV_tointegerns(t1, &i1, F2Ieq) &&
   16656:	2800      	cmp	r0, #0
   16658:	d0f6      	beq.n	16648 <luaV_equalobj+0x2e>
              luaV_tointegerns(t2, &i2, F2Ieq) &&
   1665a:	e9dd 0202 	ldrd	r0, r2, [sp, #8]
   1665e:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
    case LUA_VNUMINT: return (ivalue(t1) == ivalue(t2));
   16662:	429a      	cmp	r2, r3
   16664:	bf08      	it	eq
   16666:	4288      	cmpeq	r0, r1
   16668:	bf0c      	ite	eq
   1666a:	2001      	moveq	r0, #1
   1666c:	2000      	movne	r0, #0
}
   1666e:	b006      	add	sp, #24
   16670:	bd70      	pop	{r4, r5, r6, pc}
  switch (ttypetag(t1)) {
   16672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16676:	2b16      	cmp	r3, #22
   16678:	d81c      	bhi.n	166b4 <luaV_equalobj+0x9a>
   1667a:	e8df f003 	tbb	[pc, r3]
   1667e:	2c2c      	.short	0x2c2c
   16680:	5c1b0c1b 	.word	0x5c1b0c1b
   16684:	1b1b281b 	.word	0x1b1b281b
   16688:	1b1b1b1b 	.word	0x1b1b1b1b
   1668c:	2c1b1b1b 	.word	0x2c1b1b1b
   16690:	1b21111b 	.word	0x1b21111b
   16694:	1b          	.byte	0x1b
   16695:	00          	.byte	0x00
    case LUA_VNUMINT: return (ivalue(t1) == ivalue(t2));
   16696:	e9d5 0200 	ldrd	r0, r2, [r5]
   1669a:	e9d4 1300 	ldrd	r1, r3, [r4]
   1669e:	e7e0      	b.n	16662 <luaV_equalobj+0x48>
    case LUA_VNUMFLT: return luai_numeq(fltvalue(t1), fltvalue(t2));
   166a0:	e9d4 2300 	ldrd	r2, r3, [r4]
   166a4:	e9d5 0100 	ldrd	r0, r1, [r5]
   166a8:	f7ea f946 	bl	938 <__aeabi_dcmpeq>
   166ac:	3800      	subs	r0, #0
   166ae:	bf18      	it	ne
   166b0:	2001      	movne	r0, #1
   166b2:	e7dc      	b.n	1666e <luaV_equalobj+0x54>
    case LUA_VSHRSTR: return eqshrstr(tsvalue(t1), tsvalue(t2));
   166b4:	6828      	ldr	r0, [r5, #0]
   166b6:	6823      	ldr	r3, [r4, #0]
   166b8:	1ac2      	subs	r2, r0, r3
   166ba:	4250      	negs	r0, r2
   166bc:	4150      	adcs	r0, r2
   166be:	e7d6      	b.n	1666e <luaV_equalobj+0x54>
    case LUA_VLNGSTR: return luaS_eqlngstr(tsvalue(t1), tsvalue(t2));
   166c0:	6821      	ldr	r1, [r4, #0]
   166c2:	6828      	ldr	r0, [r5, #0]
}
   166c4:	b006      	add	sp, #24
   166c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    case LUA_VLNGSTR: return luaS_eqlngstr(tsvalue(t1), tsvalue(t2));
   166ca:	f7ff b926 	b.w	1591a <luaS_eqlngstr>
      if (uvalue(t1) == uvalue(t2)) return 1;
   166ce:	682b      	ldr	r3, [r5, #0]
   166d0:	6822      	ldr	r2, [r4, #0]
   166d2:	4293      	cmp	r3, r2
   166d4:	d101      	bne.n	166da <luaV_equalobj+0xc0>
  switch (ttypetag(t1)) {
   166d6:	2001      	movs	r0, #1
   166d8:	e7c9      	b.n	1666e <luaV_equalobj+0x54>
      else if (L == NULL) return 0;
   166da:	2800      	cmp	r0, #0
   166dc:	d0b4      	beq.n	16648 <luaV_equalobj+0x2e>
      tm = fasttm(L, uvalue(t1)->metatable, TM_EQ);
   166de:	68d8      	ldr	r0, [r3, #12]
   166e0:	b978      	cbnz	r0, 16702 <luaV_equalobj+0xe8>
        tm = fasttm(L, uvalue(t2)->metatable, TM_EQ);
   166e2:	6823      	ldr	r3, [r4, #0]
   166e4:	68d8      	ldr	r0, [r3, #12]
        tm = fasttm(L, hvalue(t2)->metatable, TM_EQ);
   166e6:	2800      	cmp	r0, #0
   166e8:	d0ae      	beq.n	16648 <luaV_equalobj+0x2e>
   166ea:	7983      	ldrb	r3, [r0, #6]
   166ec:	069a      	lsls	r2, r3, #26
   166ee:	d4ab      	bmi.n	16648 <luaV_equalobj+0x2e>
   166f0:	6933      	ldr	r3, [r6, #16]
   166f2:	2105      	movs	r1, #5
   166f4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   166f8:	f7ff fbd9 	bl	15eae <luaT_gettm>
  if (tm == NULL)  /* no TM? */
   166fc:	2800      	cmp	r0, #0
   166fe:	d0a3      	beq.n	16648 <luaV_equalobj+0x2e>
   16700:	e00a      	b.n	16718 <luaV_equalobj+0xfe>
      tm = fasttm(L, uvalue(t1)->metatable, TM_EQ);
   16702:	7983      	ldrb	r3, [r0, #6]
   16704:	069b      	lsls	r3, r3, #26
   16706:	d4ec      	bmi.n	166e2 <luaV_equalobj+0xc8>
   16708:	6933      	ldr	r3, [r6, #16]
   1670a:	2105      	movs	r1, #5
   1670c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   16710:	f7ff fbcd 	bl	15eae <luaT_gettm>
      if (tm == NULL)
   16714:	2800      	cmp	r0, #0
   16716:	d0e4      	beq.n	166e2 <luaV_equalobj+0xc8>
    luaT_callTMres(L, tm, t1, t2, L->top);  /* call TM */
   16718:	68f3      	ldr	r3, [r6, #12]
   1671a:	4601      	mov	r1, r0
   1671c:	9300      	str	r3, [sp, #0]
   1671e:	462a      	mov	r2, r5
   16720:	4623      	mov	r3, r4
   16722:	4630      	mov	r0, r6
   16724:	f7ff fc24 	bl	15f70 <luaT_callTMres>
    return !l_isfalse(s2v(L->top));
   16728:	68f3      	ldr	r3, [r6, #12]
   1672a:	7a1b      	ldrb	r3, [r3, #8]
   1672c:	2b01      	cmp	r3, #1
   1672e:	d08b      	beq.n	16648 <luaV_equalobj+0x2e>
   16730:	071b      	lsls	r3, r3, #28
   16732:	d1d0      	bne.n	166d6 <luaV_equalobj+0xbc>
   16734:	e788      	b.n	16648 <luaV_equalobj+0x2e>
      if (hvalue(t1) == hvalue(t2)) return 1;
   16736:	682b      	ldr	r3, [r5, #0]
   16738:	6822      	ldr	r2, [r4, #0]
   1673a:	4293      	cmp	r3, r2
   1673c:	d0cb      	beq.n	166d6 <luaV_equalobj+0xbc>
      else if (L == NULL) return 0;
   1673e:	2800      	cmp	r0, #0
   16740:	d082      	beq.n	16648 <luaV_equalobj+0x2e>
      tm = fasttm(L, hvalue(t1)->metatable, TM_EQ);
   16742:	6998      	ldr	r0, [r3, #24]
   16744:	b910      	cbnz	r0, 1674c <luaV_equalobj+0x132>
        tm = fasttm(L, hvalue(t2)->metatable, TM_EQ);
   16746:	6823      	ldr	r3, [r4, #0]
   16748:	6998      	ldr	r0, [r3, #24]
   1674a:	e7cc      	b.n	166e6 <luaV_equalobj+0xcc>
      tm = fasttm(L, hvalue(t1)->metatable, TM_EQ);
   1674c:	7983      	ldrb	r3, [r0, #6]
   1674e:	0699      	lsls	r1, r3, #26
   16750:	d4f9      	bmi.n	16746 <luaV_equalobj+0x12c>
   16752:	6933      	ldr	r3, [r6, #16]
   16754:	2105      	movs	r1, #5
   16756:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1675a:	f7ff fba8 	bl	15eae <luaT_gettm>
      if (tm == NULL)
   1675e:	2800      	cmp	r0, #0
   16760:	d1da      	bne.n	16718 <luaV_equalobj+0xfe>
   16762:	e7f0      	b.n	16746 <luaV_equalobj+0x12c>

00016764 <luaV_modf>:
lua_Number luaV_modf (lua_State *L, lua_Number m, lua_Number n) {
   16764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16766:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   1676a:	4610      	mov	r0, r2
   1676c:	4619      	mov	r1, r3
  luai_nummod(L, m, n, r);
   1676e:	4632      	mov	r2, r6
   16770:	463b      	mov	r3, r7
   16772:	f7f6 faf7 	bl	cd64 <fmod>
   16776:	2200      	movs	r2, #0
   16778:	2300      	movs	r3, #0
   1677a:	4604      	mov	r4, r0
   1677c:	460d      	mov	r5, r1
   1677e:	f7ea f903 	bl	988 <__aeabi_dcmpgt>
   16782:	2200      	movs	r2, #0
   16784:	2300      	movs	r3, #0
   16786:	b178      	cbz	r0, 167a8 <luaV_modf+0x44>
   16788:	4630      	mov	r0, r6
   1678a:	4639      	mov	r1, r7
   1678c:	f7ea f8de 	bl	94c <__aeabi_dcmplt>
   16790:	b138      	cbz	r0, 167a2 <luaV_modf+0x3e>
   16792:	4620      	mov	r0, r4
   16794:	4629      	mov	r1, r5
   16796:	4632      	mov	r2, r6
   16798:	463b      	mov	r3, r7
   1679a:	f7e9 fcaf 	bl	fc <__adddf3>
   1679e:	4604      	mov	r4, r0
   167a0:	460d      	mov	r5, r1
}
   167a2:	4620      	mov	r0, r4
   167a4:	4629      	mov	r1, r5
   167a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  luai_nummod(L, m, n, r);
   167a8:	4620      	mov	r0, r4
   167aa:	4629      	mov	r1, r5
   167ac:	f7ea f8ce 	bl	94c <__aeabi_dcmplt>
   167b0:	2800      	cmp	r0, #0
   167b2:	d0f6      	beq.n	167a2 <luaV_modf+0x3e>
   167b4:	2200      	movs	r2, #0
   167b6:	2300      	movs	r3, #0
   167b8:	4630      	mov	r0, r6
   167ba:	4639      	mov	r1, r7
   167bc:	f7ea f8e4 	bl	988 <__aeabi_dcmpgt>
   167c0:	e7e6      	b.n	16790 <luaV_modf+0x2c>

000167c2 <luaV_shiftl>:
  if (y < 0) {  /* shift right? */
   167c2:	2b00      	cmp	r3, #0
lua_Integer luaV_shiftl (lua_Integer x, lua_Integer y) {
   167c4:	b510      	push	{r4, lr}
  if (y < 0) {  /* shift right? */
   167c6:	da11      	bge.n	167ec <luaV_shiftl+0x2a>
    if (y <= -NBITS) return 0;
   167c8:	f112 0f3f 	cmn.w	r2, #63	; 0x3f
   167cc:	f173 33ff 	sbcs.w	r3, r3, #4294967295	; 0xffffffff
   167d0:	db1d      	blt.n	1680e <luaV_shiftl+0x4c>
    else return intop(>>, x, -y);
   167d2:	4253      	negs	r3, r2
   167d4:	3220      	adds	r2, #32
   167d6:	fa01 f202 	lsl.w	r2, r1, r2
   167da:	f1a3 0420 	sub.w	r4, r3, #32
   167de:	40d8      	lsrs	r0, r3
   167e0:	fa21 f404 	lsr.w	r4, r1, r4
   167e4:	4310      	orrs	r0, r2
   167e6:	4320      	orrs	r0, r4
   167e8:	40d9      	lsrs	r1, r3
}
   167ea:	bd10      	pop	{r4, pc}
    if (y >= NBITS) return 0;
   167ec:	2a40      	cmp	r2, #64	; 0x40
   167ee:	f173 0300 	sbcs.w	r3, r3, #0
   167f2:	da0c      	bge.n	1680e <luaV_shiftl+0x4c>
    else return intop(<<, x, y);
   167f4:	f1a2 0420 	sub.w	r4, r2, #32
   167f8:	fa00 f404 	lsl.w	r4, r0, r4
   167fc:	f1c2 0320 	rsb	r3, r2, #32
   16800:	4091      	lsls	r1, r2
   16802:	fa20 f303 	lsr.w	r3, r0, r3
   16806:	4321      	orrs	r1, r4
   16808:	4319      	orrs	r1, r3
   1680a:	4090      	lsls	r0, r2
   1680c:	e7ed      	b.n	167ea <luaV_shiftl+0x28>
    if (y <= -NBITS) return 0;
   1680e:	2000      	movs	r0, #0
   16810:	4601      	mov	r1, r0
   16812:	e7ea      	b.n	167ea <luaV_shiftl+0x28>

00016814 <luaZ_fill>:
#include "lmem.h"
#include "lstate.h"
#include "lzio.h"


int luaZ_fill (ZIO *z) {
   16814:	b513      	push	{r0, r1, r4, lr}
  size_t size;
  lua_State *L = z->L;
  const char *buff;
  lua_unlock(L);
  buff = z->reader(L, z->data, &size);
   16816:	6883      	ldr	r3, [r0, #8]
int luaZ_fill (ZIO *z) {
   16818:	4604      	mov	r4, r0
  buff = z->reader(L, z->data, &size);
   1681a:	e9d0 1003 	ldrd	r1, r0, [r0, #12]
   1681e:	aa01      	add	r2, sp, #4
   16820:	4798      	blx	r3
  lua_lock(L);
  if (buff == NULL || size == 0)
   16822:	b140      	cbz	r0, 16836 <luaZ_fill+0x22>
   16824:	9b01      	ldr	r3, [sp, #4]
   16826:	b133      	cbz	r3, 16836 <luaZ_fill+0x22>
    return EOZ;
  z->n = size - 1;  /* discount char being returned */
   16828:	3b01      	subs	r3, #1
   1682a:	6023      	str	r3, [r4, #0]
  z->p = buff;
  return cast_uchar(*(z->p++));
   1682c:	1c43      	adds	r3, r0, #1
   1682e:	6063      	str	r3, [r4, #4]
   16830:	7800      	ldrb	r0, [r0, #0]
}
   16832:	b002      	add	sp, #8
   16834:	bd10      	pop	{r4, pc}
    return EOZ;
   16836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1683a:	e7fa      	b.n	16832 <luaZ_fill+0x1e>

0001683c <luaZ_init>:


void luaZ_init (lua_State *L, ZIO *z, lua_Reader reader, void *data) {
  z->L = L;
  z->reader = reader;
  z->data = data;
   1683c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  z->n = 0;
   16840:	2300      	movs	r3, #0
  z->L = L;
   16842:	6108      	str	r0, [r1, #16]
  z->p = NULL;
   16844:	e9c1 3300 	strd	r3, r3, [r1]
}
   16848:	4770      	bx	lr

0001684a <luaZ_read>:


/* --------------------------------------------------------------- read --- */
size_t luaZ_read (ZIO *z, void *b, size_t n) {
   1684a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1684c:	4604      	mov	r4, r0
   1684e:	460f      	mov	r7, r1
   16850:	4615      	mov	r5, r2
  while (n) {
   16852:	b90d      	cbnz	r5, 16858 <luaZ_read+0xe>
    z->p += m;
    b = (char *)b + m;
    n -= m;
  }
  return 0;
}
   16854:	4628      	mov	r0, r5
   16856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (z->n == 0) {  /* no bytes in buffer? */
   16858:	6823      	ldr	r3, [r4, #0]
   1685a:	b953      	cbnz	r3, 16872 <luaZ_read+0x28>
      if (luaZ_fill(z) == EOZ)  /* try to read more */
   1685c:	4620      	mov	r0, r4
   1685e:	f7ff ffd9 	bl	16814 <luaZ_fill>
   16862:	3001      	adds	r0, #1
   16864:	d0f6      	beq.n	16854 <luaZ_read+0xa>
        z->n++;  /* luaZ_fill consumed first byte; put it back */
   16866:	6823      	ldr	r3, [r4, #0]
   16868:	3301      	adds	r3, #1
   1686a:	6023      	str	r3, [r4, #0]
        z->p--;
   1686c:	6863      	ldr	r3, [r4, #4]
   1686e:	3b01      	subs	r3, #1
   16870:	6063      	str	r3, [r4, #4]
    m = (n <= z->n) ? n : z->n;  /* min. between n and z->n */
   16872:	6826      	ldr	r6, [r4, #0]
   16874:	4638      	mov	r0, r7
   16876:	42ae      	cmp	r6, r5
   16878:	bf28      	it	cs
   1687a:	462e      	movcs	r6, r5
   1687c:	6861      	ldr	r1, [r4, #4]
   1687e:	4632      	mov	r2, r6
   16880:	f000 f9fc 	bl	16c7c <memcpy>
    z->n -= m;
   16884:	6823      	ldr	r3, [r4, #0]
    b = (char *)b + m;
   16886:	4437      	add	r7, r6
    z->n -= m;
   16888:	1b9b      	subs	r3, r3, r6
   1688a:	6023      	str	r3, [r4, #0]
    z->p += m;
   1688c:	6863      	ldr	r3, [r4, #4]
    n -= m;
   1688e:	1bad      	subs	r5, r5, r6
    z->p += m;
   16890:	4433      	add	r3, r6
   16892:	6063      	str	r3, [r4, #4]
    n -= m;
   16894:	e7dd      	b.n	16852 <luaZ_read+0x8>

00016896 <z_device_state_init>:
}
   16896:	4770      	bx	lr

00016898 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   16898:	b138      	cbz	r0, 168aa <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1689a:	68c3      	ldr	r3, [r0, #12]
   1689c:	8818      	ldrh	r0, [r3, #0]
   1689e:	f3c0 0008 	ubfx	r0, r0, #0, #9
   168a2:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   168a6:	4258      	negs	r0, r3
   168a8:	4158      	adcs	r0, r3
}
   168aa:	4770      	bx	lr

000168ac <arch_system_halt>:
   168ac:	f04f 0220 	mov.w	r2, #32
   168b0:	f3ef 8311 	mrs	r3, BASEPRI
   168b4:	f382 8812 	msr	BASEPRI_MAX, r2
   168b8:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   168bc:	e7fe      	b.n	168bc <arch_system_halt+0x10>

000168be <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   168be:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   168c0:	f7ff fff4 	bl	168ac <arch_system_halt>

000168c4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   168c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   168c6:	4605      	mov	r5, r0
   168c8:	460e      	mov	r6, r1
   168ca:	f04f 0320 	mov.w	r3, #32
   168ce:	f3ef 8711 	mrs	r7, BASEPRI
   168d2:	f383 8812 	msr	BASEPRI_MAX, r3
   168d6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   168da:	f7f6 f859 	bl	c990 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   168de:	4631      	mov	r1, r6
   168e0:	4604      	mov	r4, r0
   168e2:	4628      	mov	r0, r5
   168e4:	f7ff ffeb 	bl	168be <k_sys_fatal_error_handler>
	__asm__ volatile(
   168e8:	f387 8811 	msr	BASEPRI, r7
   168ec:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   168f0:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   168f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   168f6:	f7ed bb5d 	b.w	3fb4 <z_impl_k_thread_abort>

000168fa <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   168fa:	b508      	push	{r3, lr}
	__asm__ volatile(
   168fc:	f04f 0220 	mov.w	r2, #32
   16900:	f3ef 8311 	mrs	r3, BASEPRI
   16904:	f382 8812 	msr	BASEPRI_MAX, r2
   16908:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1690c:	f7ed f982 	bl	3c14 <arch_cpu_idle>
   16910:	e7f4      	b.n	168fc <idle+0x2>

00016912 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   16912:	f990 300e 	ldrsb.w	r3, [r0, #14]
   16916:	428b      	cmp	r3, r1
   16918:	d001      	beq.n	1691e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1691a:	f7f5 bfd7 	b.w	c8cc <z_set_prio>
}
   1691e:	2000      	movs	r0, #0
   16920:	4770      	bx	lr

00016922 <z_impl_k_mutex_init>:
{
   16922:	4603      	mov	r3, r0
	mutex->owner = NULL;
   16924:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   16926:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1692a:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1692e:	4770      	bx	lr

00016930 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   16930:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   16934:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   16936:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16938:	2300      	movs	r3, #0
	node->prev = NULL;
   1693a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
   1693e:	4770      	bx	lr

00016940 <unpend_thread_no_timeout>:
{
   16940:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   16942:	f7ff fff5 	bl	16930 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   16946:	7b43      	ldrb	r3, [r0, #13]
   16948:	f023 0302 	bic.w	r3, r3, #2
   1694c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1694e:	2300      	movs	r3, #0
   16950:	6083      	str	r3, [r0, #8]
}
   16952:	bd08      	pop	{r3, pc}

00016954 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   16954:	4603      	mov	r3, r0
   16956:	b920      	cbnz	r0, 16962 <z_reschedule_irqlock+0xe>
   16958:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1695c:	b90a      	cbnz	r2, 16962 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1695e:	f7ed b983 	b.w	3c68 <arch_swap>
	__asm__ volatile(
   16962:	f383 8811 	msr	BASEPRI, r3
   16966:	f3bf 8f6f 	isb	sy
}
   1696a:	4770      	bx	lr

0001696c <z_reschedule_unlocked>:
	__asm__ volatile(
   1696c:	f04f 0320 	mov.w	r3, #32
   16970:	f3ef 8011 	mrs	r0, BASEPRI
   16974:	f383 8812 	msr	BASEPRI_MAX, r3
   16978:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1697c:	f7ff bfea 	b.w	16954 <z_reschedule_irqlock>

00016980 <z_priq_dumb_best>:
{
   16980:	4603      	mov	r3, r0
	return list->head == list;
   16982:	6800      	ldr	r0, [r0, #0]
}
   16984:	4283      	cmp	r3, r0
   16986:	bf08      	it	eq
   16988:	2000      	moveq	r0, #0
   1698a:	4770      	bx	lr

0001698c <z_unpend_first_thread>:
{
   1698c:	b538      	push	{r3, r4, r5, lr}
   1698e:	f04f 0320 	mov.w	r3, #32
   16992:	f3ef 8511 	mrs	r5, BASEPRI
   16996:	f383 8812 	msr	BASEPRI_MAX, r3
   1699a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1699e:	f7ff ffef 	bl	16980 <z_priq_dumb_best>
		if (thread != NULL) {
   169a2:	4604      	mov	r4, r0
   169a4:	b120      	cbz	r0, 169b0 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   169a6:	f7ff ffcb 	bl	16940 <unpend_thread_no_timeout>
   169aa:	3018      	adds	r0, #24
   169ac:	f000 f872 	bl	16a94 <z_abort_timeout>
	__asm__ volatile(
   169b0:	f385 8811 	msr	BASEPRI, r5
   169b4:	f3bf 8f6f 	isb	sy
}
   169b8:	4620      	mov	r0, r4
   169ba:	bd38      	pop	{r3, r4, r5, pc}

000169bc <z_priq_mq_best>:
{
   169bc:	4603      	mov	r3, r0
	if (!pq->bitmask) {
   169be:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   169c2:	b150      	cbz	r0, 169da <z_priq_mq_best+0x1e>
	sys_dlist_t *l = &pq->queues[__builtin_ctz(pq->bitmask)];
   169c4:	fa90 f2a0 	rbit	r2, r0
   169c8:	fab2 f282 	clz	r2, r2
   169cc:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
   169d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
		return NULL;
   169d4:	4298      	cmp	r0, r3
   169d6:	bf08      	it	eq
   169d8:	2000      	moveq	r0, #0
}
   169da:	4770      	bx	lr

000169dc <z_ready_thread>:
{
   169dc:	b510      	push	{r4, lr}
	__asm__ volatile(
   169de:	f04f 0320 	mov.w	r3, #32
   169e2:	f3ef 8411 	mrs	r4, BASEPRI
   169e6:	f383 8812 	msr	BASEPRI_MAX, r3
   169ea:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   169ee:	f7f5 fe3d 	bl	c66c <ready_thread>
	__asm__ volatile(
   169f2:	f384 8811 	msr	BASEPRI, r4
   169f6:	f3bf 8f6f 	isb	sy
}
   169fa:	bd10      	pop	{r4, pc}

000169fc <z_thread_timeout>:
{
   169fc:	4601      	mov	r1, r0
   169fe:	b510      	push	{r4, lr}
	__asm__ volatile(
   16a00:	f04f 0320 	mov.w	r3, #32
   16a04:	f3ef 8411 	mrs	r4, BASEPRI
   16a08:	f383 8812 	msr	BASEPRI_MAX, r3
   16a0c:	f3bf 8f6f 	isb	sy
		if (!killed) {
   16a10:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   16a14:	f013 0f28 	tst.w	r3, #40	; 0x28
   16a18:	d10d      	bne.n	16a36 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   16a1a:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   16a1e:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   16a20:	b10b      	cbz	r3, 16a26 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   16a22:	f7ff ff8d 	bl	16940 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   16a26:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   16a2a:	f023 0314 	bic.w	r3, r3, #20
   16a2e:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   16a32:	f7f5 fe1b 	bl	c66c <ready_thread>
	__asm__ volatile(
   16a36:	f384 8811 	msr	BASEPRI, r4
   16a3a:	f3bf 8f6f 	isb	sy
}
   16a3e:	bd10      	pop	{r4, pc}

00016a40 <add_to_waitq_locked>:
{
   16a40:	b538      	push	{r3, r4, r5, lr}
   16a42:	4604      	mov	r4, r0
   16a44:	460d      	mov	r5, r1
	unready_thread(thread);
   16a46:	f7f5 fedb 	bl	c800 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   16a4a:	7b63      	ldrb	r3, [r4, #13]
   16a4c:	f043 0302 	orr.w	r3, r3, #2
   16a50:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   16a52:	b195      	cbz	r5, 16a7a <add_to_waitq_locked+0x3a>
   16a54:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   16a56:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16a58:	429d      	cmp	r5, r3
   16a5a:	d015      	beq.n	16a88 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16a5c:	b1a3      	cbz	r3, 16a88 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   16a5e:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   16a62:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   16a66:	4291      	cmp	r1, r2
   16a68:	d008      	beq.n	16a7c <add_to_waitq_locked+0x3c>
		return b2 - b1;
   16a6a:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   16a6c:	2a00      	cmp	r2, #0
   16a6e:	dd05      	ble.n	16a7c <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   16a70:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   16a72:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   16a76:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   16a78:	605c      	str	r4, [r3, #4]
}
   16a7a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   16a7c:	686a      	ldr	r2, [r5, #4]
   16a7e:	4293      	cmp	r3, r2
   16a80:	d002      	beq.n	16a88 <add_to_waitq_locked+0x48>
   16a82:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16a84:	2b00      	cmp	r3, #0
   16a86:	d1ec      	bne.n	16a62 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   16a88:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   16a8a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   16a8e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16a90:	606c      	str	r4, [r5, #4]
}
   16a92:	e7f2      	b.n	16a7a <add_to_waitq_locked+0x3a>

00016a94 <z_abort_timeout>:
{
   16a94:	b510      	push	{r4, lr}
	__asm__ volatile(
   16a96:	f04f 0220 	mov.w	r2, #32
   16a9a:	f3ef 8411 	mrs	r4, BASEPRI
   16a9e:	f382 8812 	msr	BASEPRI_MAX, r2
   16aa2:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   16aa6:	6803      	ldr	r3, [r0, #0]
   16aa8:	b13b      	cbz	r3, 16aba <z_abort_timeout+0x26>
			remove_timeout(to);
   16aaa:	f7f6 f82b 	bl	cb04 <remove_timeout>
			ret = 0;
   16aae:	2000      	movs	r0, #0
	__asm__ volatile(
   16ab0:	f384 8811 	msr	BASEPRI, r4
   16ab4:	f3bf 8f6f 	isb	sy
}
   16ab8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   16aba:	f06f 0015 	mvn.w	r0, #21
   16abe:	e7f7      	b.n	16ab0 <z_abort_timeout+0x1c>

00016ac0 <z_set_timeout_expiry>:
{
   16ac0:	b570      	push	{r4, r5, r6, lr}
   16ac2:	4604      	mov	r4, r0
   16ac4:	460d      	mov	r5, r1
	__asm__ volatile(
   16ac6:	f04f 0320 	mov.w	r3, #32
   16aca:	f3ef 8611 	mrs	r6, BASEPRI
   16ace:	f383 8812 	msr	BASEPRI_MAX, r3
   16ad2:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   16ad6:	f7f5 ffed 	bl	cab4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   16ada:	2801      	cmp	r0, #1
   16adc:	dd05      	ble.n	16aea <z_set_timeout_expiry+0x2a>
   16ade:	42a0      	cmp	r0, r4
   16ae0:	db03      	blt.n	16aea <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   16ae2:	4629      	mov	r1, r5
   16ae4:	4620      	mov	r0, r4
   16ae6:	f7ed fb73 	bl	41d0 <sys_clock_set_timeout>
	__asm__ volatile(
   16aea:	f386 8811 	msr	BASEPRI, r6
   16aee:	f3bf 8f6f 	isb	sy
}
   16af2:	bd70      	pop	{r4, r5, r6, pc}

00016af4 <fabs>:
   16af4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   16af8:	4770      	bx	lr

00016afa <ldexp>:
   16afa:	b570      	push	{r4, r5, r6, lr}
   16afc:	4604      	mov	r4, r0
   16afe:	460d      	mov	r5, r1
   16b00:	4616      	mov	r6, r2
   16b02:	f000 f820 	bl	16b46 <finite>
   16b06:	b1d8      	cbz	r0, 16b40 <ldexp+0x46>
   16b08:	2200      	movs	r2, #0
   16b0a:	2300      	movs	r3, #0
   16b0c:	4620      	mov	r0, r4
   16b0e:	4629      	mov	r1, r5
   16b10:	f7e9 ff12 	bl	938 <__aeabi_dcmpeq>
   16b14:	b9a0      	cbnz	r0, 16b40 <ldexp+0x46>
   16b16:	4620      	mov	r0, r4
   16b18:	4629      	mov	r1, r5
   16b1a:	4632      	mov	r2, r6
   16b1c:	f7ea facc 	bl	10b8 <scalbn>
   16b20:	4604      	mov	r4, r0
   16b22:	460d      	mov	r5, r1
   16b24:	f000 f80f 	bl	16b46 <finite>
   16b28:	b130      	cbz	r0, 16b38 <ldexp+0x3e>
   16b2a:	2200      	movs	r2, #0
   16b2c:	2300      	movs	r3, #0
   16b2e:	4620      	mov	r0, r4
   16b30:	4629      	mov	r1, r5
   16b32:	f7e9 ff01 	bl	938 <__aeabi_dcmpeq>
   16b36:	b118      	cbz	r0, 16b40 <ldexp+0x46>
   16b38:	f7fa ff96 	bl	11a68 <__errno>
   16b3c:	2322      	movs	r3, #34	; 0x22
   16b3e:	6003      	str	r3, [r0, #0]
   16b40:	4620      	mov	r0, r4
   16b42:	4629      	mov	r1, r5
   16b44:	bd70      	pop	{r4, r5, r6, pc}

00016b46 <finite>:
   16b46:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
   16b4a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   16b4e:	0fc0      	lsrs	r0, r0, #31
   16b50:	4770      	bx	lr

00016b52 <abort>:
   16b52:	2006      	movs	r0, #6
   16b54:	b508      	push	{r3, lr}
   16b56:	f7f6 fee9 	bl	d92c <raise>
   16b5a:	2001      	movs	r0, #1
   16b5c:	f7ed fa6e 	bl	403c <_exit>

00016b60 <abs>:
   16b60:	2800      	cmp	r0, #0
   16b62:	bfb8      	it	lt
   16b64:	4240      	neglt	r0, r0
   16b66:	4770      	bx	lr

00016b68 <__sfmoreglue>:
   16b68:	2268      	movs	r2, #104	; 0x68
   16b6a:	b570      	push	{r4, r5, r6, lr}
   16b6c:	1e4d      	subs	r5, r1, #1
   16b6e:	4355      	muls	r5, r2
   16b70:	460e      	mov	r6, r1
   16b72:	f105 0174 	add.w	r1, r5, #116	; 0x74
   16b76:	f7f6 fe67 	bl	d848 <_malloc_r>
   16b7a:	4604      	mov	r4, r0
   16b7c:	b140      	cbz	r0, 16b90 <__sfmoreglue+0x28>
   16b7e:	2100      	movs	r1, #0
   16b80:	e9c0 1600 	strd	r1, r6, [r0]
   16b84:	300c      	adds	r0, #12
   16b86:	60a0      	str	r0, [r4, #8]
   16b88:	f105 0268 	add.w	r2, r5, #104	; 0x68
   16b8c:	f000 f884 	bl	16c98 <memset>
   16b90:	4620      	mov	r0, r4
   16b92:	bd70      	pop	{r4, r5, r6, pc}

00016b94 <_fwalk_reent>:
   16b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16b98:	4606      	mov	r6, r0
   16b9a:	4688      	mov	r8, r1
   16b9c:	2700      	movs	r7, #0
   16b9e:	f100 0448 	add.w	r4, r0, #72	; 0x48
   16ba2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   16ba6:	f1b9 0901 	subs.w	r9, r9, #1
   16baa:	d505      	bpl.n	16bb8 <_fwalk_reent+0x24>
   16bac:	6824      	ldr	r4, [r4, #0]
   16bae:	2c00      	cmp	r4, #0
   16bb0:	d1f7      	bne.n	16ba2 <_fwalk_reent+0xe>
   16bb2:	4638      	mov	r0, r7
   16bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16bb8:	89ab      	ldrh	r3, [r5, #12]
   16bba:	2b01      	cmp	r3, #1
   16bbc:	d907      	bls.n	16bce <_fwalk_reent+0x3a>
   16bbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   16bc2:	3301      	adds	r3, #1
   16bc4:	d003      	beq.n	16bce <_fwalk_reent+0x3a>
   16bc6:	4629      	mov	r1, r5
   16bc8:	4630      	mov	r0, r6
   16bca:	47c0      	blx	r8
   16bcc:	4307      	orrs	r7, r0
   16bce:	3568      	adds	r5, #104	; 0x68
   16bd0:	e7e9      	b.n	16ba6 <_fwalk_reent+0x12>

00016bd2 <__swhatbuf_r>:
   16bd2:	b570      	push	{r4, r5, r6, lr}
   16bd4:	460e      	mov	r6, r1
   16bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16bda:	4614      	mov	r4, r2
   16bdc:	2900      	cmp	r1, #0
   16bde:	461d      	mov	r5, r3
   16be0:	b096      	sub	sp, #88	; 0x58
   16be2:	da08      	bge.n	16bf6 <__swhatbuf_r+0x24>
   16be4:	2200      	movs	r2, #0
   16be6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   16bea:	602a      	str	r2, [r5, #0]
   16bec:	061a      	lsls	r2, r3, #24
   16bee:	d410      	bmi.n	16c12 <__swhatbuf_r+0x40>
   16bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   16bf4:	e00e      	b.n	16c14 <__swhatbuf_r+0x42>
   16bf6:	466a      	mov	r2, sp
   16bf8:	f7f9 fadc 	bl	101b4 <_fstat_r>
   16bfc:	2800      	cmp	r0, #0
   16bfe:	dbf1      	blt.n	16be4 <__swhatbuf_r+0x12>
   16c00:	9a01      	ldr	r2, [sp, #4]
   16c02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   16c06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   16c0a:	425a      	negs	r2, r3
   16c0c:	415a      	adcs	r2, r3
   16c0e:	602a      	str	r2, [r5, #0]
   16c10:	e7ee      	b.n	16bf0 <__swhatbuf_r+0x1e>
   16c12:	2340      	movs	r3, #64	; 0x40
   16c14:	2000      	movs	r0, #0
   16c16:	6023      	str	r3, [r4, #0]
   16c18:	b016      	add	sp, #88	; 0x58
   16c1a:	bd70      	pop	{r4, r5, r6, pc}

00016c1c <__ascii_mbtowc>:
   16c1c:	b082      	sub	sp, #8
   16c1e:	b901      	cbnz	r1, 16c22 <__ascii_mbtowc+0x6>
   16c20:	a901      	add	r1, sp, #4
   16c22:	b142      	cbz	r2, 16c36 <__ascii_mbtowc+0x1a>
   16c24:	b14b      	cbz	r3, 16c3a <__ascii_mbtowc+0x1e>
   16c26:	7813      	ldrb	r3, [r2, #0]
   16c28:	600b      	str	r3, [r1, #0]
   16c2a:	7812      	ldrb	r2, [r2, #0]
   16c2c:	1e10      	subs	r0, r2, #0
   16c2e:	bf18      	it	ne
   16c30:	2001      	movne	r0, #1
   16c32:	b002      	add	sp, #8
   16c34:	4770      	bx	lr
   16c36:	4610      	mov	r0, r2
   16c38:	e7fb      	b.n	16c32 <__ascii_mbtowc+0x16>
   16c3a:	f06f 0001 	mvn.w	r0, #1
   16c3e:	e7f8      	b.n	16c32 <__ascii_mbtowc+0x16>

00016c40 <memchr>:
   16c40:	4603      	mov	r3, r0
   16c42:	b510      	push	{r4, lr}
   16c44:	b2c9      	uxtb	r1, r1
   16c46:	4402      	add	r2, r0
   16c48:	4293      	cmp	r3, r2
   16c4a:	4618      	mov	r0, r3
   16c4c:	d101      	bne.n	16c52 <memchr+0x12>
   16c4e:	2000      	movs	r0, #0
   16c50:	e003      	b.n	16c5a <memchr+0x1a>
   16c52:	7804      	ldrb	r4, [r0, #0]
   16c54:	3301      	adds	r3, #1
   16c56:	428c      	cmp	r4, r1
   16c58:	d1f6      	bne.n	16c48 <memchr+0x8>
   16c5a:	bd10      	pop	{r4, pc}

00016c5c <memcmp>:
   16c5c:	b510      	push	{r4, lr}
   16c5e:	3901      	subs	r1, #1
   16c60:	4402      	add	r2, r0
   16c62:	4290      	cmp	r0, r2
   16c64:	d101      	bne.n	16c6a <memcmp+0xe>
   16c66:	2000      	movs	r0, #0
   16c68:	e005      	b.n	16c76 <memcmp+0x1a>
   16c6a:	7803      	ldrb	r3, [r0, #0]
   16c6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   16c70:	42a3      	cmp	r3, r4
   16c72:	d001      	beq.n	16c78 <memcmp+0x1c>
   16c74:	1b18      	subs	r0, r3, r4
   16c76:	bd10      	pop	{r4, pc}
   16c78:	3001      	adds	r0, #1
   16c7a:	e7f2      	b.n	16c62 <memcmp+0x6>

00016c7c <memcpy>:
   16c7c:	440a      	add	r2, r1
   16c7e:	4291      	cmp	r1, r2
   16c80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   16c84:	d100      	bne.n	16c88 <memcpy+0xc>
   16c86:	4770      	bx	lr
   16c88:	b510      	push	{r4, lr}
   16c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
   16c8e:	4291      	cmp	r1, r2
   16c90:	f803 4f01 	strb.w	r4, [r3, #1]!
   16c94:	d1f9      	bne.n	16c8a <memcpy+0xe>
   16c96:	bd10      	pop	{r4, pc}

00016c98 <memset>:
   16c98:	4603      	mov	r3, r0
   16c9a:	4402      	add	r2, r0
   16c9c:	4293      	cmp	r3, r2
   16c9e:	d100      	bne.n	16ca2 <memset+0xa>
   16ca0:	4770      	bx	lr
   16ca2:	f803 1b01 	strb.w	r1, [r3], #1
   16ca6:	e7f9      	b.n	16c9c <memset+0x4>

00016ca8 <_raise_r>:
   16ca8:	291f      	cmp	r1, #31
   16caa:	b538      	push	{r3, r4, r5, lr}
   16cac:	4604      	mov	r4, r0
   16cae:	460d      	mov	r5, r1
   16cb0:	d904      	bls.n	16cbc <_raise_r+0x14>
   16cb2:	2316      	movs	r3, #22
   16cb4:	6003      	str	r3, [r0, #0]
   16cb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16cba:	bd38      	pop	{r3, r4, r5, pc}
   16cbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
   16cbe:	b112      	cbz	r2, 16cc6 <_raise_r+0x1e>
   16cc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   16cc4:	b94b      	cbnz	r3, 16cda <_raise_r+0x32>
   16cc6:	4620      	mov	r0, r4
   16cc8:	f000 f816 	bl	16cf8 <_getpid_r>
   16ccc:	462a      	mov	r2, r5
   16cce:	4601      	mov	r1, r0
   16cd0:	4620      	mov	r0, r4
   16cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16cd6:	f7f6 be31 	b.w	d93c <_kill_r>
   16cda:	2b01      	cmp	r3, #1
   16cdc:	d00a      	beq.n	16cf4 <_raise_r+0x4c>
   16cde:	1c59      	adds	r1, r3, #1
   16ce0:	d103      	bne.n	16cea <_raise_r+0x42>
   16ce2:	2316      	movs	r3, #22
   16ce4:	6003      	str	r3, [r0, #0]
   16ce6:	2001      	movs	r0, #1
   16ce8:	e7e7      	b.n	16cba <_raise_r+0x12>
   16cea:	2400      	movs	r4, #0
   16cec:	4628      	mov	r0, r5
   16cee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   16cf2:	4798      	blx	r3
   16cf4:	2000      	movs	r0, #0
   16cf6:	e7e0      	b.n	16cba <_raise_r+0x12>

00016cf8 <_getpid_r>:
   16cf8:	f7fa be9d 	b.w	11a36 <_getpid>

00016cfc <__sread>:
   16cfc:	b510      	push	{r4, lr}
   16cfe:	460c      	mov	r4, r1
   16d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16d04:	f7fa fa08 	bl	11118 <_read_r>
   16d08:	2800      	cmp	r0, #0
   16d0a:	bfab      	itete	ge
   16d0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   16d0e:	89a3      	ldrhlt	r3, [r4, #12]
   16d10:	181b      	addge	r3, r3, r0
   16d12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   16d16:	bfac      	ite	ge
   16d18:	6563      	strge	r3, [r4, #84]	; 0x54
   16d1a:	81a3      	strhlt	r3, [r4, #12]
   16d1c:	bd10      	pop	{r4, pc}

00016d1e <__swrite>:
   16d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16d22:	461f      	mov	r7, r3
   16d24:	898b      	ldrh	r3, [r1, #12]
   16d26:	4605      	mov	r5, r0
   16d28:	05db      	lsls	r3, r3, #23
   16d2a:	460c      	mov	r4, r1
   16d2c:	4616      	mov	r6, r2
   16d2e:	d505      	bpl.n	16d3c <__swrite+0x1e>
   16d30:	2302      	movs	r3, #2
   16d32:	2200      	movs	r2, #0
   16d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16d38:	f7f9 fdf4 	bl	10924 <_lseek_r>
   16d3c:	89a3      	ldrh	r3, [r4, #12]
   16d3e:	4632      	mov	r2, r6
   16d40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   16d44:	81a3      	strh	r3, [r4, #12]
   16d46:	4628      	mov	r0, r5
   16d48:	463b      	mov	r3, r7
   16d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   16d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16d52:	f7f9 b96f 	b.w	10034 <_write_r>

00016d56 <__sseek>:
   16d56:	b510      	push	{r4, lr}
   16d58:	460c      	mov	r4, r1
   16d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16d5e:	f7f9 fde1 	bl	10924 <_lseek_r>
   16d62:	1c43      	adds	r3, r0, #1
   16d64:	89a3      	ldrh	r3, [r4, #12]
   16d66:	bf15      	itete	ne
   16d68:	6560      	strne	r0, [r4, #84]	; 0x54
   16d6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   16d6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   16d72:	81a3      	strheq	r3, [r4, #12]
   16d74:	bf18      	it	ne
   16d76:	81a3      	strhne	r3, [r4, #12]
   16d78:	bd10      	pop	{r4, pc}

00016d7a <__sclose>:
   16d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16d7e:	f7f9 b9f7 	b.w	10170 <_close_r>

00016d82 <strchr>:
   16d82:	4603      	mov	r3, r0
   16d84:	b2c9      	uxtb	r1, r1
   16d86:	4618      	mov	r0, r3
   16d88:	f813 2b01 	ldrb.w	r2, [r3], #1
   16d8c:	b112      	cbz	r2, 16d94 <strchr+0x12>
   16d8e:	428a      	cmp	r2, r1
   16d90:	d1f9      	bne.n	16d86 <strchr+0x4>
   16d92:	4770      	bx	lr
   16d94:	2900      	cmp	r1, #0
   16d96:	bf18      	it	ne
   16d98:	2000      	movne	r0, #0
   16d9a:	4770      	bx	lr

00016d9c <strcoll>:
   16d9c:	f7ea b85e 	b.w	e5c <strcmp>

00016da0 <__strcpy_chk>:
   16da0:	b570      	push	{r4, r5, r6, lr}
   16da2:	4605      	mov	r5, r0
   16da4:	4608      	mov	r0, r1
   16da6:	4616      	mov	r6, r2
   16da8:	460c      	mov	r4, r1
   16daa:	f7ea f861 	bl	e70 <strlen>
   16dae:	1c42      	adds	r2, r0, #1
   16db0:	42b2      	cmp	r2, r6
   16db2:	d901      	bls.n	16db8 <__strcpy_chk+0x18>
   16db4:	f7ed f95e 	bl	4074 <__chk_fail>
   16db8:	42ac      	cmp	r4, r5
   16dba:	d804      	bhi.n	16dc6 <__strcpy_chk+0x26>
   16dbc:	18a3      	adds	r3, r4, r2
   16dbe:	429d      	cmp	r5, r3
   16dc0:	d3f8      	bcc.n	16db4 <__strcpy_chk+0x14>
   16dc2:	42ac      	cmp	r4, r5
   16dc4:	d102      	bne.n	16dcc <__strcpy_chk+0x2c>
   16dc6:	18ab      	adds	r3, r5, r2
   16dc8:	429c      	cmp	r4, r3
   16dca:	d3f3      	bcc.n	16db4 <__strcpy_chk+0x14>
   16dcc:	4621      	mov	r1, r4
   16dce:	4628      	mov	r0, r5
   16dd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16dd4:	f7ff bf52 	b.w	16c7c <memcpy>

00016dd8 <strncmp>:
   16dd8:	4603      	mov	r3, r0
   16dda:	b510      	push	{r4, lr}
   16ddc:	b172      	cbz	r2, 16dfc <strncmp+0x24>
   16dde:	3901      	subs	r1, #1
   16de0:	1884      	adds	r4, r0, r2
   16de2:	f813 0b01 	ldrb.w	r0, [r3], #1
   16de6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   16dea:	4290      	cmp	r0, r2
   16dec:	d101      	bne.n	16df2 <strncmp+0x1a>
   16dee:	42a3      	cmp	r3, r4
   16df0:	d101      	bne.n	16df6 <strncmp+0x1e>
   16df2:	1a80      	subs	r0, r0, r2
   16df4:	bd10      	pop	{r4, pc}
   16df6:	2800      	cmp	r0, #0
   16df8:	d1f3      	bne.n	16de2 <strncmp+0xa>
   16dfa:	e7fa      	b.n	16df2 <strncmp+0x1a>
   16dfc:	4610      	mov	r0, r2
   16dfe:	e7f9      	b.n	16df4 <strncmp+0x1c>

00016e00 <strnlen>:
   16e00:	4602      	mov	r2, r0
   16e02:	b510      	push	{r4, lr}
   16e04:	4401      	add	r1, r0
   16e06:	428a      	cmp	r2, r1
   16e08:	4613      	mov	r3, r2
   16e0a:	d003      	beq.n	16e14 <strnlen+0x14>
   16e0c:	781c      	ldrb	r4, [r3, #0]
   16e0e:	3201      	adds	r2, #1
   16e10:	2c00      	cmp	r4, #0
   16e12:	d1f8      	bne.n	16e06 <strnlen+0x6>
   16e14:	1a18      	subs	r0, r3, r0
   16e16:	bd10      	pop	{r4, pc}

00016e18 <strpbrk>:
   16e18:	b570      	push	{r4, r5, r6, lr}
   16e1a:	4603      	mov	r3, r0
   16e1c:	7800      	ldrb	r0, [r0, #0]
   16e1e:	b190      	cbz	r0, 16e46 <strpbrk+0x2e>
   16e20:	460c      	mov	r4, r1
   16e22:	4618      	mov	r0, r3
   16e24:	f813 5b01 	ldrb.w	r5, [r3], #1
   16e28:	b14d      	cbz	r5, 16e3e <strpbrk+0x26>
   16e2a:	460a      	mov	r2, r1
   16e2c:	e001      	b.n	16e32 <strpbrk+0x1a>
   16e2e:	42ae      	cmp	r6, r5
   16e30:	d009      	beq.n	16e46 <strpbrk+0x2e>
   16e32:	4614      	mov	r4, r2
   16e34:	f812 6b01 	ldrb.w	r6, [r2], #1
   16e38:	2e00      	cmp	r6, #0
   16e3a:	d1f8      	bne.n	16e2e <strpbrk+0x16>
   16e3c:	e7f1      	b.n	16e22 <strpbrk+0xa>
   16e3e:	7823      	ldrb	r3, [r4, #0]
   16e40:	2b00      	cmp	r3, #0
   16e42:	bf08      	it	eq
   16e44:	2000      	moveq	r0, #0
   16e46:	bd70      	pop	{r4, r5, r6, pc}

00016e48 <strspn>:
   16e48:	4603      	mov	r3, r0
   16e4a:	b570      	push	{r4, r5, r6, lr}
   16e4c:	461e      	mov	r6, r3
   16e4e:	f813 4b01 	ldrb.w	r4, [r3], #1
   16e52:	b13c      	cbz	r4, 16e64 <strspn+0x1c>
   16e54:	1e4a      	subs	r2, r1, #1
   16e56:	e001      	b.n	16e5c <strspn+0x14>
   16e58:	42a5      	cmp	r5, r4
   16e5a:	d0f7      	beq.n	16e4c <strspn+0x4>
   16e5c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   16e60:	2d00      	cmp	r5, #0
   16e62:	d1f9      	bne.n	16e58 <strspn+0x10>
   16e64:	1a30      	subs	r0, r6, r0
   16e66:	bd70      	pop	{r4, r5, r6, pc}

00016e68 <sulp>:
   16e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e6c:	460f      	mov	r7, r1
   16e6e:	4690      	mov	r8, r2
   16e70:	f7fa f87c 	bl	10f6c <__ulp>
   16e74:	4604      	mov	r4, r0
   16e76:	460d      	mov	r5, r1
   16e78:	f1b8 0f00 	cmp.w	r8, #0
   16e7c:	d011      	beq.n	16ea2 <sulp+0x3a>
   16e7e:	f3c7 530a 	ubfx	r3, r7, #20, #11
   16e82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   16e86:	2b00      	cmp	r3, #0
   16e88:	dd0b      	ble.n	16ea2 <sulp+0x3a>
   16e8a:	2400      	movs	r4, #0
   16e8c:	051b      	lsls	r3, r3, #20
   16e8e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   16e92:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   16e96:	4622      	mov	r2, r4
   16e98:	462b      	mov	r3, r5
   16e9a:	f7e9 fae5 	bl	468 <__aeabi_dmul>
   16e9e:	4604      	mov	r4, r0
   16ea0:	460d      	mov	r5, r1
   16ea2:	4620      	mov	r0, r4
   16ea4:	4629      	mov	r1, r5
   16ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016eaa <__ascii_wctomb>:
   16eaa:	4603      	mov	r3, r0
   16eac:	4608      	mov	r0, r1
   16eae:	b141      	cbz	r1, 16ec2 <__ascii_wctomb+0x18>
   16eb0:	2aff      	cmp	r2, #255	; 0xff
   16eb2:	d904      	bls.n	16ebe <__ascii_wctomb+0x14>
   16eb4:	228a      	movs	r2, #138	; 0x8a
   16eb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16eba:	601a      	str	r2, [r3, #0]
   16ebc:	4770      	bx	lr
   16ebe:	2001      	movs	r0, #1
   16ec0:	700a      	strb	r2, [r1, #0]
   16ec2:	4770      	bx	lr

00016ec4 <quorem>:
   16ec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ec8:	6903      	ldr	r3, [r0, #16]
   16eca:	690c      	ldr	r4, [r1, #16]
   16ecc:	4607      	mov	r7, r0
   16ece:	42a3      	cmp	r3, r4
   16ed0:	f2c0 8082 	blt.w	16fd8 <quorem+0x114>
   16ed4:	3c01      	subs	r4, #1
   16ed6:	f100 0514 	add.w	r5, r0, #20
   16eda:	f101 0814 	add.w	r8, r1, #20
   16ede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   16ee2:	9301      	str	r3, [sp, #4]
   16ee4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   16ee8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   16eec:	3301      	adds	r3, #1
   16eee:	429a      	cmp	r2, r3
   16ef0:	fbb2 f6f3 	udiv	r6, r2, r3
   16ef4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   16ef8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   16efc:	d331      	bcc.n	16f62 <quorem+0x9e>
   16efe:	f04f 0e00 	mov.w	lr, #0
   16f02:	4640      	mov	r0, r8
   16f04:	46ac      	mov	ip, r5
   16f06:	46f2      	mov	sl, lr
   16f08:	f850 2b04 	ldr.w	r2, [r0], #4
   16f0c:	b293      	uxth	r3, r2
   16f0e:	fb06 e303 	mla	r3, r6, r3, lr
   16f12:	0c12      	lsrs	r2, r2, #16
   16f14:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   16f18:	b29b      	uxth	r3, r3
   16f1a:	fb06 e202 	mla	r2, r6, r2, lr
   16f1e:	ebaa 0303 	sub.w	r3, sl, r3
   16f22:	f8dc a000 	ldr.w	sl, [ip]
   16f26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   16f2a:	fa1f fa8a 	uxth.w	sl, sl
   16f2e:	4453      	add	r3, sl
   16f30:	f8dc a000 	ldr.w	sl, [ip]
   16f34:	b292      	uxth	r2, r2
   16f36:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
   16f3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
   16f3e:	b29b      	uxth	r3, r3
   16f40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   16f44:	4581      	cmp	r9, r0
   16f46:	ea4f 4a22 	mov.w	sl, r2, asr #16
   16f4a:	f84c 3b04 	str.w	r3, [ip], #4
   16f4e:	d2db      	bcs.n	16f08 <quorem+0x44>
   16f50:	f855 300b 	ldr.w	r3, [r5, fp]
   16f54:	b92b      	cbnz	r3, 16f62 <quorem+0x9e>
   16f56:	9b01      	ldr	r3, [sp, #4]
   16f58:	3b04      	subs	r3, #4
   16f5a:	429d      	cmp	r5, r3
   16f5c:	461a      	mov	r2, r3
   16f5e:	d32f      	bcc.n	16fc0 <quorem+0xfc>
   16f60:	613c      	str	r4, [r7, #16]
   16f62:	4638      	mov	r0, r7
   16f64:	f000 f9cb 	bl	172fe <__mcmp>
   16f68:	2800      	cmp	r0, #0
   16f6a:	db25      	blt.n	16fb8 <quorem+0xf4>
   16f6c:	4628      	mov	r0, r5
   16f6e:	f04f 0c00 	mov.w	ip, #0
   16f72:	3601      	adds	r6, #1
   16f74:	f858 1b04 	ldr.w	r1, [r8], #4
   16f78:	f8d0 e000 	ldr.w	lr, [r0]
   16f7c:	b28b      	uxth	r3, r1
   16f7e:	ebac 0303 	sub.w	r3, ip, r3
   16f82:	fa1f f28e 	uxth.w	r2, lr
   16f86:	4413      	add	r3, r2
   16f88:	0c0a      	lsrs	r2, r1, #16
   16f8a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   16f8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
   16f92:	b29b      	uxth	r3, r3
   16f94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   16f98:	45c1      	cmp	r9, r8
   16f9a:	ea4f 4c22 	mov.w	ip, r2, asr #16
   16f9e:	f840 3b04 	str.w	r3, [r0], #4
   16fa2:	d2e7      	bcs.n	16f74 <quorem+0xb0>
   16fa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   16fa8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   16fac:	b922      	cbnz	r2, 16fb8 <quorem+0xf4>
   16fae:	3b04      	subs	r3, #4
   16fb0:	429d      	cmp	r5, r3
   16fb2:	461a      	mov	r2, r3
   16fb4:	d30a      	bcc.n	16fcc <quorem+0x108>
   16fb6:	613c      	str	r4, [r7, #16]
   16fb8:	4630      	mov	r0, r6
   16fba:	b003      	add	sp, #12
   16fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fc0:	6812      	ldr	r2, [r2, #0]
   16fc2:	3b04      	subs	r3, #4
   16fc4:	2a00      	cmp	r2, #0
   16fc6:	d1cb      	bne.n	16f60 <quorem+0x9c>
   16fc8:	3c01      	subs	r4, #1
   16fca:	e7c6      	b.n	16f5a <quorem+0x96>
   16fcc:	6812      	ldr	r2, [r2, #0]
   16fce:	3b04      	subs	r3, #4
   16fd0:	2a00      	cmp	r2, #0
   16fd2:	d1f0      	bne.n	16fb6 <quorem+0xf2>
   16fd4:	3c01      	subs	r4, #1
   16fd6:	e7eb      	b.n	16fb0 <quorem+0xec>
   16fd8:	2000      	movs	r0, #0
   16fda:	e7ee      	b.n	16fba <quorem+0xf6>

00016fdc <rshift>:
   16fdc:	6903      	ldr	r3, [r0, #16]
   16fde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16fe2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   16fe6:	f100 0414 	add.w	r4, r0, #20
   16fea:	ea4f 1261 	mov.w	r2, r1, asr #5
   16fee:	dd46      	ble.n	1707e <rshift+0xa2>
   16ff0:	f011 011f 	ands.w	r1, r1, #31
   16ff4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   16ff8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   16ffc:	d10c      	bne.n	17018 <rshift+0x3c>
   16ffe:	4629      	mov	r1, r5
   17000:	f100 0710 	add.w	r7, r0, #16
   17004:	42b1      	cmp	r1, r6
   17006:	d335      	bcc.n	17074 <rshift+0x98>
   17008:	1a9b      	subs	r3, r3, r2
   1700a:	009b      	lsls	r3, r3, #2
   1700c:	1eea      	subs	r2, r5, #3
   1700e:	4296      	cmp	r6, r2
   17010:	bf38      	it	cc
   17012:	2300      	movcc	r3, #0
   17014:	4423      	add	r3, r4
   17016:	e015      	b.n	17044 <rshift+0x68>
   17018:	46a1      	mov	r9, r4
   1701a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   1701e:	f1c1 0820 	rsb	r8, r1, #32
   17022:	40cf      	lsrs	r7, r1
   17024:	f105 0e04 	add.w	lr, r5, #4
   17028:	4576      	cmp	r6, lr
   1702a:	46f4      	mov	ip, lr
   1702c:	d816      	bhi.n	1705c <rshift+0x80>
   1702e:	1a9a      	subs	r2, r3, r2
   17030:	0092      	lsls	r2, r2, #2
   17032:	3a04      	subs	r2, #4
   17034:	3501      	adds	r5, #1
   17036:	42ae      	cmp	r6, r5
   17038:	bf38      	it	cc
   1703a:	2200      	movcc	r2, #0
   1703c:	18a3      	adds	r3, r4, r2
   1703e:	50a7      	str	r7, [r4, r2]
   17040:	b107      	cbz	r7, 17044 <rshift+0x68>
   17042:	3304      	adds	r3, #4
   17044:	42a3      	cmp	r3, r4
   17046:	eba3 0204 	sub.w	r2, r3, r4
   1704a:	bf08      	it	eq
   1704c:	2300      	moveq	r3, #0
   1704e:	ea4f 02a2 	mov.w	r2, r2, asr #2
   17052:	6102      	str	r2, [r0, #16]
   17054:	bf08      	it	eq
   17056:	6143      	streq	r3, [r0, #20]
   17058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1705c:	f8dc c000 	ldr.w	ip, [ip]
   17060:	fa0c fc08 	lsl.w	ip, ip, r8
   17064:	ea4c 0707 	orr.w	r7, ip, r7
   17068:	f849 7b04 	str.w	r7, [r9], #4
   1706c:	f85e 7b04 	ldr.w	r7, [lr], #4
   17070:	40cf      	lsrs	r7, r1
   17072:	e7d9      	b.n	17028 <rshift+0x4c>
   17074:	f851 cb04 	ldr.w	ip, [r1], #4
   17078:	f847 cf04 	str.w	ip, [r7, #4]!
   1707c:	e7c2      	b.n	17004 <rshift+0x28>
   1707e:	4623      	mov	r3, r4
   17080:	e7e0      	b.n	17044 <rshift+0x68>

00017082 <__hexdig_fun>:
   17082:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   17086:	2b09      	cmp	r3, #9
   17088:	d802      	bhi.n	17090 <__hexdig_fun+0xe>
   1708a:	3820      	subs	r0, #32
   1708c:	b2c0      	uxtb	r0, r0
   1708e:	4770      	bx	lr
   17090:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   17094:	2b05      	cmp	r3, #5
   17096:	d801      	bhi.n	1709c <__hexdig_fun+0x1a>
   17098:	3847      	subs	r0, #71	; 0x47
   1709a:	e7f7      	b.n	1708c <__hexdig_fun+0xa>
   1709c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   170a0:	2b05      	cmp	r3, #5
   170a2:	d801      	bhi.n	170a8 <__hexdig_fun+0x26>
   170a4:	3827      	subs	r0, #39	; 0x27
   170a6:	e7f1      	b.n	1708c <__hexdig_fun+0xa>
   170a8:	2000      	movs	r0, #0
   170aa:	4770      	bx	lr

000170ac <L_shift>:
   170ac:	f1c2 0208 	rsb	r2, r2, #8
   170b0:	0092      	lsls	r2, r2, #2
   170b2:	b570      	push	{r4, r5, r6, lr}
   170b4:	f1c2 0620 	rsb	r6, r2, #32
   170b8:	6843      	ldr	r3, [r0, #4]
   170ba:	6804      	ldr	r4, [r0, #0]
   170bc:	fa03 f506 	lsl.w	r5, r3, r6
   170c0:	432c      	orrs	r4, r5
   170c2:	40d3      	lsrs	r3, r2
   170c4:	6004      	str	r4, [r0, #0]
   170c6:	f840 3f04 	str.w	r3, [r0, #4]!
   170ca:	4288      	cmp	r0, r1
   170cc:	d3f4      	bcc.n	170b8 <L_shift+0xc>
   170ce:	bd70      	pop	{r4, r5, r6, pc}

000170d0 <__match>:
   170d0:	b530      	push	{r4, r5, lr}
   170d2:	6803      	ldr	r3, [r0, #0]
   170d4:	3301      	adds	r3, #1
   170d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   170da:	b914      	cbnz	r4, 170e2 <__match+0x12>
   170dc:	6003      	str	r3, [r0, #0]
   170de:	2001      	movs	r0, #1
   170e0:	bd30      	pop	{r4, r5, pc}
   170e2:	f813 2b01 	ldrb.w	r2, [r3], #1
   170e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   170ea:	2d19      	cmp	r5, #25
   170ec:	bf98      	it	ls
   170ee:	3220      	addls	r2, #32
   170f0:	42a2      	cmp	r2, r4
   170f2:	d0f0      	beq.n	170d6 <__match+0x6>
   170f4:	2000      	movs	r0, #0
   170f6:	e7f3      	b.n	170e0 <__match+0x10>

000170f8 <__hexnan>:
   170f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170fc:	2500      	movs	r5, #0
   170fe:	680b      	ldr	r3, [r1, #0]
   17100:	4682      	mov	sl, r0
   17102:	115e      	asrs	r6, r3, #5
   17104:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   17108:	f013 031f 	ands.w	r3, r3, #31
   1710c:	bf18      	it	ne
   1710e:	3604      	addne	r6, #4
   17110:	1f37      	subs	r7, r6, #4
   17112:	46b9      	mov	r9, r7
   17114:	463c      	mov	r4, r7
   17116:	46ab      	mov	fp, r5
   17118:	b087      	sub	sp, #28
   1711a:	4690      	mov	r8, r2
   1711c:	6802      	ldr	r2, [r0, #0]
   1711e:	9301      	str	r3, [sp, #4]
   17120:	f846 5c04 	str.w	r5, [r6, #-4]
   17124:	9502      	str	r5, [sp, #8]
   17126:	7851      	ldrb	r1, [r2, #1]
   17128:	1c53      	adds	r3, r2, #1
   1712a:	9303      	str	r3, [sp, #12]
   1712c:	b341      	cbz	r1, 17180 <__hexnan+0x88>
   1712e:	4608      	mov	r0, r1
   17130:	9205      	str	r2, [sp, #20]
   17132:	9104      	str	r1, [sp, #16]
   17134:	f7ff ffa5 	bl	17082 <__hexdig_fun>
   17138:	2800      	cmp	r0, #0
   1713a:	d14f      	bne.n	171dc <__hexnan+0xe4>
   1713c:	9904      	ldr	r1, [sp, #16]
   1713e:	9a05      	ldr	r2, [sp, #20]
   17140:	2920      	cmp	r1, #32
   17142:	d818      	bhi.n	17176 <__hexnan+0x7e>
   17144:	9b02      	ldr	r3, [sp, #8]
   17146:	459b      	cmp	fp, r3
   17148:	dd13      	ble.n	17172 <__hexnan+0x7a>
   1714a:	454c      	cmp	r4, r9
   1714c:	d206      	bcs.n	1715c <__hexnan+0x64>
   1714e:	2d07      	cmp	r5, #7
   17150:	dc04      	bgt.n	1715c <__hexnan+0x64>
   17152:	462a      	mov	r2, r5
   17154:	4649      	mov	r1, r9
   17156:	4620      	mov	r0, r4
   17158:	f7ff ffa8 	bl	170ac <L_shift>
   1715c:	4544      	cmp	r4, r8
   1715e:	d950      	bls.n	17202 <__hexnan+0x10a>
   17160:	2300      	movs	r3, #0
   17162:	f1a4 0904 	sub.w	r9, r4, #4
   17166:	f844 3c04 	str.w	r3, [r4, #-4]
   1716a:	461d      	mov	r5, r3
   1716c:	464c      	mov	r4, r9
   1716e:	f8cd b008 	str.w	fp, [sp, #8]
   17172:	9a03      	ldr	r2, [sp, #12]
   17174:	e7d7      	b.n	17126 <__hexnan+0x2e>
   17176:	2929      	cmp	r1, #41	; 0x29
   17178:	d156      	bne.n	17228 <__hexnan+0x130>
   1717a:	3202      	adds	r2, #2
   1717c:	f8ca 2000 	str.w	r2, [sl]
   17180:	f1bb 0f00 	cmp.w	fp, #0
   17184:	d050      	beq.n	17228 <__hexnan+0x130>
   17186:	454c      	cmp	r4, r9
   17188:	d206      	bcs.n	17198 <__hexnan+0xa0>
   1718a:	2d07      	cmp	r5, #7
   1718c:	dc04      	bgt.n	17198 <__hexnan+0xa0>
   1718e:	462a      	mov	r2, r5
   17190:	4649      	mov	r1, r9
   17192:	4620      	mov	r0, r4
   17194:	f7ff ff8a 	bl	170ac <L_shift>
   17198:	4544      	cmp	r4, r8
   1719a:	d934      	bls.n	17206 <__hexnan+0x10e>
   1719c:	4623      	mov	r3, r4
   1719e:	f1a8 0204 	sub.w	r2, r8, #4
   171a2:	f853 1b04 	ldr.w	r1, [r3], #4
   171a6:	429f      	cmp	r7, r3
   171a8:	f842 1f04 	str.w	r1, [r2, #4]!
   171ac:	d2f9      	bcs.n	171a2 <__hexnan+0xaa>
   171ae:	1b3b      	subs	r3, r7, r4
   171b0:	f023 0303 	bic.w	r3, r3, #3
   171b4:	3304      	adds	r3, #4
   171b6:	3401      	adds	r4, #1
   171b8:	3e03      	subs	r6, #3
   171ba:	42b4      	cmp	r4, r6
   171bc:	bf88      	it	hi
   171be:	2304      	movhi	r3, #4
   171c0:	2200      	movs	r2, #0
   171c2:	4443      	add	r3, r8
   171c4:	f843 2b04 	str.w	r2, [r3], #4
   171c8:	429f      	cmp	r7, r3
   171ca:	d2fb      	bcs.n	171c4 <__hexnan+0xcc>
   171cc:	683b      	ldr	r3, [r7, #0]
   171ce:	b91b      	cbnz	r3, 171d8 <__hexnan+0xe0>
   171d0:	4547      	cmp	r7, r8
   171d2:	d127      	bne.n	17224 <__hexnan+0x12c>
   171d4:	2301      	movs	r3, #1
   171d6:	603b      	str	r3, [r7, #0]
   171d8:	2005      	movs	r0, #5
   171da:	e026      	b.n	1722a <__hexnan+0x132>
   171dc:	3501      	adds	r5, #1
   171de:	2d08      	cmp	r5, #8
   171e0:	f10b 0b01 	add.w	fp, fp, #1
   171e4:	dd06      	ble.n	171f4 <__hexnan+0xfc>
   171e6:	4544      	cmp	r4, r8
   171e8:	d9c3      	bls.n	17172 <__hexnan+0x7a>
   171ea:	2300      	movs	r3, #0
   171ec:	2501      	movs	r5, #1
   171ee:	f844 3c04 	str.w	r3, [r4, #-4]
   171f2:	3c04      	subs	r4, #4
   171f4:	6822      	ldr	r2, [r4, #0]
   171f6:	f000 000f 	and.w	r0, r0, #15
   171fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   171fe:	6022      	str	r2, [r4, #0]
   17200:	e7b7      	b.n	17172 <__hexnan+0x7a>
   17202:	2508      	movs	r5, #8
   17204:	e7b5      	b.n	17172 <__hexnan+0x7a>
   17206:	9b01      	ldr	r3, [sp, #4]
   17208:	2b00      	cmp	r3, #0
   1720a:	d0df      	beq.n	171cc <__hexnan+0xd4>
   1720c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17210:	f1c3 0320 	rsb	r3, r3, #32
   17214:	fa22 f303 	lsr.w	r3, r2, r3
   17218:	f856 2c04 	ldr.w	r2, [r6, #-4]
   1721c:	401a      	ands	r2, r3
   1721e:	f846 2c04 	str.w	r2, [r6, #-4]
   17222:	e7d3      	b.n	171cc <__hexnan+0xd4>
   17224:	3f04      	subs	r7, #4
   17226:	e7d1      	b.n	171cc <__hexnan+0xd4>
   17228:	2004      	movs	r0, #4
   1722a:	b007      	add	sp, #28
   1722c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017230 <memmove>:
   17230:	4288      	cmp	r0, r1
   17232:	b510      	push	{r4, lr}
   17234:	eb01 0402 	add.w	r4, r1, r2
   17238:	d902      	bls.n	17240 <memmove+0x10>
   1723a:	4284      	cmp	r4, r0
   1723c:	4623      	mov	r3, r4
   1723e:	d807      	bhi.n	17250 <memmove+0x20>
   17240:	1e43      	subs	r3, r0, #1
   17242:	42a1      	cmp	r1, r4
   17244:	d008      	beq.n	17258 <memmove+0x28>
   17246:	f811 2b01 	ldrb.w	r2, [r1], #1
   1724a:	f803 2f01 	strb.w	r2, [r3, #1]!
   1724e:	e7f8      	b.n	17242 <memmove+0x12>
   17250:	4601      	mov	r1, r0
   17252:	4402      	add	r2, r0
   17254:	428a      	cmp	r2, r1
   17256:	d100      	bne.n	1725a <memmove+0x2a>
   17258:	bd10      	pop	{r4, pc}
   1725a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1725e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   17262:	e7f7      	b.n	17254 <memmove+0x24>

00017264 <__hi0bits>:
   17264:	0c02      	lsrs	r2, r0, #16
   17266:	0412      	lsls	r2, r2, #16
   17268:	4603      	mov	r3, r0
   1726a:	b9ca      	cbnz	r2, 172a0 <__hi0bits+0x3c>
   1726c:	0403      	lsls	r3, r0, #16
   1726e:	2010      	movs	r0, #16
   17270:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   17274:	bf04      	itt	eq
   17276:	021b      	lsleq	r3, r3, #8
   17278:	3008      	addeq	r0, #8
   1727a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   1727e:	bf04      	itt	eq
   17280:	011b      	lsleq	r3, r3, #4
   17282:	3004      	addeq	r0, #4
   17284:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   17288:	bf04      	itt	eq
   1728a:	009b      	lsleq	r3, r3, #2
   1728c:	3002      	addeq	r0, #2
   1728e:	2b00      	cmp	r3, #0
   17290:	db05      	blt.n	1729e <__hi0bits+0x3a>
   17292:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   17296:	f100 0001 	add.w	r0, r0, #1
   1729a:	bf08      	it	eq
   1729c:	2020      	moveq	r0, #32
   1729e:	4770      	bx	lr
   172a0:	2000      	movs	r0, #0
   172a2:	e7e5      	b.n	17270 <__hi0bits+0xc>

000172a4 <__lo0bits>:
   172a4:	6803      	ldr	r3, [r0, #0]
   172a6:	4602      	mov	r2, r0
   172a8:	f013 0007 	ands.w	r0, r3, #7
   172ac:	d00b      	beq.n	172c6 <__lo0bits+0x22>
   172ae:	07d9      	lsls	r1, r3, #31
   172b0:	d421      	bmi.n	172f6 <__lo0bits+0x52>
   172b2:	0798      	lsls	r0, r3, #30
   172b4:	bf49      	itett	mi
   172b6:	085b      	lsrmi	r3, r3, #1
   172b8:	089b      	lsrpl	r3, r3, #2
   172ba:	2001      	movmi	r0, #1
   172bc:	6013      	strmi	r3, [r2, #0]
   172be:	bf5c      	itt	pl
   172c0:	2002      	movpl	r0, #2
   172c2:	6013      	strpl	r3, [r2, #0]
   172c4:	4770      	bx	lr
   172c6:	b299      	uxth	r1, r3
   172c8:	b909      	cbnz	r1, 172ce <__lo0bits+0x2a>
   172ca:	2010      	movs	r0, #16
   172cc:	0c1b      	lsrs	r3, r3, #16
   172ce:	b2d9      	uxtb	r1, r3
   172d0:	b909      	cbnz	r1, 172d6 <__lo0bits+0x32>
   172d2:	3008      	adds	r0, #8
   172d4:	0a1b      	lsrs	r3, r3, #8
   172d6:	0719      	lsls	r1, r3, #28
   172d8:	bf04      	itt	eq
   172da:	091b      	lsreq	r3, r3, #4
   172dc:	3004      	addeq	r0, #4
   172de:	0799      	lsls	r1, r3, #30
   172e0:	bf04      	itt	eq
   172e2:	089b      	lsreq	r3, r3, #2
   172e4:	3002      	addeq	r0, #2
   172e6:	07d9      	lsls	r1, r3, #31
   172e8:	d403      	bmi.n	172f2 <__lo0bits+0x4e>
   172ea:	085b      	lsrs	r3, r3, #1
   172ec:	f100 0001 	add.w	r0, r0, #1
   172f0:	d003      	beq.n	172fa <__lo0bits+0x56>
   172f2:	6013      	str	r3, [r2, #0]
   172f4:	4770      	bx	lr
   172f6:	2000      	movs	r0, #0
   172f8:	4770      	bx	lr
   172fa:	2020      	movs	r0, #32
   172fc:	4770      	bx	lr

000172fe <__mcmp>:
   172fe:	4603      	mov	r3, r0
   17300:	690a      	ldr	r2, [r1, #16]
   17302:	6900      	ldr	r0, [r0, #16]
   17304:	b530      	push	{r4, r5, lr}
   17306:	1a80      	subs	r0, r0, r2
   17308:	d10d      	bne.n	17326 <__mcmp+0x28>
   1730a:	3314      	adds	r3, #20
   1730c:	3114      	adds	r1, #20
   1730e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   17312:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   17316:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   1731a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   1731e:	4295      	cmp	r5, r2
   17320:	d002      	beq.n	17328 <__mcmp+0x2a>
   17322:	d304      	bcc.n	1732e <__mcmp+0x30>
   17324:	2001      	movs	r0, #1
   17326:	bd30      	pop	{r4, r5, pc}
   17328:	42a3      	cmp	r3, r4
   1732a:	d3f4      	bcc.n	17316 <__mcmp+0x18>
   1732c:	e7fb      	b.n	17326 <__mcmp+0x28>
   1732e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17332:	e7f8      	b.n	17326 <__mcmp+0x28>

00017334 <__ratio>:
   17334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17338:	4688      	mov	r8, r1
   1733a:	4669      	mov	r1, sp
   1733c:	4681      	mov	r9, r0
   1733e:	f7f9 fe3b 	bl	10fb8 <__b2d>
   17342:	460f      	mov	r7, r1
   17344:	4604      	mov	r4, r0
   17346:	460d      	mov	r5, r1
   17348:	4640      	mov	r0, r8
   1734a:	a901      	add	r1, sp, #4
   1734c:	f7f9 fe34 	bl	10fb8 <__b2d>
   17350:	f8d9 3010 	ldr.w	r3, [r9, #16]
   17354:	f8d8 2010 	ldr.w	r2, [r8, #16]
   17358:	468b      	mov	fp, r1
   1735a:	eba3 0c02 	sub.w	ip, r3, r2
   1735e:	e9dd 3200 	ldrd	r3, r2, [sp]
   17362:	1a9b      	subs	r3, r3, r2
   17364:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   17368:	2b00      	cmp	r3, #0
   1736a:	bfd5      	itete	le
   1736c:	460a      	movle	r2, r1
   1736e:	462a      	movgt	r2, r5
   17370:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   17374:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   17378:	bfd8      	it	le
   1737a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   1737e:	465b      	mov	r3, fp
   17380:	4602      	mov	r2, r0
   17382:	4639      	mov	r1, r7
   17384:	4620      	mov	r0, r4
   17386:	f7e9 f999 	bl	6bc <__aeabi_ddiv>
   1738a:	b003      	add	sp, #12
   1738c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017390 <__copybits>:
   17390:	3901      	subs	r1, #1
   17392:	b570      	push	{r4, r5, r6, lr}
   17394:	1149      	asrs	r1, r1, #5
   17396:	6914      	ldr	r4, [r2, #16]
   17398:	3101      	adds	r1, #1
   1739a:	f102 0314 	add.w	r3, r2, #20
   1739e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   173a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   173a6:	1f05      	subs	r5, r0, #4
   173a8:	42a3      	cmp	r3, r4
   173aa:	d30c      	bcc.n	173c6 <__copybits+0x36>
   173ac:	1aa3      	subs	r3, r4, r2
   173ae:	3b11      	subs	r3, #17
   173b0:	f023 0303 	bic.w	r3, r3, #3
   173b4:	3211      	adds	r2, #17
   173b6:	42a2      	cmp	r2, r4
   173b8:	bf88      	it	hi
   173ba:	2300      	movhi	r3, #0
   173bc:	4418      	add	r0, r3
   173be:	2300      	movs	r3, #0
   173c0:	4288      	cmp	r0, r1
   173c2:	d305      	bcc.n	173d0 <__copybits+0x40>
   173c4:	bd70      	pop	{r4, r5, r6, pc}
   173c6:	f853 6b04 	ldr.w	r6, [r3], #4
   173ca:	f845 6f04 	str.w	r6, [r5, #4]!
   173ce:	e7eb      	b.n	173a8 <__copybits+0x18>
   173d0:	f840 3b04 	str.w	r3, [r0], #4
   173d4:	e7f4      	b.n	173c0 <__copybits+0x30>

000173d6 <__any_on>:
   173d6:	f100 0214 	add.w	r2, r0, #20
   173da:	6900      	ldr	r0, [r0, #16]
   173dc:	114b      	asrs	r3, r1, #5
   173de:	4298      	cmp	r0, r3
   173e0:	b510      	push	{r4, lr}
   173e2:	db11      	blt.n	17408 <__any_on+0x32>
   173e4:	dd0a      	ble.n	173fc <__any_on+0x26>
   173e6:	f011 011f 	ands.w	r1, r1, #31
   173ea:	d007      	beq.n	173fc <__any_on+0x26>
   173ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   173f0:	fa24 f001 	lsr.w	r0, r4, r1
   173f4:	fa00 f101 	lsl.w	r1, r0, r1
   173f8:	428c      	cmp	r4, r1
   173fa:	d10b      	bne.n	17414 <__any_on+0x3e>
   173fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   17400:	4293      	cmp	r3, r2
   17402:	d803      	bhi.n	1740c <__any_on+0x36>
   17404:	2000      	movs	r0, #0
   17406:	bd10      	pop	{r4, pc}
   17408:	4603      	mov	r3, r0
   1740a:	e7f7      	b.n	173fc <__any_on+0x26>
   1740c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   17410:	2900      	cmp	r1, #0
   17412:	d0f5      	beq.n	17400 <__any_on+0x2a>
   17414:	2001      	movs	r0, #1
   17416:	e7f6      	b.n	17406 <__any_on+0x30>

00017418 <_calloc_r>:
   17418:	b538      	push	{r3, r4, r5, lr}
   1741a:	fb02 f501 	mul.w	r5, r2, r1
   1741e:	4629      	mov	r1, r5
   17420:	f7f6 fa12 	bl	d848 <_malloc_r>
   17424:	4604      	mov	r4, r0
   17426:	b118      	cbz	r0, 17430 <_calloc_r+0x18>
   17428:	462a      	mov	r2, r5
   1742a:	2100      	movs	r1, #0
   1742c:	f7ff fc34 	bl	16c98 <memset>
   17430:	4620      	mov	r0, r4
   17432:	bd38      	pop	{r3, r4, r5, pc}

00017434 <_realloc_r>:
   17434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17436:	4607      	mov	r7, r0
   17438:	4614      	mov	r4, r2
   1743a:	460e      	mov	r6, r1
   1743c:	b921      	cbnz	r1, 17448 <_realloc_r+0x14>
   1743e:	4611      	mov	r1, r2
   17440:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   17444:	f7f6 ba00 	b.w	d848 <_malloc_r>
   17448:	b922      	cbnz	r2, 17454 <_realloc_r+0x20>
   1744a:	f7f6 f9b5 	bl	d7b8 <_free_r>
   1744e:	4625      	mov	r5, r4
   17450:	4628      	mov	r0, r5
   17452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17454:	f000 f8af 	bl	175b6 <_malloc_usable_size_r>
   17458:	42a0      	cmp	r0, r4
   1745a:	d20f      	bcs.n	1747c <_realloc_r+0x48>
   1745c:	4621      	mov	r1, r4
   1745e:	4638      	mov	r0, r7
   17460:	f7f6 f9f2 	bl	d848 <_malloc_r>
   17464:	4605      	mov	r5, r0
   17466:	2800      	cmp	r0, #0
   17468:	d0f2      	beq.n	17450 <_realloc_r+0x1c>
   1746a:	4631      	mov	r1, r6
   1746c:	4622      	mov	r2, r4
   1746e:	f7ff fc05 	bl	16c7c <memcpy>
   17472:	4631      	mov	r1, r6
   17474:	4638      	mov	r0, r7
   17476:	f7f6 f99f 	bl	d7b8 <_free_r>
   1747a:	e7e9      	b.n	17450 <_realloc_r+0x1c>
   1747c:	4635      	mov	r5, r6
   1747e:	e7e7      	b.n	17450 <_realloc_r+0x1c>

00017480 <strncpy>:
   17480:	4603      	mov	r3, r0
   17482:	b510      	push	{r4, lr}
   17484:	3901      	subs	r1, #1
   17486:	b132      	cbz	r2, 17496 <strncpy+0x16>
   17488:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1748c:	3a01      	subs	r2, #1
   1748e:	f803 4b01 	strb.w	r4, [r3], #1
   17492:	2c00      	cmp	r4, #0
   17494:	d1f7      	bne.n	17486 <strncpy+0x6>
   17496:	2100      	movs	r1, #0
   17498:	441a      	add	r2, r3
   1749a:	4293      	cmp	r3, r2
   1749c:	d100      	bne.n	174a0 <strncpy+0x20>
   1749e:	bd10      	pop	{r4, pc}
   174a0:	f803 1b01 	strb.w	r1, [r3], #1
   174a4:	e7f9      	b.n	1749a <strncpy+0x1a>

000174a6 <__ssprint_r>:
   174a6:	6893      	ldr	r3, [r2, #8]
   174a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174ac:	4680      	mov	r8, r0
   174ae:	460c      	mov	r4, r1
   174b0:	4617      	mov	r7, r2
   174b2:	2b00      	cmp	r3, #0
   174b4:	d061      	beq.n	1757a <__ssprint_r+0xd4>
   174b6:	2300      	movs	r3, #0
   174b8:	469b      	mov	fp, r3
   174ba:	f8d2 a000 	ldr.w	sl, [r2]
   174be:	9301      	str	r3, [sp, #4]
   174c0:	f1bb 0f00 	cmp.w	fp, #0
   174c4:	d02b      	beq.n	1751e <__ssprint_r+0x78>
   174c6:	68a6      	ldr	r6, [r4, #8]
   174c8:	455e      	cmp	r6, fp
   174ca:	d844      	bhi.n	17556 <__ssprint_r+0xb0>
   174cc:	89a2      	ldrh	r2, [r4, #12]
   174ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
   174d2:	d03e      	beq.n	17552 <__ssprint_r+0xac>
   174d4:	6820      	ldr	r0, [r4, #0]
   174d6:	6921      	ldr	r1, [r4, #16]
   174d8:	6965      	ldr	r5, [r4, #20]
   174da:	eba0 0901 	sub.w	r9, r0, r1
   174de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   174e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   174e6:	f109 0001 	add.w	r0, r9, #1
   174ea:	106d      	asrs	r5, r5, #1
   174ec:	4458      	add	r0, fp
   174ee:	4285      	cmp	r5, r0
   174f0:	bf38      	it	cc
   174f2:	4605      	movcc	r5, r0
   174f4:	0553      	lsls	r3, r2, #21
   174f6:	d545      	bpl.n	17584 <__ssprint_r+0xde>
   174f8:	4629      	mov	r1, r5
   174fa:	4640      	mov	r0, r8
   174fc:	f7f6 f9a4 	bl	d848 <_malloc_r>
   17500:	4606      	mov	r6, r0
   17502:	b9a0      	cbnz	r0, 1752e <__ssprint_r+0x88>
   17504:	230c      	movs	r3, #12
   17506:	f8c8 3000 	str.w	r3, [r8]
   1750a:	89a3      	ldrh	r3, [r4, #12]
   1750c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17514:	81a3      	strh	r3, [r4, #12]
   17516:	2300      	movs	r3, #0
   17518:	e9c7 3301 	strd	r3, r3, [r7, #4]
   1751c:	e02f      	b.n	1757e <__ssprint_r+0xd8>
   1751e:	f8da 3000 	ldr.w	r3, [sl]
   17522:	f8da b004 	ldr.w	fp, [sl, #4]
   17526:	9301      	str	r3, [sp, #4]
   17528:	f10a 0a08 	add.w	sl, sl, #8
   1752c:	e7c8      	b.n	174c0 <__ssprint_r+0x1a>
   1752e:	464a      	mov	r2, r9
   17530:	6921      	ldr	r1, [r4, #16]
   17532:	f7ff fba3 	bl	16c7c <memcpy>
   17536:	89a2      	ldrh	r2, [r4, #12]
   17538:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1753c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   17540:	81a2      	strh	r2, [r4, #12]
   17542:	6126      	str	r6, [r4, #16]
   17544:	444e      	add	r6, r9
   17546:	6026      	str	r6, [r4, #0]
   17548:	465e      	mov	r6, fp
   1754a:	6165      	str	r5, [r4, #20]
   1754c:	eba5 0509 	sub.w	r5, r5, r9
   17550:	60a5      	str	r5, [r4, #8]
   17552:	455e      	cmp	r6, fp
   17554:	d900      	bls.n	17558 <__ssprint_r+0xb2>
   17556:	465e      	mov	r6, fp
   17558:	4632      	mov	r2, r6
   1755a:	9901      	ldr	r1, [sp, #4]
   1755c:	6820      	ldr	r0, [r4, #0]
   1755e:	f7ff fe67 	bl	17230 <memmove>
   17562:	68a2      	ldr	r2, [r4, #8]
   17564:	1b92      	subs	r2, r2, r6
   17566:	60a2      	str	r2, [r4, #8]
   17568:	6822      	ldr	r2, [r4, #0]
   1756a:	4432      	add	r2, r6
   1756c:	6022      	str	r2, [r4, #0]
   1756e:	68ba      	ldr	r2, [r7, #8]
   17570:	eba2 030b 	sub.w	r3, r2, fp
   17574:	60bb      	str	r3, [r7, #8]
   17576:	2b00      	cmp	r3, #0
   17578:	d1d1      	bne.n	1751e <__ssprint_r+0x78>
   1757a:	2000      	movs	r0, #0
   1757c:	6078      	str	r0, [r7, #4]
   1757e:	b003      	add	sp, #12
   17580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17584:	462a      	mov	r2, r5
   17586:	4640      	mov	r0, r8
   17588:	f7ff ff54 	bl	17434 <_realloc_r>
   1758c:	4606      	mov	r6, r0
   1758e:	2800      	cmp	r0, #0
   17590:	d1d7      	bne.n	17542 <__ssprint_r+0x9c>
   17592:	4640      	mov	r0, r8
   17594:	6921      	ldr	r1, [r4, #16]
   17596:	f7f6 f90f 	bl	d7b8 <_free_r>
   1759a:	e7b3      	b.n	17504 <__ssprint_r+0x5e>

0001759c <__sprint_r>:
   1759c:	b538      	push	{r3, r4, r5, lr}
   1759e:	6893      	ldr	r3, [r2, #8]
   175a0:	4614      	mov	r4, r2
   175a2:	2500      	movs	r5, #0
   175a4:	b913      	cbnz	r3, 175ac <__sprint_r+0x10>
   175a6:	4618      	mov	r0, r3
   175a8:	6053      	str	r3, [r2, #4]
   175aa:	bd38      	pop	{r3, r4, r5, pc}
   175ac:	f7f8 fe14 	bl	101d8 <__sfvwrite_r>
   175b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
   175b4:	e7f9      	b.n	175aa <__sprint_r+0xe>

000175b6 <_malloc_usable_size_r>:
   175b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
   175ba:	1f18      	subs	r0, r3, #4
   175bc:	2b00      	cmp	r3, #0
   175be:	bfbc      	itt	lt
   175c0:	580b      	ldrlt	r3, [r1, r0]
   175c2:	18c0      	addlt	r0, r0, r3
   175c4:	4770      	bx	lr
